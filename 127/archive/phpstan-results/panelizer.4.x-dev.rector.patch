diff --git a/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php b/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
index 3619b4b..53d0190 100644
--- a/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
+++ b/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
@@ -26,7 +26,7 @@ class PanelizerQuickEditTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Page']);
diff --git a/tests/src/Functional/PanelizerAddDefaultLinkTest.php b/tests/src/Functional/PanelizerAddDefaultLinkTest.php
index fc83ce5..6e65921 100644
--- a/tests/src/Functional/PanelizerAddDefaultLinkTest.php
+++ b/tests/src/Functional/PanelizerAddDefaultLinkTest.php
@@ -60,13 +60,13 @@ class PanelizerAddDefaultLinkTest extends BrowserTestBase {
     $this->panelize($content_type);
 
     // Confirm that the content type is now panelized.
-    $this->assertLink('Add a new Panelizer default display');
+    $this->assertSession()->linkExists('Add a new Panelizer default display');
 
     // Un-panelize the content type.
     $this->unpanelize($content_type);
 
     // Confirm that the content type is no longer panelized.
-    $this->assertNoLink('Add a new Panelizer default display');
+    $this->assertSession()->linkNotExists('Add a new Panelizer default display');
   }
 
 }
diff --git a/tests/src/Functional/PanelizerDefaultsTest.php b/tests/src/Functional/PanelizerDefaultsTest.php
index 79e7fc0..a38657d 100644
--- a/tests/src/Functional/PanelizerDefaultsTest.php
+++ b/tests/src/Functional/PanelizerDefaultsTest.php
@@ -44,7 +44,7 @@ class PanelizerDefaultsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Place the local actions block in the theme so that we can assert the
@@ -70,18 +70,18 @@ class PanelizerDefaultsTest extends BrowserTestBase {
       // to (the panelizer[allow] checkbox in the view display configuration). By
       // default, they aren't.
       $this->drupalGet('node/add/page');
-      $this->assertResponse(200);
-      $this->assertNoFieldByName("panelizer['{$i}][default]");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->fieldValueNotEquals("panelizer['{$i}][default]", '');
       // Allow user to select panelized modes in UI.
       $this->panelize('page', $view_mode_name, [
         'panelizer[custom]' => TRUE,
         'panelizer[allow]' => TRUE,
       ]);
       $this->drupalGet('node/add/page');
-      $this->assertResponse(200);
-      $this->assertFieldByName("panelizer[{$i}][default]");
-      $this->assertOption("edit-panelizer-{$i}-default", 'default');
-      $this->assertOption("edit-panelizer-{$i}-default", $panelizer_id);
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->fieldExists("panelizer[{$i}][default]");
+      $this->assertSession()->optionExists("edit-panelizer-{$i}-default", 'default');
+      $this->assertSession()->optionExists("edit-panelizer-{$i}-default", $panelizer_id);
       // Clean up.
       $this->deletePanelizerDefault('page', $view_mode_name, $panelizer_id);
       $this->assertDefaultNotExists('page', $view_mode_name, $panelizer_id);
diff --git a/tests/src/Functional/PanelizerIpeTest.php b/tests/src/Functional/PanelizerIpeTest.php
index 1a82981..fe18f56 100644
--- a/tests/src/Functional/PanelizerIpeTest.php
+++ b/tests/src/Functional/PanelizerIpeTest.php
@@ -44,7 +44,7 @@ class PanelizerIpeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Reload all caches.
@@ -104,12 +104,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the JSON Drupal settings are appropriate.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ -124,9 +124,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -151,12 +151,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the appropriate DOM structures are present for the IPE.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ -171,9 +171,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -223,9 +223,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -278,9 +278,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -334,9 +334,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -368,12 +368,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Extract the drupalSettings structure and return it.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
