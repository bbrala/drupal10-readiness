diff --git a/src/EventSubscriber/SplashRedirectEventSubscriber.php b/src/EventSubscriber/SplashRedirectEventSubscriber.php
index 9b55145..b347bef 100644
--- a/src/EventSubscriber/SplashRedirectEventSubscriber.php
+++ b/src/EventSubscriber/SplashRedirectEventSubscriber.php
@@ -61,10 +61,10 @@ class SplashRedirectEventSubscriber implements EventSubscriberInterface {
   /**
    * Kernel request event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $config = $this->configFactory->get('splash_redirect.settings');
     $config_enabled = $config->get('splash_redirect.is_enabled');
     $config_source = $config->get('splash_redirect.source');
@@ -99,7 +99,7 @@ class SplashRedirectEventSubscriber implements EventSubscriberInterface {
         // or else anonymous users will not ever be able to reach source page.
         $this->killSwitch->trigger();
         $redir = new TrustedRedirectResponse($destination->setAbsolute()->toString(), '302');
-        $cookie = new Cookie($config_cookie, 'true', strtotime('now + ' . $config_duration . 'days'), '/', '.' . $http_host, FALSE, FALSE);
+        $cookie = \Symfony\Component\HttpFoundation\Cookie::create($config_cookie, 'true', strtotime('now + ' . $config_duration . 'days'), '/', '.' . $http_host, FALSE, FALSE);
         $redir->headers->setCookie($cookie);
         $redir->headers->set('Cache-Control', 'public, max-age=0');
         $redir->addCacheableDependency($destination);
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 0dd5246..a6d0d74 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -29,7 +29,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
