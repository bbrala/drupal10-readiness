modules/contrib/representative_image/representative_image.module
modules/contrib/representative_image/src/Exception/RepresentativeImageFieldNotDefinedException.php
modules/contrib/representative_image/src/Plugin/Field/FieldFormatter/RepresentativeImageFormatter.php
modules/contrib/representative_image/src/Plugin/Field/FieldType/RepresentativeImageItem.php
modules/contrib/representative_image/src/Plugin/Field/FieldWidget/RepresentativeImageWidget.php
modules/contrib/representative_image/src/Plugin/migrate/source/FieldConfig.php
modules/contrib/representative_image/src/Plugin/migrate/source/FieldStorageConfig.php
modules/contrib/representative_image/src/RepresentativeImagePicker.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageEntitiesTest.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTestBase.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTokenTest.php
modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageViewsTest.php

4 files with changes
====================

1) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageViewsTest.php:28

    ---------- begin diff ----------
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image3',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Create image files to use for testing.
     $image1 = $this->randomFile('image');
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image2',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');
     // 2. Set the second image field of Sample content type 2 as representative.
     $edit = [
       'settings[representative_image_field_name]' => 'field_image4',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article2/fields/node.article2.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article2/fields/node.article2.field_representative_image');
+    $this->submitForm($edit, 'Save settings');
     // @todo Check why clearing caches is needed in order to find
     //   field_representative_image in the node.
     drupal_flush_all_caches();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTokenTest.php:44

    ---------- begin diff ----------
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image1',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Check that the first image is shown in a processed token.
     $node = $this->nodeStorage->load(1);
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image2',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');
     // @todo Need to do this or
     //   RepresentativeImagePicker::getRepresentativeImageField() will return
     //   ''.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageTestBase.php:77

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fileSystem = \Drupal::service('file_system');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/representative_image/tests/src/FunctionalJavascript/RepresentativeImageEntitiesTest.php:33

    ---------- begin diff ----------
@@ @@
     $edit = [
       'settings[representative_image_field_name]' => 'field_image1',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Create a node with an image in field_image1. Check that it is shown.
     $this->drupalGet('node/add/article');
@@ @@
     $edit = [
       'settings[representative_image_behavior]' => 'first',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Create a node with an image in the second image field. Check that it is
     // shown.
@@ @@
     $edit = [
       'settings[representative_image_behavior]' => 'first_or_default',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_representative_image', $edit, 'Save settings');
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.field_representative_image');
+    $this->submitForm($edit, 'Save settings');

     // Create a node without images.
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm('node/add/article', $edit, 'Save');
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseContains($this->defaultImageFile->name);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

