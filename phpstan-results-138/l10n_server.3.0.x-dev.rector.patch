diff --git a/l10n_packager/src/L10nExporter.php b/l10n_packager/src/L10nExporter.php
index 3831eff..d285392 100644
--- a/l10n_packager/src/L10nExporter.php
+++ b/l10n_packager/src/L10nExporter.php
@@ -52,7 +52,9 @@ class L10nExporter {
   function export($uri, $release = NULL, $language = NULL, $template = TRUE, $compact = FALSE, $installer = FALSE, $suggestions = FALSE) {
     $project = $this->getProjects(array('uri' => $uri));
 
-    $query = db_select('l10n_server_file', 'f');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $query = \Drupal::database()->select('l10n_server_file', 'f');
     $query->innerJoin('l10n_server_line', 'l', 'f.fid = l.fid');
     $query->innerJoin('l10n_server_string', 's', 'l.sid = s.sid');
     $query
@@ -155,14 +157,14 @@ class L10nExporter {
         $message = t('There are no strings in any releases of %project to export.', array('%project' => $project->title));
       }
       // Message to the user.
-      drupal_set_message($message);
+      \Drupal::messenger()->addStatus($message);
       // Message to watchdog for possible automated packaging.
       watchdog('l10n_community', $message);
       return NULL;
     }
 
     // Generate a 'unique' temporary filename for this package.
-    $tempfile = tempnam(file_directory_temp(), 'l10n_community-' . $uri);
+    $tempfile = tempnam(\Drupal::service('file_system')->getTempDirectory(), 'l10n_community-' . $uri);
 
     if (!$compact) {
       if (count($po_data['revisions']) == 1) {
@@ -244,7 +246,9 @@ class L10nExporter {
   function getProjects($options = array()) {
     static $projects = array();
 
-    $select = db_select('l10n_server_project', 'p')->fields('p');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $select = \Drupal::database()->select('l10n_server_project', 'p')->fields('p');
 
     // Consider returning all projects or just published ones.
     if (empty($options['all'])) {
@@ -282,7 +286,9 @@ class L10nExporter {
         return $projects[$options['uri']];
       }
       // Not found in cache, so query and cache before returning.
-      $result = db_query("SELECT * FROM {l10n_server_project} WHERE uri = :uri", array(':uri' => $options['uri']));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $result = \Drupal::database()->query("SELECT * FROM {l10n_server_project} WHERE uri = :uri", array(':uri' => $options['uri']));
       if ($project = $result->fetchObject()) {
         $projects[$options['uri']] = $project;
         return $project;
@@ -316,7 +322,9 @@ class L10nExporter {
     if ($parsed_only) {
       $query .= 'AND r.last_parsed > 0 ';
     }
-    $result = db_query($query, array(':uri' => $uri));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query($query, array(':uri' => $uri));
     $releases = $result->fetchAllAssoc('rid');
     uasort($releases, '_l10n_server_version_compare');
     return $releases;
@@ -447,7 +455,9 @@ class L10nExporter {
    */
   function getProjectInitials() {
     // Grab the unique initials of all active projects
-    $result = db_query('SELECT DISTINCT(SUBSTR(title, 1, 1)) AS initial FROM {l10n_server_project} WHERE status = :status ORDER BY initial ASC', array(':status' => 1));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query('SELECT DISTINCT(SUBSTR(title, 1, 1)) AS initial FROM {l10n_server_project} WHERE status = :status ORDER BY initial ASC', array(':status' => 1));
 
     // Create an array of elements, all non-letters are grouped in '#'.
     $initials = array();
diff --git a/l10n_packager/src/L10nPackager.php b/l10n_packager/src/L10nPackager.php
index 447d684..3d15bb7 100644
--- a/l10n_packager/src/L10nPackager.php
+++ b/l10n_packager/src/L10nPackager.php
@@ -404,7 +404,7 @@ class L10nPackager {
    */
   public function package($release, $language, $file = NULL, $timestamp = NULL) {
 
-    $timestamp = $timestamp ? $timestamp : REQUEST_TIME;
+    $timestamp = $timestamp ? $timestamp : \Drupal::time()->getRequestTime();
     $variables = array(
       '%release' => l10n_packager_release_name($release),
       '%language' => $language->name,
@@ -440,8 +440,8 @@ class L10nPackager {
       $file->filename = basename($file_path);
       $file->filemime = $mime_type;
       $file->uri = $file_path;
-      file_unmanaged_move($export_name, $file->uri, FILE_EXISTS_REPLACE);
-      $file->filesize = filesize(drupal_realpath($file->uri));
+      file_unmanaged_move($export_name, $file->uri, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+      $file->filesize = filesize(\Drupal::service('file_system')->realpath($file->uri));
       $file->sid_count = $sid_count;
       // Create actual symlink to latest
       l10n_packager_create_latest_symlink($file_path, $release, $language);
@@ -467,9 +467,9 @@ class L10nPackager {
     $basepath = $currentpath = l10n_packager_directory();
     $finalpath = $basepath . '/' . $directory;
     $parts = explode('/', $directory);
-    $htaccess_path = drupal_realpath($basepath) . '/.htaccess';
+    $htaccess_path = \Drupal::service('file_system')->realpath($basepath) . '/.htaccess';
     if (!is_dir($basepath)) {
-      file_prepare_directory($basepath, FILE_CREATE_DIRECTORY);
+      \Drupal::service('file_system')->prepareDirectory($basepath, \Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY);
     }
     if (!file_exists($htaccess_path)) {
       $htaccess_lines = "\n\n<FilesMatch \"\.(po)$\">\n\tForceType \"text/plain; charset=utf-8\"\n\tAllow from ALL\n</FilesMatch>\n";
@@ -480,7 +480,7 @@ class L10nPackager {
     }
     while (is_dir($currentpath) && !is_dir($finalpath) && ($more = array_shift($parts))) {
       $currentpath .= '/' . $more;
-      file_prepare_directory($currentpath, FILE_CREATE_DIRECTORY);
+      \Drupal::service('file_system')->prepareDirectory($currentpath, \Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY);
     }
     return $basepath . '/' . $path;
   }
