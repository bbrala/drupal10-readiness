diff --git a/src/Events/PasswordResetEvent.php b/src/Events/PasswordResetEvent.php
index 83eda7b..072c5fc 100644
--- a/src/Events/PasswordResetEvent.php
+++ b/src/Events/PasswordResetEvent.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Defines the event for reacting to user password resets.
  */
-final class PasswordResetEvent extends Event {
+final class PasswordResetEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The user account being registered.
diff --git a/src/Events/RegistrationEvent.php b/src/Events/RegistrationEvent.php
index 674163b..cceaed9 100644
--- a/src/Events/RegistrationEvent.php
+++ b/src/Events/RegistrationEvent.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Defines the event for reacting to user account registrations.
  */
-final class RegistrationEvent extends Event {
+final class RegistrationEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The user account being registered.
diff --git a/src/Resource/PasswordReset.php b/src/Resource/PasswordReset.php
index 33a0c18..fa996bd 100644
--- a/src/Resource/PasswordReset.php
+++ b/src/Resource/PasswordReset.php
@@ -114,7 +114,7 @@ final class PasswordReset extends EntityResourceBase implements ContainerInjecti
     $this->logger->notice('A password reset has been requested for %name (%email).', ['%name' => $account->getAccountName(), '%email' => $account->getEmail()]);
 
     $event = new PasswordResetEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::PASSWORD_RESET, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::PASSWORD_RESET);
     return new ResourceResponse(new JsonApiDocumentTopLevel(
       new OmittedData([]),
       new NullIncludedData(),
diff --git a/src/Resource/Registration.php b/src/Resource/Registration.php
index 76e3cbc..bc34437 100644
--- a/src/Resource/Registration.php
+++ b/src/Resource/Registration.php
@@ -106,7 +106,7 @@ final class Registration extends EntityResourceBase implements ContainerInjectio
 
     $document = $this->getDocumentFromRequest($request);
     $event = new RegistrationEvent($created_entity, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_VALIDATE);
   }
 
   /**
@@ -137,7 +137,7 @@ final class Registration extends EntityResourceBase implements ContainerInjectio
     );
     assert($account instanceof UserInterface);
     $event = new RegistrationEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_COMPLETE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_COMPLETE);
     return $response;
   }
 
diff --git a/tests/src/Functional/PasswordResetTest.php b/tests/src/Functional/PasswordResetTest.php
index 0be3728..423763f 100644
--- a/tests/src/Functional/PasswordResetTest.php
+++ b/tests/src/Functional/PasswordResetTest.php
@@ -47,7 +47,7 @@ final class PasswordResetTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
diff --git a/tests/src/Functional/PasswordUpdateTest.php b/tests/src/Functional/PasswordUpdateTest.php
index 8f47dfa..28c76cc 100644
--- a/tests/src/Functional/PasswordUpdateTest.php
+++ b/tests/src/Functional/PasswordUpdateTest.php
@@ -50,7 +50,7 @@ final class PasswordUpdateTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
@@ -110,7 +110,7 @@ final class PasswordUpdateTest extends BrowserTestBase {
       'data' => [
         'type' => 'user--user',
         'attributes' => [
-          'pass' => user_password(),
+          'pass' => \Drupal::service('password_generator')->generate(),
           'hash' => user_pass_rehash($this->sut, $timestamp),
           'timestamp' => $timestamp,
         ],
@@ -123,7 +123,7 @@ final class PasswordUpdateTest extends BrowserTestBase {
     $this->assertEquals(200, $response->getStatusCode(), $body);
     $this->sut = $this->reloadEntity($this->sut);
     $this->assertTrue($this->sut->isActive());
-    $this->assertNotEqual($this->sut->getPassword(), $previous_password);
+    $this->assertNotEquals($this->sut->getPassword(), $previous_password);
   }
 
   /**
diff --git a/tests/src/Functional/RegistrationTest.php b/tests/src/Functional/RegistrationTest.php
index 2bce7ac..f8bd639 100644
--- a/tests/src/Functional/RegistrationTest.php
+++ b/tests/src/Functional/RegistrationTest.php
@@ -42,7 +42,7 @@ final class RegistrationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
   }
