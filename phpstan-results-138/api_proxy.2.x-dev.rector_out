modules/contrib/api_proxy/src/Annotation/HttpApi.php
modules/contrib/api_proxy/src/ApiProxyPermissions.php
modules/contrib/api_proxy/src/Controller/Forwarder.php
modules/contrib/api_proxy/src/EventSubscriber/OptionsRequestSubscriber.php
modules/contrib/api_proxy/src/Form/ApiProxyForm.php
modules/contrib/api_proxy/src/Form/SettingsForm.php
modules/contrib/api_proxy/src/ParamConverter/HttpApiProxyConverter.php
modules/contrib/api_proxy/src/Plugin/HttpApiInterface.php
modules/contrib/api_proxy/src/Plugin/HttpApiPluginBase.php
modules/contrib/api_proxy/src/Plugin/HttpApiPluginManager.php
modules/contrib/api_proxy/src/Plugin/api_proxy/HttpApiCommonConfigs.php

4 files with changes
====================

1) modules/contrib/api_proxy/src/Form/SettingsForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager) {
+  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager, \Drupal\api_proxy\Plugin\HttpApiPluginManager $apiProxyManager) {
     $this->setConfigFactory($config_factory);
     $this->apiProxyManager = $api_proxy_manager;
+    $this->apiProxyManager = $apiProxyManager;
   }

   /**
@@ @@
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('config.factory'),
-      $container->get(HttpApiPluginManager::class)
+      $this->apiProxyManager
     );
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/api_proxy/src/Form/ApiProxyForm.php:17

    ---------- begin diff ----------
@@ @@
    * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
    */
   private $apiProxyManager;
+  public function __construct(\Drupal\api_proxy\Plugin\HttpApiPluginManager $apiProxyManager)
+  {
+      $this->apiProxyManager = $apiProxyManager;
+  }

   /**
    * {@inheritdoc}
@@ @@
   public static function create(ContainerInterface $container): self {
     /** @var \Drupal\api_proxy\Form\ApiProxyForm $form_object */
     $form_object = parent::create($container);
-    $form_object->setApiProxyManager($container->get(HttpApiPluginManager::class));
+    $form_object->setApiProxyManager($this->apiProxyManager);

     return $form_object;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/api_proxy/src/EventSubscriber/OptionsRequestSubscriber.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * Tries to handle the options request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $request = $event->getRequest();
     $routes = $this->routeProvider->getRouteCollectionForRequest($event->getRequest());
     if ($request->getMethod() !== 'OPTIONS') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/api_proxy/src/ApiProxyPermissions.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\api_proxy\Plugin\HttpApiPluginManager $proxy_plugin_manager
    *   The HTTP API proxy plugin manager.
    */
-  public function __construct(HttpApiPluginManager $proxy_plugin_manager) {
+  public function __construct(HttpApiPluginManager $proxy_plugin_manager, \Drupal\api_proxy\Plugin\HttpApiPluginManager $proxyPluginManager) {
     $this->proxyPluginManager = $proxy_plugin_manager;
+    $this->proxyPluginManager = $proxyPluginManager;
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    return new static($container->get(HttpApiPluginManager::class));
+    return new static($this->proxyPluginManager);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 4 files have been changed by Rector                                       

