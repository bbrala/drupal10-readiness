modules/contrib/language_cookie/language_cookie.api.php
modules/contrib/language_cookie/language_cookie.install
modules/contrib/language_cookie/language_cookie.module
modules/contrib/language_cookie/src/Annotation/LanguageCookieCondition.php
modules/contrib/language_cookie/src/Controller/LegacyDrupal7Redirect.php
modules/contrib/language_cookie/src/EventSubscriber/LanguageCookieSubscriber.php
modules/contrib/language_cookie/src/Form/NegotiationLanguageCookieForm.php
modules/contrib/language_cookie/src/LanguageCookieConditionBase.php
modules/contrib/language_cookie/src/LanguageCookieConditionInterface.php
modules/contrib/language_cookie/src/LanguageCookieConditionManager.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionBlacklistedPaths.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionHardcodedBlacklistedPaths.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionIndexPhp.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionLanguageAccess.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionMethodIsValid.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionPHPSapi.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionPathIsValid.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionServerAddr.php
modules/contrib/language_cookie/src/Plugin/LanguageCookieCondition/LanguageCookieConditionXMLHTTPRequest.php
modules/contrib/language_cookie/src/Plugin/LanguageNegotiation/LanguageNegotiationCookie.php
modules/contrib/language_cookie/tests/modules/language_cookie_test/language_cookie_test.install
modules/contrib/language_cookie/tests/modules/language_cookie_test/language_cookie_test.module
modules/contrib/language_cookie/tests/modules/language_cookie_test/src/Plugin/LanguageNegotiation/LanguageCookieFixedNegotiation.php
modules/contrib/language_cookie/tests/src/Functional/LanguageCookieConditionTest.php
modules/contrib/language_cookie/tests/src/Functional/LanguageCookieLanguageAccessTest.php
modules/contrib/language_cookie/tests/src/Functional/LanguageCookieLanguageSelectionPageTest.php
modules/contrib/language_cookie/tests/src/Functional/LanguageCookieNegotiationConfigTest.php
modules/contrib/language_cookie/tests/src/Functional/LanguageCookiePageCacheTest.php
modules/contrib/language_cookie/tests/src/Functional/LanguageCookieTestBase.php

3 files with changes
====================

1) modules/contrib/language_cookie/tests/src/Functional/LanguageCookieNegotiationConfigTest.php:117

    ---------- begin diff ----------
@@ @@
     $node = $this->drupalCreateNode();
     $this->drupalGet('fr/node/' . $node->id());

-    $this->assertRegExp('/max-age=86/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains expires option.');
+    $this->assertMatchesRegularExpression('/max-age=86/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains expires option.');

     $config->set('time', 60 * 60 * 24 * 2);
     $config->save();
@@ @@
     $node = $this->drupalCreateNode();
     $this->drupalGet('en/node/' . $node->id());

-    $this->assertRegExp('/max-age=172/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains expires option.');
+    $this->assertMatchesRegularExpression('/max-age=172/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains expires option.');
   }

   /**
@@ @@

     $node = $this->drupalCreateNode();
     $this->drupalGet('fr/node/' . $node->id());
-    $this->assertRegExp('/path=\/drupal;/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains path option.');
+    $this->assertMatchesRegularExpression('/path=\/drupal;/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains path option.');
   }

   /**
@@ @@
     $node = $this->drupalCreateNode();
     $this->drupalGet('fr/node/' . $node->id());

-    $this->assertRegExp('/domain=example\.org;/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains domain option.');
+    $this->assertMatchesRegularExpression('/domain=example\.org;/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains domain option.');
   }

   /**
@@ @@
     $node = $this->drupalCreateNode();
     $this->drupalGet('fr/node/' . $node->id());

-    $this->assertRegExp('/secure/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains secure option.');
+    $this->assertMatchesRegularExpression('/secure/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie contains secure option.');
   }

   /**
@@ @@
     $node = $this->drupalCreateNode();
     $this->drupalGet('fr/node/' . $node->id());

-    $this->assertRegExp('/httponly/i', $this->getSession()->getResponseHeader('Set-Cookie'), 'Cookie contains httpOnly option.');
+    $this->assertMatchesRegularExpression('/httponly/i', $this->getSession()->getResponseHeader('Set-Cookie'), 'Cookie contains httpOnly option.');

     $config->set('http_only', FALSE);
     $config->save();

     $this->drupalGet('en/node/' . $node->id());
-    $this->assertNotRegExp('/httponly/i', $this->getSession()->getResponseHeader('Set-Cookie'), 'Cookie contains httpOnly option.');
+    $this->assertDoesNotMatchRegularExpression('/httponly/i', $this->getSession()->getResponseHeader('Set-Cookie'), 'Cookie contains httpOnly option.');
   }

   /**
@@ @@
   public function testLanguageCookieSetOnEveryPageLoadOption() {
     $node = $this->drupalCreateNode();
     $this->drupalGet('fr/node/' . $node->id());
-    $this->assertRegExp('/language=fr/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');
+    $this->assertMatchesRegularExpression('/language=fr/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');

     $this->drupalGet('fr/node/' . $node->id());
     $this->assertEmpty($this->drupalGetHeader('Set-Cookie'));

     $this->drupalGet('en/node/' . $node->id());
-    $this->assertRegExp('/language=en/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');
+    $this->assertMatchesRegularExpression('/language=en/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');

     $config = $this->config('language_cookie.negotiation');
     $config->set('set_on_every_pageload', TRUE);
@@ @@

     $node = $this->drupalCreateNode();
     $this->drupalGet('fr/node/' . $node->id());
-    $this->assertRegExp('/language=fr/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');
+    $this->assertMatchesRegularExpression('/language=fr/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');

     $this->drupalGet('fr/node/' . $node->id());
-    $this->assertRegExp('/language=fr/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');
+    $this->assertMatchesRegularExpression('/language=fr/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');

     $this->drupalGet('en/node/' . $node->id());
-    $this->assertRegExp('/language=en/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');
+    $this->assertMatchesRegularExpression('/language=en/i', $this->drupalGetHeader('Set-Cookie'), 'Cookie is set.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/language_cookie/src/EventSubscriber/LanguageCookieSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent
+   * @var \Symfony\Component\HttpKernel\Event\ResponseEvent
    */
   protected $event;

@@ @@
   /**
    * Event callback for setting the language cookie.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    *
    * @return bool
@@ @@
    *   - TRUE if all conditions pass. If a language is available, the cookie
    *     will have been set.
    */
-  public function setLanguageCookie(FilterResponseEvent $event) {
+  public function setLanguageCookie(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     $this->event = $event;
     $config = $this->configFactory->get('language_cookie.negotiation');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/language_cookie/language_cookie.api.php:36

    ---------- begin diff ----------
@@ @@
  */
 function hook_language_cookie_alter(Cookie &$cookie) {
   $default_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
-  $cookie = new Cookie('my_altered_language_cookie', $default_langcode);
+  $cookie = \Symfony\Component\HttpFoundation\Cookie::create('my_altered_language_cookie', $default_langcode);
 }

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * NewToStaticCallRector


 [OK] 3 files have been changed by Rector                                       

