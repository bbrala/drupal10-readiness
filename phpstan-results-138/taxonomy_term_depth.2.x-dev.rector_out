modules/contrib/taxonomy_term_depth/constants.inc
modules/contrib/taxonomy_term_depth/drush/taxonomy_term_depth.drush.inc
modules/contrib/taxonomy_term_depth/src/DepthUninstallValidator.php
modules/contrib/taxonomy_term_depth/src/Form/DepthDeleteDataForm.php
modules/contrib/taxonomy_term_depth/src/Form/DepthUpdateForm.php
modules/contrib/taxonomy_term_depth/src/Plugin/QueueWorker/UpdateDepth.php
modules/contrib/taxonomy_term_depth/src/ProxyClass/DepthUninstallValidator.php
modules/contrib/taxonomy_term_depth/src/QueueManager/Manager.php
modules/contrib/taxonomy_term_depth/taxonomy_term_depth.batch.inc
modules/contrib/taxonomy_term_depth/taxonomy_term_depth.install
modules/contrib/taxonomy_term_depth/taxonomy_term_depth.module
modules/contrib/taxonomy_term_depth/tests/src/Functional/DynamicDepthCalculationTest.php

1 file with changes
===================

1) modules/contrib/taxonomy_term_depth/tests/src/Functional/DynamicDepthCalculationTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }

@@ @@
     $term3->parent->set(1, $term2->id());
     $term3->save();

-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');

-    $this->assertEqual($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
-    $this->assertEqual($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
-    $this->assertEqual($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');
+    $this->assertEquals($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
+    $this->assertEquals($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
+    $this->assertEquals($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');

     $chain = taxonomy_term_depth_get_full_chain($term2->id());
     $compare = [
@@ @@
     $chain = taxonomy_term_depth_get_full_chain($term2->id(), TRUE);
     $this->assertTrue($chain === array_reverse($compare), 'Testing reversed fullchain for term2');

-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term1->id()])
       ->fetchField(), 1, 'DB depth_level field of first term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term2->id()])
       ->fetchField(), 2, 'DB depth_level field of second term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term3->id()])
       ->fetchField(), 3, 'DB depth_level field of third term');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

