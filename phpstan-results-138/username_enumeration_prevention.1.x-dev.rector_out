modules/contrib/username_enumeration_prevention/src/UserRouteEventSubscriber.php
modules/contrib/username_enumeration_prevention/tests/src/Functional/FloodTest.php
modules/contrib/username_enumeration_prevention/tests/src/Functional/UserFormTest.php
modules/contrib/username_enumeration_prevention/tests/src/Functional/UserRouteTest.php
modules/contrib/username_enumeration_prevention/username_enumeration_prevention.install
modules/contrib/username_enumeration_prevention/username_enumeration_prevention.module

2 files with changes
====================

1) modules/contrib/username_enumeration_prevention/tests/src/Functional/FloodTest.php:43

    ---------- begin diff ----------
@@ @@
     for ($i = 0; $i < 3; $i++) {
       $this->drupalGet('user/password');
       $edit = ['name' => $name];
-      $this->drupalPostForm(NULL, $edit, $this->t('Submit'));
+      $this->submitForm($edit, $this->t('Submit'));
     }

     // The next request should trigger flood control.
     $this->drupalGet('user/password');
     $edit = ['name' => $this->randomMachineName()];
-    $this->drupalPostForm(NULL, $edit, $this->t('Submit'));
+    $this->submitForm($edit, $this->t('Submit'));

     // Error should not be displayed to the end user.
-    $this->assertNoText($this->t('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.'));

     // But mail should be.
     $mail = $this->drupalGetMails();
-    $this->assert(!empty($mail), "password reset mails were sent");
+    $this->assertTrue(!empty($mail), "password reset mails were sent");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/username_enumeration_prevention/src/UserRouteEventSubscriber.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
     $routeMatch = RouteMatch::createFromRequest($event->getRequest());
-    if ($event->getException() instanceof AccessDeniedHttpException && in_array($routeMatch->getRouteName(), $this->getUserRoutes())) {
-      $event->setException(new NotFoundHttpException());
+    if ($event->getThrowable() instanceof AccessDeniedHttpException && in_array($routeMatch->getRouteName(), $this->getUserRoutes())) {
+      $event->setThrowable(new NotFoundHttpException());
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

