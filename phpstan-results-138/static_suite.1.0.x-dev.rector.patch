diff --git a/modules/static_build/src/Event/StaticBuildEvent.php b/modules/static_build/src/Event/StaticBuildEvent.php
index 76cdbd6..37ecaac 100644
--- a/modules/static_build/src/Event/StaticBuildEvent.php
+++ b/modules/static_build/src/Event/StaticBuildEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Generic static build event to be fired.
  */
-class StaticBuildEvent extends Event {
+class StaticBuildEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The static builder that triggers the event.
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginBase.php b/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
index 3dd0b66..7b9567d 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
@@ -1148,7 +1148,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
 
     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");
 
     // Return the event.
diff --git a/modules/static_deploy/src/Event/StaticDeployEvent.php b/modules/static_deploy/src/Event/StaticDeployEvent.php
index 8a7fee0..40448ed 100644
--- a/modules/static_deploy/src/Event/StaticDeployEvent.php
+++ b/modules/static_deploy/src/Event/StaticDeployEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Generic static deploy event to be fired.
  */
-class StaticDeployEvent extends Event {
+class StaticDeployEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The static deployer that triggers the event.
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
index fd06133..49dc399 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
@@ -575,7 +575,7 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
 
     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");
 
     // Return the event.
diff --git a/modules/static_export/src/Controller/ExportableConfigList.php b/modules/static_export/src/Controller/ExportableConfigList.php
index e9d9319..2a8dcb4 100644
--- a/modules/static_export/src/Controller/ExportableConfigList.php
+++ b/modules/static_export/src/Controller/ExportableConfigList.php
@@ -65,7 +65,7 @@ class ExportableConfigList extends ControllerBase {
             'view' => [
               'title' => $this->t('View'),
               'weight' => 10,
-              'url' => Url::fromUri(file_create_url($exportUri)),
+              'url' => \Drupal::service('file_url_generator')->generate($exportUri),
               'attributes' => [
                 'target' => '_blank',
               ],
diff --git a/modules/static_export/src/Controller/ExportableEntityListBuilder.php b/modules/static_export/src/Controller/ExportableEntityListBuilder.php
index 7c130a4..40a5a03 100644
--- a/modules/static_export/src/Controller/ExportableEntityListBuilder.php
+++ b/modules/static_export/src/Controller/ExportableEntityListBuilder.php
@@ -128,7 +128,7 @@ class ExportableEntityListBuilder extends ConfigEntityListBuilder {
     // alter this table's output.
     $event = new ExportableEntityListEvent();
     $event->setData(['header' => $finalHeader]);
-    $processedEvent = $this->eventDispatcher->dispatch(ExportableEntityListEvents::HEADER_BUILT, $event);
+    $processedEvent = $this->eventDispatcher->dispatch($event, ExportableEntityListEvents::HEADER_BUILT);
     return $processedEvent->getData()['header'];
   }
 
@@ -164,7 +164,7 @@ class ExportableEntityListBuilder extends ConfigEntityListBuilder {
       // alter this table's output.
       $event = new ExportableEntityListEvent();
       $event->setData(['row' => $finalRow, 'entity' => $entity]);
-      $processedEvent = $this->eventDispatcher->dispatch(ExportableEntityListEvents::ROW_BUILT, $event);
+      $processedEvent = $this->eventDispatcher->dispatch($event, ExportableEntityListEvents::ROW_BUILT);
       return $processedEvent->getData()['row'];
     }
     return $row;
diff --git a/modules/static_export/src/Controller/ExportableLocaleList.php b/modules/static_export/src/Controller/ExportableLocaleList.php
index 865ae44..d0fd56c 100644
--- a/modules/static_export/src/Controller/ExportableLocaleList.php
+++ b/modules/static_export/src/Controller/ExportableLocaleList.php
@@ -102,7 +102,7 @@ class ExportableLocaleList extends ControllerBase {
                 'view' => [
                   'title' => $this->t('View'),
                   'weight' => 10,
-                  'url' => Url::fromUri(file_create_url($exportUri)),
+                  'url' => \Drupal::service('file_url_generator')->generate($exportUri),
                   'attributes' => [
                     'target' => '_blank',
                   ],
diff --git a/modules/static_export/src/Controller/FileViewerController.php b/modules/static_export/src/Controller/FileViewerController.php
index e5db427..d1ec8fc 100644
--- a/modules/static_export/src/Controller/FileViewerController.php
+++ b/modules/static_export/src/Controller/FileViewerController.php
@@ -30,7 +30,7 @@ class FileViewerController extends ControllerBase {
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var \Symfony\Component\Mime\MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
@@ -60,7 +60,7 @@ class FileViewerController extends ControllerBase {
    *
    * @param \Drupal\Core\Session\AccountProxyInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param \Symfony\Component\Mime\MimeTypesInterface $mimeTypeGuesser
    *   The mime type guesser.
    * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
    *   The URI factory.
@@ -71,7 +71,7 @@ class FileViewerController extends ControllerBase {
    */
   public function __construct(
     AccountProxyInterface $current_user,
-    MimeTypeGuesserInterface $mimeTypeGuesser,
+    \Symfony\Component\Mime\MimeTypesInterface $mimeTypeGuesser,
     UriFactoryInterface $uriFactory,
     OutputFormatterPluginManagerInterface $outputFormatterManager,
     DataIncludeLoaderInterface $dataIncludeLoader
diff --git a/modules/static_export/src/Event/ExportableEntityListEvent.php b/modules/static_export/src/Event/ExportableEntityListEvent.php
index b440ce8..3f54186 100644
--- a/modules/static_export/src/Event/ExportableEntityListEvent.php
+++ b/modules/static_export/src/Event/ExportableEntityListEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event for Exportable Entity List.
  */
-class ExportableEntityListEvent extends Event {
+class ExportableEntityListEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * An array with event's data.
diff --git a/modules/static_export/src/Event/StaticExportEvent.php b/modules/static_export/src/Event/StaticExportEvent.php
index 65a5ec0..35d008f 100644
--- a/modules/static_export/src/Event/StaticExportEvent.php
+++ b/modules/static_export/src/Event/StaticExportEvent.php
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Generic static export event to be fired.
  */
-class StaticExportEvent extends Event {
+class StaticExportEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   // Event constants.
   public const EVENT_CONFIG = 'event:config';
diff --git a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php
index f18f862..6e9e9a5 100644
--- a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php
+++ b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php
@@ -13,7 +13,7 @@ class DataIncludeLoader implements DataIncludeLoaderInterface {
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var \Symfony\Component\Mime\MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
@@ -32,7 +32,7 @@ class DataIncludeLoader implements DataIncludeLoaderInterface {
    * @param \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager
    *   The data include loader plugin manager.
    */
-  public function __construct(MimeTypeGuesserInterface $mimeTypeGuesser, DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager) {
+  public function __construct(\Symfony\Component\Mime\MimeTypesInterface $mimeTypeGuesser, DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager) {
     $this->mimeTypeGuesser = $mimeTypeGuesser;
     $this->dataIncludeLoaderPluginManager = $dataIncludeLoaderPluginManager;
   }
diff --git a/modules/static_export/src/Exporter/ExporterPluginBase.php b/modules/static_export/src/Exporter/ExporterPluginBase.php
index 85ca723..1139822 100644
--- a/modules/static_export/src/Exporter/ExporterPluginBase.php
+++ b/modules/static_export/src/Exporter/ExporterPluginBase.php
@@ -1132,7 +1132,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
 
     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");
 
     // Return the event.
diff --git a/modules/static_export/src/File/FileCollectionFormatter.php b/modules/static_export/src/File/FileCollectionFormatter.php
index 3697dd4..da9579e 100644
--- a/modules/static_export/src/File/FileCollectionFormatter.php
+++ b/modules/static_export/src/File/FileCollectionFormatter.php
@@ -149,7 +149,7 @@ class FileCollectionFormatter {
 
       // Parse file link.
       if ($user->hasPermission("view static export files") && $index !== 0 && preg_match("/ (\S+)$/", $line, $matches)) {
-        $htmlForFilePath = '<a href="' . file_create_url($scheme . '://' . $matches[1]) . '" target="_blank">' . $matches[1] . '</a>';
+        $htmlForFilePath = '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($scheme . '://' . $matches[1]) . '" target="_blank">' . $matches[1] . '</a>';
         $lines[$index] = str_replace($matches[1], $htmlForFilePath, $lines[$index]);
       }
     }
diff --git a/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php b/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php
index ebd2856..8012051 100644
--- a/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php
+++ b/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php
@@ -9,7 +9,7 @@ use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
  *
  * It supports the tree formats offered by Static Export: JSON, XML and YAML.
  */
-class ContentMimeTypeGuesser implements MimeTypeGuesserInterface {
+class ContentMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypesInterface {
 
   /**
    * {@inheritdoc}
diff --git a/modules/static_export/src/File/MimeType/MimeTypeGuesser.php b/modules/static_export/src/File/MimeType/MimeTypeGuesser.php
index f523747..25318b4 100644
--- a/modules/static_export/src/File/MimeType/MimeTypeGuesser.php
+++ b/modules/static_export/src/File/MimeType/MimeTypeGuesser.php
@@ -14,7 +14,7 @@ class MimeTypeGuesser extends BaseMimeTypeGuesser {
   /**
    * The default mimeType guesser from Drupal's core.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var \Symfony\Component\Mime\MimeTypesInterface
    */
   protected $defaultMimeTypeGuesser;
 
@@ -23,10 +23,10 @@ class MimeTypeGuesser extends BaseMimeTypeGuesser {
    *
    * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $defaultMimeTypeGuesser
+   * @param \Symfony\Component\Mime\MimeTypesInterface $defaultMimeTypeGuesser
    *   The default mimeType guesser from Drupal's core.
    */
-  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypeGuesserInterface $defaultMimeTypeGuesser) {
+  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, \Symfony\Component\Mime\MimeTypesInterface $defaultMimeTypeGuesser) {
     $this->defaultMimeTypeGuesser = $defaultMimeTypeGuesser;
     parent::__construct($stream_wrapper_manager);
   }
diff --git a/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php b/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php
index cd65848..d72f9c2 100644
--- a/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php
+++ b/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php
@@ -8,7 +8,7 @@ use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 /**
  * Guess the MIME type of a file using StaticOutputFormatter annotation.
  */
-class OutputFormatterMimeTypeGuesser implements MimeTypeGuesserInterface {
+class OutputFormatterMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypesInterface {
 
   /**
    * The output formatter manager.
diff --git a/modules/static_export/static_export.module b/modules/static_export/static_export.module
index 570d365..258cf41 100644
--- a/modules/static_export/static_export.module
+++ b/modules/static_export/static_export.module
@@ -364,7 +364,7 @@ function static_export_form_node_form_alter(&$form, FormStateInterface $form_sta
             '#title' => str_replace('/', '/​', $exportedUriTarget),
             '#type' => 'link',
             '#attributes' => ['target' => '_blank'],
-            '#url' => Url::fromUri(file_create_url($uri)),
+            '#url' => \Drupal::service('file_url_generator')->generate($uri),
           ],
         ];
       }
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php
index 1592f73..7935ef5 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php
@@ -127,7 +127,7 @@ class NodePreviewController extends BaseNodePreviewController {
     if ($exportableEntity) {
       $isStatifiedPage = $exportableEntity->getIsStatifiedPage();
       $event = new StaticPreviewEvent($node_preview);
-      $this->eventDispatcher->dispatch(StaticPreviewEvents::PRE_RENDER, $event);
+      $this->eventDispatcher->dispatch($event, StaticPreviewEvents::PRE_RENDER);
       $isPreviewable = $event->isPreviewable();
     }
 
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php
index c665286..452f510 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php
@@ -99,10 +99,10 @@ class PreviewControllerWrapperSubscriber implements EventSubscriberInterface {
   /**
    * Wraps a controller execution in a preview handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ControllerEvent $event
    *   The controller event.
    */
-  public function onController(FilterControllerEvent $event): void {
+  public function onController(\Symfony\Component\HttpKernel\Event\ControllerEvent $event): void {
     $controller = $event->getController();
 
     // See \Symfony\Component\HttpKernel\HttpKernel::handleRaw().
@@ -160,7 +160,7 @@ class PreviewControllerWrapperSubscriber implements EventSubscriberInterface {
                 $isStatifiedPage = $exportableEntity->getIsStatifiedPage();
                 // Check if this exportable entity can be previewed.
                 $event = new StaticPreviewEvent($argument);
-                $this->eventDispatcher->dispatch(StaticPreviewEvents::PRE_RENDER, $event);
+                $this->eventDispatcher->dispatch($event, StaticPreviewEvents::PRE_RENDER);
                 $isPreviewable = $event->isPreviewable();
               }
 
diff --git a/modules/static_preview/src/Event/StaticPreviewEvent.php b/modules/static_preview/src/Event/StaticPreviewEvent.php
index 988aa3d..19eece4 100644
--- a/modules/static_preview/src/Event/StaticPreviewEvent.php
+++ b/modules/static_preview/src/Event/StaticPreviewEvent.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Static preview event.
  */
-class StaticPreviewEvent extends Event {
+class StaticPreviewEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * A flag to tell whether and entity can be previewed.
