diff --git a/src/Event/AkamaiHeaderEvents.php b/src/Event/AkamaiHeaderEvents.php
index 47ac999..97692b3 100644
--- a/src/Event/AkamaiHeaderEvents.php
+++ b/src/Event/AkamaiHeaderEvents.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event that is fired when Akamai header is formed.
  */
-class AkamaiHeaderEvents extends Event {
+class AkamaiHeaderEvents extends \Symfony\Contracts\EventDispatcher\Event {
   /**
    * The event dispatched when a response is received for a purge request.
    */
diff --git a/src/Event/AkamaiPurgeEvents.php b/src/Event/AkamaiPurgeEvents.php
index 1ab5aac..ec2f5ac 100644
--- a/src/Event/AkamaiPurgeEvents.php
+++ b/src/Event/AkamaiPurgeEvents.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event that is fired when Akamai purge is formed.
  */
-class AkamaiPurgeEvents extends Event {
+class AkamaiPurgeEvents extends \Symfony\Contracts\EventDispatcher\Event {
 
   const PURGE_CREATION = 'akamai.purge_creation';
 
diff --git a/src/EventSubscriber/CacheableResponseSubscriber.php b/src/EventSubscriber/CacheableResponseSubscriber.php
index 4e81790..d753841 100644
--- a/src/EventSubscriber/CacheableResponseSubscriber.php
+++ b/src/EventSubscriber/CacheableResponseSubscriber.php
@@ -64,10 +64,10 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -92,7 +92,7 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
 
       // Instantiate our event.
       $event = new AkamaiHeaderEvents($tags);
-      $this->eventDispatcher->dispatch(AkamaiHeaderEvents::HEADER_CREATION, $event);
+      $this->eventDispatcher->dispatch($event, AkamaiHeaderEvents::HEADER_CREATION);
       $tags = $event->data;
       foreach ($tags as &$tag) {
         $tag = $this->tagFormatter->format($tag);
diff --git a/tests/src/Functional/EdgescapeTest.php b/tests/src/Functional/EdgescapeTest.php
index a8afebd..3e1e1a4 100644
--- a/tests/src/Functional/EdgescapeTest.php
+++ b/tests/src/Functional/EdgescapeTest.php
@@ -69,7 +69,7 @@ class EdgescapeTest extends BrowserTestBase {
     $this->drupalGet($akamai_config_path, [], [
       Edgescape::EDGESCAPE_HEADER => $header_value,
     ]);
-    $this->assertRaw('Country Code: RAX');
+    $this->assertSession()->responseContains('Country Code: RAX');
   }
 
 }
diff --git a/tests/src/Kernel/EventSubscriber/MockSubscriber.php b/tests/src/Kernel/EventSubscriber/MockSubscriber.php
index 6beb591..0ac38e3 100644
--- a/tests/src/Kernel/EventSubscriber/MockSubscriber.php
+++ b/tests/src/Kernel/EventSubscriber/MockSubscriber.php
@@ -14,7 +14,7 @@ class MockSubscriber implements EventSubscriberInterface {
   /**
    * Storage of the last event.
    *
-   * @var Symfony\Component\EventDispatcher\Event
+   * @var \Symfony\Contracts\EventDispatcher\Event
    */
   public $event;
 
diff --git a/tests/src/Unit/AkamaiAuthenticationTest.php b/tests/src/Unit/AkamaiAuthenticationTest.php
index 5faffe1..582220b 100644
--- a/tests/src/Unit/AkamaiAuthenticationTest.php
+++ b/tests/src/Unit/AkamaiAuthenticationTest.php
@@ -14,6 +14,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class AkamaiAuthenticationTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Tests that we can authorise when specifying edgerc file.
    *
diff --git a/tests/src/Unit/AkamaiClientV3Test.php b/tests/src/Unit/AkamaiClientV3Test.php
index d3c9fc2..1bf35b5 100644
--- a/tests/src/Unit/AkamaiClientV3Test.php
+++ b/tests/src/Unit/AkamaiClientV3Test.php
@@ -14,6 +14,7 @@ use Psr\Log\LoggerInterface;
  */
 class AkamaiClientV3Test extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Creates a client to test.
    *
