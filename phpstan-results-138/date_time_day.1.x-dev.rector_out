modules/contrib/date_time_day/date_time_day.install
modules/contrib/date_time_day/date_time_day.module
modules/contrib/date_time_day/src/DateDayComputed.php
modules/contrib/date_time_day/src/DateTimeDayComputed.php
modules/contrib/date_time_day/src/DateTimeDayTrait.php
modules/contrib/date_time_day/src/Plugin/Field/FieldFormatter/DateTimeDayDefaultFormatter.php
modules/contrib/date_time_day/src/Plugin/Field/FieldType/DateTimeDayFieldItemList.php
modules/contrib/date_time_day/src/Plugin/Field/FieldType/DateTimeDayItem.php
modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDayDefaultWidget.php
modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDaySecondsWidget.php
modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDayWidgetBase.php
modules/contrib/date_time_day/tests/src/Functional/DateTimeDayFieldTest.php
modules/contrib/date_time_day/tests/src/Kernel/DateTimeDayItemTest.php
modules/contrib/date_time_day/tests/src/Kernel/SeparatorsTranslationTest.php

3 files with changes
====================

1) modules/contrib/date_time_day/tests/src/Kernel/SeparatorsTranslationTest.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/date_time_day/tests/src/Kernel/DateTimeDayItemTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a date_time_day field.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/date_time_day/tests/src/Functional/DateTimeDayFieldTest.php:81

    ---------- begin diff ----------
@@ @@
         ->save();
       // Display creation form.
       $this->drupalGet('entity_test/add');
-      $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Date element found.');
-      $this->assertFieldByName("{$field_name}[0][start_time_value]", '', 'Start time element found.');
-      $this->assertFieldByName("{$field_name}[0][end_time_value]", '', 'End time element found.');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][start_time_value]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][end_time_value]", '');
       $this->assertFieldByXPath('//*[@id="edit-' . $field_name . '-wrapper"]//label[contains(@class, "js-form-required")]', TRUE, 'Required markup found');
       $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
       $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
@@ @@
         "{$field_name}[0][start_time_value]" => $start_time_value,
         "{$field_name}[0][end_time_value]" => $end_time_value,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
       $id = $match[1];
       $this->assertSession()->pageTextContains("entity_test $id has been created.");
-      $this->assertRaw('2012-12-30');
-      $this->assertRaw($start_time_value);
-      $this->assertRaw($end_time_value);
+      $this->assertSession()->responseContains('2012-12-30');
+      $this->assertSession()->responseContains($start_time_value);
+      $this->assertSession()->responseContains($end_time_value);
       // Verify the date doesn't change when entity is edited through the form.
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
     }
   }

@@ @@
       $this->fieldStorage->save();
       // Display creation form.
       $this->drupalGet('entity_test/add');
-      $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Date element found.');
-      $this->assertFieldByName("{$field_name}[0][start_time_value][time]", '', 'Start time element found.');
-      $this->assertFieldByName("{$field_name}[0][end_time_value][time]", '', 'End time element found.');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][start_time_value][time]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][end_time_value][time]", '');
       $this->assertFieldByXPath('//*[@id="edit-' . $field_name . '-wrapper"]//label[contains(@class, "js-form-required")]', TRUE, 'Required markup found');
       $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
       $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
@@ @@
         "{$field_name}[0][start_time_value][time]" => $start_time_value,
         "{$field_name}[0][end_time_value][time]" => $end_time_value,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
       $id = $match[1];
       $this->assertSession()->pageTextContains("entity_test $id has been created.");
-      $this->assertRaw('2012-12-30');
-      $this->assertRaw($start_time_value);
-      $this->assertRaw($end_time_value);
+      $this->assertSession()->responseContains('2012-12-30');
+      $this->assertSession()->responseContains($start_time_value);
+      $this->assertSession()->responseContains($end_time_value);
       // Verify the date doesn't change when entity is edited through the form.
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
     }
   }

@@ @@
       $field_name . '[0][start_time_value]' => '10:00',
       $field_name . '[0][end_time_value]' => '19:00',
     ];
-    $this->drupalPostForm('node/add/date_content', $edit, t('Save'));
+    $this->drupalGet('node/add/date_content');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name . '/storage');
     $result = $this->xpath("//*[@id='edit-settings-datetime-type' and contains(@disabled, 'disabled')]");
-    $this->assertEqual(count($result), 1, "Changing datetime setting is disabled.");
+    $this->assertEquals(count($result), 1, "Changing datetime setting is disabled.");
     $this->assertSession()->pageTextContains('There is data for this field in the database. The field settings can no longer be changed.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

