modules/contrib/simple_paypal_field/modules/paypal_field_example/paypal_field_example.module
modules/contrib/simple_paypal_field/modules/paypal_field_example/src/Entity/Builder/PaymentListBuilder.php
modules/contrib/simple_paypal_field/modules/paypal_field_example/src/Entity/Payment.php
modules/contrib/simple_paypal_field/modules/paypal_field_example/src/EventSubscriber/PayPalFieldExampleSubscriber.php
modules/contrib/simple_paypal_field/simple_paypal_field.module
modules/contrib/simple_paypal_field/src/Controller/PayPalSmartButtonsController.php
modules/contrib/simple_paypal_field/src/Event/PayPalSmartButtonsEvents.php
modules/contrib/simple_paypal_field/src/Event/PaypalSmartButtonsEvent.php
modules/contrib/simple_paypal_field/src/EventSubscriber/SimplePayPalFieldEventSubscriber.php
modules/contrib/simple_paypal_field/src/Form/PayPalSettingsForm.php
modules/contrib/simple_paypal_field/src/PayPalFieldInterface.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldFormatter/PayPalSmartButtonsFormatter.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldType/OneTimePaymentField.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldType/SimplePayPalField.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldWidget/PayPalSmartButtonsWidget.php
modules/contrib/simple_paypal_field/tests/src/Functional/SimplePayPalFieldTest.php

3 files with changes
====================

1) modules/contrib/simple_paypal_field/tests/src/Functional/SimplePayPalFieldTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->webUser = $this->drupalCreateUser(
       [
@@ @@
     )
       ->save();
     // Widgets.
-    entity_get_form_display('entity_test', 'entity_test', 'default')
+    \Drupal::service('entity_display.repository')->getFormDisplay('entity_test', 'entity_test', 'default')
       ->setComponent($field_name, ['type' => $widget_type])
       ->save();

-    entity_get_display('entity_test', 'entity_test', 'full')
+    \Drupal::service('entity_display.repository')->getViewDisplay('entity_test', 'entity_test', 'full')
       ->setComponent($field_name, ['type' => $formatter])
       ->save();
     return $field_name;
@@ @@
     $this->drupalGet('entity_test/add');
     $this->assertSession()->elementExists('css', '.paypal-button');

-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $this->assertSession()->pageTextContains(
@@ @@

     // Display the entity.
     $entity = EntityTest::load($id);
-    $display = entity_get_display(
-      $entity->getEntityTypeId(),
-      $entity->bundle(),
-      'full'
-    );
+    $display = \Drupal::service('entity_display.repository')->getViewDisplay($entity->getEntityTypeId(), $entity->bundle(), 'full');
     $content = $display->build($entity);
     $rendered_entity = $this->container->get('renderer')->renderRoot($content);
-    $this->assertContains('paypal-button', (string) $rendered_entity);
+    $this->assertStringContainsString('paypal-button', (string) $rendered_entity);
   }

   /**
@@ @@
     $field_item = "{$field_name}[value]";
     $this->drupalGet('entity_test/add');
     $this->assertSession()->checkboxChecked($field_item);
-    $this->drupalPostForm(NULL, [$field_item => 0], t('Save'));
+    $this->submitForm([$field_item => 0], t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $this->assertSession()->pageTextContains(
    ----------- end diff -----------

Applied rules:
 * EntityGetDisplayRector
 * EntityGetFormDisplayRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_paypal_field/src/Event/PaypalSmartButtonsEvent.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * PayPal smart buttons event.
  */
-class PaypalSmartButtonsEvent extends Event {
+class PaypalSmartButtonsEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Order details.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_paypal_field/src/Controller/PayPalSmartButtonsController.php:71

    ---------- begin diff ----------
@@ @@

       $event = new PaypalSmartButtonsEvent($data['details'], $element);
       $this->eventDispatcher->dispatch(
-        PayPalSmartButtonsEvents::APPROVE_ORDER,
-        $event
+        $event,
+        PayPalSmartButtonsEvents::APPROVE_ORDER
       );
       return new JsonResponse('ok');
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

