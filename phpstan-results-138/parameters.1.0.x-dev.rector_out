modules/contrib/parameters/modules/parameters_ui/parameters_ui.module
modules/contrib/parameters/modules/parameters_ui/src/Controller/ParametersUiController.php
modules/contrib/parameters/modules/parameters_ui/src/Form/ParameterDeleteForm.php
modules/contrib/parameters/modules/parameters_ui/src/Form/ParameterForm.php
modules/contrib/parameters/modules/parameters_ui/src/Form/ParametersCollectionDeleteForm.php
modules/contrib/parameters/modules/parameters_ui/src/Form/ParametersCollectionForm.php
modules/contrib/parameters/modules/parameters_ui/src/Form/ParametersCollectionLockForm.php
modules/contrib/parameters/modules/parameters_ui/src/Form/ParametersCollectionUnlockForm.php
modules/contrib/parameters/modules/parameters_ui/src/ParametersUiAccessControlHandler.php
modules/contrib/parameters/modules/parameters_ui/src/ParametersUiListBuilder.php
modules/contrib/parameters/modules/parameters_ui/src/ParametersUiPermissions.php
modules/contrib/parameters/modules/parameters_ui/src/Plugin/Derivative/ParametersUiLocalTasks.php
modules/contrib/parameters/modules/parameters_ui/src/Routing/ParametersUiRouteEnhancer.php
modules/contrib/parameters/modules/parameters_ui/src/Routing/ParametersUiRouteSubscriber.php
modules/contrib/parameters/parameters.install
modules/contrib/parameters/parameters.tokens.inc
modules/contrib/parameters/src/Annotation/Parameter.php
modules/contrib/parameters/src/Entity/ParametersCollection.php
modules/contrib/parameters/src/Entity/ParametersCollectionInterface.php
modules/contrib/parameters/src/Entity/ParametersCollectionStorage.php
modules/contrib/parameters/src/Event/CollectionsPreparationEvent.php
modules/contrib/parameters/src/Event/ParameterEvents.php
modules/contrib/parameters/src/Exception/ParameterNotFoundException.php
modules/contrib/parameters/src/Parameter.php
modules/contrib/parameters/src/ParameterRepository.php
modules/contrib/parameters/src/Plugin/Parameter/Integer.php
modules/contrib/parameters/src/Plugin/Parameter/MachineName.php
modules/contrib/parameters/src/Plugin/Parameter/NullObject.php
modules/contrib/parameters/src/Plugin/Parameter/RawString.php
modules/contrib/parameters/src/Plugin/Parameter/Reference.php
modules/contrib/parameters/src/Plugin/Parameter/Text.php
modules/contrib/parameters/src/Plugin/Parameter/Yaml.php
modules/contrib/parameters/src/Plugin/ParameterBase.php
modules/contrib/parameters/src/Plugin/ParameterInterface.php
modules/contrib/parameters/src/Plugin/ParameterManager.php
modules/contrib/parameters/src/Plugin/ParameterPluginCollection.php
modules/contrib/parameters/src/Plugin/PropertyParameterInterface.php
modules/contrib/parameters/tests/src/Kernel/ParametersTokenTest.php

3 files with changes
====================

1) modules/contrib/parameters/src/Plugin/Parameter/Yaml.php:29

    ---------- begin diff ----------
@@ @@
    * @var \Drupal\parameters\Plugin\ParameterManager
    */
   protected ParameterManager $parameterManager;
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, \Drupal\parameters\Plugin\ParameterManager $parameterManager)
+  {
+      $this->parameterManager = $parameterManager;
+      parent::__construct($configuration, $plugin_id, $plugin_definition);
+  }

   /**
    * {@inheritdoc}
@@ @@
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     /** @var \Drupal\parameters\Plugin\Parameter\Yaml $instance */
     $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
-    $instance->setParameterManager($container->get(ParameterManager::SERVICE_NAME));
+    $instance->setParameterManager($this->parameterManager);
     return $instance;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/parameters/modules/parameters_ui/src/Form/ParametersCollectionForm.php:31

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
    *   The route match.
    */
-  public function __construct(ParameterManager $parameter_manager, RouteMatchInterface $route_match) {
+  public function __construct(ParameterManager $parameter_manager, RouteMatchInterface $route_match, \Drupal\parameters\Plugin\ParameterManager $parameterManager) {
     $this->parameterManager = $parameter_manager;
     $this->routeMatch = $route_match;
+    $this->parameterManager = $parameterManager;
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    $instance = new static($container->get(ParameterManager::SERVICE_NAME), $container->get('current_route_match'));
+    $instance = new static($this->parameterManager, $container->get('current_route_match'));
     $instance->setEntityTypeManager($container->get('entity_type.manager'));
     $instance->setModuleHandler($container->get('module_handler'));
     $instance->setRedirectDestination($container->get('redirect.destination'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/parameters/modules/parameters_ui/src/Controller/ParametersUiController.php:27

    ---------- begin diff ----------
@@ @@
    * @var \Drupal\parameters\Plugin\ParameterManager
    */
   protected ParameterManager $parameterManager;
+  public function __construct(\Drupal\parameters\Plugin\ParameterManager $parameterManager)
+  {
+      $this->parameterManager = $parameterManager;
+  }

   /**
    * {@inheritdoc}
@@ @@
     /** @var \Drupal\parameters_ui\Controller\ParametersUiController $instance */
     $instance = parent::create($container);
     $instance->setCollectionStorage($container->get('entity_type.manager')->getStorage(ParametersCollectionInterface::ENTITY_TYPE_ID));
-    $instance->setParameterManager($container->get(ParameterManager::SERVICE_NAME));
+    $instance->setParameterManager($this->parameterManager);
     return $instance;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

