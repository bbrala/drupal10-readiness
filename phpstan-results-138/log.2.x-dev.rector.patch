diff --git a/tests/src/Functional/LogActionsTest.php b/tests/src/Functional/LogActionsTest.php
index 993793d..0f5b051 100644
--- a/tests/src/Functional/LogActionsTest.php
+++ b/tests/src/Functional/LogActionsTest.php
@@ -24,15 +24,22 @@ class LogActionsTest extends LogTestBase {
     $log->save();
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
 
     $edit = [];
     $edit['action'] = 'log_clone_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to clone this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to clone this log?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));
 
@@ -40,17 +47,20 @@ class LogActionsTest extends LogTestBase {
     $edit_clone['date[month]'] = date('n', $new_timestamp);
     $edit_clone['date[year]'] = date('Y', $new_timestamp);
     $edit_clone['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_clone, $this->t('Clone'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Cloned 1 log'));
+    $this->submitForm($edit_clone, $this->t('Clone'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Cloned 1 log'));
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 2, 'There are two logs in the system.');
+    $this->assertEquals(count($logs), 2, 'There are two logs in the system.');
     $timestamps = [];
     foreach ($logs as $log) {
       $timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($timestamps, [$timestamp, $new_timestamp], 'Timestamp on the new log has been updated.');
+    $this->assertEquals($timestamps, [$timestamp, $new_timestamp], 'Timestamp on the new log has been updated.');
   }
 
   /**
@@ -74,17 +84,24 @@ class LogActionsTest extends LogTestBase {
     }
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');
 
     $edit = [];
     $edit['action'] = 'log_clone_action';
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to clone these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to clone these logs?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));
 
@@ -92,13 +109,16 @@ class LogActionsTest extends LogTestBase {
     $edit_clone['date[month]'] = date('n', $new_timestamp);
     $edit_clone['date[year]'] = date('Y', $new_timestamp);
     $edit_clone['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_clone, $this->t('Clone'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Cloned 3 logs'));
+    $this->submitForm($edit_clone, $this->t('Clone'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Cloned 3 logs'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 6, 'There are six logs in the system.');
+    $this->assertEquals(count($logs), 6, 'There are six logs in the system.');
     for ($i = 1; $i <= 3; $i++) {
       $expected_timestamps[] = $new_timestamp;
     }
@@ -106,7 +126,7 @@ class LogActionsTest extends LogTestBase {
     foreach ($logs as $log) {
       $log_timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($log_timestamps, $expected_timestamps, 'Timestamp on the new logs has been updated.');
+    $this->assertEquals($log_timestamps, $expected_timestamps, 'Timestamp on the new logs has been updated.');
   }
 
   /**
@@ -124,15 +144,22 @@ class LogActionsTest extends LogTestBase {
     $log->save();
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule this log?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));
 
@@ -140,16 +167,19 @@ class LogActionsTest extends LogTestBase {
     $edit_reschedule['date[month]'] = date('n', $new_timestamp);
     $edit_reschedule['date[year]'] = date('Y', $new_timestamp);
     $edit_reschedule['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 1 log'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 1 log'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
     $log = reset($logs);
-    $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-    $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+    $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+    $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
   }
 
   /**
@@ -173,17 +203,24 @@ class LogActionsTest extends LogTestBase {
     }
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule these logs?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime('+1 day', $timestamp);
 
@@ -191,16 +228,19 @@ class LogActionsTest extends LogTestBase {
     $edit_reschedule['date[month]'] = date('n', $new_timestamp);
     $edit_reschedule['date[year]'] = date('Y', $new_timestamp);
     $edit_reschedule['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 3 logs'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 3 logs'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 3, 'There are three logs in the system.');
+    $this->assertEquals(count($logs), 3, 'There are three logs in the system.');
     foreach ($logs as $log) {
-      $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-      $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+      $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+      $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
     }
   }
 
@@ -219,22 +259,32 @@ class LogActionsTest extends LogTestBase {
     $log->save();
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule this log?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $edit_reschedule = [];
     $edit_reschedule['type_of_date'] = 1;
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log/reschedule');
-    $this->assertText($this->t('Please enter the amount of time for rescheduling.'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log/reschedule');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Please enter the amount of time for rescheduling.'));
 
     $new_timestamp = strtotime('+1 day', $timestamp);
 
@@ -242,16 +292,19 @@ class LogActionsTest extends LogTestBase {
     $edit_reschedule['type_of_date'] = 1;
     $edit_reschedule['amount'] = 1;
     $edit_reschedule['time'] = 'day';
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 1 log'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 1 log'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
     $log = reset($logs);
-    $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-    $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+    $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+    $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
   }
 
   /**
@@ -276,34 +329,44 @@ class LogActionsTest extends LogTestBase {
     }
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule these logs?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $edit_reschedule = [];
     $edit_reschedule['type_of_date'] = 1;
     $edit_reschedule['amount'] = -1;
     $edit_reschedule['time'] = 'month';
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 3 logs'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 3 logs'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 3, 'There are three logs in the system.');
+    $this->assertEquals(count($logs), 3, 'There are three logs in the system.');
     $log_timestamps = [];
     foreach ($logs as $log) {
       $log_timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($log_timestamps, $expected_timestamps, 'Logs have been rescheduled');
+    $this->assertEquals($log_timestamps, $expected_timestamps, 'Logs have been rescheduled');
   }
 
 }
