modules/contrib/elasticsearch_helper/elasticsearch_helper.api.php
modules/contrib/elasticsearch_helper/elasticsearch_helper.install
modules/contrib/elasticsearch_helper/elasticsearch_helper.module
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/EventSubscriber/ReindexEventSubscriber.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/MultilingualContentIndex.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/SimpleNodeIndex.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/TimeBasedIndex.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/Normalizer/NodeNormalizer.php
modules/contrib/elasticsearch_helper/src/Annotation/ElasticsearchIndex.php
modules/contrib/elasticsearch_helper/src/Commands/ElasticsearchHelperCommands.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataType.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataTypeRepository.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataTypeRepositoryInterface.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DefinitionBase.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/FieldDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/IndexDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/MappingDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/SettingsDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/TypeTrait.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/ObjectTrait.php
modules/contrib/elasticsearch_helper/src/ElasticsearchClientBuilder.php
modules/contrib/elasticsearch_helper/src/ElasticsearchClientVersion.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHelperQueue.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHelperQueueFactory.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHelperQueueFactoryDecorator.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHost.php
modules/contrib/elasticsearch_helper/src/ElasticsearchLanguageAnalyzer.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestResult.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestResultInterface.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestWrapper.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestWrapperInterface.php
modules/contrib/elasticsearch_helper/src/Event/DataTypeDefinitionBuildEvent.php
modules/contrib/elasticsearch_helper/src/Event/DataTypeEvents.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchEvents.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchHelperCallbackEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchHelperEvents.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationErrorEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestResultEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperations.php
modules/contrib/elasticsearch_helper/src/Event/OperationPermissionInterface.php
modules/contrib/elasticsearch_helper/src/Event/OperationPermissionTrait.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/LoggingEventSubscriber.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/MessagingEventSubscriber.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/QueueIndexEventSubscriber.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/TypeEventSubscriber.php
modules/contrib/elasticsearch_helper/src/Form/ElasticsearchHelperSettingsForm.php
modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexBase.php
modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexInterface.php
modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexManager.php
modules/contrib/elasticsearch_helper/src/Plugin/QueueWorker/IndexingQueueWorker.php
modules/contrib/elasticsearch_helper/tests/modules/elasticsearch_helper_test/src/Plugin/ElasticsearchIndex/NodeIndex.php
modules/contrib/elasticsearch_helper/tests/modules/elasticsearch_helper_test/src/Plugin/ElasticsearchIndex/SimpleNodeIndex.php
modules/contrib/elasticsearch_helper/tests/modules/elasticsearch_helper_test/src/Plugin/Normalizer/NodeNormalizer.php
modules/contrib/elasticsearch_helper/tests/src/FunctionalJavascript/EntityOpsTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexMappingTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/QueueWorkerTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/UniqueQueueTest.php
modules/contrib/elasticsearch_helper/tests/src/Unit/ElasticsearchClientVersionTest.php

14 files with changes
=====================

1) modules/contrib/elasticsearch_helper/tests/src/Unit/ElasticsearchClientVersionTest.php:66

    ---------- begin diff ----------
@@ @@
    * @covers ::getPatchVersion
    * @covers ::getVersionParts
    * @covers ::getVersion
+   * @doesNotPerformAssertions
    */
   public function testGetPatchVersion() {
     $result = ElasticsearchClientVersion::getPatchVersion();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/elasticsearch_helper/tests/src/Kernel/UniqueQueueTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['elasticsearch_helper']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/elasticsearch_helper/tests/src/Kernel/QueueWorkerTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
@@ @@

     // Process the queue items and ensure that index was updated too.
     $item = $queue->claimItem();
-    $this->assertEqual($node1->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
+    $this->assertEquals($node1->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
     $queue_worker->processItem($item->data);
     $queue->deleteItem($item);

     $item = $queue->claimItem();
-    $this->assertEqual($node2->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
+    $this->assertEquals($node2->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
     $queue_worker->processItem($item->data);
     $queue->deleteItem($item);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['elasticsearch_helper']);
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
-    $this->assertEqual($response['hits']['hits'][0]['_source']['status'], TRUE, 'Status field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['status'], TRUE, 'Status field is found in document');
   }

   /**
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');

     // Update the node title.
     $new_title = $this->randomMachineName();
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $new_title, 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $new_title, 'Title field is found in document');
   }

   /**
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');

     // Delete node.
     $this->node->delete();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexMappingTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['elasticsearch_helper']);
@@ @@
       $properties = $response[$index_name]['mappings']['node']['properties'];
     }

-    $this->assertEqual($properties['id']['type'], 'integer', 'ID field is found');
-    $this->assertEqual($properties['status']['type'], 'boolean', 'Status field is found');
-    $this->assertEqual($properties['title']['type'], 'text', 'Title field is found');
-    $this->assertEqual($properties['uuid']['type'], 'keyword', 'UUID field is found');
+    $this->assertEquals($properties['id']['type'], 'integer', 'ID field is found');
+    $this->assertEquals($properties['status']['type'], 'boolean', 'Status field is found');
+    $this->assertEquals($properties['title']['type'], 'text', 'Title field is found');
+    $this->assertEquals($properties['uuid']['type'], 'keyword', 'UUID field is found');
   }

   /**
@@ @@
       ]
     ];

-    $this->assertEqual($mapping_definition->toArray(), $expected);
+    $this->assertEquals($mapping_definition->toArray(), $expected);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexBase.php:170

    ---------- begin diff ----------
@@ @@
    */
   protected function dispatchOperationEvent($operation, $source = NULL) {
     $event = new ElasticsearchOperationEvent($operation, $this, $source);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION, $event);
+    $this->getEventDispatcher()->dispatch($event, ElasticsearchEvents::OPERATION);

     return $event;
   }
@@ @@
    */
   protected function dispatchOperationErrorEvent(\Throwable $error, $operation, ElasticsearchRequestWrapperInterface $request_wrapper = NULL, $source = NULL) {
     $event = new ElasticsearchOperationErrorEvent($error, $operation, $this, $request_wrapper, $source);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_ERROR, $event);
+    $this->getEventDispatcher()->dispatch($event, ElasticsearchEvents::OPERATION_ERROR);

     return $event;
   }
@@ @@
           $params = [$entity_type, $bundle];

           $event = new ElasticsearchHelperCallbackEvent($operation, $callback, $params, $this);
-          $this->getEventDispatcher()->dispatch($operation, $event);
+          $this->getEventDispatcher()->dispatch($event, $operation);

           call_user_func_array($event->getCallback(), $event->getCallbackParameters());
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestResultEvent.php:10

    ---------- begin diff ----------
@@ @@
  * This event should be used after resulting response is received from
  * Elasticsearch.
  */
-class ElasticsearchOperationRequestResultEvent extends Event {
+class ElasticsearchOperationRequestResultEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Elasticsearch request result.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestEvent.php:12

    ---------- begin diff ----------
@@ @@
  *
  * @see \Drupal\elasticsearch_helper\Event\ElasticsearchHelperCallbackEvent
  */
-class ElasticsearchOperationRequestEvent extends Event {
+class ElasticsearchOperationRequestEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Elasticsearch request wrapper instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationEvent.php:16

    ---------- begin diff ----------
@@ @@
  * $event->isOperationAllowed() where event is being emitted to check if
  * operation is allowed to proceed.
  */
-class ElasticsearchOperationEvent extends Event implements OperationPermissionInterface {
+class ElasticsearchOperationEvent extends \Symfony\Contracts\EventDispatcher\Event implements OperationPermissionInterface {

   use OperationPermissionTrait;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationErrorEvent.php:18

    ---------- begin diff ----------
@@ @@
  *
  * @see \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
  */
-class ElasticsearchOperationErrorEvent extends Event {
+class ElasticsearchOperationErrorEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Error that was caught.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchHelperCallbackEvent.php:12

    ---------- begin diff ----------
@@ @@
  *
  * @see \Drupal\elasticsearch_helper\Event\ElasticsearchOperationRequestEvent
  */
-class ElasticsearchHelperCallbackEvent extends Event {
+class ElasticsearchHelperCallbackEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Elasticsearch operation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/elasticsearch_helper/src/Event/DataTypeDefinitionBuildEvent.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * Class DataTypeDefinitionBuildEvent
  */
-class DataTypeDefinitionBuildEvent extends Event {
+class DataTypeDefinitionBuildEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * @var array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/elasticsearch_helper/src/ElasticsearchRequestWrapper.php:122

    ---------- begin diff ----------
@@ @@
     // Create request event.
     $request_event = new ElasticsearchOperationRequestEvent($this);
     // Dispatch the request event.
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_REQUEST, $request_event);
+    $this->getEventDispatcher()->dispatch($request_event, ElasticsearchEvents::OPERATION_REQUEST);

     // Execute the request.
     $result = $this->executeCallback();
@@ @@
    */
   protected function dispatchRequestResultEvent(ElasticsearchRequestResultInterface $result) {
     $result_event = new ElasticsearchOperationRequestResultEvent($result);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_REQUEST_RESULT, $result_event);
+    $this->getEventDispatcher()->dispatch($result_event, ElasticsearchEvents::OPERATION_REQUEST_RESULT);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataTypeRepository.php:97

    ---------- begin diff ----------
@@ @@

         // Allow modules to alter the definitions.
         $event = new DataTypeDefinitionBuildEvent($definitions);
-        $this->eventDispatcher->dispatch(DataTypeEvents::BUILD, $event);
+        $this->eventDispatcher->dispatch($event, DataTypeEvents::BUILD);

         // Store in cache.
         $this->cacheSet($this->cacheId, $event->getDataTypeDefinitions(), Cache::PERMANENT, $this->getCacheTags());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 14 files have been changed by Rector                                      

