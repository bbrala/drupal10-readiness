modules/contrib/workbench_menu_access/src/Form/WorkbenchMenuAccessMenuForm.php
modules/contrib/workbench_menu_access/src/Form/WorkbenchMenuAccessSettingsForm.php
modules/contrib/workbench_menu_access/src/WorkbenchMenuAccessControlHandler.php
modules/contrib/workbench_menu_access/src/WorkbenchMenuLinkContentAccessControlHandler.php
modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php
modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessMenuTest.php
modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessNodeFormTest.php
modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessSettingsTest.php
modules/contrib/workbench_menu_access/tests/src/Traits/WorkbenchMenuAccessTestTrait.php
modules/contrib/workbench_menu_access/workbench_menu_access.module

4 files with changes
====================

1) modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessSettingsTest.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->node_type = $this->createContentType(['type' => 'page']);
@@ @@
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');

     // Access tests.
     $path = '/admin/config/workflow/workbench_access/menu_settings';
     $this->drupalGet($path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
     $this->drupalLogin($this->admin);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');

     // Form tests.
-    $this->assertText('You must create an access scheme to continue.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You must create an access scheme to continue.');

     $this->setUpTaxonomyScheme($this->node_type, $this->vocabulary);
     $this->drupalGet($path);
-    $this->assertNoText('You must create an access scheme to continue.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('You must create an access scheme to continue.');

     $web_assert = $this->assertSession();
     $web_assert->optionExists('access_scheme', 'Editorial section');
@@ @@
     $option_field = $web_assert->optionExists('access_scheme', 'Editorial section');
     $this->assertTrue($option_field->hasAttribute('selected'), 'Item selected');

-    $this->assertText('The taxonomy scheme Editorial section is used for menu access.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The taxonomy scheme Editorial section is used for menu access.');

     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, 'editorial_section');
+    $this->assertEquals($active, 'editorial_section');
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessNodeFormTest.php:68

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->node_type = $this->createContentType(['type' => 'page']);
@@ @@
       'menu_options[main]' => 1,
       'menu_parent' => 'main:',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, t('Save content type'));
     $this->node_type = $menu = \Drupal::entityTypeManager()->getStorage('node_type')->load('page');
     $this->assertNotEmpty($this->node_type->getThirdPartySetting('menu_ui', 'available_menus'));

@@ @@
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');

     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ @@
     // Nothing is configured to restrict access.
     $this->drupalLogin($this->admin);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('empty');

     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('empty');

@@ @@
     // Check node forms as admin and editor.
     // Main menu is configured to restrict access.
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('main');

     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertNoText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Provide a menu link');

     // Expand the menu options of the node type.
     $this->drupalLogin($this->admin);
@@ @@
       'menu_options[main]' => 1,
       'menu_parent' => 'main:',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, t('Save content type'));

     // Check node forms as admin and editor.
     // Main menu is configured to restrict access but 'new' is not and should
@@ @@

     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('new');

     $this->drupalLogin($this->admin);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('all');

@@ @@
     // Main menu is configured to restrict access but 'new' is not and should
     // return data.
     $this->drupalGet($node_edit_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('all');

     $this->drupalLogin($this->editor);
     $this->drupalGet($node_edit_path);
-    $this->assertText('You may not edit the menu this content is assigned to.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You may not edit the menu this content is assigned to.');

     // Remove new from the options.
     $this->drupalLogin($this->admin);
@@ @@
       'menu_options[main]' => 1,
       'menu_parent' => 'main:',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, t('Save content type'));

     // Add editor to the menu section.
     $this->addUserToSection($scheme, $this->editor, [3]);

     $this->drupalGet($node_edit_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('main');

     $this->drupalLogin($this->editor);
     $this->drupalGet($node_edit_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('main');

@@ @@
     // Check node forms as admin and editor.
     // Main menu is configured to restrict access and the editor has it.
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('main', 'Node 1');

     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');

     $this->checkOptions('main', 'Node 1');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessMenuTest.php:67

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->node_type = $this->createContentType(['type' => 'page']);
@@ @@
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');

     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ @@
     $path = '/admin/structure/menu/manage/main';
     $access_path = '/admin/structure/menu/manage/main/access';
     $this->drupalGet($path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');

     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
     $web_assert = $this->assertSession();
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');

     $this->drupalLogin($this->admin);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldNotExists('workbench_menu_access[]');
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->pageTextContains('You must configure an access scheme to continue.');

     // Setup config.
@@ @@
     // Admin can access the form.
     $this->drupalLogin($this->admin);
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldExists('workbench_menu_access[]');

     // Save the form.
@@ @@

     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
-    $this->assertEqual(array_values($menu->getThirdPartySetting('workbench_menu_access', 'access_scheme')), $edit);
+    $this->assertEquals(array_values($menu->getThirdPartySetting('workbench_menu_access', 'access_scheme')), $edit);

     // Editor can no longer access page.
     $this->drupalLogin($this->editor);
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');

     // Editor can access the menu page but not the access form.
     $this->addUserToSection($scheme, $this->editor, [3]);
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');

     // Admin can access the form.
     $this->drupalLogin($this->admin);
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldExists('workbench_menu_access[]');

     // Test for subsection handling.
@@ @@
     // Editor can access the page but not the form.
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/workbench_menu_access/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php:67

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->node_type = $this->createContentType(['type' => 'page']);
@@ @@
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');

     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ @@
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');

       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');

       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }

     // Setup config.
@@ @@
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');

       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to editor user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');

       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }

     // Add editor to section.
@@ @@
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');

       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');

       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }

     // Test for subsection handling.
@@ @@
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');

       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');

       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

