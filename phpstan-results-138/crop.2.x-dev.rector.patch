diff --git a/src/Events/AutomaticCrop.php b/src/Events/AutomaticCrop.php
index cc893d4..5b26fd1 100644
--- a/src/Events/AutomaticCrop.php
+++ b/src/Events/AutomaticCrop.php
@@ -10,7 +10,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Represents automatic crop action as event.
  */
-class AutomaticCrop extends Event {
+class AutomaticCrop extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The crop entity.
diff --git a/src/Events/AutomaticCropProviders.php b/src/Events/AutomaticCropProviders.php
index 05daad3..6a7edad 100644
--- a/src/Events/AutomaticCropProviders.php
+++ b/src/Events/AutomaticCropProviders.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Collects "Automatic crop" providers.
  */
-class AutomaticCropProviders extends Event {
+class AutomaticCropProviders extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Automatic Crop provider list.
diff --git a/src/Plugin/ImageEffect/CropEffect.php b/src/Plugin/ImageEffect/CropEffect.php
index f6930b6..af27c8c 100644
--- a/src/Plugin/ImageEffect/CropEffect.php
+++ b/src/Plugin/ImageEffect/CropEffect.php
@@ -222,7 +222,7 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
       /** @var \Drupal\crop\Entity\CropType $crop_type */
       $crop_type = $this->typeStorage->load($this->configuration['crop_type']);
       $automatic_crop_event = new AutomaticCrop($image, $crop_type, $this->configuration);
-      $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP, $automatic_crop_event);
+      $this->eventDispatcher->dispatch($automatic_crop_event, Events::AUTOMATIC_CROP);
       $this->crop = $automatic_crop_event->getCrop();
     }
 
@@ -264,7 +264,7 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
    */
   public function getAutomaticCropProvidersList() {
     $event = new AutomaticCropProviders();
-    $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP_PROVIDERS, $event);
+    $this->eventDispatcher->dispatch($event, Events::AUTOMATIC_CROP_PROVIDERS);
 
     return $event->getProviders();
   }
diff --git a/tests/src/Functional/CropFunctionalTest.php b/tests/src/Functional/CropFunctionalTest.php
index dd69e5b..8eec239 100644
--- a/tests/src/Functional/CropFunctionalTest.php
+++ b/tests/src/Functional/CropFunctionalTest.php
@@ -51,7 +51,7 @@ class CropFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser(['administer crop types', 'administer image styles']);
@@ -165,7 +165,7 @@ class CropFunctionalTest extends BrowserTestBase {
    */
   protected function doTestFileUriAlter() {
     // Get the test file.
-    \Drupal::service('file_system')->copy(drupal_get_path('module', 'crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
+    \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
     $file_uri = 'public://sarajevo.png';
     $file = File::create(['uri' => $file_uri, 'status' => FILE_STATUS_PERMANENT]);
     $file->save();
@@ -192,7 +192,7 @@ class CropFunctionalTest extends BrowserTestBase {
     // Build an image style derivative for the file URI.
     $image_style_uri = $this->testStyle->buildUri($file_uri);
 
-    $image_style_uri_url = file_create_url($image_style_uri);
+    $image_style_uri_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_style_uri);
     $this->assertTrue(strpos($image_style_uri_url, $shortened_hash) !== FALSE, 'The image style URL contains a shortened hash.');
 
     $image_style_url = $this->testStyle->buildUrl($file_uri);
diff --git a/tests/src/Kernel/CropUnitTestBase.php b/tests/src/Kernel/CropUnitTestBase.php
index a12fcb5..6b85f3c 100644
--- a/tests/src/Kernel/CropUnitTestBase.php
+++ b/tests/src/Kernel/CropUnitTestBase.php
@@ -62,7 +62,7 @@ abstract class CropUnitTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
@@ -113,7 +113,7 @@ abstract class CropUnitTestBase extends KernelTestBase {
    *   File object.
    */
   protected function getTestFile() {
-    \Drupal::service('file_system')->copy(drupal_get_path('module', 'crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
+    \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
     return $this->fileStorage->create([
       'uri' => 'public://sarajevo.png',
       'status' => FILE_STATUS_PERMANENT,
