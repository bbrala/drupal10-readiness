modules/contrib/post_api/post_api.module
modules/contrib/post_api/src/Event/QueueItemProcessedEvent.php
modules/contrib/post_api/src/Event/QueueProcessingCompleteEvent.php
modules/contrib/post_api/src/Form/PostApiQueueForm.php
modules/contrib/post_api/src/Form/PostApiSettingsForm.php
modules/contrib/post_api/src/Plugin/QueueWorker/PostApiQueueBase.php
modules/contrib/post_api/src/Plugin/QueueWorker/PostApiQueueWorker.php
modules/contrib/post_api/src/Service/AddToQueue.php
modules/contrib/post_api/src/Service/Request.php
modules/contrib/post_api/tests/src/Kernel/PostApiQueueTest.php

4 files with changes
====================

1) modules/contrib/post_api/tests/src/Kernel/PostApiQueueTest.php:45

    ---------- begin diff ----------
@@ @@

   /**
    * Tests the Post API queue.
+   * @doesNotPerformAssertions
    */
   public function testPostApiQueue() {
     // Create queue.
@@ @@
     $new_items[] = $item->data;

     // First two dequeued items should match the first two items we queued.
-    $this->assertEqual($this->queueScore($data, $new_items), 2, 'Two items matched');
+    $this->assertEquals($this->queueScore($data, $new_items), 2, 'Two items matched');

     // Add two more items.
     $queue->createItem($data[2]);
@@ @@

     // All dequeued items should match the items we queued exactly once,
     // therefore the score must be exactly 4.
-    $this->assertEqual($this->queueScore($data, $new_items), 4, 'Four items matched');
+    $this->assertEquals($this->queueScore($data, $new_items), 4, 'Four items matched');

     // There should be no duplicate items.
-    $this->assertEqual($this->queueScore($new_items, $new_items), 4, 'Four items matched');
+    $this->assertEquals($this->queueScore($new_items, $new_items), 4, 'Four items matched');

     $this->clearQueue($queue, $items);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/post_api/src/Plugin/QueueWorker/PostApiQueueBase.php:136

    ---------- begin diff ----------
@@ @@
           // Dispatch an event to which Event Subscribers can react.
           // E.g. need special logging for various 20* responses.
           $event_item_processed = new QueueItemProcessedEvent($response_code, $item->data);
-          $this->eventDispatcher->dispatch('post_api_queue_item_processed_event', $event_item_processed);
+          $this->eventDispatcher->dispatch($event_item_processed, 'post_api_queue_item_processed_event');

           // API POST is a success - delete processed item from queue.
           $queue->deleteItem($item);
@@ @@

     // Dispatch an event to which Event Subscribers can react.
     $event_queue_complete = new QueueProcessingCompleteEvent($number_in_queue, $number_released);
-    $this->eventDispatcher->dispatch('post_api_queue_processing_complete_event', $event_queue_complete);
+    $this->eventDispatcher->dispatch($event_queue_complete, 'post_api_queue_processing_complete_event');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/post_api/src/Event/QueueProcessingCompleteEvent.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * Defines the Queue processing finished event.
  */
-class QueueProcessingCompleteEvent extends Event {
+class QueueProcessingCompleteEvent extends \Symfony\Contracts\EventDispatcher\Event {

   const EVENT_NAME = 'post_api_queue_processing_complete_event';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/post_api/src/Event/QueueItemProcessedEvent.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * Defines the "Queue Item Processed" event.
  */
-class QueueItemProcessedEvent extends Event {
+class QueueItemProcessedEvent extends \Symfony\Contracts\EventDispatcher\Event {

   const EVENT_NAME = 'post_api_queue_item_processed_event';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

