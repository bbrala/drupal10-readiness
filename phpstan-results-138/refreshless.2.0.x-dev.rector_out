modules/contrib/refreshless/refreshless.module
modules/contrib/refreshless/src/Ajax/RefreshlessUpdateHtmlHeadCommand.php
modules/contrib/refreshless/src/Ajax/RefreshlessUpdateRegionCommand.php
modules/contrib/refreshless/src/EventSubscriber/BlockPageDisplayVariantSubscriber.php
modules/contrib/refreshless/src/EventSubscriber/HtmlResponseSubscriber.php
modules/contrib/refreshless/src/EventSubscriber/RedirectResponseSubscriber.php
modules/contrib/refreshless/src/Plugin/DisplayVariant/RefreshlessBlockPageVariant.php
modules/contrib/refreshless/src/RefreshlessPageState.php
modules/contrib/refreshless/src/Render/MainContent/RefreshlessRenderer.php

2 files with changes
====================

1) modules/contrib/refreshless/src/EventSubscriber/RedirectResponseSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Ensures that requests with wrapper formats also have functioning redirects.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The Event to process.
    */
-  public function onRedirectResponse(FilterResponseEvent $event) {
+  public function onRedirectResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     $response = $event->getResponse();
     // Only local redirects need to be updated to have the wrapper format.
     if ($response instanceof LocalRedirectResponse) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/refreshless/src/EventSubscriber/HtmlResponseSubscriber.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Processes HTML responses to allow Refreshless' JavaScript to work.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof HtmlResponse) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

