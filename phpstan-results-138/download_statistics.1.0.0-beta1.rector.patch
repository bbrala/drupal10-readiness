diff --git a/download_statistics.module b/download_statistics.module
index bd06932..5750230 100644
--- a/download_statistics.module
+++ b/download_statistics.module
@@ -76,7 +76,7 @@ function download_statistics_preprocess_file_link(array &$variables) {
     // Add the prefix.
     $file_uri = $file->getFileUri();
     $file_uri = str_replace('private://', 'private://download-count/', $file_uri);
-    $url = file_create_url($file_uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_uri);
     $mime_type = $file->getMimeType();
     $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();
     // Use the description as the link text if available.
diff --git a/src/Plugin/Block/DownloadStatisticsPopularBlock.php b/src/Plugin/Block/DownloadStatisticsPopularBlock.php
index 043531e..6f92515 100644
--- a/src/Plugin/Block/DownloadStatisticsPopularBlock.php
+++ b/src/Plugin/Block/DownloadStatisticsPopularBlock.php
@@ -207,7 +207,7 @@ class DownloadStatisticsPopularBlock extends BlockBase implements ContainerFacto
       $item = [
         '#type' => 'link',
         '#title' => $file->getFilename(),
-        '#url' => Url::fromUri(file_create_url($file->getFileUri())),
+        '#url' => \Drupal::service('file_url_generator')->generate($file->getFileUri()),
       ];
       $this->renderer->addCacheableDependency($item, $file);
       $items[] = $item;
diff --git a/src/Plugin/Field/FieldFormatter/DownloadStatisticsFileUriFormatter.php b/src/Plugin/Field/FieldFormatter/DownloadStatisticsFileUriFormatter.php
index 0c01cdd..c229f47 100644
--- a/src/Plugin/Field/FieldFormatter/DownloadStatisticsFileUriFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/DownloadStatisticsFileUriFormatter.php
@@ -34,7 +34,7 @@ class DownloadStatisticsFileUriFormatter extends FileUriFormatter {
       // @todo Wrap in file_url_transform_relative(). This is currently
       // impossible. See BaseFieldFileFormatterBase::viewElements(). Fix in
       // https://www.drupal.org/node/2646744.
-      $value = file_create_url($value);
+      $value = \Drupal::service('file_url_generator')->generateAbsoluteString($value);
     }
     return $value;
   }
diff --git a/src/Tests/DownloadStatisticsTestBase.php b/src/Tests/DownloadStatisticsTestBase.php
index 0a24f4c..24cef87 100644
--- a/src/Tests/DownloadStatisticsTestBase.php
+++ b/src/Tests/DownloadStatisticsTestBase.php
@@ -28,7 +28,7 @@ abstract class DownloadStatisticsTestBase extends BrowserTestBase {
    *
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
     // Create Basic page node type.
diff --git a/src/Tests/Views/IntegrationTest.php b/src/Tests/Views/IntegrationTest.php
index 2adb271..e96046c 100644
--- a/src/Tests/Views/IntegrationTest.php
+++ b/src/Tests/Views/IntegrationTest.php
@@ -54,7 +54,7 @@ class IntegrationTest extends ViewTestBase {
 
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp();
 
     ViewTestData::createTestViews(get_class($this), ['statistics_test_views']);
@@ -80,7 +80,7 @@ class IntegrationTest extends ViewTestBase {
     // Manually calling statistics.php, simulating ajax behavior.
     // @see \Drupal\download_statistics\Tests\StatisticsLoggingTest::testLogging().
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $client = \Drupal::httpClient();
     $client->post($stats_path, ['form_params' => ['nid' => $this->node->id()]]);
     $this->drupalGet('test_statistics_integration');
@@ -98,7 +98,7 @@ class IntegrationTest extends ViewTestBase {
     $this->drupalLogout();
     $this->drupalLogin($this->deniedUser);
     $this->drupalGet('test_statistics_integration');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     foreach ($expected as $field => $value) {
       $xpath = "//div[contains(@class, views-field-$field)]/span[@class = 'field-content']";
diff --git a/tests/src/Functional/DownloadStatisticsAdminTest.php b/tests/src/Functional/DownloadStatisticsAdminTest.php
index bde2fdb..c31ad2f 100644
--- a/tests/src/Functional/DownloadStatisticsAdminTest.php
+++ b/tests/src/Functional/DownloadStatisticsAdminTest.php
@@ -42,7 +42,7 @@ class DownloadStatisticsAdminTest extends BrowserTestBase {
    */
   protected $client;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page node type.
@@ -69,19 +69,23 @@ class DownloadStatisticsAdminTest extends BrowserTestBase {
     $nid = $this->testNode->id();
     $post = ['nid' => $nid];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $this->client->post($stats_path, ['form_params' => $post]);
 
-    $result = db_select('download_statistics', 'n')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->select('download_statistics', 'n')
       ->fields('n', ['nid'])
       ->condition('n.nid', $this->testNode->id())
       ->execute()
       ->fetchAssoc();
-    $this->assertEqual($result['nid'], $this->testNode->id(), 'Verifying that the node counter is incremented.');
+    $this->assertEquals($result['nid'], $this->testNode->id(), 'Verifying that the node counter is incremented.');
 
     $this->testNode->delete();
 
-    $result = db_select('download_statistics', 'n')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->select('download_statistics', 'n')
       ->fields('n', ['nid'])
       ->condition('n.nid', $this->testNode->id())
       ->execute()
@@ -101,11 +105,14 @@ class DownloadStatisticsAdminTest extends BrowserTestBase {
     $nid = $this->testNode->id();
     $post = ['nid' => $nid];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $this->client->post($stats_path, ['form_params' => $post]);
     $this->drupalGet('node/' . $this->testNode->id());
     $this->client->post($stats_path, ['form_params' => $post]);
-    $this->assertText('1 view', 'Node is viewed once.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 view');
 
     // download_statistics_cron() will subtract
     // download_statistics.settings:accesslog.max_lifetime config from
@@ -115,9 +122,14 @@ class DownloadStatisticsAdminTest extends BrowserTestBase {
     $this->cronRun();
 
     $this->drupalGet('admin/reports/pages');
-    $this->assertNoText('node/' . $this->testNode->id(), 'No hit URL found.');
-
-    $result = db_select('download_statistics', 'ds')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('node/' . $this->testNode->id());
+
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->select('download_statistics', 'ds')
       ->fields('ds', ['daycount'])
       ->condition('nid', $this->testNode->id(), '=')
       ->execute()
diff --git a/tests/src/Functional/DownloadStatisticsAttachedTest.php b/tests/src/Functional/DownloadStatisticsAttachedTest.php
index a8cbdd2..7f94361 100644
--- a/tests/src/Functional/DownloadStatisticsAttachedTest.php
+++ b/tests/src/Functional/DownloadStatisticsAttachedTest.php
@@ -22,7 +22,7 @@ class DownloadStatisticsAttachedTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page']);
@@ -51,7 +51,7 @@ class DownloadStatisticsAttachedTest extends BrowserTestBase {
     $node->save();
     $this->drupalGet('node/' . $node->id());
 
-    $this->assertRaw('core/modules/statistics/statistics.js', 'Statistics library is available');
+    $this->assertSession()->responseContains('core/modules/statistics/statistics.js');
   }
 
 }
diff --git a/tests/src/Functional/DownloadStatisticsLoggingTest.php b/tests/src/Functional/DownloadStatisticsLoggingTest.php
index a5ebfdd..29ad817 100644
--- a/tests/src/Functional/DownloadStatisticsLoggingTest.php
+++ b/tests/src/Functional/DownloadStatisticsLoggingTest.php
@@ -43,7 +43,7 @@ class DownloadStatisticsLoggingTest extends BrowserTestBase {
    */
   protected $client;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page node type.
@@ -72,8 +72,10 @@ class DownloadStatisticsLoggingTest extends BrowserTestBase {
       'label' => $this->randomMachineName(16),
       'direction' => 'ltr',
     ];
-    $this->drupalPostForm('admin/config/regional/language/add', $this->language, t('Add custom language'));
-    $this->drupalPostForm('admin/config/regional/language/detection', ['language_interface[enabled][language-url]' => 1], t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm($this->language, t('Add custom language'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm(['language_interface[enabled][language-url]' => 1], t('Save settings'));
     $this->drupalLogout();
 
     // Clear the logs.
@@ -86,7 +88,7 @@ class DownloadStatisticsLoggingTest extends BrowserTestBase {
    */
   public function testLogging() {
     $path = 'node/' . $this->node->id();
-    $module_path = drupal_get_path('module', 'statistics');
+    $module_path = \Drupal::service('extension.list.module')->getPath('statistics');
     $stats_path = base_path() . $module_path . '/statistics.php';
     $lib_path = base_path() . $module_path . '/statistics.js';
     $expected_library = '/<script src=".*?' . preg_quote($lib_path, '/.') . '.*?">/is';
@@ -94,33 +96,33 @@ class DownloadStatisticsLoggingTest extends BrowserTestBase {
     // Verify that logging scripts are not found on a non-node page.
     $this->drupalGet('node');
     $settings = $this->getDrupalSettings();
-    $this->assertNoPattern($expected_library, 'Statistics library JS not found on node page.');
+    $this->assertSession()->responseNotMatches($expected_library, 'Statistics library JS not found on node page.');
     $this->assertFalse(isset($settings['statistics']), 'Statistics settings not found on node page.');
 
     // Verify that logging scripts are not found on a non-existent node page.
     $this->drupalGet('node/9999');
     $settings = $this->getDrupalSettings();
-    $this->assertNoPattern($expected_library, 'Statistics library JS not found on non-existent node page.');
+    $this->assertSession()->responseNotMatches($expected_library, 'Statistics library JS not found on non-existent node page.');
     $this->assertFalse(isset($settings['statistics']), 'Statistics settings not found on node page.');
 
     // Verify that logging scripts are found on a valid node page.
     $this->drupalGet($path);
     $settings = $this->getDrupalSettings();
-    $this->assertPattern($expected_library, 'Found statistics library JS on node page.');
-    $this->assertIdentical($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on node page.');
+    $this->assertSession()->responseMatches($expected_library, 'Found statistics library JS on node page.');
+    $this->assertSame($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on node page.');
 
     // Verify the same when loading the site in a non-default language.
     $this->drupalGet($this->language['langcode'] . '/' . $path);
     $settings = $this->getDrupalSettings();
-    $this->assertPattern($expected_library, 'Found statistics library JS on a valid node page in a non-default language.');
-    $this->assertIdentical($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on valid node page in a non-default language.');
+    $this->assertSession()->responseMatches($expected_library, 'Found statistics library JS on a valid node page in a non-default language.');
+    $this->assertSame($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on valid node page in a non-default language.');
 
     // Manually call statistics.php to simulate ajax data collection behavior.
     global $base_root;
     $post = ['nid' => $this->node->id()];
     $this->client->post($base_root . $stats_path, ['form_params' => $post]);
     $node_counter = statistics_get($this->node->id());
-    $this->assertIdentical($node_counter['totalcount'], '1');
+    $this->assertSame($node_counter['totalcount'], '1');
 
     // Try fetching statistics for an invalid node ID and verify it returns
     // FALSE.
@@ -131,7 +133,7 @@ class DownloadStatisticsLoggingTest extends BrowserTestBase {
     // This is a test specifically for the deprecated statistics_get() function
     // and so should remain unconverted until that function is removed.
     $result = statistics_get($node_id);
-    $this->assertIdentical($result, FALSE);
+    $this->assertSame($result, FALSE);
   }
 
 }
diff --git a/tests/src/Functional/DownloadStatisticsReportsTest.php b/tests/src/Functional/DownloadStatisticsReportsTest.php
index 8706fe1..9ab4217 100644
--- a/tests/src/Functional/DownloadStatisticsReportsTest.php
+++ b/tests/src/Functional/DownloadStatisticsReportsTest.php
@@ -29,7 +29,7 @@ class DownloadStatisticsReportsTest extends DownloadStatisticsTestBase {
     $post = http_build_query(['nid' => $nid]);
     $headers = ['Content-Type' => 'application/x-www-form-urlencoded'];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $client = \Drupal::httpClient();
     $client->post($stats_path, ['headers' => $headers, 'body' => $post]);
 
@@ -43,10 +43,22 @@ class DownloadStatisticsReportsTest extends DownloadStatisticsTestBase {
 
     // Get some page and check if the block is displayed.
     $this->drupalGet('user');
-    $this->assertText('Popular content', 'Found the popular content block.');
-    $this->assertText("Today's", "Found today's popular content.");
-    $this->assertText('All time', 'Found the all time popular content.');
-    $this->assertText('Last viewed', 'Found the last viewed popular content.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Popular content');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Today's");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('All time');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Last viewed');
 
     $tags = Cache::mergeTags($node->getCacheTags(), $block->getCacheTags());
     $tags = Cache::mergeTags($tags, $this->blockingUser->getCacheTags());
@@ -57,7 +69,9 @@ class DownloadStatisticsReportsTest extends DownloadStatisticsTestBase {
     $this->assertCacheContexts($contexts);
 
     // Check if the node link is displayed.
-    $this->assertRaw(\Drupal::l($node->label(), $node->urlInfo('canonical')), 'Found link to visited node.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Please confirm that `$node` is an instance of `Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+    $this->assertSession()->responseContains(\Drupal\Core\Link::fromTextAndUrl($node->label(), $node->toUrl('canonical')));
   }
 
 }
diff --git a/tests/src/Functional/DownloadStatisticsTestBase.php b/tests/src/Functional/DownloadStatisticsTestBase.php
index 3401267..dabe51c 100644
--- a/tests/src/Functional/DownloadStatisticsTestBase.php
+++ b/tests/src/Functional/DownloadStatisticsTestBase.php
@@ -23,7 +23,7 @@ abstract class DownloadStatisticsTestBase extends BrowserTestBase {
    */
   protected $blockingUser;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page node type.
diff --git a/tests/src/Functional/DownloadStatisticsTokenReplaceTest.php b/tests/src/Functional/DownloadStatisticsTokenReplaceTest.php
index 9133dad..3298f79 100644
--- a/tests/src/Functional/DownloadStatisticsTokenReplaceTest.php
+++ b/tests/src/Functional/DownloadStatisticsTokenReplaceTest.php
@@ -27,7 +27,7 @@ class DownloadStatisticsTokenReplaceTest extends DownloadStatisticsTestBase {
     $post = http_build_query(['nid' => $nid]);
     $headers = ['Content-Type' => 'application/x-www-form-urlencoded'];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $client = \Drupal::httpClient();
     $client->post($stats_path, ['headers' => $headers, 'body' => $post]);
     $statistics = statistics_get($node->id());
@@ -36,15 +36,15 @@ class DownloadStatisticsTokenReplaceTest extends DownloadStatisticsTestBase {
     $tests = [];
     $tests['[node:total-count]'] = 1;
     $tests['[node:day-count]'] = 1;
-    $tests['[node:last-view]'] = format_date($statistics['timestamp']);
-    $tests['[node:last-view:short]'] = format_date($statistics['timestamp'], 'short');
+    $tests['[node:last-view]'] = \Drupal::service('date.formatter')->format($statistics['timestamp']);
+    $tests['[node:last-view:short]'] = \Drupal::service('date.formatter')->format($statistics['timestamp'], 'short');
 
     // Test to make sure that we generated something for each token.
     $this->assertFalse(in_array(0, array_map('strlen', $tests)), 'No empty tokens generated.');
 
     foreach ($tests as $input => $expected) {
       $output = \Drupal::token()->replace($input, ['node' => $node], ['langcode' => $language_interface->getId()]);
-      $this->assertEqual($output, $expected, format_string('Statistics token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($output, $expected, format_string('Statistics token %token replaced.', ['%token' => $input]));
     }
   }
 
