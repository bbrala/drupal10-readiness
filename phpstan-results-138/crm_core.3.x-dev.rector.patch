diff --git a/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc b/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
index 05ee489..61940ed 100644
--- a/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
+++ b/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
@@ -43,7 +43,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       'uid' => $this->config['author'],
     ];
 
-    return entity_create('crm_core_activity', $values);
+    return \Drupal::service('entity_type.manager')->getStorage('crm_core_activity')->create($values);
   }
 
   /**
@@ -58,7 +58,9 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
     }
     else {
       // We're replacing the existing activity. Only save the necessary.
-      $activity = db_query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $activity = \Drupal::database()->query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
       $activity->uid = $this->config['author'];
     }
     // Populate properties that are set by activity_object_prepare().
@@ -98,13 +100,13 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       return;
     }
     $count = $this->getLimit();
-    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $activity_ids = [];
     foreach ($activitys as $activity) {
       $activity_ids[$activity->activity_id] = $activity->activity_id;
     }
     $this->entityDeleteMultiple($activity_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ -160,7 +162,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       '#options' => $types,
       '#default_value' => $this->config['activity_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ -215,7 +217,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
   public function setTargetElement(FeedsSource $source, $target_activity, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_activity->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_activity->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;
 
       case 'feeds_source':
@@ -295,12 +297,16 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'activity_id':
-          $activity_id = db_query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $activity_id = \Drupal::database()->query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
           break;
 
         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['activity_type'])) {
-            $activity_id = db_query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $activity_id = \Drupal::database()->query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
diff --git a/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc b/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
index 27134b6..cd16a84 100644
--- a/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
+++ b/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
@@ -40,8 +40,8 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
   protected function newEntity(FeedsSource $source) {
     $contact = new stdClass();
     $contact->type = $this->config['contact_type'];
-    $contact->changed = REQUEST_TIME;
-    $contact->created = REQUEST_TIME;
+    $contact->changed = \Drupal::time()->getRequestTime();
+    $contact->created = \Drupal::time()->getRequestTime();
     $contact->language = LANGUAGE_NONE;
     $contact->revision_log = t('Imported by feeds.');
     $contact->uid = $this->config['author'];
@@ -60,7 +60,9 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
     }
     else {
       // We're replacing the existing contact. Only save the absolutely necessary.
-      $contact = db_query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $contact = \Drupal::database()->query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
       $contact->uid = $this->config['author'];
     }
     // Populate properties that are set by contact_object_prepare().
@@ -100,13 +102,13 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
       return;
     }
     $count = $this->getLimit();
-    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $contact_ids = [];
     foreach ($contacts as $contact) {
       $contact_ids[$contact->contact_id] = $contact->contact_id;
     }
     $this->entityDeleteMultiple($contact_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ -146,7 +148,7 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
       '#options' => $types,
       '#default_value' => $this->config['contact_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ -198,7 +200,7 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
   public function setTargetElement(FeedsSource $source, $target_contact, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_contact->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_contact->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;
 
       case 'feeds_source':
@@ -273,12 +275,16 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'contact_id':
-          $contact_id = db_query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $contact_id = \Drupal::database()->query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
           break;
 
         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['contact_type'])) {
-            $contact_id = db_query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $contact_id = \Drupal::database()->query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
diff --git a/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php b/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php
index 5b131ab..b88d760 100644
--- a/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php
+++ b/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php
@@ -33,7 +33,7 @@ class DefaultMatchingEngineUITest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     IndividualType::create([
@@ -61,14 +61,26 @@ class DefaultMatchingEngineUITest extends BrowserTestBase {
     // Test Organization matcher form.
     $this->drupalGet('admin/config/crm-core/match/organization');
 
-    $this->assertText('Field Matching');
-    $this->assertText('Unsupported Fields');
-    $this->assertText('A given field is unsupported when there is no field match handler for the field type it belongs to. In order to make it supported a handler plugin should be created for it.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Field Matching');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Unsupported Fields');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A given field is unsupported when there is no field match handler for the field type it belongs to. In order to make it supported a handler plugin should be created for it.');
     // There is checkbox for title property of the name field.
-    $this->assertNoFieldChecked('edit-configuration-rules-nametitle-status');
+    $this->assertSession()->checkboxNotChecked('edit-configuration-rules-nametitle-status');
     // There is title property operator for the name field.
-    $this->assertFieldByName('configuration[rules][name:title][operator]');
-    $this->assertText('ID');
+    $this->assertSession()->fieldExists('configuration[rules][name:title][operator]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('ID');
     $this->assertSession()->fieldNotExists('edit-configuration-rules-idvalue-status');
     $this->assertSession()->fieldNotExists('edit-configuration-rules-idvalue-operator');
 
@@ -82,17 +94,17 @@ class DefaultMatchingEngineUITest extends BrowserTestBase {
       'configuration[rules][name:family][options]' => 'Smith',
       'configuration[rules][name:family][score]' => 1,
     ];
-    $this->drupalPostForm(NULL, $configuration, 'Save');
+    $this->submitForm($configuration, 'Save');
 
     $this->drupalGet('admin/config/crm-core/match');
     $this->clickLink('Edit', 2);
 
-    $this->assertFieldChecked('edit-configuration-rules-namegiven-status');
+    $this->assertSession()->checkboxChecked('edit-configuration-rules-namegiven-status');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-operator', 'CONTAINS');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-options', 'John');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-score', 1);
 
-    $this->assertFieldChecked('edit-configuration-rules-namefamily-status');
+    $this->assertSession()->checkboxChecked('edit-configuration-rules-namefamily-status');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-operator', 'CONTAINS');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-options', 'Smith');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-score', 1);
diff --git a/modules/crm_core_relationship/crm_core_relationship.install b/modules/crm_core_relationship/crm_core_relationship.install
index 622b9bc..91dece6 100644
--- a/modules/crm_core_relationship/crm_core_relationship.install
+++ b/modules/crm_core_relationship/crm_core_relationship.install
@@ -51,7 +51,9 @@ function crm_core_relationship_uninstall() {
 
   // Get all the relationship_types (bundles), find all fields
   // delete them.
-  $query = db_select('relation_bundles', 'rb')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->select('relation_bundles', 'rb')
     ->fields('rb', ['relation_type'])
     ->condition('rb.entity_type', 'crm_core_contact')
     ->distinct()
@@ -63,7 +65,9 @@ function crm_core_relationship_uninstall() {
 
   foreach ($relationship_type as $type) {
     // Look into the database for each type.
-    $relationship_query = db_select('relation', 'r')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $relationship_query = \Drupal::database()->select('relation', 'r')
       ->fields('r', ['relation_id'])
       ->condition('r.relation_type', $type)
       ->execute();
diff --git a/modules/crm_core_relationship/templates/relationship.tpl.php b/modules/crm_core_relationship/templates/relationship.tpl.php
index f3da642..d450280 100644
--- a/modules/crm_core_relationship/templates/relationship.tpl.php
+++ b/modules/crm_core_relationship/templates/relationship.tpl.php
@@ -18,7 +18,7 @@
 <div class="<?php print $classes; ?> clearfix"<?php print $attributes; ?>>
   <div class="content"<?php print $content_attributes; ?>>
     <?php
-      print render($content);
+      print \Drupal::service('renderer')->render($content);
     ?>
   </div>
 </div>
diff --git a/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc b/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc
index 5af240a..16b39cf 100644
--- a/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc
+++ b/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc
@@ -247,7 +247,7 @@ function crm_core_relationship_ui_type_form_submit($form, &$form_state) {
   RelationType::create($record)->save();
   $form_state['redirect'] = 'admin/structure/crm-core/relationship-types';
 
-  drupal_set_message(t('The relationship type has been saved.'));
+  \Drupal::messenger()->addStatus(t('The relationship type has been saved.'));
 }
 
 /**
@@ -290,7 +290,7 @@ function crm_core_relationship_ui_type_delete_confirm_submit($form, &$form_state
   RelationType::load($form_state['values']['relation_type'])->delete();
 
   $t_args = ['%label' => $form_state['values']['label']];
-  drupal_set_message(t('The %label relationship type has been deleted.', $t_args));
+  \Drupal::messenger()->addStatus(t('The %label relationship type has been deleted.', $t_args));
   watchdog('relation', 'Deleted the %label relationship type.', $t_args, WATCHDOG_NOTICE);
 
   // TODO: relation_types_rebuild() ?;.
diff --git a/modules/crm_core_relationship_ui/crm_core_relationship_ui.module b/modules/crm_core_relationship_ui/crm_core_relationship_ui.module
index d0a28a8..2836cc6 100644
--- a/modules/crm_core_relationship_ui/crm_core_relationship_ui.module
+++ b/modules/crm_core_relationship_ui/crm_core_relationship_ui.module
@@ -152,7 +152,7 @@ function crm_core_relationship_ui_menu() {
 function crm_core_relationship_ui_menu_alter(&$items) {
   // We are simply hiding crm relationships from other types of relations.
   $items['admin/structure/relation']['page callback'] = 'crm_core_relationship_ui_types_overview';
-  $items['admin/structure/relation']['file path'] = drupal_get_path('module', 'crm_core_relationship_ui');
+  $items['admin/structure/relation']['file path'] = \Drupal::service('extension.list.module')->getPath('crm_core_relationship_ui');
   $items['admin/structure/relation']['file'] = 'crm_core_relationship_ui.admin.inc';
   $items['admin/structure/relation']['page arguments'] = [1];
 }
@@ -331,7 +331,7 @@ function crm_core_relationship_ui_field_formatter_view($entity_type, $entity, $f
 function crm_core_relationship_ui_views_api() {
   return [
     'api' => 3,
-    'path' => drupal_get_path('module', 'crm_core_relationship_ui'),
+    'path' => \Drupal::service('extension.list.module')->getPath('crm_core_relationship_ui'),
   ];
 }
 
diff --git a/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc b/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc
index 2dbefd9..e850a5f 100644
--- a/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc
+++ b/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc
@@ -69,7 +69,7 @@ function crm_core_relation_entity_ui_get_form_wrapper($contact, $type, $reverse)
  */
 function crm_core_relationship_form($form, &$form_state, $relation) {
   // Ensure this include file is loaded when the form is rebuilt from the cache.
-  $form_state['build_info']['file'] = drupal_get_path('module', 'crm_core_ui') . '/pages/contact_activity.pages.inc';
+  $form_state['build_info']['file'] = \Drupal::service('extension.list.module')->getPath('crm_core_ui') . '/pages/contact_activity.pages.inc';
   $form_state['entity_type'] = 'relation';
   $form_state['relation'] = $form_state['crm_core_relationship'];
   unset($form_state['crm_core_relationship']);
@@ -400,7 +400,7 @@ function crm_core_relationship_ui_add_relationship_autocomplete($crm_core_contac
   $query->addMetaData('match', $string)
     ->addTag(variable_get('crm_core_contact_search_query_tag', 'crm_core_contact_search'));
   $result = $query->execute();
-  $contacts = entity_load('crm_core_contact', array_keys($result['crm_core_contact']));
+  $contacts = \Drupal::service('entity_type.manager')->getStorage('crm_core_contact')->load(array_keys($result['crm_core_contact']));
   foreach ($contacts as $contact) {
     $crm_core_contact_title = $contact->label();
     $matches[$crm_core_contact_title . " [cid:$contact->contact_id]"] = $crm_core_contact_title;
@@ -422,7 +422,7 @@ function _crm_core_relationship_ui_get_contact_from_autocomplete_field_value($st
   if (!array_key_exists(1, $matches) || !is_numeric($matches[1])) {
     return FALSE;
   }
-  $contacts = entity_load('crm_core_contact', [$matches[1]]);
+  $contacts = \Drupal::service('entity_type.manager')->getStorage('crm_core_contact')->load([$matches[1]]);
   if (empty($contacts)) {
     return FALSE;
   }
@@ -437,7 +437,7 @@ function crm_core_relationship_ui_toggle_relationship_status($relationship_id, $
   $relation = Relation::load($relationship_id);
   $relation->crm_core_relationship_status[LANGUAGE_NONE][0]['value'] = $status ? 1 : 0;
   entity_save('relation', $relation);
-  drupal_set_message(t('Relationship status was successfully changed.'));
+  \Drupal::messenger()->addStatus(t('Relationship status was successfully changed.'));
   $path = drupal_get_destination();
   drupal_goto($path);
 }
diff --git a/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php b/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php
index d08353b..801dd43 100644
--- a/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php
+++ b/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php
@@ -65,10 +65,10 @@ class RequestSubscriber implements EventSubscriberInterface {
   /**
    * Kernel request event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if ($this->currentUser->isAuthenticated()) {
       $config = $this->configFactory->get('crm_core_user_sync.settings');
       if ($config->get('contact_load')) {
diff --git a/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php b/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php
index f94e508..b800446 100644
--- a/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php
+++ b/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php
@@ -26,7 +26,7 @@ class RelationEntityTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('crm_core_user_sync_relation');
   }
diff --git a/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php b/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php
index 7b172ca..3b34519 100644
--- a/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php
+++ b/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php
@@ -26,7 +26,7 @@ class SettingsFormTest extends ConfigFormTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('crm_core_user_sync');
     $this->form = SettingsForm::create($this->container);
diff --git a/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php b/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php
index 98390bf..c6b3958 100644
--- a/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php
+++ b/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php
@@ -21,7 +21,7 @@ class CrmCoreUserSyncRelationRulesTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $rules = [];
@@ -39,9 +39,7 @@ class CrmCoreUserSyncRelationRulesTest extends UnitTestCase {
       'weight' => 10,
     ];
 
-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
diff --git a/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php b/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php
index 83e7761..36ba6c5 100644
--- a/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php
+++ b/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php
@@ -23,6 +23,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class RequestSubscriberTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Tests nothing happens for Anonymous.
    */
@@ -48,7 +49,7 @@ class RequestSubscriberTest extends UnitTestCase {
     $request = Request::create('/', 'GET');
 
     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new \Symfony\Component\HttpKernel\Event\RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     // Nothing to assert as we should exit immediately. Current user expectation
     // will fail the test if something...
@@ -67,9 +68,7 @@ class RequestSubscriberTest extends UnitTestCase {
       ->method('id')
       ->willReturn('101');
 
-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
@@ -99,7 +98,7 @@ class RequestSubscriberTest extends UnitTestCase {
     $request = Request::create('/', 'GET');
 
     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new \Symfony\Component\HttpKernel\Event\RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     // Nothing to assert. Entity type manager expectations will the test.
   }
@@ -128,9 +127,7 @@ class RequestSubscriberTest extends UnitTestCase {
       ->method('setAccount')
       ->willReturnReference($account);
 
-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
@@ -172,7 +169,7 @@ class RequestSubscriberTest extends UnitTestCase {
     $request = Request::create('/', 'GET');
 
     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new \Symfony\Component\HttpKernel\Event\RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     $this->assertEquals($individual, $account->crm_core['contact'], 'Related contact was loaded');
   }
diff --git a/tests/src/Kernel/SettingsFormTest.php b/tests/src/Kernel/SettingsFormTest.php
index 183ad0b..0c91a65 100644
--- a/tests/src/Kernel/SettingsFormTest.php
+++ b/tests/src/Kernel/SettingsFormTest.php
@@ -20,7 +20,7 @@ class SettingsFormTest extends ConfigFormTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->container->get('theme_installer')->install(['claro']);
     $this->form = SettingsForm::create($this->container);
