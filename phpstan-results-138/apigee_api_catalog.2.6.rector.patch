diff --git a/apigee_api_catalog.info.yml b/apigee_api_catalog.info.yml
index 37e13b6..a10bd08 100644
--- a/apigee_api_catalog.info.yml
+++ b/apigee_api_catalog.info.yml
@@ -1,7 +1,7 @@
 name: 'Apigee API Catalog'
 type: module
 description: 'Display OpenAPI documentation of your APIs to your developers.'
-core_version_requirement: ^8.8.0 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Apigee'
 dependencies:
 - drupal:text
diff --git a/src/EventSubscriber/PageNotFoundEventSubscriber.php b/src/EventSubscriber/PageNotFoundEventSubscriber.php
index 6d9e9eb..596bae0 100644
--- a/src/EventSubscriber/PageNotFoundEventSubscriber.php
+++ b/src/EventSubscriber/PageNotFoundEventSubscriber.php
@@ -65,13 +65,13 @@ class PageNotFoundEventSubscriber implements EventSubscriberInterface {
   /**
    * Redirects to the apidoc canonical route if we have a not found exception.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The exception event.
    */
-  public function onNotFoundException(GetResponseForExceptionEvent $event) {
+  public function onNotFoundException(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
     // Check if the request uri matches an apidoc canonical route.
     // Also check for apidoc valid path.
-    if ($event->getException() instanceof NotFoundHttpException
+    if ($event->getThrowable() instanceof NotFoundHttpException
       && ($uri = $event->getRequest()->getRequestUri())
       && $this->pathMatcher->matchPath($uri, '/api/*/*')
       && (list(,, $id) = explode('/', $uri))
diff --git a/src/SpecFetcher.php b/src/SpecFetcher.php
index 6adbfd1..a50e4c9 100644
--- a/src/SpecFetcher.php
+++ b/src/SpecFetcher.php
@@ -172,7 +172,7 @@ class SpecFetcher implements SpecFetcherInterface {
 
         try {
           $this->checkRequirements($destination);
-          $file = file_save_data($data, $destination . $filename, FileSystemInterface::EXISTS_RENAME);
+          $file = \Drupal::service('file.repository')->writeData($data, $destination . $filename, FileSystemInterface::EXISTS_RENAME);
 
           if (empty($file)) {
             throw new \Exception('Could not save API Doc specification file.');
diff --git a/src/UpdateService.php b/src/UpdateService.php
index b20825c..d06d9a9 100644
--- a/src/UpdateService.php
+++ b/src/UpdateService.php
@@ -103,7 +103,7 @@ class UpdateService {
    */
   public function update8802() {
     $module = 'apigee_api_catalog';
-    $configPath = drupal_get_path('module', $module) . '/config';
+    $configPath = \Drupal::service('extension.list.module')->getPath($module) . '/config';
     $configToImport['install'] = [
       'node.type.apidoc',
       'core.base_field_override.node.apidoc.title',
diff --git a/tests/src/Functional/ApiDocsAdminTest.php b/tests/src/Functional/ApiDocsAdminTest.php
index 5726e83..21e2fbe 100755
--- a/tests/src/Functional/ApiDocsAdminTest.php
+++ b/tests/src/Functional/ApiDocsAdminTest.php
@@ -68,7 +68,7 @@ class ApiDocsAdminTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add the system menu blocks to appropriate regions.
diff --git a/tests/src/Functional/ApiDocsJsonApi.php b/tests/src/Functional/ApiDocsJsonApi.php
index 13fdc80..73a4e78 100644
--- a/tests/src/Functional/ApiDocsJsonApi.php
+++ b/tests/src/Functional/ApiDocsJsonApi.php
@@ -66,7 +66,7 @@ class ApiDocsJsonApi extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $nodeStorage = $this->container->get('entity_type.manager')->getStorage('node');
@@ -213,7 +213,7 @@ class ApiDocsJsonApi extends BrowserTestBase {
       return strcmp($a['attributes']['title'], $b['attributes']['title']);
     });
     for ($i = 0; $i < count($apidocs_response); $i++) {
-      $this->assertEqual($apidocs_expected[$i]->label(), $apidocs_response[$i]['attributes']['title']);
+      $this->assertEquals($apidocs_expected[$i]->label(), $apidocs_response[$i]['attributes']['title']);
     }
     // Make sure the count is the same.
     $this->assertCount(count($apidocs_expected), $apidocs_response, 'Count of API Docs returned does not match count of expected.');
diff --git a/tests/src/Functional/SmartdocRoutingTest.php b/tests/src/Functional/SmartdocRoutingTest.php
index bcacd6d..d01e8cf 100755
--- a/tests/src/Functional/SmartdocRoutingTest.php
+++ b/tests/src/Functional/SmartdocRoutingTest.php
@@ -54,7 +54,7 @@ class SmartdocRoutingTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->apidoc = $this->container->get('entity_type.manager')
@@ -79,12 +79,12 @@ class SmartdocRoutingTest extends BrowserTestBase {
    * Tests the route subscriber will redirect from smartdoc routes.
    */
   public function testNotFoundSubscriber() {
-    $this->assertEqual($this->apidoc->id(), 1);
+    $this->assertEquals($this->apidoc->id(), 1);
 
     // This needs to run before the alias can be picked up?
     $this->apidoc->toUrl()->toString();
     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/1', $this->apidoc->language()->getId());
-    $this->assertEqual($alias, '/api/1');
+    $this->assertEquals($alias, '/api/1');
 
     $assert = $this->assertSession();
 
@@ -95,7 +95,7 @@ class SmartdocRoutingTest extends BrowserTestBase {
     static::assertEmpty($this->getSession()->getResponseHeader('location'));
 
     // Test the canonical route uses the /api/* path alias.
-    $this->assertEqual(parse_url($this->getSession()->getCurrentUrl(), PHP_URL_PATH), '/api/1');
+    $this->assertEquals(parse_url($this->getSession()->getCurrentUrl(), PHP_URL_PATH), '/api/1');
 
     // Tests the node alias response.
     $this->drupalGet('/api/1');
@@ -107,8 +107,8 @@ class SmartdocRoutingTest extends BrowserTestBase {
     $response = $this->getHttpClient()->request('GET', $url->toString(), [
       'allow_redirects' => FALSE,
     ]);
-    $this->assertEqual($response->getStatusCode(), 302);
-    $this->assertEqual($response->getHeader('location')[0], '/api/1');
+    $this->assertEquals($response->getStatusCode(), 302);
+    $this->assertEquals($response->getHeader('location')[0], '/api/1');
   }
 
 }
diff --git a/tests/src/Kernel/ApidocEntityTest.php b/tests/src/Kernel/ApidocEntityTest.php
index e59661d..97a7e4a 100755
--- a/tests/src/Kernel/ApidocEntityTest.php
+++ b/tests/src/Kernel/ApidocEntityTest.php
@@ -63,7 +63,7 @@ class ApidocEntityTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('user', ['users_data']);
@@ -102,7 +102,7 @@ class ApidocEntityTest extends KernelTestBase {
     // This needs to run before the alias can be picked up?
     $entity->toUrl()->toString();
     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $entity->id(), $entity->language()->getId());
-    $this->assertEqual($alias, '/api/' . $entity->id());
+    $this->assertEquals($alias, '/api/' . $entity->id());
 
     $entity->delete();
     $this->assertNull($this->nodeStorage->load($entity_id));
