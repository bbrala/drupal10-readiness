diff --git a/photos.module b/photos.module
index 1d37a9a..8814e3c 100644
--- a/photos.module
+++ b/photos.module
@@ -930,7 +930,7 @@ function photos_preprocess_photos_image_html(&$variables, $hook) {
       if (!file_exists($styleUri)) {
         $style->createDerivative($uri, $styleUri);
       }
-      $url = file_create_url($styleUri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($styleUri);
     }
 
     // Render image view.
diff --git a/photos_access/photos_access.module b/photos_access/photos_access.module
index b48d031..e6931e1 100644
--- a/photos_access/photos_access.module
+++ b/photos_access/photos_access.module
@@ -146,7 +146,7 @@ function photos_access_form_node_form_alter(&$form, FormStateInterface &$form_st
           $form['privacy']['viewremove'][$u['target_id']] = [
             '#type' => 'checkbox',
             '#default_value' => isset($node->viewremove[$u['target_id']]) ? $node->viewremove[$u['target_id']] : '',
-            '#title' => t('Delete: @name', ['@name' => render($u['username'])]),
+            '#title' => t('Delete: @name', ['@name' => \Drupal::service('renderer')->render($u['username'])]),
             '#prefix' => '<div id="photos-access-remove"' . $classes . '>',
             '#suffix' => '</div>',
           ];
@@ -166,7 +166,7 @@ function photos_access_form_node_form_alter(&$form, FormStateInterface &$form_st
           $form['privacy']['updateremove'][$u['target_id']] = [
             '#type' => 'checkbox',
             '#default_value' => isset($node->updateremove[$u['target_id']]) ? $node->updateremove[$u['target_id']] : '',
-            '#title' => t('Delete: @name', ['@name' => render($u['username'])]),
+            '#title' => t('Delete: @name', ['@name' => \Drupal::service('renderer')->render($u['username'])]),
             '#prefix' => '<div id="photos_access_updateremove" class="photos-access-update-remove">',
             '#suffix' => '</div>',
           ];
@@ -367,7 +367,7 @@ function photos_access_move_files(NodeInterface $node, $public = TRUE) {
           $new_uri = str_replace($old_file_wrapper, $file_wrapper, $file->getFileUri());
           $dirname = $file_system->dirname($new_uri);
           $file_system->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
-          file_move($file, $new_uri);
+          \Drupal::service('file.repository')->move($file, $new_uri);
           // Clear image page cache.
           $cache_tags[] = 'photos:image:' . $fid;
         }
@@ -1231,7 +1231,7 @@ function _photos_access_move_field_image(EntityInterface $entity, FileFieldItemL
             $new_uri = str_replace($old_file_wrapper, $file_wrapper, $file->getFileUri());
             $dirname = $file_system->dirname($new_uri);
             $file_system->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
-            file_move($file, $new_uri);
+            \Drupal::service('file.repository')->move($file, $new_uri);
           }
         }
       }
diff --git a/photos_access/tests/src/Functional/PhotosAccessTest.php b/photos_access/tests/src/Functional/PhotosAccessTest.php
index 1195ab1..fee74db 100644
--- a/photos_access/tests/src/Functional/PhotosAccessTest.php
+++ b/photos_access/tests/src/Functional/PhotosAccessTest.php
@@ -66,7 +66,7 @@ class PhotosAccessTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create admin user and adjust photos admin settings. This user will also
@@ -134,7 +134,7 @@ class PhotosAccessTest extends BrowserTestBase {
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     // Create a locked photos node.
     $this->drupalGet('/node/add/photos');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'privacy[viewid]' => 1,
@@ -145,18 +145,18 @@ class PhotosAccessTest extends BrowserTestBase {
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     $this->album = $storage->load(1);
     $this->assertNotNull($this->album->privacy);
-    $this->assertEqual($this->album->privacy['viewid'], 1, 'Album is set to locked.');
+    $this->assertEquals($this->album->privacy['viewid'], 1, 'Album is set to locked.');
 
     // Get test image file.
     /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
     $fileSystem = \Drupal::service('file_system');
-    $testImageFile = drupal_get_path('module', 'photos') . '/tests/images/photos-test-picture.jpg';
+    $testImageFile = \Drupal::service('extension.list.module')->getPath('photos') . '/tests/images/photos-test-picture.jpg';
     // Add image to album.
     $edit = [
       'files[images_0]' => $fileSystem->realpath($testImageFile),
     ];
     $this->drupalGet('node/' . $this->album->id() . '/photos');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->submitForm($edit, 'Confirm upload');
   }
 
@@ -206,37 +206,55 @@ class PhotosAccessTest extends BrowserTestBase {
 
     // Node page should redirect to password required page.
     $this->drupalGet('node/' . $photosImage->getAlbumId());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Image page should redirect to password required page.
     $this->drupalGet('photos/' . $photosImage->getAlbumId() . '/' . $photosImage->id());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Raw image path should redirect to password required page.
     $this->drupalGet($file->createFileUrl());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Album views page should redirect to password required page.
     $this->drupalGet('photos/views-test/' . $photosImage->getAlbumId());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Test wrong password.
     $edit = [
       'pass' => 'wrong password',
     ];
     $this->submitForm($edit, 'Submit');
-    $this->assertText('Password required');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Password required');
     // Test correct password.
     $edit = [
       'pass' => 'test',
     ];
     $this->submitForm($edit, 'Submit');
     // Check if album page is visible.
-    $this->assertResponse(200);
-    $this->assertText($this->album->getTitle());
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->album->getTitle());
     // Node edit page should be access denied.
     $this->drupalGet('node/' . $photosImage->getAlbumId() . '/edit');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test role access.
     $edit = [
@@ -293,7 +311,10 @@ class PhotosAccessTest extends BrowserTestBase {
     $this->drupalGet('node/' . $this->album->id() . '/edit');
     if (isset($edit['privacy[viewid]']) && $edit['privacy[viewid]'] == 4) {
       // Check if role access option is enabled.
-      $this->assertText('Role access');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Role access');
     }
     $this->submitForm($edit, 'Save');
     /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
@@ -306,7 +327,7 @@ class PhotosAccessTest extends BrowserTestBase {
     // Update album variable.
     $this->album = $storage->load($this->album->id());
     if (isset($edit['privacy[viewid]'])) {
-      $this->assertEqual($this->album->privacy['viewid'], $edit['privacy[viewid]'], 'Album privacy settings updated successfully.');
+      $this->assertEquals($this->album->privacy['viewid'], $edit['privacy[viewid]'], 'Album privacy settings updated successfully.');
     }
   }
 
@@ -325,20 +346,20 @@ class PhotosAccessTest extends BrowserTestBase {
   public function checkAlbumAccess(PhotosImage $photosImage, $viewCode = 200, $editCode = 403, $fileUrl = NULL) {
     if ($fileUrl) {
       $this->drupalGet($fileUrl);
-      $this->assertResponse($viewCode);
+      $this->assertSession()->statusCodeEquals($viewCode);
     }
     // View image page.
     $this->drupalGet('photos/' . $photosImage->getAlbumId() . '/' . $photosImage->id());
-    $this->assertResponse($viewCode);
+    $this->assertSession()->statusCodeEquals($viewCode);
     // Views album page.
     $this->drupalGet('photos/views-test/' . $photosImage->getAlbumId());
-    $this->assertResponse($viewCode);
+    $this->assertSession()->statusCodeEquals($viewCode);
     // View node page.
     $this->drupalGet('node/' . $photosImage->getAlbumId());
-    $this->assertResponse($viewCode);
+    $this->assertSession()->statusCodeEquals($viewCode);
     // Edit node page.
     $this->drupalGet('node/' . $photosImage->getAlbumId() . '/edit');
-    $this->assertResponse($editCode);
+    $this->assertSession()->statusCodeEquals($editCode);
   }
 
 }
diff --git a/src/PhotosImage.php b/src/PhotosImage.php
index 5aad8bb..ffc26ab 100644
--- a/src/PhotosImage.php
+++ b/src/PhotosImage.php
@@ -151,7 +151,7 @@ class PhotosImage {
     $style->createDerivative($uri, $destination);
 
     // Return URL.
-    return file_create_url($destination);
+    return \Drupal::service('file_url_generator')->generateAbsoluteString($destination);
   }
 
   /**
@@ -166,7 +166,7 @@ class PhotosImage {
         $image_url = ImageStyle::load($style_name)->buildUrl($uri);
       }
       else {
-        $image_url = file_create_url($uri);
+        $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       }
     }
     else {
diff --git a/src/PhotosUpload.php b/src/PhotosUpload.php
index 1f8ce51..1c59e90 100644
--- a/src/PhotosUpload.php
+++ b/src/PhotosUpload.php
@@ -333,7 +333,7 @@ class PhotosUpload implements PhotosUploadInterface {
           $ext = end($filename_parts);
           if (in_array($ext, $fileType)) {
             $path = $this->fileSystem->createFilename($image['name'], $this->path($scheme));
-            if ($temp_file = file_save_data($zip->getFromIndex($x), $path)) {
+            if ($temp_file = \Drupal::service('file.repository')->writeData($zip->getFromIndex($x), $path)) {
               // Update file values.
               $temp_file->album_id = $params['album_id'];
               $temp_file->nid = $params['nid'];
diff --git a/tests/src/Functional/AddPhotosAlbumImageTest.php b/tests/src/Functional/AddPhotosAlbumImageTest.php
index 47254f2..07c5367 100644
--- a/tests/src/Functional/AddPhotosAlbumImageTest.php
+++ b/tests/src/Functional/AddPhotosAlbumImageTest.php
@@ -42,7 +42,7 @@ class AddPhotosAlbumImageTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user with permissions to edit own photos.
     $this->account = $this->drupalCreateUser([
@@ -68,7 +68,7 @@ class AddPhotosAlbumImageTest extends BrowserTestBase {
     $album->save();
 
     // Get test image file.
-    $testPhotoUri = drupal_get_path('module', 'photos') . '/tests/images/photos-test-picture.jpg';
+    $testPhotoUri = \Drupal::service('extension.list.module')->getPath('photos') . '/tests/images/photos-test-picture.jpg';
     $fileSystem = \Drupal::service('file_system');
 
     // Post image upload form.
@@ -107,8 +107,11 @@ class AddPhotosAlbumImageTest extends BrowserTestBase {
 
     // Test recent albums content overview.
     $this->drupalGet('photos');
-    $this->assertResponse(200);
-    $this->assertText($albumTitle);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($albumTitle);
 
   }
 
diff --git a/tests/src/Kernel/CreatePhotosAlbumTest.php b/tests/src/Kernel/CreatePhotosAlbumTest.php
index 3d21a96..56e9aa5 100644
--- a/tests/src/Kernel/CreatePhotosAlbumTest.php
+++ b/tests/src/Kernel/CreatePhotosAlbumTest.php
@@ -31,7 +31,7 @@ class CreatePhotosAlbumTest extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['system']);
