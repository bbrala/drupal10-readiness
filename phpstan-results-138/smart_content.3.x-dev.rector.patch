diff --git a/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php b/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php
index 7eae620..47f43e8 100644
--- a/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php
+++ b/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php
@@ -46,7 +46,7 @@ class DecisionBlockFieldTest extends WebDriverTestBase {
    *
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([], NULL, TRUE);
@@ -152,14 +152,14 @@ class DecisionBlockFieldTest extends WebDriverTestBase {
     $page->pressButton('Add Block');
 
     $assert->waitForField('field_smart_block[0][settings][decision][decision_settings][segments][32ed1776-9a27-4c06-be8c-a272825dd6a0][settings][reaction_settings][plugin_form][settings][blocks][system_powered_by_block][plugin_form][label]');
-    $this->drupalPostForm(NULL, NULL, 'Save');
+    $this->submitForm(NULL, 'Save');
 
     // Ensure that the front-end is rendering the proper persisted values.
     $assert->fieldValueEquals('Smart block', 'smart_content_decision_block');
     $assert->fieldValueEquals('Title', 'Decision Block');
     $assert->checkboxNotChecked('Display title');
 
-    self::assertContains('Powered by Drupal', $page->findById('edit-field-smart-block-wrapper')->getText());
+    self::assertStringContainsString('Powered by Drupal', $page->findById('edit-field-smart-block-wrapper')->getText());
 
     // Check the front-end to ensure that the block renders properly.
     $this->drupalGet('/entity_test/1');
diff --git a/src/Decision/DecisionBase.php b/src/Decision/DecisionBase.php
index 21cd4c2..d648384 100644
--- a/src/Decision/DecisionBase.php
+++ b/src/Decision/DecisionBase.php
@@ -385,8 +385,8 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
       $settings['decisions'][$this->getToken()] = $decision_settings;
     }
     // Dispatch an event so other modules can alter settings.
-    $this->eventDispatcher->dispatch(AttachDecisionSettingsEvent::EVENT_NAME,
-      new AttachDecisionSettingsEvent($settings));
+    $this->eventDispatcher->dispatch(new AttachDecisionSettingsEvent($settings),
+      AttachDecisionSettingsEvent::EVENT_NAME);
     return $settings;
   }
 
diff --git a/src/Event/AttachDecisionSettingsEvent.php b/src/Event/AttachDecisionSettingsEvent.php
index be70f04..f570758 100644
--- a/src/Event/AttachDecisionSettingsEvent.php
+++ b/src/Event/AttachDecisionSettingsEvent.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @package Drupal\smart_content\Event
  */
-class AttachDecisionSettingsEvent extends Event {
+class AttachDecisionSettingsEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The event name.
diff --git a/tests/src/Unit/DecisionStorageParamConverterTest.php b/tests/src/Unit/DecisionStorageParamConverterTest.php
index 47d139b..0b333a5 100644
--- a/tests/src/Unit/DecisionStorageParamConverterTest.php
+++ b/tests/src/Unit/DecisionStorageParamConverterTest.php
@@ -33,12 +33,10 @@ class DecisionStorageParamConverterTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    $this->decisionStorageManager = $this->getMockBuilder(DecisionStorageManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->decisionStorageManager = $this->createMock(DecisionStorageManager::class);
 
     $this->decisionStorageManager
       ->method('hasDefinition')
@@ -60,9 +58,7 @@ class DecisionStorageParamConverterTest extends UnitTestCase {
    * @dataProvider
    */
   public function appliesProvider() {
-    $route = $this->getMockBuilder(Route::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $route = $this->createMock(Route::class);
 
     return [
       [['type' => 'decision_storage'], '', $route, TRUE],
