diff --git a/Tests/src/Functional/PersistentLoginTest.php b/Tests/src/Functional/PersistentLoginTest.php
index 8d19787..26e2044 100644
--- a/Tests/src/Functional/PersistentLoginTest.php
+++ b/Tests/src/Functional/PersistentLoginTest.php
@@ -26,7 +26,7 @@ class PersistentLoginTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mimic the required setup of the module by setting the session cookie
diff --git a/src/EventSubscriber/TokenHandler.php b/src/EventSubscriber/TokenHandler.php
index 711d5fe..8890c95 100644
--- a/src/EventSubscriber/TokenHandler.php
+++ b/src/EventSubscriber/TokenHandler.php
@@ -101,10 +101,10 @@ class TokenHandler implements EventSubscriberInterface {
   /**
    * Load a token on this request, if a persistent cookie is provided.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    */
-  public function loadTokenOnRequestEvent(GetResponseEvent $event) {
+  public function loadTokenOnRequestEvent(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
 
     if (!$event->isMasterRequest()) {
       return;
@@ -137,10 +137,10 @@ class TokenHandler implements EventSubscriberInterface {
   /**
    * Set or clear a token cookie on this response, if required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    */
-  public function setTokenOnResponseEvent(FilterResponseEvent $event) {
+  public function setTokenOnResponseEvent(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
 
     if (!$event->isMasterRequest()) {
       return;
@@ -155,13 +155,14 @@ class TokenHandler implements EventSubscriberInterface {
         // New or updated token.
         $this->token = $this->tokenManager->updateToken($this->token);
         $response->headers->setCookie(
-          new Cookie(
-            $this->cookieHelper->getCookieName($request),
-            $this->token,
-            $this->token->getExpiry(),
-            '/',  // TODO Path should probably match the base path.
-            $sessionOptions['cookie_domain'],
-            $sessionOptions['cookie_secure']
+          \Symfony\Component\HttpFoundation\Cookie::create(
+              $this->cookieHelper->getCookieName($request),
+              $this->token,
+              $this->token->getExpiry(),
+              '/',
+              // TODO Path should probably match the base path.
+              $sessionOptions['cookie_domain'],
+              $sessionOptions['cookie_secure']
           )
         );
         $response->setPrivate();
