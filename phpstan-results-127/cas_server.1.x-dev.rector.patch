diff --git a/src/Controller/TicketValidationController.php b/src/Controller/TicketValidationController.php
index 2306690..1ecc18a 100644
--- a/src/Controller/TicketValidationController.php
+++ b/src/Controller/TicketValidationController.php
@@ -508,7 +508,7 @@ class TicketValidationController implements ContainerInjectionInterface {
 
     $event = new CASAttributesAlterEvent($account, $ticket);
 
-    $this->eventDispatcher->dispatch(CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT);
 
     $attributes = $event->getAttributes();
     if ($format == 'xml') {
@@ -561,7 +561,7 @@ class TicketValidationController implements ContainerInjectionInterface {
 
     $account = $this->loadUser($ticket->getUid());
     $event = new CASAttributesAlterEvent($account, $ticket);
-    $this->eventDispatcher->dispatch(CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT);
 
     if ($format == 'xml') {
       $response_text = "<cas:serviceResponse xmlns:cas='http://www.yale.edu/tp/cas'>
diff --git a/src/Event/CASAttributesAlterEvent.php b/src/Event/CASAttributesAlterEvent.php
index 174209f..24b6277 100644
--- a/src/Event/CASAttributesAlterEvent.php
+++ b/src/Event/CASAttributesAlterEvent.php
@@ -7,7 +7,7 @@ use Drupal\cas_server\Ticket\ServiceTicket;
 use Drupal\user\UserInterface;
 use Symfony\Component\EventDispatcher\Event;
 
-class CASAttributesAlterEvent extends Event {
+class CASAttributesAlterEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   const CAS_ATTRIBUTES_ALTER_EVENT = 'cas.attributes.alter';
 
diff --git a/src/Event/CasServerTicketAlterEvent.php b/src/Event/CasServerTicketAlterEvent.php
index 324f5af..a1f11a1 100644
--- a/src/Event/CasServerTicketAlterEvent.php
+++ b/src/Event/CasServerTicketAlterEvent.php
@@ -7,7 +7,7 @@ use Drupal\cas_server\Ticket\Ticket;
 use Drupal\user\UserInterface;
 use Symfony\Component\EventDispatcher\Event;
 
-class CasServerTicketAlterEvent extends Event {
+class CasServerTicketAlterEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   const CAS_SERVER_TICKET_ALTER_EVENT = 'cas_server.ticket.alter';
 
diff --git a/src/Tests/ProxyControllerTest.php b/src/Tests/ProxyControllerTest.php
index 5c3b0fe..af02782 100644
--- a/src/Tests/ProxyControllerTest.php
+++ b/src/Tests/ProxyControllerTest.php
@@ -16,7 +16,7 @@ class ProxyControllerTest extends BrowserTestBase {
 
   public static $modules = ['cas_server'];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->exampleUser = $this->drupalCreateUser([], 'exampleUserName');
@@ -55,9 +55,9 @@ class ProxyControllerTest extends BrowserTestBase {
     $service = 'https://foo.example.com';
 
     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxySuccess>");
-    $this->assertRaw("<cas:proxyTicket>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxySuccess>");
+    $this->assertSession()->responseContains("<cas:proxyTicket>");
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -66,8 +66,8 @@ class ProxyControllerTest extends BrowserTestBase {
   function testInvalidProxyRequest() {
 
     $this->drupalGet('cas/proxy');
-    $this->assertRaw("<cas:proxyFailure code='INVALID_REQUEST'>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_REQUEST'>");
+    $this->assertSession()->statusCodeEquals(200);
 
   }
 
@@ -81,8 +81,8 @@ class ProxyControllerTest extends BrowserTestBase {
     $service = 'https://bar.example.com';
 
     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='UNAUTHORIZED_SERVICE'>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='UNAUTHORIZED_SERVICE'>");
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -96,8 +96,8 @@ class ProxyControllerTest extends BrowserTestBase {
     $service = 'https://foo.example.com';
 
     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='INVALID_TICKET'>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_TICKET'>");
+    $this->assertSession()->statusCodeEquals(200);
 
   }
 
@@ -112,9 +112,12 @@ class ProxyControllerTest extends BrowserTestBase {
     $service = 'https://foo.example.com';
 
     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='INVALID_REQUEST'>");
-    $this->assertText("Ticket not found");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_REQUEST'>");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Ticket not found");
+    $this->assertSession()->statusCodeEquals(200);
     
   }
 
@@ -128,9 +131,12 @@ class ProxyControllerTest extends BrowserTestBase {
     $service = 'https://foo.example.com';
 
     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='INVALID_REQUEST'>");
-    $this->assertNoText("Ticket not found");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_REQUEST'>");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains("Ticket not found");
+    $this->assertSession()->statusCodeEquals(200);
     
   }
 }
diff --git a/src/Tests/TicketValidationTest.php b/src/Tests/TicketValidationTest.php
index d15d1ec..3e03e29 100644
--- a/src/Tests/TicketValidationTest.php
+++ b/src/Tests/TicketValidationTest.php
@@ -15,7 +15,7 @@ class TicketValidationTest extends BrowserTestBase {
 
   public static $modules = ['cas_server'];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->exampleUser = $this->drupalCreateUser([], 'exampleUserName');
@@ -39,14 +39,14 @@ class TicketValidationTest extends BrowserTestBase {
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['pgtUrl' => $mangled_pgt_callback, 'service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['pgtUrl' => $mangled_pgt_callback, 'service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
+    $this->assertSession()->statusCodeEquals(200);
 }
 
   /**
@@ -61,23 +61,32 @@ class TicketValidationTest extends BrowserTestBase {
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['renew' => 'true', 'service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['renew' => 'true', 'service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('renew');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('renew');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['renew' => 'true', 'service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('renew');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('renew');
+    $this->assertSession()->statusCodeEquals(200);
 }
 
 
@@ -93,21 +102,24 @@ class TicketValidationTest extends BrowserTestBase {
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service . 'adfasd', 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service . 'adasdf', 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_SERVICE">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_SERVICE">');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service . 'adfasdf', 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_SERVICE">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_SERVICE">');
+    $this->assertSession()->statusCodeEquals(200);
 }
 
   /**
@@ -122,23 +134,32 @@ class TicketValidationTest extends BrowserTestBase {
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('expired');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('expired');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('expired');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('expired');
+    $this->assertSession()->statusCodeEquals(200);
 }
 
   /**
@@ -154,23 +175,26 @@ class TicketValidationTest extends BrowserTestBase {
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->ticketStore->deleteServiceTicket($st);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->ticketStore->deleteServiceTicket($st);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->ticketStore->deleteServiceTicket($st);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->statusCodeEquals(200);
 }
 
   /**
@@ -185,16 +209,16 @@ class TicketValidationTest extends BrowserTestBase {
     // Protocol version 2
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/proxyValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationSuccess>');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess>');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/p3/proxyValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationSuccess');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);
 
   }
 
@@ -210,14 +234,14 @@ class TicketValidationTest extends BrowserTestBase {
     // Protocol version 2
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
+    $this->assertSession()->statusCodeEquals(200);
 }
 
   /**
@@ -232,24 +256,30 @@ class TicketValidationTest extends BrowserTestBase {
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('yes');
-    $this->assertText($this->ticketFactory->getUsernameAttribute($this->exampleUser));
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('yes');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->ticketFactory->getUsernameAttribute($this->exampleUser));
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationSuccess>');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess>');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationSuccess>');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess>');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -258,19 +288,22 @@ class TicketValidationTest extends BrowserTestBase {
   function testMissingParameters() {
     // Protocol version 1
     $this->drupalGet('cas/validate');
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
 
     // Protocol version 2
     $this->drupalGet('cas/serviceValidate');
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_REQUEST">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_REQUEST">');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 3
     $this->drupalGet('cas/p3/serviceValidate');
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_REQUEST">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_REQUEST">');
+    $this->assertSession()->statusCodeEquals(200);
 
   }
 
diff --git a/src/Tests/UserActionControllerTest.php b/src/Tests/UserActionControllerTest.php
index f4e919f..9150a61 100644
--- a/src/Tests/UserActionControllerTest.php
+++ b/src/Tests/UserActionControllerTest.php
@@ -18,7 +18,7 @@ class UserActionControllerTest extends BrowserTestBase {
 
   public static $modules = ['cas_server'];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->exampleUser = $this->drupalCreateUser([], 'exampleUserName');
@@ -52,8 +52,11 @@ class UserActionControllerTest extends BrowserTestBase {
 
     $this->drupalGet('cas/logout');
     $this->assertFalse($this->drupalUserIsLoggedIn($this->exampleUser));
-    $this->assertText('You have been logged out');
-    $this->assertEqual($this->cookies['cas_tgc']['value'], 'deleted');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You have been logged out');
+    $this->assertEquals($this->cookies['cas_tgc']['value'], 'deleted');
 
     $tickets = $this->connection->select('cas_server_ticket_store', 'c')
       ->fields('c', array('id'))
@@ -82,8 +85,8 @@ class UserActionControllerTest extends BrowserTestBase {
     $service = Url::fromRoute('cas_server.validate1');
     $service->setAbsolute();
     $this->drupalGet('cas/login', ['query' => ['service' => $service->toString(), 'ticket' => 'foo']]);
-    $this->assertUrl('cas/validate', ['query' => ['ticket' => 'foo']]); 
-    $this->assertEqual($this->redirectCount, 1);
+    $this->assertSession()->addressEquals('cas/validate', ['query' => ['ticket' => 'foo']]); 
+    $this->assertEquals($this->redirectCount, 1);
   }
 
   /**
@@ -91,8 +94,11 @@ class UserActionControllerTest extends BrowserTestBase {
    */
   public function testInvalidServiceMessage() {
     $this->drupalGet('cas/login', ['query' => ['service' => 'https://bar.example.com']]);
-    $this->assertText('You have not requested a valid service');
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You have not requested a valid service');
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -101,8 +107,11 @@ class UserActionControllerTest extends BrowserTestBase {
   public function testAlreadyLoggedIn() {
     $this->drupalLogin($this->exampleUser);
     $this->drupalGet('cas/login');
-    $this->assertResponse(200);
-    $this->assertText('You are logged in to CAS single sign on');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are logged in to CAS single sign on');
   }
 
   /**
@@ -110,10 +119,10 @@ class UserActionControllerTest extends BrowserTestBase {
    */
   public function testNoServiceNoSession() {
     $this->drupalGet('cas/login');
-    $this->assertResponse(200);
-    $this->assertFieldByName('username');
-    $this->assertFieldByName('password');
-    $this->assertFieldByName('lt');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldExists('username');
+    $this->assertSession()->fieldExists('password');
+    $this->assertSession()->fieldExists('lt');
   }
 
   /**
@@ -121,11 +130,11 @@ class UserActionControllerTest extends BrowserTestBase {
    */
   public function testServiceNoSession() {
     $this->drupalGet('cas/login', ['query' => ['service' => 'https://foo.example.com']]);
-    $this->assertResponse(200);
-    $this->assertFieldByName('username');
-    $this->assertFieldByName('password');
-    $this->assertFieldByName('lt');
-    $this->assertFieldByName('service', 'https://foo.example.com');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldExists('username');
+    $this->assertSession()->fieldExists('password');
+    $this->assertSession()->fieldExists('lt');
+    $this->assertSession()->fieldValueEquals('service', 'https://foo.example.com');
   }
 
   /**
@@ -143,8 +152,8 @@ class UserActionControllerTest extends BrowserTestBase {
     $service = Url::fromRoute('cas_server.validate1');
     $service->setAbsolute();
     $this->drupalGet('cas/login', ['query' => ['service' => $service->toString(), 'gateway' => 'true']]);
-    $this->assertUrl('cas/validate', []); 
-    $this->assertEqual($this->redirectCount, 1);
+    $this->assertSession()->addressEquals('cas/validate', []); 
+    $this->assertEquals($this->redirectCount, 1);
   }
 
   /**
@@ -164,7 +173,7 @@ class UserActionControllerTest extends BrowserTestBase {
     $service = Url::fromRoute('cas_server.validate1');
     $service->setAbsolute();
     $this->drupalGet('cas/login', ['query' => ['service' => $service->toString()]]);
-    $this->assertEqual($this->redirectCount, 1);
+    $this->assertEquals($this->redirectCount, 1);
     
     $ticket = $this->connection->select('cas_server_ticket_store', 'c')
       ->fields('c', array('id'))
@@ -174,7 +183,7 @@ class UserActionControllerTest extends BrowserTestBase {
       ->fetch();
     $tid = $ticket->id;
 
-    $this->assertUrl('cas/validate', ['query' => ['ticket' => $tid]]);
+    $this->assertSession()->addressEquals('cas/validate', ['query' => ['ticket' => $tid]]);
   }
 
 
