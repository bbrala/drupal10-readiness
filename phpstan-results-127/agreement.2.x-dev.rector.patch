diff --git a/src/AgreementHandler.php b/src/AgreementHandler.php
index ea25ea8..32c095d 100644
--- a/src/AgreementHandler.php
+++ b/src/AgreementHandler.php
@@ -226,7 +226,7 @@ class AgreementHandler implements AgreementHandlerInterface {
     elseif ($agreement->agreeOnce()) {
       $expire = new \DateTime('+10 years');
     }
-    return new Cookie($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
+    return \Symfony\Component\HttpFoundation\Cookie::create($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
   }
 
   /**
diff --git a/src/EventSubscriber/AgreementSubscriber.php b/src/EventSubscriber/AgreementSubscriber.php
index b87fbee..e0dd917 100644
--- a/src/EventSubscriber/AgreementSubscriber.php
+++ b/src/EventSubscriber/AgreementSubscriber.php
@@ -68,7 +68,7 @@ class AgreementSubscriber implements EventSubscriberInterface {
   /**
    * Check if the user needs to accept an agreement.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent|\Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
   public function checkForRedirection($event) {
@@ -103,12 +103,12 @@ class AgreementSubscriber implements EventSubscriberInterface {
    * the checkForRedirection function, that will lead to an infinite redirect
    * loop.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The response exception event.
    */
-  public function exceptionRedirect(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
-    if ($exception instanceof HttpExceptionInterface && $event->getException()->getStatusCode() === 403) {
+  public function exceptionRedirect(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
+    $exception = $event->getThrowable();
+    if ($exception instanceof HttpExceptionInterface && $event->getThrowable()->getStatusCode() === 403) {
       $this->checkForRedirection($event);
     }
   }
@@ -116,10 +116,10 @@ class AgreementSubscriber implements EventSubscriberInterface {
   /**
    * Executes function to set redirect response if it is required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
-  public function requestForRedirection(GetResponseEvent $event) {
+  public function requestForRedirection(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $this->checkForRedirection($event);
   }
 
diff --git a/tests/src/Functional/AgreementAccessDeniedRedirectTest.php b/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
index 5b51b61..2a63b26 100644
--- a/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
+++ b/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
@@ -19,7 +19,7 @@ class AgreementAccessDeniedRedirectTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->unprivilegedUser = $this->createUnprivilegedUser();
diff --git a/tests/src/Functional/AgreementAnonymousTest.php b/tests/src/Functional/AgreementAnonymousTest.php
index 5dd33a0..d875122 100644
--- a/tests/src/Functional/AgreementAnonymousTest.php
+++ b/tests/src/Functional/AgreementAnonymousTest.php
@@ -12,7 +12,7 @@ class AgreementAnonymousTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $settings = $this->agreement->getSettings();
