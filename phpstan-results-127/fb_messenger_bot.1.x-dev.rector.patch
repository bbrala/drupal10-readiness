diff --git a/tests/src/Kernel/BotKernelTest.php b/tests/src/Kernel/BotKernelTest.php
index 2483a18..6a01b02 100755
--- a/tests/src/Kernel/BotKernelTest.php
+++ b/tests/src/Kernel/BotKernelTest.php
@@ -28,7 +28,7 @@ class BotKernelTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
diff --git a/tests/src/Kernel/ConversationFactoryTest.php b/tests/src/Kernel/ConversationFactoryTest.php
index 078e26f..1d4b4c4 100755
--- a/tests/src/Kernel/ConversationFactoryTest.php
+++ b/tests/src/Kernel/ConversationFactoryTest.php
@@ -35,7 +35,7 @@ class ConversationFactoryTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
 
diff --git a/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php b/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php
index b224fa3..ac984fa 100755
--- a/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php
+++ b/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php
@@ -61,7 +61,7 @@ class FBMessengerBotWorkflowKernelTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
diff --git a/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php b/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php
index 4f41246..1eed086 100755
--- a/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php
+++ b/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php
@@ -85,7 +85,7 @@ class FBMessengerBotWorkflowProcessConversationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
diff --git a/tests/src/Kernel/FacebookServiceTranslateRequestTest.php b/tests/src/Kernel/FacebookServiceTranslateRequestTest.php
index 706fc29..04ff148 100755
--- a/tests/src/Kernel/FacebookServiceTranslateRequestTest.php
+++ b/tests/src/Kernel/FacebookServiceTranslateRequestTest.php
@@ -31,7 +31,7 @@ class FacebookServiceTranslateRequestTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->service = $this->container->get('fb_messenger_bot.fb_service');
   }
diff --git a/tests/src/Unit/ContactControllerTest.php b/tests/src/Unit/ContactControllerTest.php
index 059afc1..854ddc4 100755
--- a/tests/src/Unit/ContactControllerTest.php
+++ b/tests/src/Unit/ContactControllerTest.php
@@ -25,7 +25,7 @@ class ContactControllerTest extends UnitTestCase {
    * Set up a controller so we dont have to build it each time.
    */
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // stolen from Drupal\Tests\Core\Datetime\DateTest::setUp()
@@ -39,33 +39,24 @@ class ContactControllerTest extends UnitTestCase {
     $container->set('config.factory', $configFactory);
     \Drupal::setContainer($container);
 
-    $mockRequest = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->getMock();
+    $mockRequest = $this->createMock('Symfony\Component\HttpFoundation\Request');
     $mockRequest->method('getContent')
       ->willReturn($this->getJunkJSON());
 
-    $mockRequestStack = $this->getMockBuilder('Symfony\Component\HttpFoundation\RequestStack')
-      ->getMock();
+    $mockRequestStack = $this->createMock('Symfony\Component\HttpFoundation\RequestStack');
     $mockRequestStack->method('getCurrentRequest')
       ->willReturn($mockRequest);
 
-    $mockLogger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelInterface')
-      ->getMock();
+    $mockLogger = $this->createMock('Drupal\Core\Logger\LoggerChannelInterface');
     $mockLogger->method('debug')
       ->will($this->returnCallback(function($input) {
         print $input;
       }));
 
-    $mockFbService = $this->getMockBuilder('Drupal\fb_messenger_bot\FacebookService')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $mockQueueFactory = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFbService = $this->createMock('Drupal\fb_messenger_bot\FacebookService');
+    $mockQueueFactory = $this->createMock('Drupal\Core\Queue\QueueFactory');
 
-    $mockFBBot = $this->getMockBuilder('Drupal\fb_messenger_bot\Bot\FBBot')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFBBot = $this->createMock('Drupal\fb_messenger_bot\Bot\FBBot');
 
     $this->controller = new ContactController($mockRequestStack, $mockLogger, $mockFbService, $mockQueueFactory, $mockFBBot);
 
diff --git a/tests/src/Unit/Message/ButtonMessageTest.php b/tests/src/Unit/Message/ButtonMessageTest.php
index 624660f..18cf9e3 100755
--- a/tests/src/Unit/Message/ButtonMessageTest.php
+++ b/tests/src/Unit/Message/ButtonMessageTest.php
@@ -28,7 +28,7 @@ class ButtonMessageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->text = 'A sample string to accompany button test objects.';
     $this->postbackButton = new PostbackButton('Postback Button', 'POSTBACK_PAYLOAD');
@@ -62,10 +62,9 @@ class ButtonMessageTest extends UnitTestCase {
 
   /**
    * Test invalidArgumentException is thrown when the $buttons parameter contains anything other than \Drupal\fb_messenger_bot\Message\ButtonBase buttons.
-   *
-   * @expectedException InvalidArgumentException
    */
   public function testInvalidButtonObjectThrowsException() {
+    $this->expectException(\InvalidArgumentException::class);
     $button = ['foo' => 'bar'];
     new ButtonMessage($this->text, $button);
     $this->expectException(InvalidArgumentException::class);
diff --git a/tests/src/Unit/Message/FacebookGenericMessageTest.php b/tests/src/Unit/Message/FacebookGenericMessageTest.php
index 8d3e232..1629672 100755
--- a/tests/src/Unit/Message/FacebookGenericMessageTest.php
+++ b/tests/src/Unit/Message/FacebookGenericMessageTest.php
@@ -21,7 +21,7 @@ class FacebookGenericMessageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->elements = array(
       array(
diff --git a/tests/src/Unit/Message/PostbackButtonTest.php b/tests/src/Unit/Message/PostbackButtonTest.php
index 5bdc69f..d4a42fb 100755
--- a/tests/src/Unit/Message/PostbackButtonTest.php
+++ b/tests/src/Unit/Message/PostbackButtonTest.php
@@ -20,7 +20,7 @@ class PostbackButtonTest extends UnitTestCase {
   public $payload;
   public $button;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->title = 'URL Button';
     $this->postback = 'http://www.example.com';
     $this->button = new PostbackButton($this->title, $this->payload);
diff --git a/tests/src/Unit/Message/TextMessageTest.php b/tests/src/Unit/Message/TextMessageTest.php
index 9d9378e..874b856 100755
--- a/tests/src/Unit/Message/TextMessageTest.php
+++ b/tests/src/Unit/Message/TextMessageTest.php
@@ -22,7 +22,7 @@ class TextMessageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->text = 'A sample string for testing.';
     $this->textMessage = new TextMessage($this->text);
diff --git a/tests/src/Unit/Message/UrlButtonTest.php b/tests/src/Unit/Message/UrlButtonTest.php
index 9c43257..3f5062e 100755
--- a/tests/src/Unit/Message/UrlButtonTest.php
+++ b/tests/src/Unit/Message/UrlButtonTest.php
@@ -20,7 +20,7 @@ class UrlButtonTest extends UnitTestCase {
   public $url;
   public $button;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->title = 'URL Button';
     $this->url = 'http://www.example.com';
     $this->button = new UrlButton($this->title, $this->url);
diff --git a/tests/src/Unit/Message/VideoMessageTest.php b/tests/src/Unit/Message/VideoMessageTest.php
index 6fba044..9ec8c3d 100755
--- a/tests/src/Unit/Message/VideoMessageTest.php
+++ b/tests/src/Unit/Message/VideoMessageTest.php
@@ -16,10 +16,9 @@ class VideoMessageTest extends UnitTestCase {
    * Tests that the constructor rejects non URL input.
    *
    * @dataProvider invalidUrlProvider
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testInvalidUrls($url) {
+    $this->expectException(\InvalidArgumentException::class);
     $videoMessage = new VideoMessage($url);
   }
 
diff --git a/tests/src/Unit/Step/BotWorkflowStepTest.php b/tests/src/Unit/Step/BotWorkflowStepTest.php
index b40a641..64d07e3 100755
--- a/tests/src/Unit/Step/BotWorkflowStepTest.php
+++ b/tests/src/Unit/Step/BotWorkflowStepTest.php
@@ -44,9 +44,8 @@ class BotWorkflowStepTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
-    $this->mockMessage = $this->getMockBuilder('\Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+  public function setUp(): void {
+    $this->mockMessage = $this->createMock('\Drupal\fb_messenger_bot\Message\MessageInterface');
 
     $this->mockMessageCallback = function($arg) {
       return $arg;
@@ -104,10 +103,9 @@ class BotWorkflowStepTest extends UnitTestCase {
 
   /**
    * Verify setting the validation with non-callable fails.
-   *
-   * @expectedException PHPUnit_Framework_Error
    */
   public function testSetValidationCallbackWithNonCallable() {
+    $this->expectException('PHPUnit_Framework_Error');
     $callback = "string";
     $this->assertSame($this->questionMessageStep, $this->questionMessageStep->setValidationCallback($callback), 'Error: successfully set validationCallback to a non-callable.');
   }
@@ -116,8 +114,7 @@ class BotWorkflowStepTest extends UnitTestCase {
    * Verify we can set the invalid message.
    */
   public function testSetInvalidMessage() {
-    $mockMessage = $this->getMockBuilder('Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+    $mockMessage = $this->createMock('Drupal\fb_messenger_bot\Message\MessageInterface');
     $this->assertSame($this->questionMessageStep, $this->questionMessageStep->setInvalidResponseMessage($mockMessage), 'Failed to set invalidMessage to an instance of the MessageInterface.');
   }
 
diff --git a/tests/src/Unit/Workflow/BotWorkflowTraitTest.php b/tests/src/Unit/Workflow/BotWorkflowTraitTest.php
index d60c616..743fd83 100755
--- a/tests/src/Unit/Workflow/BotWorkflowTraitTest.php
+++ b/tests/src/Unit/Workflow/BotWorkflowTraitTest.php
@@ -33,7 +33,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
    * workflow's full implementation and is closer to the method defined in the
    * trait.
    */
-  public function setUp() {
+  public function setUp(): void {
     // Instantiate a mock ConfigFactory.
     $configFactory = $this->getConfigFactoryStub([
       'fb_messenger_bot.settings' => [
@@ -43,25 +43,18 @@ class BotWorkflowTraitTest extends UnitTestCase {
 
     // Instantiate mock immutableConfig for configFactory stub's get() method.
     // @see Drupal\fb_messenger_bot\Workflow\FBMessengerBotWorkflow::buildSteps().
-    $immutableConfig = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $immutableConfig = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
 
     $configFactory->method('get')
       ->willReturn($immutableConfig);
 
-    $conversationFactory = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\ConversationFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $conversationFactory = $this->createMock('\Drupal\fb_messenger_bot\Conversation\ConversationFactory');
 
     $stringTranslation = $this->getStringTranslationStub();
 
-    $mockFbService = $this->getMockBuilder('Drupal\fb_messenger_bot\FacebookService')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFbService = $this->createMock('Drupal\fb_messenger_bot\FacebookService');
 
-    $mockLogger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelInterface')
-      ->getMock();
+    $mockLogger = $this->createMock('Drupal\Core\Logger\LoggerChannelInterface');
     $mockLogger->method('debug')
       ->will($this->returnCallback(function($input) {
         print $input;
@@ -89,8 +82,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
    */
   public function testSetStepsAcceptsArray() {
 
-    $mockMessage = $this->getMockBuilder('Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+    $mockMessage = $this->createMock('Drupal\fb_messenger_bot\Message\MessageInterface');
 
     $inputArray = array();
 
@@ -110,11 +102,10 @@ class BotWorkflowTraitTest extends UnitTestCase {
    * @dataProvider badDataProvider
    *
    * @parameter array $input array of bad data types
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testSetStepsRejectsBadTypes($input) {
 
+    $this->expectException(\InvalidArgumentException::class);
     $this->workflow->setSteps($input);
 
   }
@@ -162,9 +153,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
       'message_content' => 'start over',
     );
 
-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');
 
     $this->assertTrue($this->invokeMethod($this->workflow, 'preprocessSpecialMessages', array($incoming, &$mockConversation)));
 
@@ -203,9 +192,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
     );
 
     // Set up a Conversation mock for the Workflow to process.
-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');
 
     // Check that the return value is the array we set above when mocking the
     // checkDisallowedMessageType method.
@@ -224,9 +211,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
    */
   public function testProcessConversationReturnValue() {
 
-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');
     $mockConversation->method('getLastStep')->willReturn('welcome');
 
     $incomingMessage = array(
