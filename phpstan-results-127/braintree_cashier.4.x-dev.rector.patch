diff --git a/src/BillableUser.php b/src/BillableUser.php
index ff9206f..cf59e4e 100644
--- a/src/BillableUser.php
+++ b/src/BillableUser.php
@@ -162,7 +162,7 @@ class BillableUser {
     if (!$result->success) {
       $this->logger->error('Error creating payment method: ' . $result->message);
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
       if (!empty($result->creditCardVerification)) {
         $credit_card_verification = $result->creditCardVerification;
         if ($credit_card_verification->status == 'processor_declined') {
@@ -188,7 +188,7 @@ class BillableUser {
     $payment_method_type = get_class($result->paymentMethod);
 
     $event = new PaymentMethodUpdatedEvent($user, $payment_method_type);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::PAYMENT_METHOD_UPDATED, $event);
+    $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::PAYMENT_METHOD_UPDATED);
 
     return TRUE;
   }
@@ -333,7 +333,7 @@ class BillableUser {
     if (!$result->success) {
       $this->logger->error('Error creating Braintree customer: ' . $result->message);
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
       if (!empty($result->creditCardVerification)) {
         $credit_card_verification = $result->creditCardVerification;
         if ($credit_card_verification->status == 'processor_declined') {
@@ -366,7 +366,7 @@ class BillableUser {
     $user->save();
 
     $event = new BraintreeCustomerCreatedEvent($user);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_CUSTOMER_CREATED, $event);
+    $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_CUSTOMER_CREATED);
 
     // Invalidate the local tasks cache to make the "Invoices" task appear when
     // viewed by other users such as administrators.
diff --git a/src/Event/BraintreeCustomerCreatedEvent.php b/src/Event/BraintreeCustomerCreatedEvent.php
index 4940d8e..ef2d9fc 100644
--- a/src/Event/BraintreeCustomerCreatedEvent.php
+++ b/src/Event/BraintreeCustomerCreatedEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * A Braintree customer has been created for a user.
  */
-class BraintreeCustomerCreatedEvent extends Event {
+class BraintreeCustomerCreatedEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The user account for which the Braintree customer was created.
diff --git a/src/Event/BraintreeErrorEvent.php b/src/Event/BraintreeErrorEvent.php
index 154b912..bb6b9ae 100644
--- a/src/Event/BraintreeErrorEvent.php
+++ b/src/Event/BraintreeErrorEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event dispatched when there's an error interacting with the Braintree API.
  */
-class BraintreeErrorEvent extends Event {
+class BraintreeErrorEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The user entity.
diff --git a/src/Event/NewAccountAfterPlan.php b/src/Event/NewAccountAfterPlan.php
index c3646f8..8f15354 100644
--- a/src/Event/NewAccountAfterPlan.php
+++ b/src/Event/NewAccountAfterPlan.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Creates an event when a new user account is created after selecting a plan.
  */
-class NewAccountAfterPlan extends Event {
+class NewAccountAfterPlan extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The billing plan selected.
diff --git a/src/Event/NewSubscriptionEvent.php b/src/Event/NewSubscriptionEvent.php
index e5727b7..c8c05f4 100644
--- a/src/Event/NewSubscriptionEvent.php
+++ b/src/Event/NewSubscriptionEvent.php
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Creates an Event when a new subscription is created after signup.
  */
-class NewSubscriptionEvent extends Event {
+class NewSubscriptionEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The Braintree Subscription.
diff --git a/src/Event/PaymentMethodUpdatedEvent.php b/src/Event/PaymentMethodUpdatedEvent.php
index a5c80d0..a969536 100644
--- a/src/Event/PaymentMethodUpdatedEvent.php
+++ b/src/Event/PaymentMethodUpdatedEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * A user has updated their payment method.
  */
-class PaymentMethodUpdatedEvent extends Event {
+class PaymentMethodUpdatedEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The user that updated their payment method.
diff --git a/src/Event/SubscriptionCanceledByUserEvent.php b/src/Event/SubscriptionCanceledByUserEvent.php
index 689f508..a52ecc6 100644
--- a/src/Event/SubscriptionCanceledByUserEvent.php
+++ b/src/Event/SubscriptionCanceledByUserEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * A subscription was canceled by a user.
  */
-class SubscriptionCanceledByUserEvent extends Event {
+class SubscriptionCanceledByUserEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The subscription entity canceled.
diff --git a/src/EventSubscriber/KernelRequestSubscriber.php b/src/EventSubscriber/KernelRequestSubscriber.php
index 4e942ac..bba2edc 100644
--- a/src/EventSubscriber/KernelRequestSubscriber.php
+++ b/src/EventSubscriber/KernelRequestSubscriber.php
@@ -104,10 +104,10 @@ class KernelRequestSubscriber implements EventSubscriberInterface {
    * This method is called whenever the kernel.request event is
    * dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The symfony event.
    */
-  public function kernelRequest(GetResponseEvent $event) {
+  public function kernelRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
 
     if ($this->routeMatch->getRouteName() == 'braintree_cashier.signup_form') {
       // Don't cache this page even when anonymous page caching is enabled.
diff --git a/src/Form/CancelForm.php b/src/Form/CancelForm.php
index 247ece6..6a9bbde 100644
--- a/src/Form/CancelForm.php
+++ b/src/Form/CancelForm.php
@@ -177,7 +177,7 @@ class CancelForm extends ConfirmFormBase {
       $subscription->setCanceledAtDate(time());
       $subscription->save();
       $event = new SubscriptionCanceledByUserEvent($subscription);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::SUBSCRIPTION_CANCELED_BY_USER, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::SUBSCRIPTION_CANCELED_BY_USER);
     }
     $form_state->setRedirect('braintree_cashier.my_subscription', [
       'user' => $values['uid'],
diff --git a/src/Form/SignupForm.php b/src/Form/SignupForm.php
index 888d88d..0966297 100644
--- a/src/Form/SignupForm.php
+++ b/src/Form/SignupForm.php
@@ -273,7 +273,7 @@ class SignupForm extends PlanSelectFormBase {
     }
 
     $new_subscription_event = new NewSubscriptionEvent($braintree_subscription, $billing_plan, $subscription_entity, $form_state);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::NEW_SUBSCRIPTION, $new_subscription_event);
+    $this->eventDispatcher->dispatch($new_subscription_event, BraintreeCashierEvents::NEW_SUBSCRIPTION);
 
     $form_state->setRedirect('braintree_cashier.thank_you', [
       'subscription' => $subscription_entity->id(),
diff --git a/src/Form/UpdateSubscriptionFormConfirm.php b/src/Form/UpdateSubscriptionFormConfirm.php
index a6b8c39..84961a8 100644
--- a/src/Form/UpdateSubscriptionFormConfirm.php
+++ b/src/Form/UpdateSubscriptionFormConfirm.php
@@ -286,7 +286,7 @@ class UpdateSubscriptionFormConfirm extends ConfirmFormBase {
     }
 
     $new_subscription_event = new NewSubscriptionEvent($braintree_subscription, $this->billingPlan, $subscription_entity, $form_state);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::NEW_SUBSCRIPTION, $new_subscription_event);
+    $this->eventDispatcher->dispatch($new_subscription_event, BraintreeCashierEvents::NEW_SUBSCRIPTION);
     $form_state->setRedirect('braintree_cashier.thank_you', [
       'subscription' => $subscription_entity->id(),
     ]);
diff --git a/src/SubscriptionService.php b/src/SubscriptionService.php
index ecf46bb..a6f4314 100644
--- a/src/SubscriptionService.php
+++ b/src/SubscriptionService.php
@@ -316,7 +316,7 @@ class SubscriptionService {
     }
     else {
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
     }
   }
 
@@ -499,7 +499,7 @@ class SubscriptionService {
     if (!$result->success) {
       $this->processBraintreeSubscriptionCreateFailure($result);
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
       return FALSE;
     }
 
diff --git a/tests/src/Functional/AdminPagesTest.php b/tests/src/Functional/AdminPagesTest.php
index 54202a4..0c0c9fc 100644
--- a/tests/src/Functional/AdminPagesTest.php
+++ b/tests/src/Functional/AdminPagesTest.php
@@ -34,7 +34,7 @@ class AdminPagesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $billing_plan = $this->createMonthlyBillingPlan();
     $account = $this->createUser([], NULL, TRUE);
