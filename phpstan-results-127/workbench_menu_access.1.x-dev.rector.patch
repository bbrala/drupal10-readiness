diff --git a/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php b/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php
index cb645d3..c9d69aa 100644
--- a/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php
+++ b/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php
@@ -68,7 +68,7 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->node_type = $this->createContentType(['type' => 'page']);
@@ -88,7 +88,7 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');
 
     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ -105,15 +105,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
     // Setup config.
@@ -130,15 +130,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to editor user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
     // Add editor to section.
@@ -147,15 +147,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
     // Test for subsection handling.
@@ -170,15 +170,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
   }
diff --git a/tests/src/Functional/WorkbenchMenuAccessMenuTest.php b/tests/src/Functional/WorkbenchMenuAccessMenuTest.php
index 3d2580d..0c5dcc9 100644
--- a/tests/src/Functional/WorkbenchMenuAccessMenuTest.php
+++ b/tests/src/Functional/WorkbenchMenuAccessMenuTest.php
@@ -68,7 +68,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->node_type = $this->createContentType(['type' => 'page']);
@@ -84,7 +84,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');
 
     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ -94,23 +94,23 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     $path = '/admin/structure/menu/manage/main';
     $access_path = '/admin/structure/menu/manage/main/access';
     $this->drupalGet($path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
     $web_assert = $this->assertSession();
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
 
     $this->drupalLogin($this->admin);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldNotExists('workbench_menu_access[]');
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->pageTextContains('You must configure an access scheme to continue.');
 
     // Setup config.
@@ -121,7 +121,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     // Admin can access the form.
     $this->drupalLogin($this->admin);
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldExists('workbench_menu_access[]');
 
     // Save the form.
@@ -130,23 +130,23 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
 
     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
-    $this->assertEqual(array_values($menu->getThirdPartySetting('workbench_menu_access', 'access_scheme')), $edit);
+    $this->assertEquals(array_values($menu->getThirdPartySetting('workbench_menu_access', 'access_scheme')), $edit);
 
     // Editor can no longer access page.
     $this->drupalLogin($this->editor);
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
 
     // Editor can access the menu page but not the access form.
     $this->addUserToSection($scheme, $this->editor, [3]);
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
     // Admin can access the form.
     $this->drupalLogin($this->admin);
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldExists('workbench_menu_access[]');
 
     // Test for subsection handling.
@@ -158,7 +158,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     // Editor can access the page but not the form.
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
   }
 
diff --git a/tests/src/Functional/WorkbenchMenuAccessNodeFormTest.php b/tests/src/Functional/WorkbenchMenuAccessNodeFormTest.php
index 8432bc8..78d0cb8 100644
--- a/tests/src/Functional/WorkbenchMenuAccessNodeFormTest.php
+++ b/tests/src/Functional/WorkbenchMenuAccessNodeFormTest.php
@@ -69,7 +69,7 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->node_type = $this->createContentType(['type' => 'page']);
@@ -103,14 +103,15 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
       'menu_options[main]' => 1,
       'menu_parent' => 'main:',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, t('Save content type'));
     $this->node_type = $menu = \Drupal::entityTypeManager()->getStorage('node_type')->load('page');
     $this->assertNotEmpty($this->node_type->getThirdPartySetting('menu_ui', 'available_menus'));
 
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');
 
     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ -125,13 +126,19 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
     // Nothing is configured to restrict access.
     $this->drupalLogin($this->admin);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('empty');
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('empty');
 
@@ -166,13 +173,19 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
     // Check node forms as admin and editor.
     // Main menu is configured to restrict access.
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('main');
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertNoText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Provide a menu link');
 
     // Expand the menu options of the node type.
     $this->drupalLogin($this->admin);
@@ -181,7 +194,8 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
       'menu_options[main]' => 1,
       'menu_parent' => 'main:',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, t('Save content type'));
 
     // Check node forms as admin and editor.
     // Main menu is configured to restrict access but 'new' is not and should
@@ -189,13 +203,19 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('new');
 
     $this->drupalLogin($this->admin);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('all');
 
@@ -214,13 +234,19 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
     // Main menu is configured to restrict access but 'new' is not and should
     // return data.
     $this->drupalGet($node_edit_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('all');
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($node_edit_path);
-    $this->assertText('You may not edit the menu this content is assigned to.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You may not edit the menu this content is assigned to.');
 
     // Remove new from the options.
     $this->drupalLogin($this->admin);
@@ -229,32 +255,45 @@ class WorkbenchMenuAccessNodeFormTest extends BrowserTestBase {
       'menu_options[main]' => 1,
       'menu_parent' => 'main:',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, t('Save content type'));
 
     // Add editor to the menu section.
     $this->addUserToSection($scheme, $this->editor, [3]);
 
     $this->drupalGet($node_edit_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('main');
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($node_edit_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('main');
 
     // Check node forms as admin and editor.
     // Main menu is configured to restrict access and the editor has it.
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('main', 'Node 1');
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($node_add_path);
-    $this->assertText('Provide a menu link');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Provide a menu link');
 
     $this->checkOptions('main', 'Node 1');
 
diff --git a/tests/src/Functional/WorkbenchMenuAccessSettingsTest.php b/tests/src/Functional/WorkbenchMenuAccessSettingsTest.php
index e92bb3f..00ec175 100644
--- a/tests/src/Functional/WorkbenchMenuAccessSettingsTest.php
+++ b/tests/src/Functional/WorkbenchMenuAccessSettingsTest.php
@@ -67,7 +67,7 @@ class WorkbenchMenuAccessSettingsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->node_type = $this->createContentType(['type' => 'page']);
@@ -82,25 +82,31 @@ class WorkbenchMenuAccessSettingsTest extends BrowserTestBase {
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');
 
     // Access tests.
     $path = '/admin/config/workflow/workbench_access/menu_settings';
     $this->drupalGet($path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
     $this->drupalLogin($this->admin);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
 
     // Form tests.
-    $this->assertText('You must create an access scheme to continue.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You must create an access scheme to continue.');
 
     $this->setUpTaxonomyScheme($this->node_type, $this->vocabulary);
     $this->drupalGet($path);
-    $this->assertNoText('You must create an access scheme to continue.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('You must create an access scheme to continue.');
 
     $web_assert = $this->assertSession();
     $web_assert->optionExists('access_scheme', 'Editorial section');
@@ -108,11 +114,14 @@ class WorkbenchMenuAccessSettingsTest extends BrowserTestBase {
     $option_field = $web_assert->optionExists('access_scheme', 'Editorial section');
     $this->assertTrue($option_field->hasAttribute('selected'), 'Item selected');
 
-    $this->assertText('The taxonomy scheme Editorial section is used for menu access.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The taxonomy scheme Editorial section is used for menu access.');
 
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, 'editorial_section');
+    $this->assertEquals($active, 'editorial_section');
   }
 }
diff --git a/workbench_menu_access.info.yml b/workbench_menu_access.info.yml
index 71dffaf..7c1c229 100644
--- a/workbench_menu_access.info.yml
+++ b/workbench_menu_access.info.yml
@@ -1,7 +1,7 @@
 name: Workbench Menu Access
 type: module
 description: Adds Workbench Access controls to menus.
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 configure: workbench_menu_access.admin
 package: Workbench
 dependencies:
