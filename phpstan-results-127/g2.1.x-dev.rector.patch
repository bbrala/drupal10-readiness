diff --git a/g2.admin.inc b/g2.admin.inc
index 0b7dec5..ca8f70a 100644
--- a/g2.admin.inc
+++ b/g2.admin.inc
@@ -230,7 +230,7 @@ function g2_admin_settings_submit(&$form, &$form_state) {
 function g2_admin_settings_validate($form, &$form_state) {
   $main = $form_state['values']['g2_main'];
   if (is_numeric($main)) {
-    if ($main != 0 && !is_object(node_load($main))) {
+    if ($main != 0 && !is_object(\Drupal::service('entity_type.manager')->getStorage('node')->load($main))) {
       form_set_error('g2_main', t('The node chosen for the main page must be a valid one, or 0: "@nid" is not a valid node id.',
         array('@nid' => $main)));
     }
@@ -241,7 +241,7 @@ function g2_admin_settings_validate($form, &$form_state) {
   }
 
   $nid = $form_state['values']['g2_homonyms'];
-  if ($nid != 0 && !is_object(node_load($nid))) {
+  if ($nid != 0 && !is_object(\Drupal::service('entity_type.manager')->getStorage('node')->load($nid))) {
     form_set_error('g2_homonyms', t('The node chosen for the homonyms disambiguation page must be a valid one, or 0: "@nid" is not a valid node id.',
       array('@nid' => $nid)));
   }
diff --git a/g2.install.php b/g2.install.php
index 914768f..5b96fcb 100644
--- a/g2.install.php
+++ b/g2.install.php
@@ -131,7 +131,9 @@ WHERE v.name LIKE 'g2_%%info' OR v.name LIKE 'g2_%%title'
   OR v.name LIKE 'g2/%%'
 SQL;
 
-  $result = db_query($sql);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $result = \Drupal::database()->query($sql);
 
   $count = 0;
   while (is_object($row = db_fetch_object($result))) {
@@ -145,6 +147,9 @@ SQL;
   else {
     $message = t('No obsolete variable to clean.');
   }
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // This needs to be replaced, but Rector was not yet able to replace this because the type of message was set with a variable. If you need to continue to use a variable, you might consider using a switch statement.
+  // @noRector
   drupal_set_message($message, status);
 
   /* Convert Drupal 4.7.x/5.x block deltas
@@ -161,7 +166,7 @@ SQL;
   $sql = "UPDATE {blocks} b SET delta = '%s' WHERE module = '%s' AND delta = %d ";
   $count = 0;
   foreach ($delta_changes as $old => $new) {
-    db_query($sql, $new, 'g2', $old);
+    \Drupal::database()->query($sql, $new, 'g2', $old);
     $count += db_affected_rows();
   }
 
@@ -173,7 +178,7 @@ SQL;
     $message = t('No obsolete delta to convert.');
   }
 
-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return array();
 }
 
@@ -209,7 +214,7 @@ function g2_update_6001() {
   else {
     $message = t('No old token to convert for the WOTD feed settings.');
   }
-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return array();
 }
 
@@ -233,6 +238,6 @@ function g2_update_6002() {
   else {
     $message = t('g2_referer table was there. No need to recreate it.');
   }
-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return $ret;
 }
diff --git a/g2.module b/g2.module
index 1b46af3..f4ebcab 100644
--- a/g2.module
+++ b/g2.module
@@ -155,7 +155,7 @@ function g2_help($route_name, RouteMatchInterface $route_match) {
       $definition = $block->getPlugin()->getPluginDefinition();
       if ($definition['provider'] === 'g2') {
         $id = $block->getPluginId();
-        $delta = \Drupal\Component\Utility\Unicode::substr($id, 3);
+        $delta = mb_substr($id, 3);
         $helps = [
           G2::DELTA_ALPHABAR => t('This block displays a clickable list of initials from the G2 glossary.'),
           G2::DELTA_RANDOM => t('This block displays a pseudo-random entry from the G2 glossary.'),
@@ -427,7 +427,9 @@ function _g2_random() {
     . "WHERE n.type = '%s' AND (n.status = 1) "
     . "  AND NOT (n.title = '%s' OR n.nid = %d)";
   $sq = db_rewrite_sql($sq);
-  $q = db_query($sq, G2NODETYPE, $random, $wotd_nid);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+  $q = \Drupal::database()->query($sq, G2NODETYPE, $random, $wotd_nid);
   $n = db_result($q);
 
   $rand = mt_rand(0, $n - 1); // no need to mt_srand() since PHP 4.2
@@ -441,7 +443,7 @@ function _g2_random() {
   $sq = db_rewrite_sql($sq);
   $q = db_query_range($sq, G2NODETYPE, $random, $wotd_nid, $rand, 1);
   $nid = db_result($q);
-  $node = node_load($nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   $node->taxonomy = variable_get(G2VARRANDOMTERMS, G2DEFRANDOMTERMS)
     ? _g2_comb_taxonomy($node->taxonomy)
     : [];
@@ -483,12 +485,14 @@ function _g2_referer_links($form_state, $node) {
     . "WHERE gr.nid = %d "
     . tablesort_sql($header);
   $sq = db_rewrite_sql($sq);
-  $q = db_query($sq, $nid);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $q = \Drupal::database()->query($sq, $nid);
   $rows = [];
   while (is_object($o = db_fetch_object($q))) {
     $sts = preg_match('/node\/(\d+)/', $o->referer, $matches);
     if ($sts) {
-      $node = node_load($matches[1]);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($matches[1]);
       $title = l($node->title, 'node/' . $node->nid);
     }
     else {
@@ -569,12 +573,16 @@ function _g2_referer_links_submit(&$form, &$form_state) {
 function _g2_referer_wipe($nid = NULL) {
   if (isset($nid)) {
     $sq = 'DELETE from {g2_referer} WHERE nid = %d';
-    db_query($sq, $nid);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->query($sq, $nid);
     drupal_goto('node/' . $nid);
   }
   else {
     $sq = 'DELETE from {g2_referer}';
-    db_query($sq);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->query($sq);
   }
 }
 
@@ -589,7 +597,7 @@ function _g2_referer_wipe($nid = NULL) {
 function _g2_wotd($bodysize = 0) {
   // No need for a static: this function is normally never called twice.
   $nid = variable_get(G2VARWOTDENTRY, G2DEFWOTDENTRY);
-  $node = node_load($nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   if (empty($node)) {
     return NULL;
   }
@@ -704,7 +712,7 @@ function g2_block($op = 'list', $delta = 0, $edit = []) {
          * @see _g2_autocomplete()
          */
         $nid = variable_get(G2VARWOTDENTRY, G2DEFWOTDENTRY);
-        $node = node_load($nid);
+        $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
         if (empty($node)) {
           $node = new stdClass();
           $node->nid = 0;
@@ -896,7 +904,9 @@ function g2_cron() {
  * Implement hook_delete().
  */
 function g2_delete(&$node) {
-  db_query('DELETE FROM {g2_node} WHERE nid = %d', $node->nid);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->query('DELETE FROM {g2_node} WHERE nid = %d', $node->nid);
 }
 
 /**
@@ -917,10 +927,12 @@ function g2_entry_load($title) {
   $min_status = user_access('administer nodes')
     ? NODE_NOT_PUBLISHED
     : NODE_PUBLISHED;
-  $q = db_query($sq, G2NODETYPE, $min_status, $title);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+  $q = \Drupal::database()->query($sq, G2NODETYPE, $min_status, $title);
   $nodes = [];
   while (is_object($node = db_fetch_object($q))) {
-    $nodes[$node->nid] = node_load($node->nid);
+    $nodes[$node->nid] = \Drupal::service('entity_type.manager')->getStorage('node')->load($node->nid);
   }
   return $nodes;
 }
@@ -1067,7 +1079,9 @@ function g2_insert($node) {
  * @XXX New feature to add: make extra node info revision-aware
  */
 function g2_load($node) {
-  $ret = db_fetch_object(db_query('SELECT * FROM {g2_node} WHERE nid = %s', $node->nid));
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $ret = db_fetch_object(\Drupal::database()->query('SELECT * FROM {g2_node} WHERE nid = %s', $node->nid));
   return $ret;
 }
 
@@ -1294,7 +1308,7 @@ function g2_referer_wipe_confirm_form(FormStateInterface $form_state, NodeInterf
  */
 function g2_referer_wipe_confirm_form_submit($form, &$form_state) {
   _g2_referer_wipe();
-  drupal_set_message(t('Referer information has been erased on all G2 entries'));
+  \Drupal::messenger()->addStatus(t('Referer information has been erased on all G2 entries'));
   $form_state['redirect'] = G2PATHSETTINGS;
 }
 
@@ -1426,12 +1440,16 @@ function g2_view(&$node, $teaser = FALSE, $page = FALSE) {
     $sq = 'UPDATE {g2_referer} '
       . 'SET incoming = incoming + 1 '
       . "WHERE nid = %d AND referer = '%s'";
-    db_query($sq, $node->nid, $referer);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+    \Drupal::database()->query($sq, $node->nid, $referer);
     if (!db_affected_rows()) {
       $sq = 'INSERT INTO {g2_referer} '
         . '  (nid, referer, incoming) '
         . "VALUES (%d, '%s', 1) ";
-      db_query($sq, $node->nid, $referer);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+      \Drupal::database()->query($sq, $node->nid, $referer);
     }
   }
   else {
@@ -1664,7 +1682,7 @@ function Zg2_block_configure($delta) {
       // Convert nid to "title [<nid>]" even if missing.
       // @see autocomplete()
       $nid = variable_get(G2\VARWOTDENTRY, G2\DEFWOTDENTRY);
-      $node = node_load($nid);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
       if (empty($node)) {
         $node = new stdClass();
         $node->nid = 0;
@@ -1820,7 +1838,7 @@ function Zg2_block_save($delta, $edit) {
       variable_set(G2\VARWOTDENTRY, $nid);
       variable_set(G2\VARWOTDBODYSIZE, $edit[G2\VARWOTDBODYSIZE]);
       variable_set(G2\VARWOTDAUTOCHANGE, $edit[G2\VARWOTDAUTOCHANGE]);
-      variable_set(G2\VARWOTDDATE, REQUEST_TIME);
+      variable_set(G2\VARWOTDDATE, \Drupal::time()->getRequestTime());
       variable_set(G2\VARWOTDTERMS, $edit[G2\VARWOTDTERMS]);
       variable_set(G2\VARWOTDFEEDLINK, $edit[G2\VARWOTDFEEDLINK]);
       variable_set(G2\VARWOTDFEEDTITLE, $edit[G2\VARWOTDFEEDTITLE]);
@@ -1896,7 +1914,7 @@ function Zg2_context_registry() {
  */
 function Zg2_cron() {
   if (variable_get(G2\VARWOTDAUTOCHANGE, G2\DEFWOTDAUTOCHANGE)) {
-    $date0 = date('z', variable_get(G2\VARWOTDDATE, REQUEST_TIME));
+    $date0 = date('z', variable_get(G2\VARWOTDDATE, \Drupal::time()->getRequestTime()));
     $date1 = date('z');
     if ($date1 <> $date0) {
       $random = G2\random();
@@ -1932,7 +1950,9 @@ function Zg2_ctools_plugin_api($module, $api) {
  */
 function Zg2_delete($node) {
   // dsm($node, __FUNCTION__);
-  db_delete('g2_node')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('g2_node')
     ->condition('nid', $node->nid)
     ->execute();
 }
@@ -2114,7 +2134,9 @@ function Zg2_insert($node) {
  * XXX New feature to add: make extra node info revision-aware.
  */
 function Zg2_load($nodes) {
-  $q = db_select('g2_node', 'gn');
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $q = \Drupal::database()->select('g2_node', 'gn');
   $result = $q->fields('gn')
     ->condition('gn.nid', array_keys($nodes), 'IN')
     ->execute();
@@ -2194,7 +2216,7 @@ function Zg2_menu() {
  *   - FALSE otherwise
  */
 function Zg2_nid_load($us_nid = 0) {
-  $node = node_load($us_nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($us_nid);
   if ($node->type != G2\NODETYPE) {
     $node = NULL;
   }
@@ -2264,7 +2286,7 @@ function Zg2_node_info() {
  */
 function Zg2_node_view($node, $view_mode, $langcode) {
   if ($view_mode == 'rss' && $node->type == G2\NODETYPE && ($_GET['q'] == G2\PATHWOTDFEED)) {
-    $node->created = variable_get(G2\VARWOTDDATE, REQUEST_TIME);
+    $node->created = variable_get(G2\VARWOTDDATE, \Drupal::time()->getRequestTime());
     $node->name = filter_xss_admin(
       strtr(
         variable_get(G2\VARWOTDFEEDAUTHOR, '@author'),
@@ -2317,7 +2339,9 @@ function Zg2_update($node) {
  * Implements hook_user_load().
  */
 function Zg2_user_load($users) {
-  $q = db_select('node', 'n');
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $q = \Drupal::database()->select('node', 'n');
   $result = $q->fields('n', ['nid', 'title', 'uid', 'type'])
     ->condition('n.type', G2\NODETYPE)
     ->condition('n.status', 1)
diff --git a/src/Alphabar.php b/src/Alphabar.php
index 00203f1..ce3d676 100644
--- a/src/Alphabar.php
+++ b/src/Alphabar.php
@@ -85,8 +85,8 @@ class Alphabar {
     $initials = $this->config['contents'];
     $route_name = $this->routeName;
 
-    for ($i = 0; $i < Unicode::strlen($initials); $i++) {
-      $initial = Unicode::substr($initials, $i, 1);
+    for ($i = 0; $i < mb_strlen($initials); $i++) {
+      $initial = mb_substr($initials, $i, 1);
       $path = G2::encodeTerminal($initial);
       $parameters = ['g2_initial' => $path];
       $url = Url::fromRoute($route_name, $parameters, $options);
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 110eaec..96b0005 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -500,7 +500,7 @@ class SettingsForm extends ConfigFormBase {
   public function submitControllerForm() {
     // @TODO Really necessary ? We change selected routes, not modifying them.
     $this->routerBuilder->rebuild();
-    drupal_set_message($this->t('The router has been rebuilt.'));
+    $this->messenger()->addStatus($this->t('The router has been rebuilt.'));
   }
 
   /**
@@ -518,7 +518,7 @@ class SettingsForm extends ConfigFormBase {
       $this->{$handler}();
     }
 
-    drupal_set_message($this->t('The configuration options have been saved.'));
+    $this->messenger()->addStatus($this->t('The configuration options have been saved.'));
   }
 
 }
diff --git a/src/Tests/AlphabarTest.php b/src/Tests/AlphabarTest.php
index 3e3467b..700945d 100644
--- a/src/Tests/AlphabarTest.php
+++ b/src/Tests/AlphabarTest.php
@@ -44,7 +44,7 @@ class AlphabarTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(static::MODULES);
     $this->installSchema('system', 'router');
@@ -62,7 +62,7 @@ class AlphabarTest extends KernelTestBase {
     $links = $this->alphabar->getLinks();
     $this->assertTrue(is_array($links));
 
-    $expected = Unicode::strlen($this->alphabar->getContents());
+    $expected = mb_strlen($this->alphabar->getContents());
     $actual = count($links);
     $this->assertEquals($expected, $actual, 'The number of links matches the number of runes in alphabar.contents');
   }
