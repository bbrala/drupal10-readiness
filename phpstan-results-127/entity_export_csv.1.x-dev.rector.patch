diff --git a/src/EntityExportCsvManager.php b/src/EntityExportCsvManager.php
index 4d6d370..1225754 100644
--- a/src/EntityExportCsvManager.php
+++ b/src/EntityExportCsvManager.php
@@ -257,7 +257,7 @@ class EntityExportCsvManager implements EntityExportCsvManagerInterface {
       }
     }
     $event = new EntityExportCsvFieldsSupportedEvent($options, $entity_type_id, $bundle, $return_field_definition);
-    $this->eventDispatcher->dispatch(EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_SUPPORTED, $event);
+    $this->eventDispatcher->dispatch($event, EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_SUPPORTED);
     $options = $event->getFields();
     return $options;
   }
@@ -272,7 +272,7 @@ class EntityExportCsvManager implements EntityExportCsvManagerInterface {
       $options = array_intersect_key($options, $bundle_fields_settings);
     }
     $event = new EntityExportCsvFieldsEnabledEvent($options, $entity_type_id, $bundle, $return_field_definition);
-    $this->eventDispatcher->dispatch(EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_ENABLE, $event);
+    $this->eventDispatcher->dispatch($event, EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_ENABLE);
     $options = $event->getFields();
     return $options;
   }
diff --git a/src/Event/EntityExportCsvFieldsEvent.php b/src/Event/EntityExportCsvFieldsEvent.php
index 1365e86..26e8684 100644
--- a/src/Event/EntityExportCsvFieldsEvent.php
+++ b/src/Event/EntityExportCsvFieldsEvent.php
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
  * type end bundle. Module can also add pseudo field, based of an existing
  * field, if they want export same field several times in distinct format.
  */
-class EntityExportCsvFieldsEvent extends Event {
+class EntityExportCsvFieldsEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * An array of field definition (or label) keyed by the field name.
diff --git a/src/Plugin/FieldTypeExport/DateRangeExport.php b/src/Plugin/FieldTypeExport/DateRangeExport.php
index 842308d..9327b77 100644
--- a/src/Plugin/FieldTypeExport/DateRangeExport.php
+++ b/src/Plugin/FieldTypeExport/DateRangeExport.php
@@ -122,7 +122,7 @@ class DateRangeExport extends FieldTypeExportBase {
     $options = parent::getFormatExportOptions($field_definition);
     $date_formats = [];
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');
     return $options + $date_formats;
diff --git a/src/Plugin/FieldTypeExport/DateTimeExport.php b/src/Plugin/FieldTypeExport/DateTimeExport.php
index c320748..da6b00e 100644
--- a/src/Plugin/FieldTypeExport/DateTimeExport.php
+++ b/src/Plugin/FieldTypeExport/DateTimeExport.php
@@ -116,7 +116,7 @@ class DateTimeExport extends FieldTypeExportBase {
     $options = parent::getFormatExportOptions($field_definition);
     $date_formats = [];
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');
     return $options + $date_formats;
diff --git a/src/Plugin/FieldTypeExport/TimestampExport.php b/src/Plugin/FieldTypeExport/TimestampExport.php
index 8adf845..aca809f 100644
--- a/src/Plugin/FieldTypeExport/TimestampExport.php
+++ b/src/Plugin/FieldTypeExport/TimestampExport.php
@@ -48,7 +48,7 @@ class TimestampExport extends FieldTypeExportBase {
     $date_formats = [];
     $date_formats[''] = $this->t('None');
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');
 
@@ -99,7 +99,7 @@ class TimestampExport extends FieldTypeExportBase {
     $options = parent::getFormatExportOptions($field_definition);
     $date_formats = [];
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');
     return $options + $date_formats;
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 13016f4..d0816bb 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -29,7 +29,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
