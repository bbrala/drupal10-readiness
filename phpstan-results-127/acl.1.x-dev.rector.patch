diff --git a/src/Tests/AclTest.php b/src/Tests/AclTest.php
index 8e60eab..4d89a55 100644
--- a/src/Tests/AclTest.php
+++ b/src/Tests/AclTest.php
@@ -101,7 +101,8 @@ class AclTest extends BrowserTestBase {
       ->condition('acl_id', $acl_id)
       ->execute()
       ->fetchAll();
-    $this->assertEqual(count($records), 1, t('ACL was succesfully created.'), $group = 'ACL');
+    $this->assertEquals(count($records), 1, t('ACL was succesfully created.'));
+    $this->assertEqualsWithDelta(count($records), 1, $group = 'ACL', t('ACL was succesfully created.'));
 
     // Add user (can't we use the user created in setup?).
     $web_user_1 = $this->drupalCreateUser();
@@ -113,7 +114,8 @@ class AclTest extends BrowserTestBase {
       ->execute()
       ->fetchAll();
     // Verify user is added.
-    $this->assertEqual(count($records), 1, t('User was successfully added.'), $group = 'ACL');
+    $this->assertEquals(count($records), 1, t('User was successfully added.'));
+    $this->assertEqualsWithDelta(count($records), 1, $group = 'ACL', t('User was successfully added.'));
 
     // Remove user.
     acl_remove_user($acl_id, $web_user_1->id());
@@ -123,7 +125,8 @@ class AclTest extends BrowserTestBase {
       ->execute()
       ->fetchAll();
     // Verify user is removed.
-    $this->assertEqual(count($records), 0, t('User was successfully removed.'), $group = 'ACL');
+    $this->assertEquals(count($records), 0, t('User was successfully removed.'));
+    $this->assertEqualsWithDelta(count($records), 0, $group = 'ACL', t('User was successfully removed.'));
   }
 
   /**
@@ -151,7 +154,8 @@ class AclTest extends BrowserTestBase {
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t("2 nodes under control ($count)."), $group = 'ACL');
+    $this->assertEquals($count, 2, t("2 nodes under control ($count)."));
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t("2 nodes under control ($count)."));
     // Add a third node.
     acl_node_add_acl($node3->id(), $acl_id1, 1, 1, 1);
     $count = \Drupal::database()->select('acl_node')
@@ -159,7 +163,8 @@ class AclTest extends BrowserTestBase {
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 3, t('3 nodes under control.'), $group = 'ACL');
+    $this->assertEquals($count, 3, t('3 nodes under control.'));
+    $this->assertEqualsWithDelta($count, 3, $group = 'ACL', t('3 nodes under control.'));
     // Add the second node again.
     acl_node_add_acl($node2->id(), $acl_id1, 1, 1, 1);
     $count = \Drupal::database()->select('acl_node')
@@ -167,7 +172,8 @@ class AclTest extends BrowserTestBase {
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 3, t('Still only 3 nodes under control.'), $group = 'ACL');
+    $this->assertEquals($count, 3, t('Still only 3 nodes under control.'));
+    $this->assertEqualsWithDelta($count, 3, $group = 'ACL', t('Still only 3 nodes under control.'));
 
     // Remove the second node again.
     acl_node_remove_acl($node2->id(), $acl_id1);
@@ -176,7 +182,8 @@ class AclTest extends BrowserTestBase {
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t('2 nodes left under control.'), $group = 'ACL');
+    $this->assertEquals($count, 2, t('2 nodes left under control.'));
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t('2 nodes left under control.'));
     // Remove the second node again.
     acl_node_remove_acl($node2->id(), $acl_id1);
     $count = \Drupal::database()->select('acl_node')
@@ -184,7 +191,8 @@ class AclTest extends BrowserTestBase {
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t('Still 2 nodes left under control.'), $group = 'ACL');
+    $this->assertEquals($count, 2, t('Still 2 nodes left under control.'));
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t('Still 2 nodes left under control.'));
 
     // Create another ACL and add nodes.
     $acl_id2 = acl_create_acl('test3', 'test', 2);
@@ -196,7 +204,8 @@ class AclTest extends BrowserTestBase {
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t('2 nodes under control.'), $group = 'ACL');
+    $this->assertEquals($count, 2, t('2 nodes under control.'));
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t('2 nodes under control.'));
     // Remove a node (which has two ACLs).
     acl_node_clear_acls($node1->id(), 'test3');
     $count = \Drupal::database()->select('acl_node')
@@ -204,13 +213,15 @@ class AclTest extends BrowserTestBase {
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 1, t('1 node left under control.'), $group = 'ACL');
+    $this->assertEquals($count, 1, t('1 node left under control.'));
+    $this->assertEqualsWithDelta($count, 1, $group = 'ACL', t('1 node left under control.'));
     $count = \Drupal::database()->select('acl_node')
       ->condition('acl_id', $acl_id2)
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 1, t('1 node left under control.'), $group = 'ACL');
+    $this->assertEquals($count, 1, t('1 node left under control.'));
+    $this->assertEqualsWithDelta($count, 1, $group = 'ACL', t('1 node left under control.'));
   }
 
 }
