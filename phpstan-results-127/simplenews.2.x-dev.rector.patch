diff --git a/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php b/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
index e75afc2..2603be0 100644
--- a/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
+++ b/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
@@ -26,7 +26,7 @@ class SimplenewsDemoTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Install bartik theme.
     \Drupal::service('theme_installer')->install(['bartik']);
@@ -45,10 +45,22 @@ class SimplenewsDemoTest extends BrowserTestBase {
    */
   public function testInstalled() {
     // Check for the two subscription blocks.
-    $this->assertText('Simplenews multiple subscriptions');
-    $this->assertText('Stay informed - subscribe to our newsletters.');
-    $this->assertText('Simplenews subscription');
-    $this->assertText('Stay informed - subscribe to our newsletter.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Simplenews multiple subscriptions');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Stay informed - subscribe to our newsletters.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Simplenews subscription');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Stay informed - subscribe to our newsletter.');
 
     $this->drupalGet('admin/config/services/simplenews');
     $this->clickLink(t('Edit'));
@@ -60,29 +72,59 @@ class SimplenewsDemoTest extends BrowserTestBase {
     $this->assertEquals('simpletest@example.com', (string) $from_address->getValue());
     // Assert demo newsletters.
     $this->drupalGet('admin/config/services/simplenews');
-    $this->assertText(t('Press releases'));
-    $this->assertText(t('Special offers'));
-    $this->assertText(t('Weekly content update'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Press releases'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Special offers'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Weekly content update'));
     // Assert demo newsletters sent.
     $this->drupalGet('admin/content/simplenews');
     // @codingStandardsIgnoreLine
     //$this->assertText('Scheduled weekly content newsletter issue');
-    $this->assertText('Sent press releases');
-    $this->assertText('Unpublished press releases');
-    $this->assertText('Pending special offers');
-    $this->assertText('Stopped special offers');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sent press releases');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Unpublished press releases');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Pending special offers');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Stopped special offers');
     // @codingStandardsIgnoreLine
     //$this->assertText('Scheduled weekly content newsletter issue - Week ');
-    $this->assertRaw(t('Newsletter issue sent to 2 subscribers, 0 errors.'));
-    $this->assertRaw(t('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.'));
+    $this->assertSession()->responseContains(t('Newsletter issue sent to 2 subscribers, 0 errors.'));
+    $this->assertSession()->responseContains(t('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.'));
     // Weekly newsletter.
     // @codingStandardsIgnoreLine
     //$this->assertRaw(t('Newsletter issue sent to 1 subscribers, 0 errors.'));
     // Assert demo subscribers.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertText('a@example.com');
-    $this->assertText('b@example.com');
-    $this->assertText('demouser1@example.com');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('a@example.com');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('b@example.com');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('demouser1@example.com');
   }
 
 }
diff --git a/simplenews.module b/simplenews.module
index c07c3ca..71ed942 100644
--- a/simplenews.module
+++ b/simplenews.module
@@ -718,7 +718,7 @@ function simplenews_help($route_name, RouteMatchInterface $route_match) {
 /**
  * Generates the hash key used for subscribe/unsubscribe link.
  */
-function simplenews_generate_hash($mail, $action = '', $timestamp = REQUEST_TIME) {
+function simplenews_generate_hash($mail, $action = '', $timestamp = \Drupal::time()->getRequestTime()) {
   $data = $mail . \Drupal::service('private_key')->get() . $action . $timestamp;
   return Crypt::hashBase64($data);
 }
diff --git a/simplenews.tokens.inc b/simplenews.tokens.inc
index 8cc135e..0499df6 100644
--- a/simplenews.tokens.inc
+++ b/simplenews.tokens.inc
@@ -92,7 +92,7 @@ function simplenews_tokens($type, $tokens, $data, $options, BubbleableMetadata $
       $url_arguments = ['absolute' => TRUE, 'langcode' => $language];
 
       foreach ($tokens as $name => $original) {
-        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => REQUEST_TIME];
+        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => \Drupal::time()->getRequestTime()];
         switch ($name) {
           case 'subscribe-url':
             $hash = simplenews_generate_hash($subscriber->getMail(), 'add');
diff --git a/src/Controller/ConfirmationController.php b/src/Controller/ConfirmationController.php
index 39b766e..f6200d9 100644
--- a/src/Controller/ConfirmationController.php
+++ b/src/Controller/ConfirmationController.php
@@ -57,7 +57,7 @@ class ConfirmationController extends ControllerBase {
     if ($subscriber && $hash == simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $timestamp)) {
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
         ];
@@ -159,7 +159,7 @@ class ConfirmationController extends ControllerBase {
 
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
           'newsletter' => $newsletter,
diff --git a/src/Entity/Subscriber.php b/src/Entity/Subscriber.php
index 2587d94..6b421dd 100644
--- a/src/Entity/Subscriber.php
+++ b/src/Entity/Subscriber.php
@@ -241,7 +241,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = $status;
     }
@@ -262,7 +262,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED;
     }
diff --git a/src/Mail/Mailer.php b/src/Mail/Mailer.php
index 44b850b..97e3408 100644
--- a/src/Mail/Mailer.php
+++ b/src/Mail/Mailer.php
@@ -309,7 +309,7 @@ class Mailer implements MailerInterface {
         $this->logger->notice('%success emails sent, %skipped skipped, %fail failed permanently, %retry failed retrying.', $log_array);
       }
 
-      $this->state->set('simplenews.last_cron', REQUEST_TIME);
+      $this->state->set('simplenews.last_cron', \Drupal::time()->getRequestTime());
       $this->state->set('simplenews.last_sent', $freq[SpoolStorageInterface::STATUS_DONE]);
 
       $this->accountSwitcher->switchBack();
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
index 66c64e4..e18d9d9 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
@@ -135,7 +135,7 @@ abstract class RecipientHandlerBase extends PluginBase implements RecipientHandl
       'entity_type' => $this->issue->getEntityTypeId(),
       'entity_id' => $this->issue->id(),
       'status' => SpoolStorageInterface::STATUS_PENDING,
-      'timestamp' => REQUEST_TIME,
+      'timestamp' => \Drupal::time()->getRequestTime(),
       'newsletter_id' => $this->getNewsletterId(),
     ];
 
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
index 7f34c4a..c0c4073 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
@@ -20,7 +20,7 @@ abstract class RecipientHandlerSelectBase extends RecipientHandlerBase {
     $query->addExpression("'$entity_type'", 'entity_type');
     $query->addExpression($this->issue->id(), 'entity_id');
     $query->addExpression(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, 'status');
-    $query->addExpression(REQUEST_TIME, 'timestamp');
+    $query->addExpression(\Drupal::time()->getRequestTime(), 'timestamp');
     $this->connection->insert('simplenews_mail_spool')->from($query)->execute();
 
     return $query->countQuery()->execute()->fetchField();
diff --git a/src/Spool/SpoolStorage.php b/src/Spool/SpoolStorage.php
index 093c594..c8b4c64 100644
--- a/src/Spool/SpoolStorage.php
+++ b/src/Spool/SpoolStorage.php
@@ -154,7 +154,7 @@ class SpoolStorage implements SpoolStorageInterface {
       ->condition('msid', (array) $msids, 'IN')
       ->fields([
         'status' => $status,
-        'timestamp' => REQUEST_TIME,
+        'timestamp' => \Drupal::time()->getRequestTime(),
       ])
       ->execute();
   }
@@ -206,7 +206,7 @@ class SpoolStorage implements SpoolStorageInterface {
    */
   public function clear() {
 
-    $expiration_time = REQUEST_TIME - $this->config->get('mail.spool_expire') * 86400;
+    $expiration_time = \Drupal::time()->getRequestTime() - $this->config->get('mail.spool_expire') * 86400;
     return $this->connection->delete('simplenews_mail_spool')
       ->condition('status', [SpoolStorageInterface::STATUS_DONE, SpoolStorageInterface::STATUS_SKIPPED], 'IN')
       ->condition('timestamp', $expiration_time, '<=')
@@ -289,7 +289,7 @@ class SpoolStorage implements SpoolStorageInterface {
       $spool['status'] = SpoolStorageInterface::STATUS_PENDING;
     }
     if (!isset($spool['timestamp'])) {
-      $spool['timestamp'] = REQUEST_TIME;
+      $spool['timestamp'] = \Drupal::time()->getRequestTime();
     }
     if (isset($spool['data'])) {
       $spool['data'] = serialize($spool['data']);
@@ -371,7 +371,7 @@ class SpoolStorage implements SpoolStorageInterface {
    */
   protected function getExpirationTime() {
     $timeout = $this->config->get('mail.spool_progress_expiration');
-    $expiration_time = REQUEST_TIME - $timeout;
+    $expiration_time = \Drupal::time()->getRequestTime() - $timeout;
     return $expiration_time;
   }
 
diff --git a/src/SubscriberInterface.php b/src/SubscriberInterface.php
index c2b7fbd..d5def77 100644
--- a/src/SubscriberInterface.php
+++ b/src/SubscriberInterface.php
@@ -172,7 +172,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());
 
   /**
    * Delete a subscription to a certain newsletter of the subscriber.
@@ -184,7 +184,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());
 
   /**
    * Load a simplenews newsletter subscriber object by mail.
