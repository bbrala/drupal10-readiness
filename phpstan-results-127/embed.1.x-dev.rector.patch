diff --git a/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php b/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
index e275664..56eea3b 100644
--- a/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
+++ b/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
@@ -28,26 +28,26 @@ class EmbedButtonEditorAccessCheckTest extends EmbedTestBase {
     // The anonymous user should have access to the plain_text format, but it
     // hasn't been configured to use an editor yet.
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);
 
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.plain_text');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ -56,38 +56,41 @@ class EmbedButtonEditorAccessCheckTest extends EmbedTestBase {
     ]);
     $editor->save();
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.plain_text');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // Test route with an empty request.
     $this->getRoute('embed_test', 'embed_test_default', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Test route with an invalid text format.
     $this->getRoute('invalid_editor', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.invalid_editor');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.invalid_editor');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Test route with an invalid embed button.
     $this->getRoute('embed_test', 'invalid_button');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.invalid_button');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.invalid_button');
   }
 
   /**
diff --git a/tests/src/Functional/EmbedTestBase.php b/tests/src/Functional/EmbedTestBase.php
index 8999e12..312a828 100644
--- a/tests/src/Functional/EmbedTestBase.php
+++ b/tests/src/Functional/EmbedTestBase.php
@@ -50,7 +50,7 @@ abstract class EmbedTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Filtered HTML text format and enable entity_embed filter.
diff --git a/tests/src/Functional/PreviewTest.php b/tests/src/Functional/PreviewTest.php
index c64ae5d..8a27a74 100644
--- a/tests/src/Functional/PreviewTest.php
+++ b/tests/src/Functional/PreviewTest.php
@@ -22,31 +22,40 @@ class PreviewTest extends EmbedTestBase {
   public function testPreviewRoute() {
     // Ensure the default filter can be previewed by the anonymous user.
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);
 
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     $this->getRoute('embed_test');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // Test preview route with an empty request.
     $this->getRoute('embed_test', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test preview route with an invalid text format.
     $this->getRoute('invalid_format');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
   /**
