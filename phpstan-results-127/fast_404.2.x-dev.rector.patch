diff --git a/src/EventSubscriber/Fast404EventSubscriber.php b/src/EventSubscriber/Fast404EventSubscriber.php
index 6caff8a..15ffe64 100644
--- a/src/EventSubscriber/Fast404EventSubscriber.php
+++ b/src/EventSubscriber/Fast404EventSubscriber.php
@@ -38,7 +38,7 @@ class Fast404EventSubscriber implements EventSubscriberInterface {
   /**
    * Ensures Fast 404 output returned if applicable.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $request = $this->requestStack->getCurrentRequest();
     $fast_404 = new Fast404($request);
 
@@ -56,13 +56,13 @@ class Fast404EventSubscriber implements EventSubscriberInterface {
   /**
    * Ensures Fast 404 output returned upon NotFoundHttpException.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The response for exception event.
    */
-  public function onNotFoundException(GetResponseForExceptionEvent $event) {
+  public function onNotFoundException(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
     // Check to see if we will completely replace the Drupal 404 page.
     if (Settings::get('fast404_not_found_exception', FALSE)) {
-      if ($event->getException() instanceof NotFoundHttpException) {
+      if ($event->getThrowable() instanceof NotFoundHttpException) {
         $fast_404 = new Fast404($event->getRequest());
         $event->setResponse($fast_404->response(TRUE));
       }
