diff --git a/jts_solr_queries.info.yml b/jts_solr_queries.info.yml
index 7a47072..f67ff4e 100644
--- a/jts_solr_queries.info.yml
+++ b/jts_solr_queries.info.yml
@@ -1,8 +1,7 @@
 name: 'jts solr queries'
 type: module
 description: 'Solr Spatial queries with polygons'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Search API'
 dependencies:
   - geofield:geofield
diff --git a/src/EventSubscriber/EventListener.php b/src/EventSubscriber/EventListener.php
index cd8be97..d7ba252 100644
--- a/src/EventSubscriber/EventListener.php
+++ b/src/EventSubscriber/EventListener.php
@@ -41,10 +41,10 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Method called when SearchApiEvents::GATHERING_DATA_SOURCES is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The dispatched event.
    */
-  public function dataTypeInfoAlter(Event $event) {
+  public function dataTypeInfoAlter(\Symfony\Contracts\EventDispatcher\Event $event) {
     $dataTypePluginInfo = &$event->getDefinitions();
     if (isset($dataTypePluginInfo['rpt'])) {
       // OVERRIDE RPT with RPT_SHAPES.
diff --git a/src/Plugin/views/filter/SearchApiJtsFilter.php b/src/Plugin/views/filter/SearchApiJtsFilter.php
index 1ff6226..eb46d4e 100644
--- a/src/Plugin/views/filter/SearchApiJtsFilter.php
+++ b/src/Plugin/views/filter/SearchApiJtsFilter.php
@@ -113,7 +113,7 @@ class SearchApiJtsFilter extends GeofieldProximityFilter {
       // Otherwise output empty result in case of unexposed proximity filter.
       elseif (!$this->isExposed()) {
         // Origin is not valid so return no results (if not exposed filter).
-        drupal_set_message($this->t('The location %location could not be resolved and was ignored.', ['%location' => $this->value['value']]), 'warning');
+        $this->messenger()->addWarning($this->t('The location %location could not be resolved and was ignored.', ['%location' => $this->value['value']]));
       }
     }
     catch (\Exception $e) {
