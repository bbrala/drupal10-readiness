diff --git a/src/Event/CollectEvent.php b/src/Event/CollectEvent.php
index 136e614..5af216c 100644
--- a/src/Event/CollectEvent.php
+++ b/src/Event/CollectEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Class CollectEvent.
  */
-class CollectEvent extends Event {
+class CollectEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The registered analytics commands.
diff --git a/tests/src/Unit/AnalyticsCommand/DimensionTest.php b/tests/src/Unit/AnalyticsCommand/DimensionTest.php
index b2fbba6..47c7675 100644
--- a/tests/src/Unit/AnalyticsCommand/DimensionTest.php
+++ b/tests/src/Unit/AnalyticsCommand/DimensionTest.php
@@ -31,28 +31,25 @@ class DimensionTest extends UnitTestCase {
 
   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension('index', 'value');
   }
 
   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(4.2, 'value');
   }
 
   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(420, 'value');
   }
 
diff --git a/tests/src/Unit/AnalyticsCommand/EventTest.php b/tests/src/Unit/AnalyticsCommand/EventTest.php
index b4fa86d..6036e30 100644
--- a/tests/src/Unit/AnalyticsCommand/EventTest.php
+++ b/tests/src/Unit/AnalyticsCommand/EventTest.php
@@ -83,33 +83,33 @@ class EventTest extends UnitTestCase {
   /**
    * Test with a float event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithFloatValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, 1.5);
   }
 
   /**
    * Test with a negative integer event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithNegativeIntegerValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, -1);
   }
 
   /**
    * Test with a string event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, '1');
   }
 
diff --git a/tests/src/Unit/AnalyticsCommand/MetricTest.php b/tests/src/Unit/AnalyticsCommand/MetricTest.php
index 0ab91c1..6dadfda 100644
--- a/tests/src/Unit/AnalyticsCommand/MetricTest.php
+++ b/tests/src/Unit/AnalyticsCommand/MetricTest.php
@@ -44,37 +44,33 @@ class MetricTest extends UnitTestCase {
 
   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric('index', 123);
   }
 
   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(4.2, 123);
   }
 
   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(420, 123);
   }
 
   /**
    * Test a string value.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(42, 'value');
   }
 
diff --git a/tests/src/Unit/AnalyticsCommand/SendTest.php b/tests/src/Unit/AnalyticsCommand/SendTest.php
index 109a78b..59ed167 100644
--- a/tests/src/Unit/AnalyticsCommand/SendTest.php
+++ b/tests/src/Unit/AnalyticsCommand/SendTest.php
@@ -32,11 +32,11 @@ class SendTest extends UnitTestCase {
   /**
    * Test specifying an invalid hit type.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Invalid hit type specified.
    */
   public function testInvalidHitType() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Invalid hit type specified.');
     $command = new Send('badtype');
   }
 
diff --git a/tests/src/Unit/EventSubscriber/CspSubscriberTest.php b/tests/src/Unit/EventSubscriber/CspSubscriberTest.php
index 494d961..6716312 100644
--- a/tests/src/Unit/EventSubscriber/CspSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/CspSubscriberTest.php
@@ -28,16 +28,14 @@ class CspSubscriberTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     if (!class_exists(Csp::class)) {
       $this->markTestSkipped('Content Security Policy module is not available.');
     }
 
-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
   }
 
   /**
