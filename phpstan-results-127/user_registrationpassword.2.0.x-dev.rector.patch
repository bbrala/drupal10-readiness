diff --git a/UserRegistrationPasswordUserRegisterForm.php b/UserRegistrationPasswordUserRegisterForm.php
index 71b28ec..8175992 100644
--- a/UserRegistrationPasswordUserRegisterForm.php
+++ b/UserRegistrationPasswordUserRegisterForm.php
@@ -23,7 +23,7 @@ class UserRegistrationPasswordUserRegisterForm extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $user_config = \Drupal::configFactory()->getEditable('user.settings');
@@ -60,7 +60,7 @@ class UserRegistrationPasswordUserRegisterForm extends BrowserTestBase {
    */
   public function testUserRegisterFormCompatibility() {
     // Test submit callback.
-    $this->assertEqual($this->registerForm['actions']['submit']['#submit'][2], 'user_registrationpassword_form_user_register_submit', 'Submit handler correctly changed.');
+    $this->assertEquals($this->registerForm['actions']['submit']['#submit'][2], 'user_registrationpassword_form_user_register_submit', 'Submit handler correctly changed.');
   }
 
 }
diff --git a/tests/src/Functional/UserRegistrationPassword.php b/tests/src/Functional/UserRegistrationPassword.php
index f04ce65..34fe6a3 100644
--- a/tests/src/Functional/UserRegistrationPassword.php
+++ b/tests/src/Functional/UserRegistrationPassword.php
@@ -36,7 +36,8 @@ class UserRegistrationPassword extends BrowserTestBase {
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
     $pass = $new_pass;
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');
 
     // Load the new user.
@@ -68,7 +69,8 @@ class UserRegistrationPassword extends BrowserTestBase {
       'name' => $name,
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $auth, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($auth, 'Log in');
     $this->assertSession()->pageTextContains('The username ' . $name . ' has not been activated or is blocked.');
 
     // Timestamp can not be smaller than current. (== registration time).
@@ -94,7 +96,7 @@ class UserRegistrationPassword extends BrowserTestBase {
     $another_account = $this->drupalCreateUser();
     $this->drupalLogin($another_account);
     $this->drupalGet("user/registrationpassword/" . $account->id() . "/$timestamp/" . user_pass_rehash($account, $timestamp));
-    $this->assertRaw(new FormattableMarkup(
+    $this->assertSession()->responseContains(new FormattableMarkup(
       'Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href=":logout">log out</a> and try using the link again.',
       ['%other_user' => $another_account->getAccountName(), '%resetting_user' => $account->getAccountName(), ':logout' => Url::fromRoute('user.logout')->toString()]
     ));
@@ -120,7 +122,8 @@ class UserRegistrationPassword extends BrowserTestBase {
       'name' => $name,
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $auth, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($auth, 'Log in');
     $this->assertSession()->pageTextContains('Member for');
 
     // Logout the user.
@@ -133,7 +136,8 @@ class UserRegistrationPassword extends BrowserTestBase {
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
     $pass = $new_pass;
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');
 
     // Load the new user.
@@ -165,25 +169,29 @@ class UserRegistrationPassword extends BrowserTestBase {
     $edit1['mail'] = $edit1['name'] . '@example.com';
     $edit1['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit1['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit1, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit1, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');
 
     // Request a new activation email.
     $edit2 = [];
     $edit2['name'] = $edit1['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
     // Request a new activation email for a non-existing user name.
     $edit3 = [];
     $edit3['name'] = $this->randomMachineName();
-    $this->drupalPostForm('user/password', $edit3, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit3, 'Submit');
     $this->assertSession()->pageTextContains($edit3['name'] . ' is not recognized as a username or an email address.');
 
     // Request a new activation email for a non-existing user email.
     $edit4 = [];
     $edit4['name'] = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm('user/password', $edit4, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit4, 'Submit');
     $this->assertSession()->pageTextContains($edit4['name'] . ' is not recognized as a username or an email address.');
   }
 
@@ -199,7 +207,8 @@ class UserRegistrationPassword extends BrowserTestBase {
     $edit['mail'] = $mail = $edit['name'] . '@example.com';
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
 
     // Load the new user.
     $accounts = \Drupal::entityQuery('user')
@@ -228,7 +237,8 @@ class UserRegistrationPassword extends BrowserTestBase {
 
     // Try to request a new activation email.
     $edit2['name'] = $edit['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
     $this->assertSession()->pageTextContains($edit2['name'] . ' is blocked or has not been activated yet.');
   }
 
diff --git a/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php b/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
index ea85e55..ead6464 100644
--- a/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
+++ b/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
@@ -34,7 +34,7 @@ class UserRegistrationPasswordAccountSettingFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer account settings']);
     $this->drupalLogin($this->adminUser);
@@ -52,7 +52,8 @@ class UserRegistrationPasswordAccountSettingFormTest extends BrowserTestBase {
     ] as $option) {
       $edit = [];
       $edit['user_registrationpassword_registration'] = $option;
-      $this->drupalPostForm('admin/config/people/accounts', $edit, 'Save configuration');
+      $this->drupalGet('admin/config/people/accounts');
+      $this->submitForm($edit, 'Save configuration');
 
       $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
       $this->assertSession()->pageTextContains('The configuration options have been saved.');
diff --git a/tests/src/Functional/UserRegistrationPasswordAdmin.php b/tests/src/Functional/UserRegistrationPasswordAdmin.php
index cbc2fcb..b3e4834 100644
--- a/tests/src/Functional/UserRegistrationPasswordAdmin.php
+++ b/tests/src/Functional/UserRegistrationPasswordAdmin.php
@@ -42,7 +42,7 @@ class UserRegistrationPasswordAdmin extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // User to add and remove language.
     $this->adminUser = $this->drupalCreateUser(['administer account settings', 'administer users']);
@@ -61,7 +61,8 @@ class UserRegistrationPasswordAdmin extends BrowserTestBase {
     // Test the default options.
     $this->drupalGet('admin/config/people/accounts');
     $edit_first = ['user_register' => UserInterface::REGISTER_VISITORS, 'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_first, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_first, 'Save configuration');
 
     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
@@ -78,7 +79,8 @@ class UserRegistrationPasswordAdmin extends BrowserTestBase {
       'user_register' => UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL,
       'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS,
     ];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_second, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_second, 'Save configuration');
 
     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
@@ -95,7 +97,8 @@ class UserRegistrationPasswordAdmin extends BrowserTestBase {
       'user_register' => UserInterface::REGISTER_ADMINISTRATORS_ONLY,
       'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS,
     ];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_third, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_third, 'Save configuration');
 
     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
diff --git a/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php b/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
index 6acdc86..dca3b10 100644
--- a/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
+++ b/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
@@ -35,7 +35,7 @@ class UserRegistrationPasswordUserPasswordResetForm extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     global $base_url;
     $this->base_url = $base_url;
@@ -51,20 +51,28 @@ class UserRegistrationPasswordUserPasswordResetForm extends BrowserTestBase {
     $edit1['mail'] = $edit1['name'] . '@example.com';
     $edit1['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit1['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit1, 'Create new account');
-    $this->assertText('A welcome message with further instructions has been sent to your email address.', 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit1, 'Create new account');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');
 
     // Request a new activation email.
     $edit2 = [];
     $edit2['name'] = $edit1['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
-    $this->assertText('Further instructions have been sent to your email address.', 'Password reset form submitted successfully.');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
     $_emails = $this->getMails();
     $email = end($_emails);
     $this->assertNotEmpty($email['subject']);
     $this->assertNotEmpty($email['body']);
-    $this->assertNotEqual($email['send'], 0);
+    $this->assertNotEquals($email['send'], 0);
   }
 
   /**
@@ -77,7 +85,7 @@ class UserRegistrationPasswordUserPasswordResetForm extends BrowserTestBase {
     $form = \Drupal::formBuilder()->getForm($form_object);
 
     // Test values.
-    $this->assertEqual($form['#validate'][0], '_user_registrationpassword_user_pass_validate', 'Validate handler correctly changed.');
-    $this->assertEqual($form['#submit'][0], '_user_registrationpassword_user_pass_submit', 'Submit handler correctly changed.');
+    $this->assertEquals($form['#validate'][0], '_user_registrationpassword_user_pass_validate', 'Validate handler correctly changed.');
+    $this->assertEquals($form['#submit'][0], '_user_registrationpassword_user_pass_submit', 'Submit handler correctly changed.');
   }
 }
