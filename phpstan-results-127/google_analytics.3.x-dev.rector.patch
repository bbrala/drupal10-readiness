diff --git a/tests/src/Functional/GoogleAnalyticsBasicTest.php b/tests/src/Functional/GoogleAnalyticsBasicTest.php
index 3e1de41..e58c7ae 100644
--- a/tests/src/Functional/GoogleAnalyticsBasicTest.php
+++ b/tests/src/Functional/GoogleAnalyticsBasicTest.php
@@ -51,7 +51,7 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -78,27 +78,28 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
     // Check if Configure link is available on 'Extend' page.
     // Requires 'administer modules' permission.
     $this->drupalGet('admin/modules');
-    $this->assertRaw('admin/config/system/google-analytics');
+    $this->assertSession()->responseContains('admin/config/system/google-analytics');
 
     // Check if Configure link is available on 'Status Reports' page.
     // NOTE: Link is only shown without UA code configured.
     // Requires 'administer site configuration' permission.
     $this->drupalGet('admin/reports/status');
-    $this->assertRaw('admin/config/system/google-analytics');
+    $this->assertSession()->responseContains('admin/config/system/google-analytics');
 
     // Check for setting page's presence.
     $this->drupalGet('admin/config/system/google-analytics');
-    $this->assertRaw($this->t('Web Property ID'));
+    $this->assertSession()->responseContains($this->t('Web Property ID'));
 
     // Check for account code validation.
     $edit['google_analytics_account'] = $this->randomMachineName(2);
-    $this->drupalPostForm('admin/config/system/google-analytics', $edit, $this->t('Save configuration'));
-    $this->assertRaw($this->t('A valid Google Analytics Web Property ID is case sensitive and formatted like UA-xxxxxxx-yy.'));
+    $this->drupalGet('admin/config/system/google-analytics');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->responseContains($this->t('A valid Google Analytics Web Property ID is case sensitive and formatted like UA-xxxxxxx-yy.'));
 
     // User should have access to code snippets.
-    $this->assertFieldByName('google_analytics_codesnippet_create');
-    $this->assertFieldByName('google_analytics_codesnippet_before');
-    $this->assertFieldByName('google_analytics_codesnippet_after');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_create');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_before');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_after');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_create' and @disabled='disabled']", NULL, '"Parameters" field is enabled.');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is enabled.');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is enabled.');
@@ -108,9 +109,9 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
     $this->drupalGet('admin/config/system/google-analytics');
 
     // User should *not* have access to snippets, but parameters field.
-    $this->assertFieldByName('google_analytics_codesnippet_create');
-    $this->assertFieldByName('google_analytics_codesnippet_before');
-    $this->assertFieldByName('google_analytics_codesnippet_after');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_create');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_before');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_after');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_create' and @disabled='disabled']", NULL, '"Parameters" field is enabled.');
     $this->assertFieldByXPath("//textarea[@name='google_analytics_codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is disabled.');
     $this->assertFieldByXPath("//textarea[@name='google_analytics_codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is disabled.');
@@ -122,11 +123,17 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
   public function testGoogleAnalyticsHelp() {
     // Requires help and block module and help block placement.
     $this->drupalGet('admin/config/system/google-analytics');
-    $this->assertText('Google Analytics is a free (registration required) website traffic and marketing effectiveness service.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Google Analytics is a free (registration required) website traffic and marketing effectiveness service.');
 
     // Requires help.module.
     $this->drupalGet('admin/help/google_analytics');
-    $this->assertText('Google Analytics adds a web statistics tracking system to your website.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Google Analytics adds a web statistics tracking system to your website.');
   }
 
   /**
@@ -136,7 +143,7 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
     // Verify that no tracking code is embedded into the webpage; if there is
     // only the module installed, but UA code not configured. See #2246991.
     $this->drupalGet('');
-    $this->assertNoRaw('https://www.googletagmanager.com/gtag/js?id=');
+    $this->assertSession()->responseNotContains('https://www.googletagmanager.com/gtag/js?id=');
 
     $ua_code = 'UA-123456-1';
     $this->config('google_analytics.settings')->set('account', $ua_code)->save();
@@ -150,29 +157,29 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
 
     // Check tracking code visibility.
     $this->drupalGet('');
-    $this->assertRaw('gtag("config", "' . $ua_code . '"');
+    $this->assertSession()->responseContains('gtag("config", "' . $ua_code . '"');
 
     // Test whether tracking code is not included on pages to omit.
     $this->drupalGet('admin');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
     $this->drupalGet('admin/config/system/google-analytics');
     // Checking for tracking URI here, as $ua_code is displayed in the form.
-    $this->assertNoRaw('https://www.googletagmanager.com/gtag/js?id=');
+    $this->assertSession()->responseNotContains('https://www.googletagmanager.com/gtag/js?id=');
 
     // Test whether tracking code display is properly flipped.
     $this->config('google_analytics.settings')->set('visibility.request_path_mode', 1)->save();
     $this->drupalGet('admin');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
     $this->drupalGet('admin/config/system/google-analytics');
     // Checking for tracking URI here, as $ua_code is displayed in the form.
-    $this->assertRaw('https://www.googletagmanager.com/gtag/js?id=');
+    $this->assertSession()->responseContains('https://www.googletagmanager.com/gtag/js?id=');
     $this->drupalGet('');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
 
     // Test whether tracking code is not display for anonymous.
     $this->drupalLogout();
     $this->drupalGet('');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
 
     // Switch back to every page except the listed pages.
     $this->config('google_analytics.settings')->set('visibility.request_path_mode', 0)->save();
@@ -207,63 +214,63 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
     // Test whether tracking code uses latest JS.
     $this->config('google_analytics.settings')->set('cache', 0)->save();
     $this->drupalGet('');
-    $this->assertRaw('<script async src="https://www.googletagmanager.com/gtag/js?id=' . $ua_code . '"></script>');
-    $this->assertRaw('window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments)};gtag("js", new Date());');
-    $this->assertRaw('"google_analytics":{"account":"' . $ua_code . '"');
+    $this->assertSession()->responseContains('<script async src="https://www.googletagmanager.com/gtag/js?id=' . $ua_code . '"></script>');
+    $this->assertSession()->responseContains('window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments)};gtag("js", new Date());');
+    $this->assertSession()->responseContains('"google_analytics":{"account":"' . $ua_code . '"');
 
     // Enable anonymizing of IP addresses.
     $this->config('google_analytics.settings')->set('privacy.anonymizeip', 1)->save();
     $this->drupalGet('');
-    $this->assertRaw('"anonymize_ip":true');
+    $this->assertSession()->responseContains('"anonymize_ip":true');
 
     // Test whether anonymize visitors IP address feature has been enabled.
     $this->config('google_analytics.settings')->set('privacy.anonymizeip', 0)->save();
     $this->drupalGet('');
-    $this->assertNoRaw('"anonymize_ip":true');
+    $this->assertSession()->responseNotContains('"anonymize_ip":true');
 
     // Test if track Enhanced Link Attribution is enabled.
     $this->config('google_analytics.settings')->set('track.linkid', 1)->save();
     $this->drupalGet('');
-    $this->assertRaw('"link_attribution":true');
+    $this->assertSession()->responseContains('"link_attribution":true');
 
     // Test if track Enhanced Link Attribution is disabled.
     $this->config('google_analytics.settings')->set('track.linkid', 0)->save();
     $this->drupalGet('');
-    $this->assertNoRaw('"link_attribution":true');
+    $this->assertSession()->responseNotContains('"link_attribution":true');
 
     // Test if tracking of User ID is enabled.
     $this->config('google_analytics.settings')->set('track.userid', 1)->save();
     $this->drupalGet('');
-    $this->assertRaw('"user_id":"');
+    $this->assertSession()->responseContains('"user_id":"');
 
     // Test if tracking of User ID is disabled.
     $this->config('google_analytics.settings')->set('track.userid', 0)->save();
     $this->drupalGet('');
-    $this->assertNoRaw('"user_id":"');
+    $this->assertSession()->responseNotContains('"user_id":"');
 
     // Test if track display features is disabled.
     $this->config('google_analytics.settings')->set('track.displayfeatures', 0)->save();
     $this->drupalGet('');
-    $this->assertRaw('"allow_ad_personalization_signals":false');
+    $this->assertSession()->responseContains('"allow_ad_personalization_signals":false');
 
     // Test if track display features is enabled.
     $this->config('google_analytics.settings')->set('track.displayfeatures', 1)->save();
     $this->drupalGet('');
-    $this->assertNoRaw('"allow_ad_personalization_signals":false');
+    $this->assertSession()->responseNotContains('"allow_ad_personalization_signals":false');
 
     // Test if tracking of url fragments is enabled.
     $this->config('google_analytics.settings')->set('track.urlfragments', 1)->save();
     $this->drupalGet('');
-    $this->assertRaw('"page_path":location.pathname + location.search + location.hash});');
+    $this->assertSession()->responseContains('"page_path":location.pathname + location.search + location.hash});');
 
     // Test if tracking of url fragments is disabled.
     $this->config('google_analytics.settings')->set('track.urlfragments', 0)->save();
     $this->drupalGet('');
-    $this->assertNoRaw('"page_path":location.pathname + location.search + location.hash});');
+    $this->assertSession()->responseNotContains('"page_path":location.pathname + location.search + location.hash});');
 
     // Test whether single domain tracking is active.
     $this->drupalGet('');
-    $this->assertRaw('{"groups":"default"}');
+    $this->assertSession()->responseContains('{"groups":"default"}');
 
     // Enable "One domain with multiple subdomains".
     $this->config('google_analytics.settings')->set('domain_mode', 1)->save();
@@ -274,11 +281,11 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
     // reliable.
     global $cookie_domain;
     if (count(explode('.', $cookie_domain)) > 2 && !is_numeric(str_replace('.', '', $cookie_domain))) {
-      $this->assertRaw('"cookie_domain":"' . $cookie_domain . '"');
+      $this->assertSession()->responseContains('"cookie_domain":"' . $cookie_domain . '"');
     }
     else {
       // Special cases, Localhost and IP addresses don't show 'cookieDomain'.
-      $this->assertNoRaw('"cookie_domain":"' . $cookie_domain . '"');
+      $this->assertSession()->responseNotContains('"cookie_domain":"' . $cookie_domain . '"');
     }
 
     // Enable "Multiple top-level domains" tracking.
@@ -287,10 +294,10 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
       ->set('cross_domains', "www.example.com\nwww.example.net")
       ->save();
     $this->drupalGet('');
-    $this->assertRaw('gtag("config", "' . $ua_code . '", {"groups":"default","linker":');
-    $this->assertRaw('gtag("config", "' . $ua_code . '", {"groups":"default","linker":{"domains":["www.example.com","www.example.net"]}});');
-    $this->assertRaw('"trackDomainMode":2,');
-    $this->assertRaw('"trackCrossDomains":["www.example.com","www.example.net"]');
+    $this->assertSession()->responseContains('gtag("config", "' . $ua_code . '", {"groups":"default","linker":');
+    $this->assertSession()->responseContains('gtag("config", "' . $ua_code . '", {"groups":"default","linker":{"domains":["www.example.com","www.example.net"]}});');
+    $this->assertSession()->responseContains('"trackDomainMode":2,');
+    $this->assertSession()->responseContains('"trackCrossDomains":["www.example.com","www.example.net"]');
     $this->config('google_analytics.settings')->set('domain_mode', 0)->save();
 
     // Test whether debugging script has been enabled.
@@ -302,12 +309,12 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
     // Check if text and link is shown on 'Status Reports' page.
     // Requires 'administer site configuration' permission.
     $this->drupalGet('admin/reports/status');
-    $this->assertRaw($this->t('Google Analytics module has debugging enabled. Please disable debugging setting in production sites from the <a href=":url">Google Analytics settings page</a>.', [':url' => Url::fromRoute('google_analytics.admin_settings_form')->toString()]));
+    $this->assertSession()->responseContains($this->t('Google Analytics module has debugging enabled. Please disable debugging setting in production sites from the <a href=":url">Google Analytics settings page</a>.', [':url' => Url::fromRoute('google_analytics.admin_settings_form')->toString()]));
 
     // Test whether debugging script has been disabled.
     $this->config('google_analytics.settings')->set('debug', 0)->save();
     $this->drupalGet('');
-    $this->assertRaw('https://www.googletagmanager.com/gtag/js?id=');
+    $this->assertSession()->responseContains('https://www.googletagmanager.com/gtag/js?id=');
 
     // Test whether the CREATE and BEFORE and AFTER code is added to the
     // tracking code.
@@ -323,10 +330,10 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
       ->set('codesnippet.after', 'gtag("config", "UA-123456-3", {"groups":"default"});if(1 == 1 && 2 < 3 && 2 > 1){console.log("Google Analytics: Custom condition works.");}')
       ->save();
     $this->drupalGet('');
-    $this->assertRaw('gtag("config", "' . $ua_code . '", {"groups":"default","cookie_domain":"foo.example.com","cookie_name":"myNewName","cookie_expires":20000,"sample_rate":4.3});');
-    $this->assertRaw('gtag("set", {"currency":"USD"});');
-    $this->assertRaw('gtag("config", "UA-123456-3", {"groups":"default"});');
-    $this->assertRaw('if(1 == 1 && 2 < 3 && 2 > 1){console.log("Google Analytics: Custom condition works.");}');
+    $this->assertSession()->responseContains('gtag("config", "' . $ua_code . '", {"groups":"default","cookie_domain":"foo.example.com","cookie_name":"myNewName","cookie_expires":20000,"sample_rate":4.3});');
+    $this->assertSession()->responseContains('gtag("set", {"currency":"USD"});');
+    $this->assertSession()->responseContains('gtag("config", "UA-123456-3", {"groups":"default"});');
+    $this->assertSession()->responseContains('if(1 == 1 && 2 < 3 && 2 > 1){console.log("Google Analytics: Custom condition works.");}');
   }
 
 }
diff --git a/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php b/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php
index db73854..1b187d8 100644
--- a/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php
+++ b/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php
@@ -41,7 +41,7 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -109,8 +109,8 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
       $custom_map['custom_map']['dimension' . $dimension['index']] = $dimension['name'];
       $custom_vars[$dimension['name']] = $dimension['value'];
     }
-    $this->assertRaw('gtag("config", ' . Json::encode($ua_code) . ', ' . Json::encode($custom_map) . ');');
-    $this->assertRaw('gtag("event", "custom", ' . Json::encode($custom_vars) . ');');
+    $this->assertSession()->responseContains('gtag("config", ' . Json::encode($ua_code) . ', ' . Json::encode($custom_map) . ');');
+    $this->assertSession()->responseContains('gtag("event", "custom", ' . Json::encode($custom_vars) . ');');
 
     // Test whether tokens are replaced in custom dimension values.
     $site_slogan = $this->randomMachineName(16);
@@ -161,26 +161,29 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
 
     // Test on frontpage.
     $this->drupalGet('');
-    $this->assertRaw(Json::encode('dimension1') . ':' . Json::encode($google_analytics_custom_dimension['1']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_dimension['1']['name']) . ':' . Json::encode("Value: $site_slogan"));
-    $this->assertRaw(Json::encode('dimension2') . ':' . Json::encode($google_analytics_custom_dimension['2']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_dimension['2']['name']) . ':' . Json::encode($google_analytics_custom_dimension['2']['value']));
-    $this->assertNoRaw(Json::encode('dimension3') . ':' . Json::encode($google_analytics_custom_dimension['3']['name']));
-    $this->assertNoRaw(Json::encode($google_analytics_custom_dimension['3']['name']) . ':' . Json::encode(''));
-    $this->assertRaw(Json::encode('dimension4') . ':' . Json::encode($google_analytics_custom_dimension['4']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_dimension['4']['name']) . ':' . Json::encode('0'));
-    $this->assertNoRaw(Json::encode('dimension5') . ':' . Json::encode($google_analytics_custom_dimension['5']['name']));
-    $this->assertNoRaw(Json::encode($google_analytics_custom_dimension['5']['name']) . ':' . Json::encode('article'));
-    $this->assertRaw(Json::encode('dimension6') . ':' . Json::encode($google_analytics_custom_dimension['6']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_dimension['6']['name']) . ':' . Json::encode(implode(',', \Drupal::currentUser()->getRoles())));
-    $this->assertRaw(Json::encode('dimension7') . ':' . Json::encode($google_analytics_custom_dimension['7']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_dimension['7']['name']) . ':' . Json::encode(implode(',', array_keys(\Drupal::currentUser()->getRoles()))));
+    $this->assertSession()->responseContains(Json::encode('dimension1') . ':' . Json::encode($google_analytics_custom_dimension['1']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_dimension['1']['name']) . ':' . Json::encode("Value: $site_slogan"));
+    $this->assertSession()->responseContains(Json::encode('dimension2') . ':' . Json::encode($google_analytics_custom_dimension['2']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_dimension['2']['name']) . ':' . Json::encode($google_analytics_custom_dimension['2']['value']));
+    $this->assertSession()->responseNotContains(Json::encode('dimension3') . ':' . Json::encode($google_analytics_custom_dimension['3']['name']));
+    $this->assertSession()->responseNotContains(Json::encode($google_analytics_custom_dimension['3']['name']) . ':' . Json::encode(''));
+    $this->assertSession()->responseContains(Json::encode('dimension4') . ':' . Json::encode($google_analytics_custom_dimension['4']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_dimension['4']['name']) . ':' . Json::encode('0'));
+    $this->assertSession()->responseNotContains(Json::encode('dimension5') . ':' . Json::encode($google_analytics_custom_dimension['5']['name']));
+    $this->assertSession()->responseNotContains(Json::encode($google_analytics_custom_dimension['5']['name']) . ':' . Json::encode('article'));
+    $this->assertSession()->responseContains(Json::encode('dimension6') . ':' . Json::encode($google_analytics_custom_dimension['6']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_dimension['6']['name']) . ':' . Json::encode(implode(',', \Drupal::currentUser()->getRoles())));
+    $this->assertSession()->responseContains(Json::encode('dimension7') . ':' . Json::encode($google_analytics_custom_dimension['7']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_dimension['7']['name']) . ':' . Json::encode(implode(',', array_keys(\Drupal::currentUser()->getRoles()))));
 
     // Test on a node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertText($node->getTitle());
-    $this->assertRaw(Json::encode('dimension5') . ':' . Json::encode($google_analytics_custom_dimension['5']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_dimension['5']['name']) . ':' . Json::encode('article'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->getTitle());
+    $this->assertSession()->responseContains(Json::encode('dimension5') . ':' . Json::encode($google_analytics_custom_dimension['5']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_dimension['5']['name']) . ':' . Json::encode('article'));
   }
 
   /**
@@ -228,8 +231,8 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
       $custom_map['custom_map']['metric' . $metric['index']] = $metric['name'];
       $custom_vars[$metric['name']] = (float) $metric['value'];
     }
-    $this->assertRaw('gtag("config", ' . Json::encode($ua_code) . ', ' . Json::encode($custom_map) . ');');
-    $this->assertRaw('gtag("event", "custom", ' . Json::encode($custom_vars) . ');');
+    $this->assertSession()->responseContains('gtag("config", ' . Json::encode($ua_code) . ', ' . Json::encode($custom_map) . ');');
+    $this->assertSession()->responseContains('gtag("event", "custom", ' . Json::encode($custom_vars) . ');');
 
     // Test whether tokens are replaced in custom metric values.
     $google_analytics_custom_metric = [
@@ -260,14 +263,14 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
     $this->verbose('<pre>' . print_r($google_analytics_custom_metric, TRUE) . '</pre>');
 
     $this->drupalGet('');
-    $this->assertRaw(Json::encode('metric1') . ':' . Json::encode($google_analytics_custom_metric['1']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_metric['1']['name']) . ':');
-    $this->assertRaw(Json::encode('metric2') . ':' . Json::encode($google_analytics_custom_metric['2']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_metric['2']['name']) . ':' . Json::encode($google_analytics_custom_metric['2']['value']));
-    $this->assertNoRaw(Json::encode('metric3') . ':' . Json::encode($google_analytics_custom_metric['3']['name']));
-    $this->assertNoRaw(Json::encode($google_analytics_custom_metric['3']['name']) . ':' . Json::encode(''));
-    $this->assertRaw(Json::encode('metric4') . ':' . Json::encode($google_analytics_custom_metric['4']['name']));
-    $this->assertRaw(Json::encode($google_analytics_custom_metric['4']['name']) . ':' . Json::encode(0));
+    $this->assertSession()->responseContains(Json::encode('metric1') . ':' . Json::encode($google_analytics_custom_metric['1']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_metric['1']['name']) . ':');
+    $this->assertSession()->responseContains(Json::encode('metric2') . ':' . Json::encode($google_analytics_custom_metric['2']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_metric['2']['name']) . ':' . Json::encode($google_analytics_custom_metric['2']['value']));
+    $this->assertSession()->responseNotContains(Json::encode('metric3') . ':' . Json::encode($google_analytics_custom_metric['3']['name']));
+    $this->assertSession()->responseNotContains(Json::encode($google_analytics_custom_metric['3']['name']) . ':' . Json::encode(''));
+    $this->assertSession()->responseContains(Json::encode('metric4') . ':' . Json::encode($google_analytics_custom_metric['4']['name']));
+    $this->assertSession()->responseContains(Json::encode($google_analytics_custom_metric['4']['name']) . ':' . Json::encode(0));
   }
 
   /**
@@ -288,12 +291,13 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
     $edit['google_analytics_custom_dimension[indexes][4][value]'] = '[term:name]';
     $edit['google_analytics_custom_dimension[indexes][5][name]'] = 'term_tid';
     $edit['google_analytics_custom_dimension[indexes][5][value]'] = '[term:tid]';
+    $this->drupalGet('admin/config/system/google-analytics');
 
-    $this->drupalPostForm('admin/config/system/google-analytics', $edit, $this->t('Save configuration'));
+    $this->submitForm($edit, $this->t('Save configuration'));
 
-    $this->assertRaw($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => $this->t('Custom dimension value #@index', ['@index' => 1]), '@invalid-tokens' => implode(', ', ['[current-user:name]'])]));
-    $this->assertRaw($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => $this->t('Custom dimension value #@index', ['@index' => 2]), '@invalid-tokens' => implode(', ', ['[current-user:edit-url]'])]));
-    $this->assertRaw($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => $this->t('Custom dimension value #@index', ['@index' => 3]), '@invalid-tokens' => implode(', ', ['[user:name]'])]));
+    $this->assertSession()->responseContains($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => $this->t('Custom dimension value #@index', ['@index' => 1]), '@invalid-tokens' => implode(', ', ['[current-user:name]'])]));
+    $this->assertSession()->responseContains($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => $this->t('Custom dimension value #@index', ['@index' => 2]), '@invalid-tokens' => implode(', ', ['[current-user:edit-url]'])]));
+    $this->assertSession()->responseContains($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => $this->t('Custom dimension value #@index', ['@index' => 3]), '@invalid-tokens' => implode(', ', ['[user:name]'])]));
     // BUG #2037595
     //$this->assertNoRaw($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => t('Custom dimension value #@index', ['@index' => 4]), '@invalid-tokens' => implode(', ', ['[term:name]'])]));
     //$this->assertNoRaw($this->t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => t('Custom dimension value #@index', ['@index' => 5]), '@invalid-tokens' => implode(', ', ['[term:tid]'])]));
diff --git a/tests/src/Functional/GoogleAnalyticsCustomUrls.php b/tests/src/Functional/GoogleAnalyticsCustomUrls.php
index 19d310b..448d7dc 100644
--- a/tests/src/Functional/GoogleAnalyticsCustomUrls.php
+++ b/tests/src/Functional/GoogleAnalyticsCustomUrls.php
@@ -36,7 +36,7 @@ class GoogleAnalyticsCustomUrls extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -63,23 +63,23 @@ class GoogleAnalyticsCustomUrls extends BrowserTestBase {
       ->save();
 
     $this->drupalGet('user/password', ['query' => ['name' => 'foo']]);
-    $this->assertRaw('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":"' . $base_path . 'user/password"});');
+    $this->assertSession()->responseContains('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":"' . $base_path . 'user/password"});');
 
     $this->drupalGet('user/password', ['query' => ['name' => 'foo@example.com']]);
-    $this->assertRaw('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":"' . $base_path . 'user/password"});');
+    $this->assertSession()->responseContains('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":"' . $base_path . 'user/password"});');
 
     $this->drupalGet('user/password');
-    $this->assertNoRaw('"page_path":"' . $base_path . 'user/password"});');
+    $this->assertSession()->responseNotContains('"page_path":"' . $base_path . 'user/password"});');
 
     // Test whether 403 forbidden tracking code is shown if user has no access.
     $this->drupalGet('admin');
-    $this->assertResponse(403);
-    $this->assertRaw($base_path . '403.html');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->responseContains($base_path . '403.html');
 
     // Test whether 404 not found tracking code is shown on non-existent pages.
     $this->drupalGet($this->randomMachineName(64));
-    $this->assertResponse(404);
-    $this->assertRaw($base_path . '404.html');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->responseContains($base_path . '404.html');
   }
 
 }
diff --git a/tests/src/Functional/GoogleAnalyticsRolesTest.php b/tests/src/Functional/GoogleAnalyticsRolesTest.php
index 5f2b82b..741e585 100644
--- a/tests/src/Functional/GoogleAnalyticsRolesTest.php
+++ b/tests/src/Functional/GoogleAnalyticsRolesTest.php
@@ -36,7 +36,7 @@ class GoogleAnalyticsRolesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -63,28 +63,28 @@ class GoogleAnalyticsRolesTest extends BrowserTestBase {
 
     // Check tracking code visibility.
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
     $this->drupalGet('admin');
-    $this->assertResponse(403);
-    $this->assertRaw('/403.html');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->responseContains('/403.html');
 
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
     $this->drupalGet('admin');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
 
     // Test if the non-default settings are working as expected.
     // Enable tracking only for authenticated users.
     $this->config('google_analytics.settings')->set('visibility.user_role_roles', [AccountInterface::AUTHENTICATED_ROLE => AccountInterface::AUTHENTICATED_ROLE])->save();
 
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
 
     $this->drupalLogout();
     $this->drupalGet('');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
 
     // Add to every role except the selected ones.
     $this->config('google_analytics.settings')->set('visibility.user_role_mode', 1)->save();
@@ -93,29 +93,29 @@ class GoogleAnalyticsRolesTest extends BrowserTestBase {
 
     // Check tracking code visibility.
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
     $this->drupalGet('admin');
-    $this->assertResponse(403);
-    $this->assertRaw('/403.html');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->responseContains('/403.html');
 
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
     $this->drupalGet('admin');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
 
     // Disable tracking for authenticated users.
     $this->config('google_analytics.settings')->set('visibility.user_role_roles', [AccountInterface::AUTHENTICATED_ROLE => AccountInterface::AUTHENTICATED_ROLE])->save();
 
     $this->drupalGet('');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
     $this->drupalGet('admin');
-    $this->assertNoRaw($ua_code);
+    $this->assertSession()->responseNotContains($ua_code);
 
     $this->drupalLogout();
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
   }
 
 }
diff --git a/tests/src/Functional/GoogleAnalyticsSearchTest.php b/tests/src/Functional/GoogleAnalyticsSearchTest.php
index d0bdeee..97798a9 100644
--- a/tests/src/Functional/GoogleAnalyticsSearchTest.php
+++ b/tests/src/Functional/GoogleAnalyticsSearchTest.php
@@ -40,7 +40,7 @@ class GoogleAnalyticsSearchTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
@@ -71,31 +71,34 @@ class GoogleAnalyticsSearchTest extends BrowserTestBase {
 
     // Check tracking code visibility.
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
 
     $this->drupalGet('search/node');
-    $this->assertNoRaw('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":"');
+    $this->assertSession()->responseNotContains('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":"');
 
     // Enable site search support.
     $this->config('google_analytics.settings')->set('track.site_search', 1)->save();
 
     // Search for random string.
     $search = ['keys' => $this->randomMachineName(8)];
+    $this->drupalGet('search/node');
 
     // Fire a search, it's expected to get 0 results.
-    $this->drupalPostForm('search/node', $search, $this->t('Search'));
-    $this->assertRaw('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":(window.google_analytics_search_results) ?');
-    $this->assertRaw('window.google_analytics_search_results = 0;');
+    $this->submitForm($search, $this->t('Search'));
+    $this->assertSession()->responseContains('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":(window.google_analytics_search_results) ?');
+    $this->assertSession()->responseContains('window.google_analytics_search_results = 0;');
 
     // Create a node and reindex.
     $this->createNodeAndIndex($search['keys']);
-    $this->drupalPostForm('search/node', $search, $this->t('Search'));
+    $this->drupalGet('search/node');
+    $this->submitForm($search, $this->t('Search'));
     $this->assertSession()->responseContains('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":(window.google_analytics_search_results) ?');
     $this->assertSession()->responseContains('window.google_analytics_search_results = 1;');
 
     // Create a second node with same values and reindex.
     $this->createNodeAndIndex($search['keys']);
-    $this->drupalPostForm('search/node', $search, $this->t('Search'));
+    $this->drupalGet('search/node');
+    $this->submitForm($search, $this->t('Search'));
     $this->assertSession()->responseContains('gtag("config", ' . Json::encode($ua_code) . ', {"groups":"default","page_path":(window.google_analytics_search_results) ?');
     $this->assertSession()->responseContains('window.google_analytics_search_results = 2;');
   }
diff --git a/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php b/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php
index 462c81a..6cc2023 100644
--- a/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php
+++ b/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php
@@ -38,7 +38,7 @@ class GoogleAnalyticsStatusMessagesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -59,17 +59,18 @@ class GoogleAnalyticsStatusMessagesTest extends BrowserTestBase {
 
     // Enable logging of errors only.
     $this->config('google_analytics.settings')->set('track.messages', ['error' => 'error'])->save();
+    $this->drupalGet('user/login');
 
-    $this->drupalPostForm('user/login', [], $this->t('Log in'));
-    $this->assertRaw('gtag("event", "Error message", {"event_category":"Messages","event_label":"Username field is required."});');
-    $this->assertRaw('gtag("event", "Error message", {"event_category":"Messages","event_label":"Password field is required."});');
+    $this->submitForm([], $this->t('Log in'));
+    $this->assertSession()->responseContains('gtag("event", "Error message", {"event_category":"Messages","event_label":"Username field is required."});');
+    $this->assertSession()->responseContains('gtag("event", "Error message", {"event_category":"Messages","event_label":"Password field is required."});');
 
     // Testing this drupal_set_message() requires an extra test module.
     $this->drupalGet('google-analytics-test/drupal-messenger-add-message');
-    $this->assertNoRaw('gtag("event", "Status message", {"event_category":"Messages","event_label":"Example status message."});');
-    $this->assertNoRaw('gtag("event", "Warning message", {"event_category":"Messages","event_label":"Example warning message."});');
-    $this->assertRaw('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message."});');
-    $this->assertRaw('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message with html tags and link."});');
+    $this->assertSession()->responseNotContains('gtag("event", "Status message", {"event_category":"Messages","event_label":"Example status message."});');
+    $this->assertSession()->responseNotContains('gtag("event", "Warning message", {"event_category":"Messages","event_label":"Example warning message."});');
+    $this->assertSession()->responseContains('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message."});');
+    $this->assertSession()->responseContains('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message with html tags and link."});');
 
     // Enable logging of status, warnings and errors.
     $this->config('google_analytics.settings')->set('track.messages', [
@@ -79,10 +80,10 @@ class GoogleAnalyticsStatusMessagesTest extends BrowserTestBase {
     ])->save();
 
     $this->drupalGet('google-analytics-test/drupal-messenger-add-message');
-    $this->assertRaw('gtag("event", "Status message", {"event_category":"Messages","event_label":"Example status message."});');
-    $this->assertRaw('gtag("event", "Warning message", {"event_category":"Messages","event_label":"Example warning message."});');
-    $this->assertRaw('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message."});');
-    $this->assertRaw('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message with html tags and link."});');
+    $this->assertSession()->responseContains('gtag("event", "Status message", {"event_category":"Messages","event_label":"Example status message."});');
+    $this->assertSession()->responseContains('gtag("event", "Warning message", {"event_category":"Messages","event_label":"Example warning message."});');
+    $this->assertSession()->responseContains('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message."});');
+    $this->assertSession()->responseContains('gtag("event", "Error message", {"event_category":"Messages","event_label":"Example error message with html tags and link."});');
   }
 
 }
