diff --git a/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php b/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php
index 7c71f1e..9ef57ab 100644
--- a/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php
+++ b/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php
@@ -117,7 +117,7 @@ class ContentLockTimeoutTest extends BrowserTestBase {
   /**
    * Setup and Rebuild node access.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article']);
@@ -253,7 +253,10 @@ class ContentLockTimeoutTest extends BrowserTestBase {
 
     // Content should be locked.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
       '@name' => $this->user1->getDisplayName(),
     ]));
 
@@ -265,7 +268,10 @@ class ContentLockTimeoutTest extends BrowserTestBase {
     // Content should be unlocked by cron.
     $this->assertNoLockOnContent($entity);
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is now locked against simultaneous editing.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is now locked against simultaneous editing.'));
 
     $this->drupalLogout();
 
@@ -278,7 +284,10 @@ class ContentLockTimeoutTest extends BrowserTestBase {
 
     // Content should be locked.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
       '@name' => $this->user1->getDisplayName(),
     ]));
 
@@ -286,7 +295,10 @@ class ContentLockTimeoutTest extends BrowserTestBase {
     \Drupal::time()->setCurrentTime(time() + 60 * 60);
     // Lock should be release by form prepare.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is now locked against simultaneous editing.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is now locked against simultaneous editing.'));
   }
 
   /**
@@ -303,7 +315,7 @@ class ContentLockTimeoutTest extends BrowserTestBase {
     $this->lockService->locking($entity->id(), $entity->language()->getId(), 'edit', $this->user1->id(), $entity->getEntityTypeId());
     $lock = $this->lockService->fetchLock($entity->id(), $entity->language()->getId(), 'edit', $entity->getEntityTypeId());
     $this->assertNotNull($lock, 'Lock present');
-    $this->assertEqual($this->user1->label(), $lock->name, 'Lock present for correct user.');
+    $this->assertEquals($this->user1->label(), $lock->name, 'Lock present for correct user.');
   }
 
   /**
diff --git a/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php b/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php
index 739370a..0df6ef2 100644
--- a/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php
+++ b/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php
@@ -30,7 +30,7 @@ class PrefetchCacheTest extends ContentLockJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block', ['primary' => TRUE]);
