diff --git a/maintenance_mode_redirect.info.yml b/maintenance_mode_redirect.info.yml
index ccb9dba..0bf87c6 100644
--- a/maintenance_mode_redirect.info.yml
+++ b/maintenance_mode_redirect.info.yml
@@ -1,6 +1,5 @@
 name: Maintenance Mode Redirect
 type: module
 description: Redirect site visitors to another URL when Maintenance Mode is enabled.
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: system.site_maintenance_mode
diff --git a/maintenance_mode_redirect.services.yml b/maintenance_mode_redirect.services.yml
index 7c47284..472d6c4 100644
--- a/maintenance_mode_redirect.services.yml
+++ b/maintenance_mode_redirect.services.yml
@@ -1,16 +1,6 @@
-# Subscribing to an event requires you to create a new service tagged with the
-# 'event_subscriber' tag. This tells the service container, and by proxy the
-# event dispatcher service, that the class registered here can be queried to get
-# a list of events that it would like to be notified about.
-#
-# For more on defining and tagging services see
-# https://api.drupal.org/api/drupal/core%21core.api.php/group/container/8.2.x
 services:
-  # Give your service a unique name, convention is to prefix service names with
-  # the name of the module that implements them.
   maintenance_mode_redirect_subscriber:
-    # Point to the class that will contain your implementation of
-    # \Symfony\Component\EventDispatcher\EventSubscriberInterface
     class: Drupal\maintenance_mode_redirect\EventSubscriber\MaintenanceModeRedirectSubscriber
     tags:
-      - {name: event_subscriber}
+      -
+        name: event_subscriber
diff --git a/src/EventSubscriber/MaintenanceModeRedirectSubscriber.php b/src/EventSubscriber/MaintenanceModeRedirectSubscriber.php
index b337631..228adf6 100644
--- a/src/EventSubscriber/MaintenanceModeRedirectSubscriber.php
+++ b/src/EventSubscriber/MaintenanceModeRedirectSubscriber.php
@@ -26,10 +26,10 @@ class MaintenanceModeRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Check available redirection.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Event object.
    */
-  public function checkForRedirection(GetResponseEvent $event) {
+  public function checkForRedirection(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $allowed_path = array(
       '/user',
       '/user/login',
