diff --git a/tests/src/Functional/PbfAccessByNodeRefTest.php b/tests/src/Functional/PbfAccessByNodeRefTest.php
index b379255..7724f7b 100644
--- a/tests/src/Functional/PbfAccessByNodeRefTest.php
+++ b/tests/src/Functional/PbfAccessByNodeRefTest.php
@@ -19,7 +19,7 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_group';
@@ -38,10 +38,10 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -51,33 +51,36 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');
 
     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Member of group', 'User Obf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -94,14 +97,14 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view permission.
     $value = [
@@ -113,7 +116,7 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 1);
 
     // Associate normalUser with group1.
@@ -121,24 +124,24 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
 
     // Check if user is well associated with group1.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->group1->getTitle());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->group1->getTitle());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check search.
     $this->container->get('cron')->run();
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -151,20 +154,20 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByRoleTest.php b/tests/src/Functional/PbfAccessByRoleTest.php
index 090295b..f376c5b 100644
--- a/tests/src/Functional/PbfAccessByRoleTest.php
+++ b/tests/src/Functional/PbfAccessByRoleTest.php
@@ -20,7 +20,7 @@ class PbfAccessByRoleTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_role';
@@ -45,16 +45,16 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -64,25 +64,28 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-role"]/td[1]', 'Grant access to role', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_role][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_role][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-role"]/td[1]', 'Grant access to role', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_role][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_role][type]', 'pbf_formatter_default');
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -98,13 +101,13 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -117,27 +120,27 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test with user.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByTermRefTest.php b/tests/src/Functional/PbfAccessByTermRefTest.php
index a97bba2..9ee2579 100644
--- a/tests/src/Functional/PbfAccessByTermRefTest.php
+++ b/tests/src/Functional/PbfAccessByTermRefTest.php
@@ -19,7 +19,7 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
   /**
    * Setup and create content with Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->fieldname = 'field_pbf_term';
     $this->attachPbfTermFields($this->vocabulary, $this->fieldname);
@@ -41,10 +41,10 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -54,33 +54,36 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-term"]/td[1]', 'Content related to term', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-term"]/td[1]', 'Content related to term', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_formatter_default');
 
     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-term"]/td[1]', 'User related to term', 'User Pbf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_formatter_default');
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -97,14 +100,14 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view permission.
     $value = [
@@ -116,7 +119,7 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 1);
 
     // Associate normalUser with term1.
@@ -124,24 +127,24 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
 
     // Check if user is well associated with group1.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_term[0][target_id]', $this->term1->getName() . ' (' . $this->term1->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_term[0][target_id]', $this->term1->getName() . ' (' . $this->term1->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->term1->getName());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->term1->getName());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check search.
     $this->container->get('cron')->run();
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -154,20 +157,20 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByUserDirectTest.php b/tests/src/Functional/PbfAccessByUserDirectTest.php
index 34e6004..d7a929f 100644
--- a/tests/src/Functional/PbfAccessByUserDirectTest.php
+++ b/tests/src/Functional/PbfAccessByUserDirectTest.php
@@ -26,7 +26,7 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_user';
@@ -52,16 +52,16 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -71,35 +71,38 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
 
     if ($this->userMethod == 'ref_user') {
       $user_path_config = 'admin/config/people/accounts';
       $this->drupalGet($user_path_config . '/fields');
       $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-user"]/td[1]', 'User related to user', 'User Obf field was created and appears in the overview page.');
       $this->drupalGet($user_path_config . '/form-display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
       $this->drupalGet($user_path_config . '/display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
     }
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -109,14 +112,14 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     // Login as user referenced by Article 2.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -129,27 +132,27 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test with normalUser.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByUserRefTest.php b/tests/src/Functional/PbfAccessByUserRefTest.php
index 42f557e..5cec809 100644
--- a/tests/src/Functional/PbfAccessByUserRefTest.php
+++ b/tests/src/Functional/PbfAccessByUserRefTest.php
@@ -26,7 +26,7 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_user';
@@ -48,16 +48,16 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -67,35 +67,38 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
 
     if ($this->userMethod == 'ref_user') {
       $user_path_config = 'admin/config/people/accounts';
       $this->drupalGet($user_path_config . '/fields');
       $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-user"]/td[1]', 'User related to user', 'User Pbf field was created and appears in the overview page.');
       $this->drupalGet($user_path_config . '/form-display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
       $this->drupalGet($user_path_config . '/display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
     }
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -105,14 +108,14 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     // Login as user referenced by Article 2.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Associate normalUser with user referenced.
     $this->drupalLogin($this->normalUser);
@@ -120,24 +123,24 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
 
     // Check if normalUser is well associated with user.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_user[0][target_id]', $this->user->getAccountName() . ' (' . $this->user->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_user[0][target_id]', $this->user->getAccountName() . ' (' . $this->user->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->user->getAccountName());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->user->getAccountName());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check search.
     $this->container->get('cron')->run();
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -150,27 +153,27 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test with user.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
   }
 
