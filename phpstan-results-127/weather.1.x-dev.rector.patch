diff --git a/tests/src/Functional/ConfigurationTest.php b/tests/src/Functional/ConfigurationTest.php
index f128884..d682708 100644
--- a/tests/src/Functional/ConfigurationTest.php
+++ b/tests/src/Functional/ConfigurationTest.php
@@ -52,7 +52,10 @@ class ConfigurationTest extends BrowserTestBase {
     $this->drupalGet('admin/config/user-interface/weather/system-wide/add');
     $this->submitForm([], 'Save');
     $this->drupalGet('admin/config/user-interface/weather/system-wide/1/add');
-    $this->assertText('You do not have any weather places in system.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You do not have any weather places in system.');
 
     // Third case.
     // Configure the default place.
@@ -69,16 +72,25 @@ class ConfigurationTest extends BrowserTestBase {
 
     // Check block existing in blocks list.
     $this->drupalGet('admin/structure/block/list/stark');
-    $this->assertText('Weather: system-wide display (#1)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather: system-wide display (#1)');
 
     // Make sure that the weather block is displayed
     // with correct forecast data.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertRaw('<div class="weather">');
-    $this->assertText('00:00-06:00');
-    $this->assertRaw('&thinsp;°C');
-    $this->assertText('18:00-00:00');
-    $this->assertRaw('&thinsp;°C');
+    $this->assertSession()->responseContains('<div class="weather">');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('00:00-06:00');
+    $this->assertSession()->responseContains('&thinsp;°C');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('18:00-00:00');
+    $this->assertSession()->responseContains('&thinsp;°C');
 
     // Change temperature units to Fahrenheit.
     $edit = ['config[temperature]' => 'fahrenheit'];
@@ -89,8 +101,8 @@ class ConfigurationTest extends BrowserTestBase {
     \Drupal::cache()->invalidateAll();
     // Make sure that the weather block now shows different temperatures.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertRaw('&thinsp;°F');
-    $this->assertRaw('&thinsp;°F');
+    $this->assertSession()->responseContains('&thinsp;°F');
+    $this->assertSession()->responseContains('&thinsp;°F');
     // Logout current user.
     $this->drupalLogout();
   }
diff --git a/tests/src/Functional/FunctionsTest.php b/tests/src/Functional/FunctionsTest.php
index 08932b2..6f36c95 100644
--- a/tests/src/Functional/FunctionsTest.php
+++ b/tests/src/Functional/FunctionsTest.php
@@ -37,18 +37,18 @@ class FunctionsTest extends BrowserTestBase {
     $this->weatherFillWeatherSchema();
     // Test different numbers for system-wide displays.
     $link = $this->weatherGetInformationAboutGeoid('geonames_2911298')['link'];
-    $this->assertEqual($link, 'Hamburg/Hamburg');
+    $this->assertEquals($link, 'Hamburg/Hamburg');
     // Test different numbers for yr.no links.
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'yr.no');
-    $this->assertEqual($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/');
+    $this->assertEquals($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'system-wide');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg/1');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg/1');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'default');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'user');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg/u');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg/u');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'yr');
-    $this->assertEqual($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/forecast.xml');
+    $this->assertEquals($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/forecast.xml');
   }
 
 }
diff --git a/tests/src/Functional/ParserTest.php b/tests/src/Functional/ParserTest.php
index 2a8be64..7968010 100644
--- a/tests/src/Functional/ParserTest.php
+++ b/tests/src/Functional/ParserTest.php
@@ -519,11 +519,11 @@ class ParserTest extends BrowserTestBase {
     $info = $this->getInfoAboutForecast(1381176000);
     // Check that the information has been parsed correctly.
     $info = reset($info);
-    $this->assertEqual($info->geoid, 'geonames_2911298');
-    $this->assertEqual($info->last_update, '2013-10-07 15:30:00');
-    $this->assertEqual($info->next_update, '2013-10-08 04:00:00');
-    $this->assertEqual($info->next_download_attempt, '2013-10-08 04:00:00');
-    $this->assertEqual($info->utc_offset, 120);
+    $this->assertEquals($info->geoid, 'geonames_2911298');
+    $this->assertEquals($info->last_update, '2013-10-07 15:30:00');
+    $this->assertEquals($info->next_update, '2013-10-08 04:00:00');
+    $this->assertEquals($info->next_download_attempt, '2013-10-08 04:00:00');
+    $this->assertEquals($info->utc_offset, 120);
   }
 
   /**
@@ -553,7 +553,7 @@ class ParserTest extends BrowserTestBase {
     // Fetch all weather forecasts for Hamburg
     // and check the correct days of forecasts.
     $weather = $this->weatherGetWeather('geonames_2911298', 0, TRUE);
-    $this->assertIdentical(array_keys($weather['forecasts']), $days);
+    $this->assertSame(array_keys($weather['forecasts']), $days);
 
     // Go a few days forward ...
     // Set a fixed time for testing to 2013-10-12 10:00:00 UTC.
@@ -563,6 +563,6 @@ class ParserTest extends BrowserTestBase {
     // Fetch all weather forecasts for Hamburg
     // and check the correct days of forecasts.
     $weather = $this->weatherGetWeather('geonames_2911298', 0, TRUE);
-    $this->assertIdentical(array_keys($weather['forecasts']), array_slice($days, 5));
+    $this->assertSame(array_keys($weather['forecasts']), array_slice($days, 5));
   }
 }
diff --git a/tests/src/Functional/PermissionsTest.php b/tests/src/Functional/PermissionsTest.php
index f365f5b..38d0610 100644
--- a/tests/src/Functional/PermissionsTest.php
+++ b/tests/src/Functional/PermissionsTest.php
@@ -74,7 +74,10 @@ class PermissionsTest extends BrowserTestBase {
     // Get different pages.
     $this->drupalGet('node');
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertText('Directory for custom images');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Directory for custom images');
 
     // Enable a system-wide weather block.
     $this->drupalGet('admin/config/user-interface/weather/system-wide/add');
@@ -83,9 +86,9 @@ class PermissionsTest extends BrowserTestBase {
     // Make sure that the weather block is not
     // displayed without a configured place.
     $this->drupalGet('node');
-    $this->assertNoRaw('<div class="weather">');
-    $this->assertNoLink('Kyiv');
-    $this->assertNoLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->responseNotContains('<div class="weather">');
+    $this->assertSession()->linkNotExists('Kyiv');
+    $this->assertSession()->linkByHrefNotExists('weather/Ukraine/Kiev/Kyiv/1');
     // Configure the default place.
     $this->drupalGet('admin/config/user-interface/weather/system-wide/1/add');
     $this->submitForm([], 'Save');
@@ -94,14 +97,23 @@ class PermissionsTest extends BrowserTestBase {
     $this->submitForm(['region' => 'sidebar_first'], 'Save block');
 
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertText('Directory for custom images');
-    $this->assertText('Kyiv');
-    $this->assertText('Add location to this display');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Directory for custom images');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Kyiv');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Add location to this display');
     // Make sure that the weather block is displayed now.
     $this->drupalGet('node');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
     // Logout current user.
     $this->drupalLogout();
 
@@ -109,25 +121,40 @@ class PermissionsTest extends BrowserTestBase {
     $this->drupalLogin($normal_user);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
 
     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
-    $this->assertText('Weather forecast');
-    $this->assertText('Kyiv');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather forecast');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Kyiv');
     // Logout current user.
     $this->drupalLogout();
 
@@ -135,32 +162,47 @@ class PermissionsTest extends BrowserTestBase {
     $this->drupalLogin($weather_user_1);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
 
     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // Using the direct search URL should be forbidden.
     $this->drupalGet('weather/zollenspieker');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // But the user may not view any other detailed forecasts.
     // This needs the permission to access the search page.
     $this->drupalGet('weather/Germany/Hamburg/Zollenspieker');
-    $this->assertResponse(404);
-    $this->assertNoText('Zollenspieker');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Zollenspieker');
     // Logout current user.
     $this->drupalLogout();
 
@@ -168,31 +210,46 @@ class PermissionsTest extends BrowserTestBase {
     $this->drupalLogin($weather_user_2);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
 
     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // Using the direct search URL should be forbidden.
     $this->drupalGet('weather/zollenspieker');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // But the user may not view any other detailed forecasts.
     $this->drupalGet('weather/Germany/Hamburg/Zollenspieker');
-    $this->assertResponse(404);
-    $this->assertNoText('Zollenspieker');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Zollenspieker');
 
     // Logout current user.
     $this->drupalLogout();
