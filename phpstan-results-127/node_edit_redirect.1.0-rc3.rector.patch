diff --git a/src/EventSubscriber/NodeEditRedirectEventSubscriber.php b/src/EventSubscriber/NodeEditRedirectEventSubscriber.php
index 2a528a5..d46558e 100644
--- a/src/EventSubscriber/NodeEditRedirectEventSubscriber.php
+++ b/src/EventSubscriber/NodeEditRedirectEventSubscriber.php
@@ -48,9 +48,9 @@ class NodeEditRedirectEventSubscriber implements EventSubscriberInterface {
   /**
    * Event subscriber callback.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function redirectToLanguage(GetResponseEvent $event) {
+  public function redirectToLanguage(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if ($this->routeMatch->getRouteName() == 'entity.node.edit_form') {
       // Find out what the negotiated content language is.
       $current_content_langcode = $this->languageManager->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
diff --git a/tests/src/Functional/NodeEditRedirectTest.php b/tests/src/Functional/NodeEditRedirectTest.php
index 29643df..4338279 100644
--- a/tests/src/Functional/NodeEditRedirectTest.php
+++ b/tests/src/Functional/NodeEditRedirectTest.php
@@ -31,21 +31,24 @@ class NodeEditRedirectTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
    parent::setUp();
    $admin = $this->drupalCreateUser([], NULL, TRUE);
    $this->drupalLogin($admin);
+   $this->drupalGet('admin/config/regional/language/add');
    // Create FR.
-   $this->drupalPostForm('admin/config/regional/language/add', [
+   $this->submitForm([
      'predefined_langcode' => 'fr',
    ], 'Add language');
+   $this->drupalGet('admin/config/regional/language/detection/url');
    // Set prefixes to en and fr.
-   $this->drupalPostForm('admin/config/regional/language/detection/url', [
+   $this->submitForm([
      'prefix[en]' => 'en',
      'prefix[fr]' => 'fr',
    ], 'Save configuration');
+   $this->drupalGet('admin/config/regional/language/detection');
    // Set up URL and language selection page methods.
-   $this->drupalPostForm('admin/config/regional/language/detection', [
+   $this->submitForm([
      'language_interface[enabled][language-selection-page]' => 1,
      'language_interface[enabled][language-url]' => 1,
    ], 'Save settings');
@@ -65,15 +68,15 @@ class NodeEditRedirectTest extends BrowserTestBase {
    $this->drupalLogin($this->admin_user);
    // Visit the Italian page for a Spanish node.
    $this->drupalGet('it/node/' . $node->nid . '/edit');
-   $this->assertResponse(200);
+   $this->assertSession()->statusCodeEquals(200);
    $headers = $this->drupalGetHeaders(TRUE);
    list(, $status) = explode(' ', $headers [0][':status'], 3);
-   $this->assertEqual($status, 302, 'Expected response code was sent.');
+   $this->assertEquals($status, 302, 'Expected response code was sent.');
    $languages = language_list();
 
    // Assert that we redirected to the Spanish edit page.
-   $this->assertEqual($this->getUrl(), url('node/' . $node->nid . '/edit', ['absolute' => TRUE, 'language' => $languages['es']]));
-   $this->assertNotEqual($this->getUrl(), url('node/' . $node->nid . '/edit', ['absolute' => TRUE, 'language' => $languages['it']]));
+   $this->assertEquals($this->getUrl(), url('node/' . $node->nid . '/edit', ['absolute' => TRUE, 'language' => $languages['es']]));
+   $this->assertNotEquals($this->getUrl(), url('node/' . $node->nid . '/edit', ['absolute' => TRUE, 'language' => $languages['it']]));
   }
 
   /**
@@ -98,7 +101,7 @@ class NodeEditRedirectTest extends BrowserTestBase {
     $this->assertTrue(array_key_exists($language_code, $languages), 'Language was installed successfully.');
 
     if (array_key_exists($language_code, $languages)) {
-     $this->assertRaw(t('The language %language has been created and can now be used. More information is available on the <a href="@locale-help">help screen</a>.', ['%language' => $languages[$language_code]->name, '@locale-help' => url('admin/help/locale')]), 'Language has been created.');
+     $this->assertSession()->responseContains(t('The language %language has been created and can now be used. More information is available on the <a href="@locale-help">help screen</a>.', ['%language' => $languages[$language_code]->name, '@locale-help' => url('admin/help/locale')]));
     }
    }
    elseif ($this->xpath('//input[@type="checkbox" and @name=:name and @checked="checked"]', [':name' => 'enabled[' . $language_code . ']'])) {
@@ -109,7 +112,7 @@ class NodeEditRedirectTest extends BrowserTestBase {
     // It's installed but not enabled. Enable it.
     $this->assertTrue(true, 'Language [' . $language_code . '] already installed.');
     $this->drupalPost(NULL, ['enabled[' . $language_code . ']' => TRUE], t('Save configuration'));
-    $this->assertRaw(t('Configuration saved.'), 'Language successfully enabled.');
+    $this->assertSession()->responseContains(t('Configuration saved.'));
    }
   }
 
@@ -135,7 +138,7 @@ class NodeEditRedirectTest extends BrowserTestBase {
     $edit['language'] = $language;
    }
    $this->drupalPost('node/add/page', $edit, t('Save'));
-   $this->assertRaw(t('Basic page %title has been created.', ['%title' => $title]), 'Basic page created.');
+   $this->assertSession()->responseContains(t('Basic page %title has been created.', ['%title' => $title]));
 
    // Check to make sure the node was created.
    $node = $this->drupalGetNodeByTitle($title);
