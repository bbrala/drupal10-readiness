diff --git a/src/EventSubscriber/ApeSubscriber.php b/src/EventSubscriber/ApeSubscriber.php
index 08bed5c..3610b66 100644
--- a/src/EventSubscriber/ApeSubscriber.php
+++ b/src/EventSubscriber/ApeSubscriber.php
@@ -66,10 +66,10 @@ class ApeSubscriber implements EventSubscriberInterface {
   /**
    * Sets extra headers on successful responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
 
     if (!$event->isMasterRequest()) {
       return;
@@ -134,7 +134,7 @@ class ApeSubscriber implements EventSubscriberInterface {
   /**
    * Final cache check to respect defined cache policies and max age.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    *
    * @param int $maxAge
@@ -144,7 +144,7 @@ class ApeSubscriber implements EventSubscriberInterface {
    *   True if caching policies allow caching and max age is greater than 0,
    *   false if not.
    */
-  private function checkCacheable(FilterResponseEvent $event, $maxAge) {
+  private function checkCacheable(\Symfony\Component\HttpKernel\Event\ResponseEvent $event, $maxAge) {
     $request = $event->getRequest();
     $response = $event->getResponse();
 
@@ -156,13 +156,13 @@ class ApeSubscriber implements EventSubscriberInterface {
   /**
    * Sets the cache control header.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    *
    * @param int $maxAge
    *   The cache expiration age, in seconds.
    */
-  private function setCacheHeader(FilterResponseEvent $event, $maxAge) {
+  private function setCacheHeader(\Symfony\Component\HttpKernel\Event\ResponseEvent $event, $maxAge) {
     $response = $event->getResponse();
 
     $value = 'no-cache, must-revalidate';
diff --git a/src/Tests/ApeMinTest.php b/src/Tests/ApeMinTest.php
index db2ba1d..d5defb8 100644
--- a/src/Tests/ApeMinTest.php
+++ b/src/Tests/ApeMinTest.php
@@ -56,7 +56,7 @@ class ApeMinTest extends BrowserTestBase {
   public function testApeHeaders() {
     // Check user registration page has global age.
     $this->drupalGet('user/register');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
 
   }
 
diff --git a/src/Tests/ApeTest.php b/src/Tests/ApeTest.php
index 1884eab..680e833 100644
--- a/src/Tests/ApeTest.php
+++ b/src/Tests/ApeTest.php
@@ -56,31 +56,31 @@ class ApeTest extends BrowserTestBase {
   public function testApeHeaders() {
     // Check user registration page has global age.
     $this->drupalGet('user/register');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
 
     // Check homepage has alternative age.
     $this->drupalGet('/ape_alternative');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=60, public', 'Alternative Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=60, public', 'Alternative Cache-Control header set.');
 
     // Check login page is excluded from caching.
     $this->drupalGet('/ape_exclude');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Page successfully excluded from caching.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Page successfully excluded from caching.');
 
     // Check that authenticated users bypass the cache.
     $user = $this->drupalCreateUser();
     $this->drupalLogin($user);
     $this->drupalGet('user');
     $this->assertNull($this->drupalGetHeader('X-Drupal-Cache'), 'Caching was bypassed.');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Cache-Control header was sent.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Cache-Control header was sent.');
     $this->drupalLogout();
 
     // Check that 403 responses have configured age.
     $this->drupalGet('admin/structure');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Forbidden page was not cached.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Forbidden page was not cached.');
 
     // Check that 404 responses have configured age.
     $this->drupalGet('notfindingthat');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=3600, public', '404 Page Not Found Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=3600, public', '404 Page Not Found Cache-Control header set.');
 
     // TODO: Figure out why these tests aren't working. The browser output shows
     // that are they are working as expected. Drupal 8 returned an array of
