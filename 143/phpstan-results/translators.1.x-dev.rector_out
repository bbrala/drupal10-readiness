modules/contrib/translators/modules/translators_content/src/Access/TranslatorsContentManageAccessCheck.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslationViewsIntegrationTest.php
modules/contrib/translators/modules/translators_interface/src/Controller/TranslatorsInterfaceController.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentAccessClassTest.php
modules/contrib/translators/modules/translators_interface/src/Form/TranslateEditForm.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentConfigTest.php
modules/contrib/translators/modules/translators_interface/src/Form/TranslateFilterForm.php
modules/contrib/translators/modules/translators_content/src/Access/TranslatorsContentOverviewAccess.php
modules/contrib/translators/modules/translators_content/src/Controller/TranslatorsContentEntityLangcodeFieldController.php
modules/contrib/translators/modules/translators_interface/src/Routing/TranslatorsRouteSubscriber.php
modules/contrib/translators/modules/translators_interface/src/TranslatorsInterfaceLanguagesTrait.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionBlockContentTest.php
modules/contrib/translators/modules/translators_content/src/Controller/TranslatorsContentTranslationOverviewController.php
modules/contrib/translators/src/Form/TranslatorsSettingsForm.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionCommentTest.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionMediaTest.php
modules/contrib/translators/src/Services/TranslatorSkills.php
modules/contrib/translators/modules/translators_content/src/Handler/TranslatorsContentBlockContentTranslationHandler.php
modules/contrib/translators/modules/translators_content/src/Handler/TranslatorsContentCommentTranslationHandler.php
modules/contrib/translators/modules/translators_content/src/Handler/TranslatorsContentNodeTranslationHandler.php
modules/contrib/translators/tests/src/Kernel/TranslatorsInstallationTest.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionNodeStaticEntityTest.php
modules/contrib/translators/modules/translators_content/src/Handler/TranslatorsContentProfileTranslationHandler.php
modules/contrib/translators/modules/translators_content/src/Handler/TranslatorsContentTermTranslationHandler.php
modules/contrib/translators/modules/translators_content/src/Handler/TranslatorsContentTranslationHandler.php
modules/contrib/translators/modules/translators_content/src/Handler/TranslatorsContentTranslationHandlerTrait.php
modules/contrib/translators/translators.install
modules/contrib/translators/translators.module
modules/contrib/translators/modules/translators_content/src/Plugin/views/filter/TranslationLanguageLimitedToTranslationSkills.php
modules/contrib/translators/modules/translators_content/src/Routing/TranslatorsContentRouteSubscriber.php
modules/contrib/translators/modules/translators_content/src/TranslatorsContentPermissions.php
modules/contrib/translators/modules/translators_content/src/TranslatorsContentServiceProvider.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionNodeStaticTranslationTest.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionNodeTest.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionTaxonomyTermTest.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionTestBase.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionUserStaticTest.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentTestsTrait.php
modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentViewsLanguageFilterTest.php
modules/contrib/translators/modules/translators_content/translators_content.module

12 files with changes
=====================

1) modules/contrib/translators/modules/translators_content/translators_content.module:92

    ---------- begin diff ----------
@@ @@
  */
 function translators_content_theme_registry_alter(&$theme_registry) {
   // Specify the path for the template of views_ui_expose_filter_form.
-  $path = drupal_get_path('module', 'translators_content') . '/templates';
+  $path = \Drupal::service('extension.list.module')->getPath('translators_content') . '/templates';
   $theme_registry['views_ui_expose_filter_form']['path'] = $path;
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentViewsLanguageFilterTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
     $this->createLanguages(['fr', 'de', 'sq']);
@@ @@

     // Test with language filtering enabled.
     $this->drupalGet('/admin/structure/views/nojs/handler/test_translators_content_filter/page_1/filter/langcode');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'options[limit]'          => 1,
       'options[column][source]' => 1,
       'options[column][target]' => 1,
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionUserStaticTest.php:31

    ---------- begin diff ----------
@@ @@

     // Check entity local task tabs existence.
     $this->drupalGet("user/{$user->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');

     // Check for the edit page access.
     $this->drupalGet("user/{$user->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Additionally check that we don't give access to this form
     // for anonymous users.
     $this->drupalLogout();
     $this->drupalGet("user/{$user->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionTestBase.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
     $this->enableFilterTranslationOverviewToSkills(FALSE);
@@ @@
   public function testTranslatonPermissionsVisability() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin/people/permissions');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $permissions_prefix = '(in translation skills)';

     // Check for Content Translators permissions section.
@@ @@
   public function runTestEntityPermissionsVisability() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin/people/permissions');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $permissions_prefix = '(in translation skills)';

     // Check for "content" permissions existence.
@@ @@
     if ($this->expectedStatus['create entity in any language'] == 200) {
       foreach ($this->getAllSiteLangcodes() as $langcode) {
         $this->drupalGet($this->getCreateEntityUrl($langcode));
-        $this->assertResponse(200);
+        $this->assertSession()->statusCodeEquals(200);
         foreach ($this->getAllSiteLangcodes() as $all_langcode) {
           $this->assertOptionAvailable('langcode[0][value]', $all_langcode);
         }
@@ @@
     elseif ($this->expectedStatus['create entity in translation skills'] == 200) {
       foreach ($translatorSkills->getAllLangcodes() as $langcode) {
         $this->drupalGet($this->getCreateEntityUrl($langcode));
-        $this->assertResponse(200);
+        $this->assertSession()->statusCodeEquals(200);
         // Check language option field.
         foreach ($translatorSkills->getAllLangcodes() as $user_langcode) {
           $this->assertOptionAvailable('langcode[0][value]', $user_langcode);
@@ @@
       }
       foreach ($this->getUnregisteredLangcodes() as $langcode) {
         $this->drupalGet($this->getCreateEntityUrl($langcode));
-        $this->assertResponse(403);
+        $this->assertSession()->statusCodeEquals(403);
       }
     }
     else {
       foreach ($this->getAllSiteLangcodes() as $langcode) {
         $this->drupalGet($this->getCreateEntityUrl($langcode));
-        $this->assertResponse(403);
+        $this->assertSession()->statusCodeEquals(403);
       }
     }
   }
@@ @@
     $path = $this->getCurrentPath($langcode);
     if ($has_permission) {
       // Check direct link permission.
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
       // Check local task tabs existence.
       $label = ucfirst($operation);
       $this->runTestLocalTaskTabsExistence($entity, $label, $url);
@@ @@
       // Check operation existence on translation overview page.
       if ($this->expectedStatus['access translation overview'] == 200) {
         $this->drupalGet($entity->toUrl('drupal:content-translation-overview'));
-        $this->assertResponse(200);
+        $this->assertSession()->statusCodeEquals(200);
         $this->assertSession()
           ->elementExists('css', ".$operation a[hreflang=\"" . $langcode . "\"]");
         $this->click(".$operation a[hreflang=\"" . $langcode . "\"]");
-        $this->assertUrl($path);
+        $this->assertSession()->addressEquals($path);
       }
     }
     else {
       // Check NO direct link permission.
-      $this->assertResponse(403);
+      $this->assertSession()->statusCodeEquals(403);
       // Check NO local task tabs existence.
       $label = ucfirst($operation);
       $this->runTestNoLocalTaskTabsExistence($entity, $label);
@@ @@
     $url = $entity->toUrl('drupal:content-translation-overview');
     $this->drupalGet($url);
     $url_string = $url->toString();
-    $this->assertResponse($this->expectedStatus['access translation overview']);
+    $this->assertSession()->statusCodeEquals($this->expectedStatus['access translation overview']);
     if ($this->expectedStatus['access translation overview'] == 200) {
       // Check the language row filtering.
       $config = \Drupal::configFactory()->get('translators.settings');
@@ @@
    */
   public function runTestLocalTaskTabsExistence($entity, $label, $url, $langcode = NULL) {
     $this->drupalGetEntity($entity, $langcode);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementExists('xpath', '//a[text()="' . $label . '"]/@href');
     $this->clickLink($label);
-    $this->assertResponse(200);
-    $this->assertUrl($url->toString());
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals($url->toString());
   }

   /**
@@ @@
     $source = $translatorSkills->getTranslationSourceLangcode($entity, $target);
     $translation_add_url = $this->getCreateEntityTransaltionUrl($entity, $source, $target);
     $this->drupalGet($translation_add_url);
-    $this->assertUrl($translation_add_url->toString());
+    $this->assertSession()->addressEquals($translation_add_url->toString());
     $path = $this->getCurrentPath($target);
     if ($has_permission) {
       // Check direct link access.
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
       // Check translation operation existence on translation overview page.
       $this->drupalGet($entity->toUrl('drupal:content-translation-overview'));
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
       $this->assertSession()
         ->elementExists('css', '.add a[hreflang="' . $target . '"]');
       $this->click('.add a[hreflang="' . $target . '"]');
-      $this->assertUrl($path);
-      $this->assertResponse(200);
+      $this->assertSession()->addressEquals($path);
+      $this->assertSession()->statusCodeEquals(200);
       // Check source language field.
       $this->runTestCreateTranslationSourceLanguages($entity, $target);
     }
     else {
       // Check NO direct link access.
-      $this->assertResponse(403);
+      $this->assertSession()->statusCodeEquals(403);
       // Check NO translation operation existence on translation overview page.
       $this->drupalGet($entity->toUrl('drupal:content-translation-overview'));
       $this->assertSession()
@@ @@
     $entity = $entity->getTranslation($langcode);
     $url = $this->getEntityTranslationOperationUrl($entity, $langcode, $operation);
     $this->drupalGet($url);
-    $this->assertUrl($url->toString());
+    $this->assertSession()->addressEquals($url->toString());
     if ($has_permission) {
       // Check direct link access.
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
       // Check translation operation existence on translation overview page.
       $this->drupalGet($entity->toUrl('drupal:content-translation-overview'));
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
       $this->assertSession()
         ->elementExists('css', ".$operation a[hreflang=\"" . $langcode . "\"]");
       $this->click(".$operation a[hreflang=\"" . $langcode . "\"]");
-      $this->assertUrl($url->toString());
-      $this->assertResponse(200);
+      $this->assertSession()->addressEquals($url->toString());
+      $this->assertSession()->statusCodeEquals(200);
       // Check local task tabs existence.
       $label = ucfirst($operation);
       $this->runTestLocalTaskTabsExistence($entity, $label, $url, $langcode);
@@ @@
     }
     else {
       // Check NO direct link access.
-      $this->assertResponse(403);
+      $this->assertSession()->statusCodeEquals(403);
       // Check NO translation operation existence on translation overview page.
       $this->drupalGet($entity->toUrl('drupal:content-translation-overview'));
       $this->assertSession()
@@ @@

     // Check that local task tabs exist for own page.
     $this->drupalGet("user/{$user->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');
     // Check that local task tabs doesn't exist for other uers's pages.
     $this->drupalGet("user/{$another_user->id()}");
     if ($user->hasPermission('administer users')) {
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
       $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');
     }
     else {
-      $this->assertResponse(403);
+      $this->assertSession()->statusCodeEquals(403);
       $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     }

     // Check for the edit page access for own page.
     $this->drupalGet("user/{$user->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check for the edit page access for other users's page.
     $this->drupalGet("user/{$another_user->id()}/edit");
     if ($user->hasPermission('administer users')) {
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
     }
     else {
-      $this->assertResponse(403);
+      $this->assertSession()->statusCodeEquals(403);
     }

     // Additionally check that we don't give access to this form
@@ @@
     // for anonymous users.
     $this->drupalLogout();
     $this->drupalGet("user/{$user->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalLogin($user);
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionTaxonomyTermTest.php:178

    ---------- begin diff ----------
@@ @@
     $source = !empty($source) ? $source : $entity->getUntranslated()->language()->getId();
     $translation_add_url = $this->getCreateEntityTransaltionUrl($entity, $source, $target);
     $this->drupalGet($translation_add_url);
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([], t('Save'));
     $this->rebuildContainer();
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionNodeStaticTranslationTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
     $this->createLanguages(['fr', 'de', 'sq']);
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.add a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementExists('css', '.add a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/translations/add/en/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$nid/translations/add/en/de");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$nid/translations/add/en/sq");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();

     $translationCreator2 = $this->createUser([
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.add a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementExists('css', '.add a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/translations/add/en/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$nid/translations/add/en/de");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$nid/translations/add/en/sq");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.add a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementNotExists('css', '.add a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/translations/add/en/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$nid/translations/add/en/de");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/$nid/translations/add/en/sq");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalLogout();

     $translationCreator2 = $this->createUser([
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.add a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementNotExists('css', '.add a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/translations/add/en/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$nid/translations/add/en/de");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/$nid/translations/add/en/sq");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
     ]);
     $this->drupalLogin($translationCreator1);
     $this->drupalGet("node/$nid/translations/add/en/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 3);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@
     $this->assertOptionNotAvailable('source_langcode[source]', 'fr');

     $this->drupalGet("node/$nid/translations/add/de/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 3);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@
     $this->assertOptionNotAvailable('source_langcode[source]', 'fr');

     $this->drupalGet("node/$nid/translations/add/sq/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 3);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@

     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementExists('css', '.add a[hreflang="fr"]');
     $this->click('.add a[hreflang="fr"]');
-    $this->assertResponse(200);
-    $this->assertUrl("/fr/node/$nid/translations/add/en/fr");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals("/fr/node/$nid/translations/add/en/fr");
     $this->drupalLogout();

     // Test with translators_content create translation access.
@@ @@
     $this->addSkill(['de', 'fr']);
     $this->addSkill(['en', 'sq']);
     $this->drupalGet("node/$nid/translations/add/en/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 3);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@
     $this->assertOptionNotAvailable('source_langcode[source]', 'fr');

     $this->drupalGet("node/$nid/translations/add/de/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 3);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@
     $this->assertOptionNotAvailable('source_langcode[source]', 'fr');

     $this->drupalGet("node/$nid/translations/add/sq/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 3);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@

     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementExists('css', '.add a[hreflang="fr"]');
     $this->click('.add a[hreflang="fr"]');
-    $this->assertResponse(200);
-    $this->assertUrl("/fr/node/$nid/translations/add/en/fr");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals("/fr/node/$nid/translations/add/en/fr");
     $this->drupalLogout();

     // Test with strict translation skill pairing.
@@ @@

     $this->drupalLogin($translationCreator2);
     $this->drupalGet("node/$nid/translations/add/en/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 2);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@
     $this->assertOptionNotAvailable('source_langcode[source]', 'fr');

     $this->drupalGet("node/$nid/translations/add/de/fr");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('source_langcode[source]', 2);
     $this->assertOptionAvailable('source_langcode[source]', 'en');
     $this->assertOptionAvailable('source_langcode[source]', 'de');
@@ @@
     $this->assertOptionNotAvailable('source_langcode[source]', 'fr');

     $this->drupalGet("node/$nid/translations/add/sq/fr");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementExists('css', '.add a[hreflang="fr"]');
     $this->click('.add a[hreflang="fr"]');
-    $this->assertResponse(200);
-    $this->assertUrl("/fr/node/$nid/translations/add/en/fr");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals("/fr/node/$nid/translations/add/en/fr");
     $this->drupalLogout();

     // Test preset source language.
@@ @@
     $this->drupalLogin($translationCreator3);
     $this->addSkill(['de', 'fr']);
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementExists('css', '.add a[hreflang="fr"]');
     $this->click('.add a[hreflang="fr"]');
-    $this->assertResponse(200);
-    $this->assertUrl("/fr/node/$nid/translations/add/de/fr");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals("/fr/node/$nid/translations/add/de/fr");
     $this->drupalLogout();

     // Test with translators_content create translation access.
@@ @@
     $this->drupalLogin($translationCreator4);
     $this->addSkill(['de', 'fr']);
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementExists('css', '.add a[hreflang="fr"]');
     $this->click('.add a[hreflang="fr"]');
-    $this->assertResponse(200);
-    $this->assertUrl("/fr/node/$nid/translations/add/de/fr");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals("/fr/node/$nid/translations/add/de/fr");
   }

   /**
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.edit a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementExists('css', '.edit a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("sq/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();

     $translationEditor2 = $this->createUser([
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.edit a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementExists('css', '.edit a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("sq/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();
   }

@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.edit a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementNotExists('css', '.edit a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("sq/node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalLogout();

     $translationEditor2 = $this->createUser([
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.edit a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementNotExists('css', '.edit a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("sq/node/$nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.delete a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementExists('css', '.delete a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("sq/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();

     $translationDeleter2 = $this->createUser([
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.delete a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementExists('css', '.delete a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("sq/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();
   }

@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.delete a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementNotExists('css', '.delete a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("sq/node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalLogout();

     $translationDeleter2 = $this->createUser([
@@ @@
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Translate\']/@href');
     // Translation overview.
     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()
       ->elementNotExists('css', '.delete a[hreflang="en"]');
     $this->assertSession()
@@ @@
       ->elementNotExists('css', '.delete a[hreflang="sq"]');
     // Direct links.
     $this->drupalGet("node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("sq/node/$nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
     $this->addSkill(['en', 'fr']);

     $this->drupalGet("node/$nid/translations");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $language_column_css = 'main table td:first-child';
     // Test node default language.
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionNodeStaticEntityTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
     $this->createLanguages(['fr', 'de', 'sq']);
@@ @@

     // Test access languages in translation skills.
     $this->drupalGet('node/add/article');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('langcode[0][value]', 6);
     $this->assertOptionAvailable('langcode[0][value]', 'en');
     $this->assertOptionAvailable('langcode[0][value]', 'fr');
@@ @@
     $this->assertOptionAvailable('langcode[0][value]', Language::LANGCODE_NOT_APPLICABLE);

     $this->drupalGet('fr/node/add/article');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('langcode[0][value]', 6);
     $this->assertOptionAvailable('langcode[0][value]', 'en');
     $this->assertOptionAvailable('langcode[0][value]', 'fr');
@@ @@

     // Test access other languages.
     $this->drupalGet('de/node/add/article');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('langcode[0][value]', 6);
     $this->assertOptionAvailable('langcode[0][value]', 'en');
     $this->assertOptionAvailable('langcode[0][value]', 'fr');
@@ @@
     $this->assertOptionAvailable('langcode[0][value]', Language::LANGCODE_NOT_APPLICABLE);

     $this->drupalGet('sq/node/add/article');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('langcode[0][value]', 6);
     $this->assertOptionAvailable('langcode[0][value]', 'en');
     $this->assertOptionAvailable('langcode[0][value]', 'fr');
@@ @@

     // Test access languages in translation skills.
     $this->drupalGet('node/add/article');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('langcode[0][value]', 4);
     $this->assertOptionAvailable('langcode[0][value]', 'en');
     $this->assertOptionAvailable('langcode[0][value]', 'fr');
@@ @@
     $this->assertOptionAvailable('langcode[0][value]', Language::LANGCODE_NOT_APPLICABLE);

     $this->drupalGet('fr/node/add/article');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertOptionCount('langcode[0][value]', 4);
     $this->assertOptionAvailable('langcode[0][value]', 'en');
     $this->assertOptionAvailable('langcode[0][value]', 'fr');
@@ @@

     // Test access other languages.
     $this->drupalGet('de/node/add/article');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertTextHelper('Access denied', FALSE);

     $this->drupalGet('sq/node/add/article');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertTextHelper('Access denied', FALSE);
   }

@@ @@
     $this->drupalGet("node/$en_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("node/$en_nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("fr/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("fr/node/$en_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("de/node/$en_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $fr_nid = $node_fr->id();
     $this->drupalGet("node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("node/$fr_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$fr_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("fr/node/$fr_nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("de/node/$fr_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Test access in another language.
     $de_nid = $node_de->id();
@@ @@
     $this->drupalGet("node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("node/$de_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("fr/node/$de_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$de_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("de/node/$de_nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $this->drupalGet("node/$en_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("node/$en_nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("fr/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("fr/node/$en_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("de/node/$en_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $fr_nid = $node_fr->id();
     $this->drupalGet("node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("node/$fr_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$fr_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("fr/node/$fr_nid/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("de/node/$fr_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Test access in another language.
     $de_nid = $node_de->id();
@@ @@
     $this->drupalGet("node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("node/$de_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("fr/node/$de_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Edit\']/@href');
     $this->drupalGet("de/node/$de_nid/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
     $this->drupalGet("node/$en_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("node/$en_nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("fr/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("fr/node/$en_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("de/node/$en_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $fr_nid = $node_fr->id();
     $this->drupalGet("node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("node/$fr_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$fr_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("fr/node/$fr_nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("de/node/$fr_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Test access in another language.
     $de_nid = $node_de->id();
@@ @@
     $this->drupalGet("node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("node/$de_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("fr/node/$de_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$de_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("de/node/$de_nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $this->drupalGet("node/$en_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("node/$en_nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("fr/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("fr/node/$en_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$en_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("de/node/$en_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $fr_nid = $node_fr->id();
     $this->drupalGet("node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("node/$fr_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$fr_nid");
     $this->assertSession()->elementExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("fr/node/$fr_nid/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("de/node/$fr_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("de/node/$fr_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Test access in another language.
     $de_nid = $node_de->id();
@@ @@
     $this->drupalGet("node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("node/$de_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("fr/node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("fr/node/$de_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("de/node/$de_nid");
     $this->assertSession()->elementNotExists('xpath', '//a[text()=\'Delete\']/@href');
     $this->drupalGet("de/node/$de_nid/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionMediaTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm(
-      '/admin/config/media/media-settings',
-      ['standalone_url' => TRUE],
-      'Save configuration'
-    );
+    $this->drupalGet('/admin/config/media/media-settings');
+    $this->submitForm(['standalone_url' => TRUE], 'Save configuration');
     $this->drupalLogout();
     file_put_contents('public://image-test.jpg', file_get_contents(__DIR__ . '/image-test.jpg'));
     $file = File::create([
@@ @@
     $source = !empty($source) ? $source : $entity->getUntranslated()->language()->getId();
     $translation_add_url = $this->getCreateEntityTransaltionUrl($entity, $source, $target);
     $this->drupalGet($translation_add_url);
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([], t('Save'));
     $this->rebuildContainer();
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionCommentTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $node = Node::create([
       'type' => 'article',
@@ @@
     $source = !empty($source) ? $source : $entity->getUntranslated()->language()->getId();
     $translation_add_url = $this->getCreateEntityTransaltionUrl($entity, $source, $target);
     $this->drupalGet($translation_add_url);
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->rebuildContainer();
   }

@@ @@
    */
   public function runTestLocalTaskTabsExistence($entity, $label, $url, $langcode = NULL) {
     $this->drupalGetEntity($entity, $langcode);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $id = $entity->id();
     $operation = $label == 'Translate' ? 'translations' : strtolower($label);
     $link = $this->assertSession()->elementExists('xpath', "//article[@id='comment-$id']//a[text()=\"$label\"]");
     $link->click();
-    $this->assertResponse(200);
-    $this->assertUrl($url->toString());
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals($url->toString());
   }

   /**
@@ @@
    */
   public function runTestNoLocalTaskTabsExistence($entity, $label, $langcode = NULL) {
     $this->drupalGetEntity($entity, $langcode);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $id = $entity->id();
     $operation = $label == 'Translate' ? 'translations' : strtolower($label);
     $this->assertSession()->elementNotExists('xpath', "//article[@id='comment-$id']//a[text()=\"$label\"]");
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentPermissionBlockContentTest.php:67

    ---------- begin diff ----------
@@ @@
     $source = !empty($source) ? $source : $entity->getUntranslated()->language()->getId();
     $translation_add_url = $this->getCreateEntityTransaltionUrl($entity, $source, $target);
     $this->drupalGet($translation_add_url);
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->rebuildContainer();
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentConfigTest.php:93

    ---------- begin diff ----------
@@ @@
       else {
         $this->assertTrue($option_value);
       }
+      $this->drupalGet('/admin/config/regional/translators');

       // Update value.
-      $this->drupalPostForm(
-        '/admin/config/regional/translators',
-        [$config_name => TRUE],
-        'Save configuration'
-      );
+      $this->submitForm([$config_name => TRUE], 'Save configuration');

       $this->assertSession()->statusCodeEquals(200);
       $this->assertTextHelper('The configuration options have been saved.', FALSE);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/translators/modules/translators_content/tests/src/Functional/TranslatorsContentAccessClassTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->accessManager = $this->container
       ->get('content_translation.manage_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/translators/modules/translators_content/tests/src/Func
         tional/TranslatorsContentTestsTrait.php" file, due to:                 
         "System error: "Method assertEqual() was not found in reflection of    
         class                                                                  
         Drupal\Tests\translators_content\Functional\TranslatorsContentTestsTrai
         t."                                                                    
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

