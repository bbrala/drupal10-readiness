diff --git a/name.install b/name.install
index 47cb0a8..e569044 100644
--- a/name.install
+++ b/name.install
@@ -78,14 +78,14 @@ function name_update_8202() {
 function name_update_8203() {
   $config_factory = \Drupal::configFactory();
 
-  $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.components.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.components.yml';
   $data = Yaml::parse(file_get_contents($config_path));
   $config = $config_factory->getEditable('name.generate.components');
   $config->set('components', $data['components']);
   $config->set('gender', $data['gender']);
   $config->save(TRUE);
 
-  $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.preferred.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.preferred.yml';
   $data = Yaml::parse(file_get_contents($config_path));
   $config = $config_factory->getEditable('name.generate.preferred');
   $config->set('preferred', $data['preferred']);
@@ -105,7 +105,7 @@ function name_update_8203() {
     $old_config->delete();
   }
   else {
-    $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.examples.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.examples.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     $config = $config_factory->getEditable('name.generate.examples');
     $config->set('examples', $data['examples']);
diff --git a/name.module b/name.module
index fe23d89..9e8efe1 100644
--- a/name.module
+++ b/name.module
@@ -482,7 +482,7 @@ function name_element_render_component(array $components, $component_key, array
         '#required' => $show_component_required_marker,
         '#title_display' => 'before',
       ];
-      $element['#title'] = render($label);
+      $element['#title'] = \Drupal::service('renderer')->render($label);
       break;
 
     case 'placeholder':
diff --git a/tests/src/Functional/NameAdminTest.php b/tests/src/Functional/NameAdminTest.php
index 8aa55c1..efb0288 100644
--- a/tests/src/Functional/NameAdminTest.php
+++ b/tests/src/Functional/NameAdminTest.php
@@ -100,21 +100,22 @@ class NameAdminTest extends NameTestBase {
       'name_settings[sep3]' => '',
     ];
     foreach ($default_values as $name => $value) {
-      $this->assertField($name, $value);
+      $this->assertSession()->fieldExists($name, $value);
     }
     // ID example.
-    $this->assertFieldById('edit-name-settings-sep1', ' ', t('Sep 1 default value.'));
+    $this->assertSession()->fieldValueEquals('edit-name-settings-sep1', ' ');
 
     $test_values = [
       'name_settings[sep1]' => '~',
       'name_settings[sep2]' => '^',
       'name_settings[sep3]' => '-',
     ];
-    $this->drupalPostForm('admin/config/regional/name/settings', $test_values, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    $this->drupalGet('admin/config/regional/name/settings');
+    $this->submitForm($test_values, t('Save configuration'));
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
     foreach ($test_values as $name => $value) {
-      $this->assertField($name, $value);
+      $this->assertSession()->fieldExists($name, $value);
     }
 
     // Delete all existing formats.
@@ -126,32 +127,37 @@ class NameAdminTest extends NameTestBase {
     });
 
     $this->drupalGet('admin/config/regional/name/add');
-    $this->assertRaw('Format string help', 'Testing the help fieldgroup');
+    $this->assertSession()->responseContains('Format string help');
     $values = ['label' => '', 'id' => '', 'pattern' => ''];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
     foreach ([t('Name'), t('Machine-readable name'), t('Format')] as $title) {
-      $this->assertText(t('@field field is required', ['@field' => $title]));
+      $this->assertSession()->pageTextContains(t('@field field is required', ['@field' => $title]));
     }
     $values = [
       'label' => 'given',
       'id' => '1234567890abcdefghijklmnopqrstuvwxyz_',
       'pattern' => 'a',
     ];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Format')]));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Machine-readable name')]));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Format')]));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Machine-readable name')]));
 
     $values = ['label' => 'given', 'id' => '%&*(', 'pattern' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
 
     $values = ['label' => 'default', 'id' => 'default', 'pattern' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name is already in use. It must be unique.'));
 
     $values = ['label' => 'Test', 'id' => 'test', 'pattern' => '\a\bc'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('Name format Test added.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('Name format Test added.'));
 
     $row = [
       'title' => 'Test',
@@ -164,8 +170,9 @@ class NameAdminTest extends NameTestBase {
     $this->assertRow($row, $row_template, 3);
 
     $values = ['label' => 'new name', 'pattern' => 'f+g'];
-    $this->drupalPostForm('admin/config/regional/name/manage/test', $values, t('Save format'));
-    $this->assertText(t('Name format new name has been updated.'));
+    $this->drupalGet('admin/config/regional/name/manage/test');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('Name format new name has been updated.'));
 
     $row = [
       'label' => $values['label'],
@@ -175,16 +182,16 @@ class NameAdminTest extends NameTestBase {
     $this->assertRow($row, $row_template, 3);
 
     $this->drupalGet('admin/config/regional/name/manage/60');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/manage/60/delete');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/manage/test/delete');
-    $this->assertText(t('Are you sure you want to delete the custom format @title?', ['@title' => $values['label']]));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete the custom format @title?', ['@title' => $values['label']]));
 
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText(t('The name format @title has been deleted.', ['@title' => $values['label']]));
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains(t('The name format @title has been deleted.', ['@title' => $values['label']]));
   }
 
   /**
@@ -236,13 +243,14 @@ class NameAdminTest extends NameTestBase {
       // Integers 1 through 20.
       // 'el_al_first' => '',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
     $labels = [
       t('Name'),
       t('Machine-readable name'),
     ];
     foreach ($labels as $title) {
-      $this->assertText(t('@field field is required', ['@field' => $title]));
+      $this->assertSession()->pageTextContains(t('@field field is required', ['@field' => $title]));
     }
     $values = [
       'label' => 'comma',
@@ -253,17 +261,20 @@ class NameAdminTest extends NameTestBase {
       'el_al_min' => '14',
       'el_al_first' => '5',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Last delimiter type')]));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Machine-readable name')]));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Last delimiter type')]));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Machine-readable name')]));
 
     $values['id'] = '%&*(';
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
 
     $values = ['label' => 'default', 'id' => 'default', 'delimiter' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name is already in use. It must be unique.'));
 
     $values = [
       'label' => 'Test label',
@@ -274,8 +285,9 @@ class NameAdminTest extends NameTestBase {
       'el_al_min' => '3',
       'el_al_first' => '1',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('Name list format Test label added.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextContains(t('Name list format Test label added.'));
 
     $row = [
       'title' => 'Test label',
@@ -293,16 +305,16 @@ class NameAdminTest extends NameTestBase {
     $this->assertRowContains(['settings' => $summary_text], $row_template, 3);
 
     $this->drupalGet('admin/config/regional/name/list/manage/60');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/list/manage/60/delete');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/list/manage/test/delete');
-    $this->assertText(t('Are you sure you want to delete the custom list format @title?', ['@title' => $values['label']]));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete the custom list format @title?', ['@title' => $values['label']]));
 
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText(t('The name list format @title has been deleted.', ['@title' => $values['label']]));
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains(t('The name list format @title has been deleted.', ['@title' => $values['label']]));
   }
 
   /**
@@ -326,9 +338,7 @@ class NameAdminTest extends NameTestBase {
           $results = isset($elements[0]) ? $elements[0]->getHtml() : '';
           $message = "Testing {$cell_code} on row {$id} using '{$xpath}' and expecting '" . Html::escape($value) . "', got '" . Html::escape($results) . "'.";
           if ($results == $value || strpos($results, $value . '?destination=') === 0) {
-            $this->pass($message);
-          }
-          else {
+          } else {
             $this->fail($message);
           }
         }
diff --git a/tests/src/Functional/NameFieldTest.php b/tests/src/Functional/NameFieldTest.php
index 7e073fe..bde2625 100644
--- a/tests/src/Functional/NameFieldTest.php
+++ b/tests/src/Functional/NameFieldTest.php
@@ -28,7 +28,7 @@ class NameFieldTest extends NameTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create content-type: page.
@@ -50,10 +50,12 @@ class NameFieldTest extends NameTestBase {
       'field_name' => 'name_test',
       'new_storage_type' => 'name',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field', $new_name_field, t('Save and continue'));
+    $this->submitForm($new_name_field, t('Save and continue'));
     $storage_settings = [];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test/storage', $storage_settings, t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
+    $this->submitForm($storage_settings, t('Save field settings'));
     $this->resetAll();
 
     // Required test.
@@ -64,8 +66,9 @@ class NameFieldTest extends NameTestBase {
     foreach ($this->nameGetFieldStorageSettingsCheckboxes() as $key => $value) {
       $field_settings[$key] = FALSE;
     }
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->submitForm($field_settings, t('Save settings'));
 
     $n = _name_translations();
     $required_messages = [
@@ -92,7 +95,7 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }
     $field_settings = [
       'settings[components][title]' => FALSE,
@@ -120,7 +123,8 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => "-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\nVII\nVIII\nIX\nX\n[vocabulary:123]",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
 
     $required_messages = [
       t('@field must be higher than or equal to 1.', ['@field' => $n['title']]),
@@ -141,7 +145,7 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Make sure option lengths do not exceed the title lengths.
@@ -152,7 +156,8 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => "AAAA\n-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\nVII\nVIII\nIX\nX\nBBBB",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('The following options exceed the maximum allowed @field length: Aaaaa., Bbbbbbbb, Ccccc.', [
         '@field' => t('@title options', ['@title' => $n['title']]),
@@ -163,7 +168,7 @@ class NameFieldTest extends NameTestBase {
     ];
 
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Make sure option have at least one valid option.
@@ -172,13 +177,14 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => " \n-- --\n ",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('@field are required.', ['@field' => t('@title options', ['@title' => $n['title']])]),
       t('@field are required.', ['@field' => t('@generational options', ['@generational' => $n['generational']])]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Make sure option have at least one valid only have one default value.
@@ -187,7 +193,8 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => "-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\n--",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('@field can only have one blank value assigned to it.', [
         '@field' => t('@title options', [
@@ -201,14 +208,15 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Save the field again with the default values.
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $this->nameGetFieldStorageSettings(), t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($this->nameGetFieldStorageSettings(), t('Save settings'));
 
-    $this->assertText(t('Saved Test name configuration.'));
+    $this->assertSession()->pageTextContains(t('Saved Test name configuration.'));
 
     // First, check that field validation is working.
     $field_settings = [
@@ -238,7 +246,8 @@ class NameFieldTest extends NameTestBase {
 
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
 
     $required_messages = [
       t('Maximum length for @field must be higher than or equal to 1.', ['@field' => $n['title']]),
@@ -261,7 +270,7 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }
 
     $field_settings = [
@@ -285,7 +294,7 @@ class NameFieldTest extends NameTestBase {
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
 
     foreach ($field_settings as $name => $value) {
-      $this->assertFieldByName($name, $value);
+      $this->assertSession()->fieldValueEquals($name, $value);
     }
 
     // Check help text display.
@@ -293,32 +302,32 @@ class NameFieldTest extends NameTestBase {
     $edit = [
       'description' => 'This is a description.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save settings'));
+    $this->submitForm($edit, t('Save settings'));
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => 'number',
       'cardinality_number' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is 1.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is 1.');
 
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => 'number',
       'cardinality_number' => 3,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is 3.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is 3.');
 
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => '-1',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is unlimited.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is unlimited.');
   }
 
   /**
diff --git a/tests/src/Functional/NameNodeTokenReplaceTest.php b/tests/src/Functional/NameNodeTokenReplaceTest.php
index 99b4b3c..6cc5198 100644
--- a/tests/src/Functional/NameNodeTokenReplaceTest.php
+++ b/tests/src/Functional/NameNodeTokenReplaceTest.php
@@ -40,7 +40,7 @@ class NameNodeTokenReplaceTest extends NameTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->interfaceLanguage = \Drupal::languageManager()->getCurrentLanguage();
diff --git a/tests/src/Functional/NameOptionsProviderTest.php b/tests/src/Functional/NameOptionsProviderTest.php
index aa30413..f287591 100644
--- a/tests/src/Functional/NameOptionsProviderTest.php
+++ b/tests/src/Functional/NameOptionsProviderTest.php
@@ -43,7 +43,7 @@ class NameOptionsProviderTest extends NameTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->entityListener = \Drupal::service('entity_type.listener');
diff --git a/tests/src/Functional/NameTestBase.php b/tests/src/Functional/NameTestBase.php
index a687533..d4894df 100644
--- a/tests/src/Functional/NameTestBase.php
+++ b/tests/src/Functional/NameTestBase.php
@@ -43,7 +43,7 @@ abstract class NameTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->webUser = $this->drupalCreateUser([]);
     $this->adminUser = $this->drupalCreateUser([
@@ -96,7 +96,7 @@ abstract class NameTestBase extends BrowserTestBase {
   protected function assertNameFormats($name_components, $type, $object, array $names, array $options = []) {
     foreach ($names as $format => $expected) {
       $value = \Drupal::service('name.format_parser')->parse($name_components, $format);
-      $this->assertIdentical($value, $expected, t("Name value for '@name' was '@actual', expected value '@expected'. Components were: %components", [
+      $this->assertSame($value, $expected, t("Name value for '@name' was '@actual', expected value '@expected'. Components were: %components", [
         '@name' => $format,
         '@actual' => $value,
         '@expected' => $expected,
diff --git a/tests/src/Functional/NameWidgetTest.php b/tests/src/Functional/NameWidgetTest.php
index 873429e..95f7632 100644
--- a/tests/src/Functional/NameWidgetTest.php
+++ b/tests/src/Functional/NameWidgetTest.php
@@ -29,7 +29,7 @@ class NameWidgetTest extends NameTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create content-type: page.
@@ -51,10 +51,12 @@ class NameWidgetTest extends NameTestBase {
       'field_name' => 'name_test',
       'new_storage_type' => 'name',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field', $new_name_field, t('Save and continue'));
+    $this->submitForm($new_name_field, t('Save and continue'));
     $storage_settings = [];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test/storage', $storage_settings, t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
+    $this->submitForm($storage_settings, t('Save field settings'));
     $this->resetAll();
 
     // Set up a field of each label display and test it shows.
@@ -120,8 +122,9 @@ class NameWidgetTest extends NameTestBase {
 
       'settings[component_layout]' => 'default',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->submitForm($field_settings, t('Save settings'));
 
     $this->drupalGet('node/add/page');
 
@@ -142,19 +145,22 @@ class NameWidgetTest extends NameTestBase {
     // Test the language layouts.
     $this->verbose('Testing asian');
     $field_settings['settings[component_layout]'] = 'asian';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);
 
     $this->verbose('Testing eastern');
     $field_settings['settings[component_layout]'] = 'eastern';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);
 
     $this->verbose('Testing german');
     $field_settings['settings[component_layout]'] = 'german';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);
 
@@ -165,7 +171,8 @@ class NameWidgetTest extends NameTestBase {
       // 'settings[credentials_inline]' => TRUE,
       // 'settings[component_layout]' => 'default',
     ] + $field_settings;
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     foreach (_name_component_keys() as $component) {
       $this->assertComponentSettings($component, $field_settings);
@@ -231,7 +238,7 @@ class NameWidgetTest extends NameTestBase {
    */
   protected function assertComponentSettings($key, array $settings) {
     $xpath = '//div[contains(@class,:value)]';
-    $elements = $this->xpath($this->buildXPathQuery($xpath, [':value' => "name-{$key}-wrapper"]));
+    $elements = $this->xpath($this->assertSession()->buildXPathQuery($xpath, [':value' => "name-{$key}-wrapper"]));
     $this->assertNotEmpty($elements, "Component $key field found.");
     $object = reset($elements);
 
@@ -362,7 +369,7 @@ class NameWidgetTest extends NameTestBase {
    */
   protected function constructFieldXpathByTypeAndAttribute($type, $attribute, $value) {
     $xpath = '//' . $type . '[@' . $attribute . '=:value]';
-    return $this->buildXPathQuery($xpath, [':value' => $value]);
+    return $this->assertSession()->buildXPathQuery($xpath, [':value' => $value]);
   }
 
 }
diff --git a/tests/src/Kernel/NameAutocompleteTest.php b/tests/src/Kernel/NameAutocompleteTest.php
index 8a3dd41..b877feb 100644
--- a/tests/src/Kernel/NameAutocompleteTest.php
+++ b/tests/src/Kernel/NameAutocompleteTest.php
@@ -46,7 +46,7 @@ class NameAutocompleteTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(self::$modules);
 
diff --git a/tests/src/Kernel/NameUserTest.php b/tests/src/Kernel/NameUserTest.php
index 46951a1..c6ff88d 100644
--- a/tests/src/Kernel/NameUserTest.php
+++ b/tests/src/Kernel/NameUserTest.php
@@ -34,7 +34,7 @@ class NameUserTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(self::$modules);
     $this->installSchema('system', ['sequences']);
@@ -58,7 +58,7 @@ class NameUserTest extends KernelTestBase {
       'entity_type' => 'user',
       'bundle' => 'user',
     ])->save();
-    $this->assertIdentical('', \Drupal::config('name.settings')->get('user_preferred'));
+    $this->assertSame('', \Drupal::config('name.settings')->get('user_preferred'));
 
     FieldStorageConfig::create([
       'field_name' => 'field_name_test',
diff --git a/tests/src/Unit/NameFormatParserTest.php b/tests/src/Unit/NameFormatParserTest.php
index 679ce6e..cb4a84d 100644
--- a/tests/src/Unit/NameFormatParserTest.php
+++ b/tests/src/Unit/NameFormatParserTest.php
@@ -23,7 +23,7 @@ class NameFormatParserTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $test_settings = [
       'name.settings' => [
