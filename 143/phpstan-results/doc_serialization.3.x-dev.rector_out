modules/contrib/doc_serialization/doc_serialization.install
modules/contrib/doc_serialization/vendor/pclzip/pclzip/pclzip.lib.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/TextTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_12_HeaderFooter.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_32_Chart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/AbstractContainer.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/PreserveText.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Exception/Exception.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/RTF/Document.php
modules/contrib/doc_serialization/src/Encoder/Doc.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Exception/InvalidImageException.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Exception/InvalidObjectException.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Exception/InvalidStyleException.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/ZipArchive.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Exception/UnsupportedImageTypeException.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/IOFactory.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Line.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/AbstractWriter.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Style/Generic.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_13_Images.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Row.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_33_FormField.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Style/AbstractStyle.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/TextBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/SDT.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_34_SDT.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/FormField.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Section.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_35_InternalLink.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_14_ListItem.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_36_RTL.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_37_Comments.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Shape.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/TOC.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/LineNumbering.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Style/Font.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_38_Protection.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Media.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/XMLWriterTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_Footer.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_Header.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/ListItem.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/TextRun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_15_Link.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/Title.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Part/AbstractPart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Part/Document.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Text.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_16_Object.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/_includes/TestHelperZip.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/index.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_17_TitleTOC.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Collection/AbstractCollection.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/TextBox.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Metadata/Compatibility.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/_includes/XmlDocument.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Metadata/DocInfo.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Numbering.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Style/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Style/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/TextBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/NumberingLevel.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Style/Paragraph.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Style/Paragraph.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Collection/Bookmarks.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Collection/Charts.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Collection/Comments.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Collection/Endnotes.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Collection/Footnotes.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Collection/Titles.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/AbstractElement.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/ComplexType/FootnoteProperties.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/bootstrap.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/TextRun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Outline.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Style/Section.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/ComplexType/ProofState.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Title.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_18_Watermark.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Style/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/ComplexType/TrackChangesView.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/PDF.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/AbstractPart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_19_TextBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Paper.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML.php
modules/contrib/doc_serialization/src/Encoder/Docx.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/TrackChange.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Metadata/Protection.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Chart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/PDF/AbstractRenderer.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Paragraph.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Part/Header.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/bootstrap.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/AbstractElement.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Escaper/AbstractEscaper.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_20_BGColor.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_01_SimpleText.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Container.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Escaper/EscaperInterface.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Escaper/RegExp.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/AbstractElement.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/Container.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_21_TableRowRules.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Metadata/Settings.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Escaper/Rtf.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Endnote.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Footnote.php
modules/contrib/doc_serialization/src/EventSubscriber/Subscriber.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/PDF/DomPDF.php
modules/contrib/doc_serialization/src/Plugin/views/display/WordExport.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Link.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/PDF/MPDF.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_22_CheckBox.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/ListItem.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Escaper/Xml.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/PageBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Exception/CopyFileException.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_23_TemplateBlock.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/Link.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Exception/CreateTemporaryFileException.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/WebSettings.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_24_ReadODText.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/PageBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Bookmark.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_25_TextBox.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Comments.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Cell.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/AbstractStyle.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/PDF/TCPDF.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Chart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/ReaderInterface.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_26_Html.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/PhpWord.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/ContentTypes.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/CheckBox.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Style/AbstractStyle.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Style/Border.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/Text.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_27_Field.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Comment.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Cell.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_02_TabStops.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/AbstractElement.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Line.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/DocPropsApp.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/TextBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Text.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/TextRun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/DocPropsCore.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_28_ReadRTF.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Endnote.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Element/Title.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_29_Line.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_03_Sections.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Field.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Style/Font.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Part/AbstractPart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/SimpleType/DocProtect.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/SimpleType/Jc.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/DocPropsCustom.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/SimpleType/JcTable.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/SimpleType/LineSpacingRule.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_30_ReadHTML.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/SimpleType/NumberFormat.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_31_Shape.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_04_Textrun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/SimpleType/TextAlignment.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/SimpleType/Zoom.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Link.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Extrusion.php
modules/contrib/doc_serialization/src/Plugin/views/display_extender/DocSerialization.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/AbstractReader.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Footer.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Document.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Fill.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Style/Paragraph.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Font.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Footnote.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Tab.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/HTML.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Row.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/FormField.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/ListItem.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/MsDoc.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/TextBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/AbstractStyle.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/TextRun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Style/Section.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Section.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_05_Multicolumn.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/Container.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Element/Title.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Header.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Part/Content.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_06_Footnote.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Part/AbstractPart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Part/Body.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Frame.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/ListItemRun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Endnotes.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/Link.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/FontTable.php
modules/contrib/doc_serialization/src/Plugin/views/style/WordExport.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/ListItem.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/PageBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_07_TemplateCloneRow.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Footer.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Border.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/AbstractPart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Footnotes.php
modules/contrib/doc_serialization/tests/src/Unit/EventSubscriber/SubscriberTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Object.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Indentation.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Line.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/RTF/Element/Text.php
modules/contrib/doc_serialization/vendor/autoload.php
modules/contrib/doc_serialization/vendor/composer/ClassLoader.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_08_ParagraphPagination.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ListItemTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/TextBox.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Part/Head.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/LineNumbering.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Header.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Numbering.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_09_Tables.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/PageBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/MarginBorder.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/ParagraphAlignment.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Cell.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/WriterInterface.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Collection/CollectionTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/PreserveText.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ObjectTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Shading.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Outline.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Shadow.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Paragraph.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Part/Manifest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/ComplexType/FootnotePropertiesTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Shape.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/PageBreakTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/PreserveTextTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Part/Meta.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Chart.php
modules/contrib/doc_serialization/vendor/composer/autoload_classmap.php
modules/contrib/doc_serialization/vendor/composer/autoload_namespaces.php
modules/contrib/doc_serialization/vendor/composer/autoload_psr4.php
modules/contrib/doc_serialization/vendor/composer/autoload_real.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Rels.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/SDT.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/RowTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/ComplexType/ProofStateTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Spacing.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Extrusion.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/AbstractElementTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Part/Mimetype.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/TOC.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/ODText/Part/Styles.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/RelsDocument.php
modules/contrib/doc_serialization/vendor/composer/autoload_static.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/RelsPart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/SDTTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Row.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/IOFactoryTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Settings.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Tab.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Fill.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/BookmarkTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Style/AbstractStyle.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/CellTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/MediaTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_10_EastAsianFontStyle.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Font.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Section.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_11_ReadWord2007.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Shape.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/SectionTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_11_ReadWord97.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/HTML/Style/Font.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/DocPropsApp.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/LanguageTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/DocPropsCore.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/DocPropsCustom.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/LineNumberingTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Metadata/DocInfoTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/Document.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTML/StyleTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/LineTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/AbstractElement.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTMLTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Line.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/HeaderTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Link.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Styles.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TOCTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/TOC.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Shading.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/Endnotes.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/Footnotes.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ListItemTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Shadow.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/Numbering.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/NumberingLevelTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TableTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/ListItem.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Shape.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/NumberingTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/ListItemRun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/Object.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/ElementTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Style/Spacing.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Element/PageBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/CheckBoxTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/PaperTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/benchmark/RemovePriorityQueue.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/NumberingTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Bookmark.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/Part/AbstractPartTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextBoxTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/TextBox.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Metadata/SettingsTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Exception/InvalidArgumentException.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Frame.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/CommentTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextBreakTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Exception/LogicException.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/AbstractOptions.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Chart.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Exception/RuntimeException.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/FastPriorityQueue.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/Part/ContentTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ParagraphTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/Settings.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/SettingsTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Part/Theme.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextRunTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Table.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/CheckBox.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Template.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/FieldTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayObject.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Container.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/PhpWordTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/Word2007/Styles.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/TemplateProcessor.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Response.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ResponseInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/SplPriorityQueue.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Image.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/RowTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Settings.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Endnote.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/StyleTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Field.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/SplQueue.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Indentation.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/TableAlignment.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/SectionTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Text.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/SplStack.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/HTMLTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODTextTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Glob.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Style/Language.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TitleTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/TextBox.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringUtils.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/MsDocTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/FooterTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/CopyFileExceptionTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArraySerializableInterface.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/CreateTemporaryFileExceptionTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayStack.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/AbstractEnum.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/TextBreak.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/ExceptionTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayUtils.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/TextRun.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/InvalidImageExceptionTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Title.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/InvalidStyleExceptionTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/ODTextTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/Converter.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/RTFTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/AbstractStringWrapper.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDF/DomPDFTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/UnsupportedImageTypeExceptionTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/Word2007Test.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Guard/AllGuardsTrait.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Guard/ArrayOrTraversableGuardTrait.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Guard/EmptyGuardTrait.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Guard/NullGuardTrait.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/InitializableInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/JsonSerializable.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Message.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/SettingsTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDF/MPDFTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/FootnoteTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/Html.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDF/TCPDFTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/MessageInterface.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDFTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayUtils/MergeRemoveKey.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayUtils/MergeReplaceKey.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ParameterObjectInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayUtils/MergeReplaceKeyInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ConsoleHelper.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Parameters.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/RTF/ElementTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/HeaderTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Footnote.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/ConverterTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/RTF/StyleTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/Iconv.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/DispatchableInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ParametersInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ErrorHandler.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/PriorityList.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/RTFTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Exception/BadMethodCallException.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Exception/DomainException.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Exception/ExceptionInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Exception/ExtensionNotLoadedException.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/Intl.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/PriorityQueue.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ShadingTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/ElementTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/SpacingTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ImageTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/MbString.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TOCTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TabTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/StylesTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/HtmlTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Request.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TableTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/RequestInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/Native.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/PartTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TextBoxTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Style/FontTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/StringWrapperInterface.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/LineTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Style/ParagraphTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/LinkTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/StyleTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ListItemRunTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007Test.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/StyleTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/Microsoft/PasswordEncoderTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/TemplateProcessorTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/ZipArchiveTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/_includes/TestHelperDOCX.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/Microsoft/PasswordEncoder.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/_includes/XmlDocument.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/AbstractPartTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTML/ElementTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/CommentsTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/OLERead.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/AbstractStyleTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/DocumentTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/bootstrap.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTML/PartTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-escaper/src/Escaper.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/CellTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/PCLZip/pclzip.lib.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/FontTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-escaper/src/Exception/ExceptionInterface.php
modules/contrib/doc_serialization/vendor/zendframework/zend-escaper/src/Exception/InvalidArgumentException.php
modules/contrib/doc_serialization/vendor/zendframework/zend-escaper/src/Exception/RuntimeException.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/benchmark/ExtractPriorityQueue.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ImageTest.php
modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/benchmark/InsertPriorityQueue.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/IndentationTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/FooterTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/FootnotesTest.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Adapter/Zip/PclZipAdapter.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Adapter/Zip/ZipArchiveAdapter.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Adapter/Zip/ZipInterface.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Autoloader.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Drawing.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/File.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Font.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Microsoft/OLERead.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/Text.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/XMLReader.php
modules/contrib/doc_serialization/vendor/phpoffice/common/src/Common/XMLWriter.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/Adapter/Zip/PclZipAdapterTest.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/ODText.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/ODText/AbstractPart.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/ODText/Content.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/ODText/Meta.php
modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/RTF.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/Adapter/Zip/ZipArchiveAdapterTest.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/AutoloaderTest.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/DrawingTest.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/FileTest.php
modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/FontTest.php

173 files with changes
======================

1) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_38_Protection.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\DocProtect;

 include_once 'Sample_Header.php';
@@ @@

 // New Word Document
 echo date('H:i:s') , ' Create new PhpWord object' , EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 $documentProtection = $phpWord->getSettings()->getDocumentProtection();
 $documentProtection->setEditing(DocProtect::READ_ONLY);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_37_Comments.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Element\Comment;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s') , ' Create new PhpWord object' , EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // A comment
-$comment = new \PhpOffice\PhpWord\Element\Comment('Authors name', new \DateTime(), 'my_initials');
+$comment = new Comment('Authors name', new \DateTime(), 'my_initials');
 $comment->addText('Test', array('bold' => true));
 $phpWord->addComment($comment);

@@ @@
 $section->addTextBreak(2);

 // Let's create a comment that we will link to a start element and an end element
-$commentWithStartAndEnd = new \PhpOffice\PhpWord\Element\Comment('Foo Bar', new \DateTime());
+$commentWithStartAndEnd = new Comment('Foo Bar', new \DateTime());
 $commentWithStartAndEnd->addText('A comment with a start and an end');
 $phpWord->addComment($commentWithStartAndEnd);

@@ @@
 $section->addTextBreak(2);

 // Let's add a comment on an image
-$commentOnImage = new \PhpOffice\PhpWord\Element\Comment('Mr Smart', new \DateTime());
+$commentOnImage = new Comment('Mr Smart', new \DateTime());
 $imageComment = $commentOnImage->addTextRun();
 $imageComment->addText('Hey, Mars does look ');
 $imageComment->addText('red', array('color' => 'FF0000'));
@@ @@
 // We can also do things the other way round, link the comment to the element
 $anotherText = $section->addText('another text');

-$comment1 = new \PhpOffice\PhpWord\Element\Comment('Authors name', new \DateTime(), 'my_initials');
+$comment1 = new Comment('Authors name', new \DateTime(), 'my_initials');
 $comment1->addText('Test', array('bold' => true));
 $comment1->setStartElement($anotherText);
 $comment1->setEndElement($anotherText);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_36_RTL.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
@@ @@
 $textrun = $section->addTextRun();
 $textrun->addText('This is a Left to Right paragraph.');

-$textrun = $section->addTextRun(array('alignment' => \PhpOffice\PhpWord\SimpleType\Jc::END));
+$textrun = $section->addTextRun(array('alignment' => Jc::END));
 $textrun->addText('سلام این یک پاراگراف راست به چپ است', array('rtl' => true));

 // Save file
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_35_InternalLink.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 $section = $phpWord->addSection();
 $section->addTitle('This is page 1', 1);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_34_SDT.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_33_FormField.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();
 $phpWord->getProtection()->setEditing('forms');

 // New section
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_32_Chart.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 use PhpOffice\PhpWord\Shared\Converter;
@@ @@

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Define styles
 $phpWord->addTitleStyle(1, array('size' => 14, 'bold' => true), array('keepNext' => true, 'spaceBefore' => 240));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_31_Shape.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_30_ReadHTML.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\IOFactory;
 include_once 'Sample_Header.php';

 // Read contents
@@ @@
 $source = realpath(__DIR__ . "/resources/{$name}.html");

 echo date('H:i:s'), " Reading contents from `{$source}`", EOL;
-$phpWord = \PhpOffice\PhpWord\IOFactory::load($source, 'HTML');
+$phpWord = IOFactory::load($source, 'HTML');

 // Save file
 echo write($phpWord, basename(__FILE__, '.php'), $writers);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_29_Line.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Shared\Converter;
+use PhpOffice\PhpWord\Style\Image;
+use PhpOffice\PhpWord\Style\Line;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
@@ @@
 $section->addText('Horizontal Line (Inline style):');
 $section->addLine(
     array(
-        'width'       => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(4),
-        'height'      => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(0),
+        'width'       => Converter::cmToPixel(4),
+        'height'      => Converter::cmToPixel(0),
         'positioning' => 'absolute',
     )
 );
@@ @@
 $section->addText('Vertical Line (Inline style):');
 $section->addLine(
     array(
-        'width'       => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(0),
-        'height'      => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(1),
+        'width'       => Converter::cmToPixel(0),
+        'height'      => Converter::cmToPixel(1),
         'positioning' => 'absolute',
     )
 );
@@ @@
 $section->addText('Positioned Line (red):');
 $section->addLine(
     array(
-        'width'            => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(4),
-        'height'           => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(1),
+        'width'            => Converter::cmToPixel(4),
+        'height'           => Converter::cmToPixel(1),
         'positioning'      => 'absolute',
         'posHorizontalRel' => 'page',
         'posVerticalRel'   => 'page',
-        'marginLeft'       => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(10),
-        'marginTop'        => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(8),
-        'wrappingStyle'    => \PhpOffice\PhpWord\Style\Image::WRAPPING_STYLE_SQUARE,
+        'marginLeft'       => Converter::cmToPixel(10),
+        'marginTop'        => Converter::cmToPixel(8),
+        'wrappingStyle'    => Image::WRAPPING_STYLE_SQUARE,
         'color'            => 'red',
     )
 );
@@ @@
 $section->addText('Horizontal Formatted Line');
 $section->addLine(
     array(
-        'width'       => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(15),
-        'height'      => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(0),
+        'width'       => Converter::cmToPixel(15),
+        'height'      => Converter::cmToPixel(0),
         'positioning' => 'absolute',
-        'beginArrow'  => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_BLOCK,
-        'endArrow'    => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_OVAL,
-        'dash'        => \PhpOffice\PhpWord\Style\Line::DASH_STYLE_LONG_DASH_DOT_DOT,
+        'beginArrow'  => Line::ARROW_STYLE_BLOCK,
+        'endArrow'    => Line::ARROW_STYLE_OVAL,
+        'dash'        => Line::DASH_STYLE_LONG_DASH_DOT_DOT,
         'weight'      => 10,
     )
 );
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_28_ReadRTF.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\IOFactory;
 include_once 'Sample_Header.php';

 // Read contents
@@ @@
 $source = __DIR__ . "/resources/{$name}.rtf";

 echo date('H:i:s'), " Reading contents from `{$source}`", EOL;
-$phpWord = \PhpOffice\PhpWord\IOFactory::load($source, 'RTF');
+$phpWord = IOFactory::load($source, 'RTF');

 // Save file
 echo write($phpWord, basename(__FILE__, '.php'), $writers);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_27_Field.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\Element\TextRun;

 include_once 'Sample_Header.php';
@@ @@

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
@@ @@
 $section->addText('The actual index:');
 $section->addField('INDEX', array(), array('\\e "	"'), 'right click to update the index');

-$textrun = $section->addTextRun(array('alignment' => \PhpOffice\PhpWord\SimpleType\Jc::CENTER));
+$textrun = $section->addTextRun(array('alignment' => Jc::CENTER));
 $textrun->addText('This is the date of lunar calendar ');
 $textrun->addField('DATE', array('dateformat' => 'd-M-yyyy H:mm:ss'), array('PreserveFormat', 'LunarCalendar'));
 $textrun->addText(' written in a textrun.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_26_Html.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Shared\Html;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s') , ' Create new PhpWord object' , EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 $section = $phpWord->addSection();
 $html = '<h1>Adding element via HTML</h1>';
@@ @@
                 </tbody>
             </table>';

-\PhpOffice\PhpWord\Shared\Html::addHtml($section, $html, false, false);
+Html::addHtml($section, $html, false, false);

 // Save file
 echo write($phpWord, basename(__FILE__, '.php'), $writers);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_25_TextBox.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
@@ @@
 // In section
 $textbox = $section->addTextBox(
     array(
-        'alignment'   => \PhpOffice\PhpWord\SimpleType\Jc::CENTER,
+        'alignment'   => Jc::CENTER,
         'width'       => 400,
         'height'      => 150,
         'borderSize'  => 1,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_24_ReadODText.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\IOFactory;
 include_once 'Sample_Header.php';

 // Read contents
@@ @@
 $source = __DIR__ . "/resources/{$name}.odt";

 echo date('H:i:s'), " Reading contents from `{$source}`", EOL;
-$phpWord = \PhpOffice\PhpWord\IOFactory::load($source, 'ODText');
+$phpWord = IOFactory::load($source, 'ODText');

 // Save file
 echo write($phpWord, basename(__FILE__, '.php'), $writers);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_23_TemplateBlock.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\TemplateProcessor;
 include_once 'Sample_Header.php';

 // Template processor instance creation
 echo date('H:i:s') , ' Creating new TemplateProcessor instance...' , EOL;
-$templateProcessor = new \PhpOffice\PhpWord\TemplateProcessor('resources/Sample_23_TemplateBlock.docx');
+$templateProcessor = new TemplateProcessor('resources/Sample_23_TemplateBlock.docx');

 // Will clone everything between ${tag} and ${/tag}, the number of times. By default, 1.
 $templateProcessor->cloneBlock('CLONEME', 3);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


17) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_22_CheckBox.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


18) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_21_TableRowRules.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
@@ @@
 $table1 = $section->addTable(array('cellMargin' => 0, 'cellMarginRight' => 0, 'cellMarginBottom' => 0, 'cellMarginLeft' => 0));
 $table1->addRow(3750);
 $cell1 = $table1->addCell(null, array('valign' => 'top', 'borderSize' => 30, 'borderColor' => 'ff0000'));
-$cell1->addImage('./resources/_earth.jpg', array('width' => 250, 'height' => 250, 'alignment' => \PhpOffice\PhpWord\SimpleType\Jc::CENTER));
+$cell1->addImage('./resources/_earth.jpg', array('width' => 250, 'height' => 250, 'alignment' => Jc::CENTER));

 $section->addTextBreak();
 $section->addText("But if we set the rowStyle 'exactHeight' to true, the real row height is used, removing the textbreak:");
@@ @@
 );
 $table2->addRow(3750, array('exactHeight' => true));
 $cell2 = $table2->addCell(null, array('valign' => 'top', 'borderSize' => 30, 'borderColor' => '00ff00'));
-$cell2->addImage('./resources/_earth.jpg', array('width' => 250, 'height' => 250, 'alignment' => \PhpOffice\PhpWord\SimpleType\Jc::CENTER));
+$cell2->addImage('./resources/_earth.jpg', array('width' => 250, 'height' => 250, 'alignment' => Jc::CENTER));

 $section->addTextBreak();
 $section->addText('In this example, image is 250px height. Rows are calculated in twips, and 1px = 15twips.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_20_BGColor.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Style\Font;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New section
 $section = $phpWord->addSection();
@@ @@

 $section->addText(
     'This is some text highlighted using fgColor (limited to 15 colors)',
-    array('fgColor' => \PhpOffice\PhpWord\Style\Font::FGCOLOR_YELLOW)
+    array('fgColor' => Font::FGCOLOR_YELLOW)
 );
 $section->addText('This one uses bgColor and is using hex value (0xfbbb10)', array('bgColor' => 'fbbb10'));
 $section->addText('Compatible with font colors', array('color' => '0000ff', 'bgColor' => 'fbbb10'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


20) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_19_TextBreak.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Define styles
 $fontStyle24 = array('size' => 24);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


21) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_18_Watermark.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Begin code
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_17_TitleTOC.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();
 $phpWord->getSettings()->setUpdateFields(true);

 // New section
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


23) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_16_Object.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Begin code
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


24) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_15_Link.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Style\Font;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Define styles
 $linkFontStyleName = 'myOwnLinStyle';
@@ @@
 $section->addLink(
     'https://github.com/PHPOffice/PHPWord',
     'PHPWord on GitHub',
-    array('color' => '0000FF', 'underline' => \PhpOffice\PhpWord\Style\Font::UNDERLINE_SINGLE)
+    array('color' => '0000FF', 'underline' => Font::UNDERLINE_SINGLE)
 );
 $section->addTextBreak(2);
 $section->addLink('http://www.bing.com', null, $linkFontStyleName);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


25) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_14_ListItem.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Style\ListItem;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Define styles
 $fontStyleName = 'myOwnStyle';
@@ @@
     )
 );

-$predefinedMultilevelStyle = array('listType' => \PhpOffice\PhpWord\Style\ListItem::TYPE_NUMBER_NESTED);
+$predefinedMultilevelStyle = array('listType' => ListItem::TYPE_NUMBER_NESTED);

 // New section
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


26) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_13_Images.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
+use PhpOffice\PhpWord\Shared\Converter;
+use PhpOffice\PhpWord\Style\Image;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Begin code
 $section = $phpWord->addSection();
@@ @@
 $section->addTextBreak(2);

 $section->addText('Local image with styles:');
-$section->addImage('resources/_earth.jpg', array('width' => 210, 'height' => 210, 'alignment' => \PhpOffice\PhpWord\SimpleType\Jc::CENTER));
+$section->addImage('resources/_earth.jpg', array('width' => 210, 'height' => 210, 'alignment' => Jc::CENTER));
 $section->addTextBreak(2);

 // Remote image
@@ @@
 $section->addImage(
     'resources/_mars.jpg',
     array(
-        'width'            => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(3),
-        'height'           => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(3),
-        'positioning'      => \PhpOffice\PhpWord\Style\Image::POSITION_ABSOLUTE,
-        'posHorizontal'    => \PhpOffice\PhpWord\Style\Image::POSITION_HORIZONTAL_RIGHT,
-        'posHorizontalRel' => \PhpOffice\PhpWord\Style\Image::POSITION_RELATIVE_TO_PAGE,
-        'posVerticalRel'   => \PhpOffice\PhpWord\Style\Image::POSITION_RELATIVE_TO_PAGE,
-        'marginLeft'       => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(15.5),
-        'marginTop'        => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(1.55),
+        'width'            => Converter::cmToPixel(3),
+        'height'           => Converter::cmToPixel(3),
+        'positioning'      => Image::POSITION_ABSOLUTE,
+        'posHorizontal'    => Image::POSITION_HORIZONTAL_RIGHT,
+        'posHorizontalRel' => Image::POSITION_RELATIVE_TO_PAGE,
+        'posVerticalRel'   => Image::POSITION_RELATIVE_TO_PAGE,
+        'marginLeft'       => Converter::cmToPixel(15.5),
+        'marginTop'        => Converter::cmToPixel(1.55),
     )
 );

@@ @@
 $section->addImage(
     'resources/_mars.jpg',
     array(
-        'width'            => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(3),
-        'height'           => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(3),
-        'positioning'      => \PhpOffice\PhpWord\Style\Image::POSITION_RELATIVE,
-        'posHorizontal'    => \PhpOffice\PhpWord\Style\Image::POSITION_HORIZONTAL_CENTER,
-        'posHorizontalRel' => \PhpOffice\PhpWord\Style\Image::POSITION_RELATIVE_TO_COLUMN,
-        'posVertical'      => \PhpOffice\PhpWord\Style\Image::POSITION_VERTICAL_TOP,
-        'posVerticalRel'   => \PhpOffice\PhpWord\Style\Image::POSITION_RELATIVE_TO_LINE,
+        'width'            => Converter::cmToPixel(3),
+        'height'           => Converter::cmToPixel(3),
+        'positioning'      => Image::POSITION_RELATIVE,
+        'posHorizontal'    => Image::POSITION_HORIZONTAL_CENTER,
+        'posHorizontalRel' => Image::POSITION_RELATIVE_TO_COLUMN,
+        'posVertical'      => Image::POSITION_VERTICAL_TOP,
+        'posVerticalRel'   => Image::POSITION_RELATIVE_TO_LINE,
     )
 );
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


27) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_12_HeaderFooter.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New portrait section
 $section = $phpWord->addSection();
@@ @@
 $textrun = $cell->addTextRun();
 $textrun->addText('This is the header with ');
 $textrun->addLink('https://github.com/PHPOffice/PHPWord', 'PHPWord on GitHub');
-$table->addCell(4500)->addImage('resources/PhpWord.png', array('width' => 80, 'height' => 80, 'alignment' => \PhpOffice\PhpWord\SimpleType\Jc::END));
+$table->addCell(4500)->addImage('resources/PhpWord.png', array('width' => 80, 'height' => 80, 'alignment' => Jc::END));

 // Add header for all other pages
 $subsequent = $section->addHeader();
@@ @@

 // Add footer
 $footer = $section->addFooter();
-$footer->addPreserveText('Page {PAGE} of {NUMPAGES}.', null, array('alignment' => \PhpOffice\PhpWord\SimpleType\Jc::CENTER));
+$footer->addPreserveText('Page {PAGE} of {NUMPAGES}.', null, array('alignment' => Jc::CENTER));
 $footer->addLink('https://github.com/PHPOffice/PHPWord', 'PHPWord on GitHub');

 // Write some text
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


28) modules/contrib/doc_serialization/vendor/composer/autoload_real.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Composer\Autoload\ClassLoader;
+use Composer\Autoload\ComposerStaticInit51c476b0fff401a1d6a2636b55420e13;
 // autoload_real.php @generated by Composer
-
 class ComposerAutoloaderInit51c476b0fff401a1d6a2636b55420e13
 {
     private static $loader;
@@ @@
         }

         spl_autoload_register(array('ComposerAutoloaderInit51c476b0fff401a1d6a2636b55420e13', 'loadClassLoader'), true, true);
-        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
+        self::$loader = $loader = new ClassLoader();
         spl_autoload_unregister(array('ComposerAutoloaderInit51c476b0fff401a1d6a2636b55420e13', 'loadClassLoader'));

         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION');
@@ @@
         if ($useStaticLoader) {
             require_once __DIR__ . '/autoload_static.php';

-            call_user_func(\Composer\Autoload\ComposerStaticInit51c476b0fff401a1d6a2636b55420e13::getInitializer($loader));
+            call_user_func(ComposerStaticInit51c476b0fff401a1d6a2636b55420e13::getInitializer($loader));
         } else {
             $map = require __DIR__ . '/autoload_namespaces.php';
             foreach ($map as $namespace => $path) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


29) modules/contrib/doc_serialization/tests/src/Unit/EventSubscriber/SubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\doc_serialization\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Tests\UnitTestCase;
 use Drupal\doc_serialization\EventSubscriber\Subscriber;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * Tests the DOC serialization event subscriber.
@@ @@
  */
 class SubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::onKernelRequest
    */
@@ @@
     /** @var \Symfony\Component\HttpFoundation\Request $request */
     $request = $this->prophesize(Request::class);
     $request->setFormat('docx', ['application/vnd.openxmlformats-officedocument.wordprocessingml.document'])->shouldBeCalled();
-    $event = $this->prophesize(GetResponseEvent::class);
+    $event = $this->prophesize(RequestEvent::class);
     $event->getRequest()->willReturn($request->reveal());
     $subscriber = new Subscriber();
     $subscriber->onKernelRequest($event->reveal());
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/doc_serialization/src/EventSubscriber/Subscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\doc_serialization\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Register content formats on the request object.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to get the request object to register on.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $event->getRequest()->setFormat('docx', ['application/vnd.openxmlformats-officedocument.wordprocessingml.document']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


31) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_11_ReadWord97.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\IOFactory;
 include_once 'Sample_Header.php';

 // Read contents
@@ @@
 $name = basename(__FILE__, '.php');
 $source = "resources/{$name}.doc";
 echo date('H:i:s'), " Reading contents from `{$source}`", EOL;
-$phpWord = \PhpOffice\PhpWord\IOFactory::load($source, 'MsDoc');
+$phpWord = IOFactory::load($source, 'MsDoc');

 // (Re)write contents
 $writers = array('Word2007' => 'docx', 'ODText' => 'odt', 'RTF' => 'rtf');
 foreach ($writers as $writer => $extension) {
     echo date('H:i:s'), " Write to {$writer} format", EOL;
-    $xmlWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, $writer);
+    $xmlWriter = IOFactory::createWriter($phpWord, $writer);
     $xmlWriter->save("{$name}.{$extension}");
     rename("{$name}.{$extension}", "results/{$name}.{$extension}");
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


32) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_11_ReadWord2007.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\IOFactory;
 include_once 'Sample_Header.php';

 // Read contents
@@ @@
 $source = __DIR__ . "/resources/{$name}.docx";

 echo date('H:i:s'), " Reading contents from `{$source}`", EOL;
-$phpWord = \PhpOffice\PhpWord\IOFactory::load($source);
+$phpWord = IOFactory::load($source);

 // Save file
 echo write($phpWord, basename(__FILE__, '.php'), $writers);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


33) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_10_EastAsianFontStyle.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();
 $section = $phpWord->addSection();
 $header = array('size' => 16, 'bold' => true);
 //1.Use EastAisa FontStyle
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


34) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_09_Tables.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\JcTable;
+use PhpOffice\PhpWord\Style\Cell;
+use PhpOffice\PhpWord\SimpleType\Jc;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();
 $section = $phpWord->addSection();
 $header = array('size' => 16, 'bold' => true);

@@ @@
 $section->addText('Fancy table', $header);

 $fancyTableStyleName = 'Fancy Table';
-$fancyTableStyle = array('borderSize' => 6, 'borderColor' => '006699', 'cellMargin' => 80, 'alignment' => \PhpOffice\PhpWord\SimpleType\JcTable::CENTER);
+$fancyTableStyle = array('borderSize' => 6, 'borderColor' => '006699', 'cellMargin' => 80, 'alignment' => JcTable::CENTER);
 $fancyTableFirstRowStyle = array('borderBottomSize' => 18, 'borderBottomColor' => '0000FF', 'bgColor' => '66BBFF');
 $fancyTableCellStyle = array('valign' => 'center');
-$fancyTableCellBtlrStyle = array('valign' => 'center', 'textDirection' => \PhpOffice\PhpWord\Style\Cell::TEXT_DIR_BTLR);
+$fancyTableCellBtlrStyle = array('valign' => 'center', 'textDirection' => Cell::TEXT_DIR_BTLR);
 $fancyTableFontStyle = array('bold' => true);
 $phpWord->addTableStyle($fancyTableStyleName, $fancyTableStyle, $fancyTableFirstRowStyle);
 $table = $section->addTable($fancyTableStyleName);
@@ @@
 $cellRowSpan = array('vMerge' => 'restart', 'valign' => 'center', 'bgColor' => 'FFFF00');
 $cellRowContinue = array('vMerge' => 'continue');
 $cellColSpan = array('gridSpan' => 2, 'valign' => 'center');
-$cellHCentered = array('alignment' => \PhpOffice\PhpWord\SimpleType\Jc::CENTER);
+$cellHCentered = array('alignment' => Jc::CENTER);
 $cellVCentered = array('valign' => 'center');

 $spanTableStyleName = 'Colspan Rowspan';
@@ @@
 $section->addTextBreak(2);
 $section->addText('Nested table in a centered and 50% width table.', $header);

-$table = $section->addTable(array('width' => 50 * 50, 'unit' => 'pct', 'alignment' => \PhpOffice\PhpWord\SimpleType\JcTable::CENTER));
+$table = $section->addTable(array('width' => 50 * 50, 'unit' => 'pct', 'alignment' => JcTable::CENTER));
 $cell = $table->addRow()->addCell();
 $cell->addText('This cell contains nested table.');
-$innerCell = $cell->addTable(array('alignment' => \PhpOffice\PhpWord\SimpleType\JcTable::CENTER))->addRow()->addCell();
+$innerCell = $cell->addTable(array('alignment' => JcTable::CENTER))->addRow()->addCell();
 $innerCell->addText('Inside nested table');

 // Save file
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


35) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_08_ParagraphPagination.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
+use PhpOffice\PhpWord\Shared\Converter;
 include_once 'Sample_Header.php';

 // New Word document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();
 $phpWord->setDefaultParagraphStyle(
     array(
-        'alignment'  => \PhpOffice\PhpWord\SimpleType\Jc::BOTH,
-        'spaceAfter' => \PhpOffice\PhpWord\Shared\Converter::pointToTwip(12),
+        'alignment'  => Jc::BOTH,
+        'spaceAfter' => Converter::pointToTwip(12),
         'spacing'    => 120,
     )
 );
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


36) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_07_TemplateCloneRow.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\TemplateProcessor;
 include_once 'Sample_Header.php';

 // Template processor instance creation
 echo date('H:i:s'), ' Creating new TemplateProcessor instance...', EOL;
-$templateProcessor = new \PhpOffice\PhpWord\TemplateProcessor('resources/Sample_07_TemplateCloneRow.docx');
+$templateProcessor = new TemplateProcessor('resources/Sample_07_TemplateCloneRow.docx');

 // Variables on different parts of document
 $templateProcessor->setValue('weekday', date('l'));            // On section/content
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


37) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_06_Footnote.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Settings;
+use PhpOffice\PhpWord\Style\Font;
 use PhpOffice\PhpWord\ComplexType\FootnoteProperties;
 use PhpOffice\PhpWord\SimpleType\NumberFormat;

@@ @@

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
-\PhpOffice\PhpWord\Settings::setCompatibility(false);
+$phpWord = new PhpWord();
+Settings::setCompatibility(false);

 // Define styles
 $paragraphStyleName = 'pStyle';
@@ @@
 $phpWord->addFontStyle($coloredFontStyleName, array('color' => 'FF8080', 'bgColor' => 'FFFFCC'));

 $linkFontStyleName = 'NLink';
-$phpWord->addLinkStyle($linkFontStyleName, array('color' => '0000FF', 'underline' => \PhpOffice\PhpWord\Style\Font::UNDERLINE_SINGLE));
+$phpWord->addLinkStyle($linkFontStyleName, array('color' => '0000FF', 'underline' => Font::UNDERLINE_SINGLE));

 // New portrait section
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_05_Multicolumn.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();
 $filler = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. '
         . 'Nulla fermentum, tortor id adipiscing adipiscing, tortor turpis commodo. '
         . 'Donec vulputate iaculis metus, vel luctus dolor hendrerit ac. '
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


39) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_04_Textrun.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Style\Font;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Define styles
 $paragraphStyleName = 'pStyle';
@@ @@
 $phpWord->addFontStyle($coloredFontStyleName, array('color' => 'FF8080', 'bgColor' => 'FFFFCC'));

 $linkFontStyleName = 'NLink';
-$phpWord->addLinkStyle($linkFontStyleName, array('color' => '0000FF', 'underline' => \PhpOffice\PhpWord\Style\Font::UNDERLINE_SINGLE));
+$phpWord->addLinkStyle($linkFontStyleName, array('color' => '0000FF', 'underline' => Font::UNDERLINE_SINGLE));

 // New portrait section
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


40) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_03_Sections.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // New portrait section
 $section = $phpWord->addSection(array('borderColor' => '00FF00', 'borderSize' => 12));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


41) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_02_TabStops.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Style\Tab;
 include_once 'Sample_Header.php';

 // New Word Document
 echo date('H:i:s'), ' Create new PhpWord object', EOL;
-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();

 // Define styles
 $multipleTabsStyleName = 'multipleTab';
@@ @@
     $multipleTabsStyleName,
     array(
         'tabs' => array(
-            new \PhpOffice\PhpWord\Style\Tab('left', 1550),
-            new \PhpOffice\PhpWord\Style\Tab('center', 3200),
-            new \PhpOffice\PhpWord\Style\Tab('right', 5300),
+            new Tab('left', 1550),
+            new Tab('center', 3200),
+            new Tab('right', 5300),
         ),
     )
 );

 $rightTabStyleName = 'rightTab';
-$phpWord->addParagraphStyle($rightTabStyleName, array('tabs' => array(new \PhpOffice\PhpWord\Style\Tab('right', 9090))));
+$phpWord->addParagraphStyle($rightTabStyleName, array('tabs' => array(new Tab('right', 9090))));

 $leftTabStyleName = 'centerTab';
-$phpWord->addParagraphStyle($leftTabStyleName, array('tabs' => array(new \PhpOffice\PhpWord\Style\Tab('center', 4680))));
+$phpWord->addParagraphStyle($leftTabStyleName, array('tabs' => array(new Tab('center', 4680))));

 // New portrait section
 $section = $phpWord->addSection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


42) modules/contrib/doc_serialization/vendor/phpoffice/phpword/samples/Sample_01_SimpleText.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\PhpWord\Style\Language;
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\Style\Font;
 use PhpOffice\PhpWord\Style\Paragraph;

@@ @@
 // New Word Document
 echo date('H:i:s') , ' Create new PhpWord object' , EOL;

-$languageEnGb = new \PhpOffice\PhpWord\Style\Language(\PhpOffice\PhpWord\Style\Language::EN_GB);
+$languageEnGb = new Language(Language::EN_GB);

-$phpWord = new \PhpOffice\PhpWord\PhpWord();
+$phpWord = new PhpWord();
 $phpWord->getSettings()->setThemeFontLang($languageEnGb);

 $fontStyleName = 'rStyle';
@@ @@
 $phpWord->addFontStyle($fontStyleName, array('bold' => true, 'italic' => true, 'size' => 16, 'allCaps' => true, 'doubleStrikethrough' => true));

 $paragraphStyleName = 'pStyle';
-$phpWord->addParagraphStyle($paragraphStyleName, array('alignment' => \PhpOffice\PhpWord\SimpleType\Jc::CENTER, 'spaceAfter' => 100));
+$phpWord->addParagraphStyle($paragraphStyleName, array('alignment' => Jc::CENTER, 'spaceAfter' => 100));

 $phpWord->addTitleStyle(1, array('bold' => true), array('spaceAfter' => 240));

@@ @@

 // $pStyle = new Font();
 // $pStyle->setLang()
-$section->addText('Ce texte-ci est en français.', array('lang' => \PhpOffice\PhpWord\Style\Language::FR_BE));
+$section->addText('Ce texte-ci est en français.', array('lang' => Language::FR_BE));

 // Two text break
 $section->addTextBreak(2);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


43) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/bootstrap.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use PhpOffice\Common\Autoloader;
 /**
  * This file is part of PHPOffice Common
  *
@@ @@
 });

 require_once __DIR__ . "/../src/Common/Autoloader.php";
-\PhpOffice\Common\Autoloader::register();
+Autoloader::register();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


44) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/XMLWriterTest.php:22

    ---------- begin diff ----------
@@ @@
  *
  * @coversDefaultClass PhpOffice\Common\XMLWriter
  */
-class XMLWriterTest extends \PHPUnit_Framework_TestCase
+class XMLWriterTest extends \PHPUnit\Framework\TestCase
 {
     /**
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


45) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/TextTest.php:22

    ---------- begin diff ----------
@@ @@
  *
  * @coversDefaultClass PhpOffice\Common\Text
  */
-class TextTest extends \PHPUnit_Framework_TestCase
+class TextTest extends \PHPUnit\Framework\TestCase
 {
     /**
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


46) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/UnsupportedImageTypeExceptionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Exception;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Exception\UnsupportedImageTypeExceptionTest
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Exception\UnsupportedImageTypeExceptionTest
  * @runTestsInSeparateProcesses
  */
-class UnsupportedImageTypeExceptionTest extends \PHPUnit\Framework\TestCase
+class UnsupportedImageTypeExceptionTest extends TestCase
 {
     /**
      * Throw new exception
      *
-     * @expectedException \PhpOffice\PhpWord\Exception\UnsupportedImageTypeException
      * @covers            \PhpOffice\PhpWord\Exception\UnsupportedImageTypeException
      */
     public function testThrowException()
     {
+        $this->expectException(UnsupportedImageTypeException::class);
         throw new UnsupportedImageTypeException();
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


47) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/InvalidStyleExceptionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Exception;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Exception\InvalidStyleException
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Exception\InvalidStyleException
  * @runTestsInSeparateProcesses
  */
-class InvalidStyleExceptionTest extends \PHPUnit\Framework\TestCase
+class InvalidStyleExceptionTest extends TestCase
 {
     /**
      * Throw new exception
      *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidStyleException
      * @covers            \PhpOffice\PhpWord\Exception\InvalidStyleException
      */
     public function testThrowException()
     {
+        $this->expectException(InvalidStyleException::class);
         throw new InvalidStyleException();
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


48) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/InvalidImageExceptionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Exception;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Exception\InvalidImageException
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Exception\InvalidImageException
  * @runTestsInSeparateProcesses
  */
-class InvalidImageExceptionTest extends \PHPUnit\Framework\TestCase
+class InvalidImageExceptionTest extends TestCase
 {
     /**
      * Throw new exception
      *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidImageException
      * @covers            \PhpOffice\PhpWord\Exception\InvalidImageException
      */
     public function testThrowException()
     {
+        $this->expectException(InvalidImageException::class);
         throw new InvalidImageException();
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


49) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/ExceptionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Exception;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Exception\Exception
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Exception\Exception
  * @runTestsInSeparateProcesses
  */
-class ExceptionTest extends \PHPUnit\Framework\TestCase
+class ExceptionTest extends TestCase
 {
     /**
      * Throw new exception
      *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
      * @covers            \PhpOffice\PhpWord\Exception\Exception
      */
     public function testThrowException()
     {
+        $this->expectException(Exception::class);
         throw new Exception();
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


50) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/CreateTemporaryFileExceptionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Exception;

+use PHPUnit\Framework\TestCase;
 /**
  * @covers \PhpOffice\PhpWord\Exception\CreateTemporaryFileException
  * @coversDefaultClass \PhpOffice\PhpWord\Exception\CreateTemporaryFileException
  */
-class CreateTemporaryFileExceptionTest extends \PHPUnit\Framework\TestCase
+class CreateTemporaryFileExceptionTest extends TestCase
 {
     /**
      * CreateTemporaryFileException can be thrown.
      *
      * @covers            ::__construct()
-     * @expectedException \PhpOffice\PhpWord\Exception\CreateTemporaryFileException
      * @test
      */
     public function testCreateTemporaryFileExceptionCanBeThrown()
     {
+        $this->expectException(CreateTemporaryFileException::class);
         throw new CreateTemporaryFileException();
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


51) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Exception/CopyFileExceptionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Exception;

+use PHPUnit\Framework\TestCase;
 /**
  * @covers \PhpOffice\PhpWord\Exception\CopyFileException
  * @coversDefaultClass \PhpOffice\PhpWord\Exception\CopyFileException
  */
-class CopyFileExceptionTest extends \PHPUnit\Framework\TestCase
+class CopyFileExceptionTest extends TestCase
 {
     /**
      * CopyFileException can be thrown.
      *
      * @covers            ::__construct()
-     * @expectedException \PhpOffice\PhpWord\Exception\CopyFileException
      * @test
      */
     public function testCopyFileExceptionCanBeThrown()
     {
+        $this->expectException(CopyFileException::class);
         throw new CopyFileException('C:\source\dummy.txt', 'C:\destination\dummy.txt');
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


52) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TitleTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Title
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Title
  * @runTestsInSeparateProcesses
  */
-class TitleTest extends \PHPUnit\Framework\TestCase
+class TitleTest extends TestCase
 {
     /**
      * Create new instance
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


53) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\Style\Font;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class TextTest extends \PHPUnit\Framework\TestCase
+class TextTest extends TestCase
 {
     /**
      * New instance
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


54) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextRunTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\Style\Paragraph;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class TextRunTest extends \PHPUnit\Framework\TestCase
+class TextRunTest extends TestCase
 {
     /**
      * New instance
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


55) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextBreakTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Style\Font;
 use PhpOffice\PhpWord\Style\Paragraph;

@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\TextBreak
  * @runTestsInSeparateProcesses
  */
-class TextBreakTest extends \PHPUnit\Framework\TestCase
+class TextBreakTest extends TestCase
 {
     /**
      * Construct with empty value
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


56) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TextBoxTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Shared\Converter;
 /**
  * Test class for PhpOffice\PhpWord\Element\TextBox
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\TextBox
  * @runTestsInSeparateProcesses
  */
-class TextBoxTest extends \PHPUnit\Framework\TestCase
+class TextBoxTest extends TestCase
 {
     /**
      * Create new instance
@@ @@
     {
         $oTextBox = new TextBox(
             array(
-                'width'       => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(4.5),
-                'height'      => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(17.5),
+                'width'       => Converter::cmToPixel(4.5),
+                'height'      => Converter::cmToPixel(17.5),
                 'positioning' => 'absolute',
-                'marginLeft'  => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(15.4),
-                'marginTop'   => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(9.9),
+                'marginLeft'  => Converter::cmToPixel(15.4),
+                'marginTop'   => Converter::cmToPixel(9.9),
                 'stroke'      => 0,
                 'innerMargin' => 0,
                 'borderSize'  => 1,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


57) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TableTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Table
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Table
  * @runTestsInSeparateProcesses
  */
-class TableTest extends \PHPUnit\Framework\TestCase
+class TableTest extends TestCase
 {
     /**
      * Create new instance
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


58) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/TOCTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Style\Tab;
 use PhpOffice\PhpWord\PhpWord;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class TOCTest extends \PHPUnit\Framework\TestCase
+class TOCTest extends TestCase
 {
     /**
      * Construct with font and TOC style in array format
@@ @@
     {
         $expected = array(
             'position' => 9062,
-            'leader'   => \PhpOffice\PhpWord\Style\Tab::TAB_LEADER_DOT,
+            'leader'   => Tab::TAB_LEADER_DOT,
             'indent'   => 200,
         );
         $object = new TOC(array('size' => 11), array('position' => $expected['position']));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


59) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/SectionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\InvalidObjectException;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Style;

@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Section
  * @runTestsInSeparateProcesses
  */
-class SectionTest extends \PHPUnit\Framework\TestCase
+class SectionTest extends TestCase
 {
     /**
      * @covers ::setStyle
@@ @@

     /**
      * @coversNothing
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidObjectException
      */
     public function testAddObjectException()
     {
+        $this->expectException(InvalidObjectException::class);
         $source = __DIR__ . '/_files/xsl/passthrough.xsl';
         $section = new Section(0);
         $section->addObject($source);
@@ @@

     /**
      * @covers ::addHeader
-     * @expectedException \Exception
-     * @expectedExceptionMessage Invalid header/footer type.
      */
     public function testAddHeaderException()
     {
+        $this->expectException(\Exception::class);
+        $this->expectExceptionMessage('Invalid header/footer type.');
         $object = new Section(1);
         $object->addHeader('ODD');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


60) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/SDTTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\SDT
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Element\SDT
  */
-class SDTTest extends \PHPUnit\Framework\TestCase
+class SDTTest extends TestCase
 {
     /**
      * Create new instance
@@ @@

     /**
      * Test set type exception
-     *
-     * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage Invalid style value
      */
     public function testSetTypeException()
     {
+        $this->expectException(\InvalidArgumentException::class);
+        $this->expectExceptionMessage('Invalid style value');
         $object = new SDT('comboBox');
         $object->setType('foo');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


61) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/RowTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Row
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Row
  * @runTestsInSeparateProcesses
  */
-class RowTest extends \PHPUnit\Framework\TestCase
+class RowTest extends TestCase
 {
     /**
      * Create new instance
@@ @@

         $this->assertInstanceOf('PhpOffice\\PhpWord\\Element\\Row', $oRow);
         $this->assertNull($oRow->getHeight());
-        $this->assertInternalType('array', $oRow->getCells());
+        $this->assertIsArray($oRow->getCells());
         $this->assertCount(0, $oRow->getCells());
         $this->assertInstanceOf('PhpOffice\\PhpWord\\Style\\Row', $oRow->getStyle());
     }
    ----------- end diff -----------

Applied rules:
 * SpecificAssertInternalTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


62) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/PreserveTextTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\Jc;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class PreserveTextTest extends \PHPUnit\Framework\TestCase
+class PreserveTextTest extends TestCase
 {
     /**
      * Create new instance
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


63) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/PageBreakTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\PageBreak
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\PageBreak
  * @runTestsInSeparateProcesses
  */
-class PageBreakTest extends \PHPUnit\Framework\TestCase
+class PageBreakTest extends TestCase
 {
     /**
      * Executed before each method of the class
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


64) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ObjectTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\InvalidObjectException;
 /**
  * Test class for PhpOffice\PhpWord\Element\Object
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Object
  * @runTestsInSeparateProcesses
  */
-class ObjectTest extends \PHPUnit\Framework\TestCase
+class ObjectTest extends TestCase
 {
     /**
      * Create new instance with supported files, 4 character extention
@@ @@

     /**
      * Create new instance with non-supported files
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidObjectException
      */
     public function testConstructWithNotSupportedFiles()
     {
+        $this->expectException(InvalidObjectException::class);
         $src = __DIR__ . '/../_files/xsl/passthrough.xsl';
         $oObject = new Object($src);
         $oObject->getSource();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


65) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ListItemTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\ListItem
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\ListItem
  * @runTestsInSeparateProcesses
  */
-class ListItemTest extends \PHPUnit\Framework\TestCase
+class ListItemTest extends TestCase
 {
     /**
      * Get text object
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


66) modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Writer/Word2007/Element/Field.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Element;

+use PhpOffice\PhpWord\Element\TextRun;
 /**
  * Field element writer
  *
@@ @@
         $xmlWriter->endElement(); // w:r

         if ($element->getText() != null) {
-            if ($element->getText() instanceof \PhpOffice\PhpWord\Element\TextRun) {
+            if ($element->getText() instanceof TextRun) {
                 $containerWriter = new Container($xmlWriter, $element->getText(), true);
                 $containerWriter->write();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


67) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayUtils.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\InvalidArgumentException;
 use Traversable;
 use Zend\Stdlib\ArrayUtils\MergeRemoveKey;
 use Zend\Stdlib\ArrayUtils\MergeReplaceKeyInterface;
@@ @@
     public static function iteratorToArray($iterator, $recursive = true)
     {
         if (! is_array($iterator) && ! $iterator instanceof Traversable) {
-            throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable object');
+            throw new InvalidArgumentException(__METHOD__ . ' expects an array or Traversable object');
         }

         if (! $recursive) {
@@ @@
     public static function filter(array $data, $callback, $flag = null)
     {
         if (! is_callable($callback)) {
-            throw new Exception\InvalidArgumentException(sprintf(
+            throw new InvalidArgumentException(sprintf(
                 'Second parameter of %s must be callable',
                 __METHOD__
             ));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


68) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/ArrayObject.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\InvalidArgumentException;
 use ArrayAccess;
 use Countable;
 use IteratorAggregate;
@@ @@
             return $this->offsetExists($key);
         }
         if (in_array($key, $this->protectedProperties)) {
-            throw new Exception\InvalidArgumentException('$key is a protected property, use a different key');
+            throw new InvalidArgumentException('$key is a protected property, use a different key');
         }

         return isset($this->$key);
@@ @@
             return $this->offsetSet($key, $value);
         }
         if (in_array($key, $this->protectedProperties)) {
-            throw new Exception\InvalidArgumentException('$key is a protected property, use a different key');
+            throw new InvalidArgumentException('$key is a protected property, use a different key');
         }
         $this->$key = $value;
     }
@@ @@
             return $this->offsetUnset($key);
         }
         if (in_array($key, $this->protectedProperties)) {
-            throw new Exception\InvalidArgumentException('$key is a protected property, use a different key');
+            throw new InvalidArgumentException('$key is a protected property, use a different key');
         }
         unset($this->$key);
     }
@@ @@
             return $ret;
         }
         if (in_array($key, $this->protectedProperties)) {
-            throw new Exception\InvalidArgumentException('$key is a protected property, use a different key');
+            throw new InvalidArgumentException('$key is a protected property, use a different key');
         }

         return $this->$key;
@@ @@
     public function exchangeArray($data)
     {
         if (! is_array($data) && ! is_object($data)) {
-            throw new Exception\InvalidArgumentException(
+            throw new InvalidArgumentException(
                 'Passed variable is not an array or object, using empty array instead'
             );
         }
@@ @@
             }
         }

-        throw new Exception\InvalidArgumentException('The iterator class does not exist');
+        throw new InvalidArgumentException('The iterator class does not exist');
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


69) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/AbstractOptions.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\InvalidArgumentException;
+use Zend\Stdlib\Exception\BadMethodCallException;
 use Traversable;

 abstract class AbstractOptions implements ParameterObjectInterface
@@ @@
         }

         if (! is_array($options) && ! $options instanceof Traversable) {
-            throw new Exception\InvalidArgumentException(
+            throw new InvalidArgumentException(
                 sprintf(
                     'Parameter provided to %s must be an %s, %s or %s',
                     __METHOD__,
@@ @@
         }

         if ($this->__strictMode__) {
-            throw new Exception\BadMethodCallException(sprintf(
+            throw new BadMethodCallException(sprintf(
                 'The option "%s" does not have a callable "%s" ("%s") setter method which must be defined',
                 $key,
                 'set' . str_replace(' ', '', ucwords(str_replace('_', ' ', $key))),
@@ @@
             return $this->{$getter}();
         }

-        throw new Exception\BadMethodCallException(sprintf(
+        throw new BadMethodCallException(sprintf(
             'The option "%s" does not have a callable "%s" getter method which must be defined',
             $key,
             'get' . str_replace(' ', '', ucwords(str_replace('_', ' ', $key)))
@@ @@
     {
         try {
             $this->__set($key, null);
-        } catch (Exception\BadMethodCallException $e) {
-            throw new Exception\InvalidArgumentException(
+        } catch (BadMethodCallException $e) {
+            throw new InvalidArgumentException(
                 'The class property $' . $key . ' cannot be unset as'
                 . ' NULL is an invalid value for it',
                 0,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


70) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/PriorityQueue.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\DomainException;
 use Countable;
 use IteratorAggregate;
 use Serializable;
@@ @@
         if (null === $this->queue) {
             $this->queue = new $this->queueClass();
             if (! $this->queue instanceof \SplPriorityQueue) {
-                throw new Exception\DomainException(sprintf(
+                throw new DomainException(sprintf(
                     'PriorityQueue expects an internal queue of type SplPriorityQueue; received "%s"',
                     get_class($this->queue)
                 ));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


71) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Message.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\InvalidArgumentException;
 use Traversable;

 class Message implements MessageInterface
@@ @@
             return $this;
         }
         if (! is_array($spec) && ! $spec instanceof Traversable) {
-            throw new Exception\InvalidArgumentException(sprintf(
+            throw new InvalidArgumentException(sprintf(
                 'Expected a string, array, or Traversable argument in first position; received "%s"',
                 (is_object($spec) ? get_class($spec) : gettype($spec))
             ));
@@ @@
         }

         if (! is_scalar($key)) {
-            throw new Exception\InvalidArgumentException('Non-scalar argument provided for key');
+            throw new InvalidArgumentException('Non-scalar argument provided for key');
         }

         if (array_key_exists($key, $this->metadata)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


72) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/Glob.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\RuntimeException;
 /**
  * Wrapper for glob with fallback if GLOB_BRACE is not available.
  */
@@ @@
         $res = glob($pattern, $globFlags);
         $err = ErrorHandler::stop();
         if ($res === false) {
-            throw new Exception\RuntimeException("glob('{$pattern}', {$globFlags}) failed", 0, $err);
+            throw new RuntimeException("glob('{$pattern}', {$globFlags}) failed", 0, $err);
         }
         return $res;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


73) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/FastPriorityQueue.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\InvalidArgumentException;
 use Iterator;
 use Countable;
 use Serializable;
@@ @@
     public function insert($value, $priority)
     {
         if (! is_int($priority)) {
-            throw new Exception\InvalidArgumentException('The priority must be an integer');
+            throw new InvalidArgumentException('The priority must be an integer');
         }
         $this->values[$priority][] = $value;
         if (! isset($this->priorities[$priority])) {
@@ @@
                 $this->extractFlag = $flag;
                 break;
             default:
-                throw new Exception\InvalidArgumentException("The extract flag specified is not valid");
+                throw new InvalidArgumentException("The extract flag specified is not valid");
         }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


74) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/Native.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib\StringWrapper;

+use Zend\Stdlib\Exception\InvalidArgumentException;
 use Zend\Stdlib\Exception;
 use Zend\Stdlib\StringUtils;

@@ @@

         $encodingUpper = strtoupper($encoding);
         if (! in_array($encodingUpper, $supportedEncodings)) {
-            throw new Exception\InvalidArgumentException(
+            throw new InvalidArgumentException(
                 'Wrapper doesn\'t support character encoding "' . $encoding . '"'
             );
         }
@@ @@

         if ($convertEncoding !== null) {
             if ($encodingUpper !== strtoupper($convertEncoding)) {
-                throw new Exception\InvalidArgumentException(
+                throw new InvalidArgumentException(
                     'Wrapper doesn\'t support to convert between character encodings'
                 );
             }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


75) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/MbString.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib\StringWrapper;

+use Zend\Stdlib\Exception\ExtensionNotLoadedException;
+use Zend\Stdlib\Exception\LogicException;
 use Zend\Stdlib\Exception;

 class MbString extends AbstractStringWrapper
@@ @@
     public function __construct()
     {
         if (! extension_loaded('mbstring')) {
-            throw new Exception\ExtensionNotLoadedException(
+            throw new ExtensionNotLoadedException(
                 'PHP extension "mbstring" is required for this wrapper'
             );
         }
@@ @@
         $convertEncoding = $this->getConvertEncoding();

         if ($convertEncoding === null) {
-            throw new Exception\LogicException(
+            throw new LogicException(
                 'No convert encoding defined'
             );
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


76) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/Intl.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib\StringWrapper;

+use Zend\Stdlib\Exception\ExtensionNotLoadedException;
 use Zend\Stdlib\Exception;

 class Intl extends AbstractStringWrapper
@@ @@
     public function __construct()
     {
         if (! extension_loaded('intl')) {
-            throw new Exception\ExtensionNotLoadedException(
+            throw new ExtensionNotLoadedException(
                 'PHP extension "intl" is required for this wrapper'
             );
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


77) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/Iconv.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib\StringWrapper;

+use Zend\Stdlib\Exception\ExtensionNotLoadedException;
+use Zend\Stdlib\Exception\LogicException;
 use Zend\Stdlib\Exception;

 class Iconv extends AbstractStringWrapper
@@ @@
     public function __construct()
     {
         if (! extension_loaded('iconv')) {
-            throw new Exception\ExtensionNotLoadedException(
+            throw new ExtensionNotLoadedException(
                 'PHP extension "iconv" is required for this wrapper'
             );
         }
@@ @@
         $encoding        = $this->getEncoding();
         $convertEncoding = $this->getConvertEncoding();
         if ($convertEncoding === null) {
-            throw new Exception\LogicException(
+            throw new LogicException(
                 'No convert encoding defined'
             );
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


78) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringWrapper/AbstractStringWrapper.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib\StringWrapper;

+use Zend\Stdlib\Exception\InvalidArgumentException;
+use Zend\Stdlib\Exception\LogicException;
+use Zend\Stdlib\Exception\RuntimeException;
 use Zend\Stdlib\Exception;
 use Zend\Stdlib\StringUtils;

@@ @@

         $encodingUpper = strtoupper($encoding);
         if (! in_array($encodingUpper, $supportedEncodings)) {
-            throw new Exception\InvalidArgumentException(
+            throw new InvalidArgumentException(
                 'Wrapper doesn\'t support character encoding "' . $encoding . '"'
             );
         }
@@ @@
         if ($convertEncoding !== null) {
             $convertEncodingUpper = strtoupper($convertEncoding);
             if (! in_array($convertEncodingUpper, $supportedEncodings)) {
-                throw new Exception\InvalidArgumentException(
+                throw new InvalidArgumentException(
                     'Wrapper doesn\'t support character encoding "' . $convertEncoding . '"'
                 );
             }
@@ @@
         $encoding        = $this->getEncoding();
         $convertEncoding = $this->getConvertEncoding();
         if ($convertEncoding === null) {
-            throw new Exception\LogicException(
+            throw new LogicException(
                 'No convert encoding defined'
             );
         }
@@ @@

         $from = $reverse ? $convertEncoding : $encoding;
         $to   = $reverse ? $encoding : $convertEncoding;
-        throw new Exception\RuntimeException(sprintf(
+        throw new RuntimeException(sprintf(
             'Converting from "%s" to "%s" isn\'t supported by this string wrapper',
             $from,
             $to
@@ @@

         $break = (string) $break;
         if ($break === '') {
-            throw new Exception\InvalidArgumentException('Break string cannot be empty');
+            throw new InvalidArgumentException('Break string cannot be empty');
         }

         $width = (int) $width;
         if ($width === 0 && $cut) {
-            throw new Exception\InvalidArgumentException('Cannot force cut when width is zero');
+            throw new InvalidArgumentException('Cannot force cut when width is zero');
         }

         if (StringUtils::isSingleByteEncoding($this->getEncoding())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


79) modules/contrib/doc_serialization/vendor/zendframework/zend-stdlib/src/StringUtils.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Stdlib;

+use Zend\Stdlib\Exception\RuntimeException;
 use Zend\Stdlib\StringWrapper\StringWrapperInterface;

 /**
@@ @@
             }
         }

-        throw new Exception\RuntimeException(
+        throw new RuntimeException(
             'No wrapper found supporting "' . $encoding . '"'
             . (($convertEncoding !== null) ? ' and "' . $convertEncoding . '"' : '')
         );
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


80) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ListItemRunTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Style\ListItem;
 /**
  * Test class for PhpOffice\PhpWord\Element\ListItemRun
  *
  * @runTestsInSeparateProcesses
  */
-class ListItemRunTest extends \PHPUnit\Framework\TestCase
+class ListItemRunTest extends TestCase
 {
     /**
      * New instance
@@ @@
      */
     public function testStyle()
     {
-        $oListItemRun = new ListItemRun(1, array('listType' => \PhpOffice\PhpWord\Style\ListItem::TYPE_NUMBER));
+        $oListItemRun = new ListItemRun(1, array('listType' => ListItem::TYPE_NUMBER));

         $this->assertInstanceOf('PhpOffice\\PhpWord\\Style\\ListItem', $oListItemRun->getStyle());
-        $this->assertEquals(\PhpOffice\PhpWord\Style\ListItem::TYPE_NUMBER, $oListItemRun->getStyle()->getListType());
+        $this->assertEquals(ListItem::TYPE_NUMBER, $oListItemRun->getStyle()->getListType());
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


81) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/LinkTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Style\Font;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Link
  * @runTestsInSeparateProcesses
  */
-class LinkTest extends \PHPUnit\Framework\TestCase
+class LinkTest extends TestCase
 {
     /**
      * Create new instance
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


82) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/LineTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Shared\Converter;
+use PhpOffice\PhpWord\Style\Image;
 /**
  * Test class for PhpOffice\PhpWord\Element\Line
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Line
  * @runTestsInSeparateProcesses
  */
-class LineTest extends \PHPUnit\Framework\TestCase
+class LineTest extends TestCase
 {
     /**
      * Create new instance
@@ @@
     {
         $oLine = new Line(
             array(
-                'width'            => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(14),
-                'height'           => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(4),
+                'width'            => Converter::cmToPixel(14),
+                'height'           => Converter::cmToPixel(4),
                 'positioning'      => 'absolute',
                 'posHorizontalRel' => 'page',
                 'posVerticalRel'   => 'page',
                 'flip'             => true,
-                'marginLeft'       => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(5),
-                'marginTop'        => \PhpOffice\PhpWord\Shared\Converter::cmToPixel(3),
-                'wrappingStyle'    => \PhpOffice\PhpWord\Style\Image::WRAPPING_STYLE_SQUARE,
+                'marginLeft'       => Converter::cmToPixel(5),
+                'marginTop'        => Converter::cmToPixel(3),
+                'wrappingStyle'    => Image::WRAPPING_STYLE_SQUARE,
                 'beginArrow'       => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_BLOCK,
                 'endArrow'         => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_OVAL,
                 'dash'             => \PhpOffice\PhpWord\Style\Line::DASH_STYLE_LONG_DASH_DOT_DOT,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


83) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/ImageTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\InvalidImageException;
+use PhpOffice\PhpWord\Exception\UnsupportedImageTypeException;
 use PhpOffice\PhpWord\SimpleType\Jc;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class ImageTest extends \PHPUnit\Framework\TestCase
+class ImageTest extends TestCase
 {
     /**
      * New instance
@@ @@

     /**
      * Test invalid local image
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidImageException
      */
     public function testInvalidImageLocal()
     {
+        $this->expectException(InvalidImageException::class);
         new Image(__DIR__ . '/../_files/images/thisisnotarealimage');
     }

     /**
      * Test invalid PHP Image
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidImageException
      */
     public function testInvalidImagePhp()
     {
+        $this->expectException(InvalidImageException::class);
         $object = new Image('test.php');
         $object->getSource();
     }
@@ @@

     /**
      * Test unsupported image
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\UnsupportedImageTypeException
      */
     public function testUnsupportedImage()
     {
+        $this->expectException(UnsupportedImageTypeException::class);
         //disable ssl verification, never do this in real application, you should pass the certiciate instead!!!
         $arrContextOptions = array(
             'ssl' => array(
@@ @@

     /**
      * Test invalid string image
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidImageException
      */
     public function testInvalidImageString()
     {
+        $this->expectException(InvalidImageException::class);
         $object = new Image('this_is-a_non_valid_image');
         $object->getSource();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


84) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/HeaderTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Header
  *
  * @runTestsInSeparateProcesses
  */
-class HeaderTest extends \PHPUnit\Framework\TestCase
+class HeaderTest extends TestCase
 {
     /**
      * New instance
@@ @@
     {
         $oHeader = new Header(1);

-        $this->assertInternalType('array', $oHeader->getElements());
+        $this->assertIsArray($oHeader->getElements());
     }

     /**
@@ @@

     /**
      * Add footnote exception
-     *
-     * @expectedException \BadMethodCallException
      */
     public function testAddFootnoteException()
     {
+        $this->expectException(\BadMethodCallException::class);
         $header = new Header(1);
         $header->addFootnote();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * SpecificAssertInternalTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


85) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/FootnoteTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Footnote
  *
  * @runTestsInSeparateProcesses
  */
-class FootnoteTest extends \PHPUnit\Framework\TestCase
+class FootnoteTest extends TestCase
 {
     /**
      * New instance without parameter
@@ @@
     public function testGetElements()
     {
         $oFootnote = new Footnote();
-        $this->assertInternalType('array', $oFootnote->getElements());
+        $this->assertIsArray($oFootnote->getElements());
     }
 }
    ----------- end diff -----------

Applied rules:
 * SpecificAssertInternalTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


86) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/FooterTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Footer
  *
  * @runTestsInSeparateProcesses
  */
-class FooterTest extends \PHPUnit\Framework\TestCase
+class FooterTest extends TestCase
 {
     /**
      * New instance
@@ @@
     {
         $oFooter = new Footer(1);

-        $this->assertInternalType('array', $oFooter->getElements());
+        $this->assertIsArray($oFooter->getElements());
     }

     /**
    ----------- end diff -----------

Applied rules:
 * SpecificAssertInternalTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


87) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/FieldTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Field
  *
  * @runTestsInSeparateProcesses
  */
-class FieldTest extends \PHPUnit\Framework\TestCase
+class FieldTest extends TestCase
 {
     /**
      * New instance
@@ @@

     /**
      * Test setType exception
-     *
-     * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage Invalid type
      */
     public function testSetTypeException()
     {
+        $this->expectException(\InvalidArgumentException::class);
+        $this->expectExceptionMessage('Invalid type');
         $object = new Field();
         $object->setType('foo');
     }
@@ @@

     /**
      * Test setProperties exception
-     *
-     * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage Invalid property
      */
     public function testSetPropertiesException()
     {
+        $this->expectException(\InvalidArgumentException::class);
+        $this->expectExceptionMessage('Invalid property');
         $object = new Field('PAGE');
         $object->setProperties(array('foo' => 'bar'));
     }
@@ @@

     /**
      * Test setOptions exception
-     *
-     * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage Invalid option
      */
     public function testSetOptionsException()
     {
+        $this->expectException(\InvalidArgumentException::class);
+        $this->expectExceptionMessage('Invalid option');
         $object = new Field('PAGE');
         $object->setOptions(array('foo' => 'bar'));
     }
@@ @@

     /**
      * Test setText exception
-     *
-     * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage Invalid text
      */
     public function testSetTextException()
     {
+        $this->expectException(\InvalidArgumentException::class);
+        $this->expectExceptionMessage('Invalid text');
         $object = new Field('XE');
         $object->setText(array());
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


88) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/CommentTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Header
  *
  * @runTestsInSeparateProcesses
  */
-class CommentTest extends \PHPUnit\Framework\TestCase
+class CommentTest extends TestCase
 {
     /**
      * New instance
@@ @@
     {
         $oComment = new Comment('Test User', new \DateTime(), 'my_initials');

-        $this->assertInternalType('array', $oComment->getElements());
+        $this->assertIsArray($oComment->getElements());
     }

     /**
@@ @@
         $this->assertEquals($iVal, $oComment->getRelationId());
     }

-    /**
-     * @expectedException \InvalidArgumentException
-     */
     public function testExceptionOnCommentStartOnComment()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $dummyComment = new Comment('Test User', new \DateTime(), 'my_initials');
         $oComment = new Comment('Test User', new \DateTime(), 'my_initials');
         $oComment->setCommentRangeStart($dummyComment);
     }

-    /**
-     * @expectedException \InvalidArgumentException
-     */
     public function testExceptionOnCommentEndOnComment()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $dummyComment = new Comment('Test User', new \DateTime(), 'my_initials');
         $oComment = new Comment('Test User', new \DateTime(), 'my_initials');
         $oComment->setCommentRangeEnd($dummyComment);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * SpecificAssertInternalTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


89) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/CheckBoxTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\Style\Font;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class CheckBoxTest extends \PHPUnit\Framework\TestCase
+class CheckBoxTest extends TestCase
 {
     /**
      * Construct
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


90) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/CellTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\InvalidObjectException;
 /**
  * Test class for PhpOffice\PhpWord\Element\Cell
  *
  * @runTestsInSeparateProcesses
  */
-class CellTest extends \PHPUnit\Framework\TestCase
+class CellTest extends TestCase
 {
     /**
      * New instance
@@ @@

     /**
      * Test add object exception
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidObjectException
      */
     public function testAddObjectException()
     {
+        $this->expectException(InvalidObjectException::class);
         $src = __DIR__ . '/../_files/xsl/passthrough.xsl';
         $oCell = new Cell();
         $oCell->addObject($src);
@@ @@

     /**
      * Add preserve text exception
-     *
-     * @expectedException \BadMethodCallException
      */
     public function testAddPreserveTextException()
     {
+        $this->expectException(\BadMethodCallException::class);
         $oCell = new Cell();
         $oCell->setDocPart('Section', 1);
         $oCell->addPreserveText('text');
@@ @@
     {
         $oCell = new Cell();

-        $this->assertInternalType('array', $oCell->getElements());
+        $this->assertIsArray($oCell->getElements());
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * SpecificAssertInternalTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


91) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/BookmarkTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\Footer
  *
  * @runTestsInSeparateProcesses
  */
-class BookmarkTest extends \PHPUnit\Framework\TestCase
+class BookmarkTest extends TestCase
 {
     /**
      * New instance
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


92) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Element/AbstractElementTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Element;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Element\AbstractElement
  */
-class AbstractElementTest extends \PHPUnit\Framework\TestCase
+class AbstractElementTest extends TestCase
 {
     /**
      * Test set/get element index
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


93) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/ComplexType/ProofStateTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\ComplexType;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\ComplexType\ProofState
  *
  * @coversDefaultClass \PhpOffice\PhpWord\ComplexType\ProofState
  */
-class ProofStateTest extends \PHPUnit\Framework\TestCase
+class ProofStateTest extends TestCase
 {
     /**
      * Tests the getters and setters
@@ @@

     /**
      * Test throws exception if wrong grammar proof state value given
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testWrongGrammar()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $pState = new ProofState();
         $pState->setGrammar('Wrong');
     }
@@ @@

     /**
      * Test throws exception if wrong spelling proof state value given
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testWrongSpelling()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $pState = new ProofState();
         $pState->setSpelling('Wrong');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


94) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/ComplexType/FootnotePropertiesTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\ComplexType;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\NumberFormat;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\ComplexType\FootnoteProperties
  * @runTestsInSeparateProcesses
  */
-class FootnotePropertiesTest extends \PHPUnit\Framework\TestCase
+class FootnotePropertiesTest extends TestCase
 {
     /**
      * Test setting style with normal value
@@ @@

     /**
      * Test throws exception if wrong position given
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testWrongPos()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $footnoteProp = new FootnoteProperties();
         $footnoteProp->setPos(NumberFormat::LOWER_ROMAN);
     }
@@ @@

     /**
      * Test throws exception if wrong number format given
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testWrongNumFmt()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $footnoteProp = new FootnoteProperties();
         $footnoteProp->setNumFmt(FootnoteProperties::POSITION_DOC_END);
     }
@@ @@

     /**
      * Test throws exception if wrong number restart given
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testWrongNumRestart()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $footnoteProp = new FootnoteProperties();
         $footnoteProp->setNumRestart(NumberFormat::LOWER_ROMAN);
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


95) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Collection/CollectionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Collection;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Element\Footnote;

 /**
@@ @@
  *
  * Using concrete class Footnotes instead of AbstractCollection
  */
-class CollectionTest extends \PHPUnit\Framework\TestCase
+class CollectionTest extends TestCase
 {
     /**
      * Test collection
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


96) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTML/PartTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\HTML;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\Writer\HTML\Part\Body;

 /**
  * Test class for PhpOffice\PhpWord\Writer\HTML\Part subnamespace
  */
-class PartTest extends \PHPUnit\Framework\TestCase
+class PartTest extends TestCase
 {
     /**
      * Test get parent writer exception
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
      */
     public function testGetParentWriterException()
     {
+        $this->expectException(Exception::class);
         $object = new Body();
         $object->getParentWriter();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


97) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTML/ElementTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\HTML;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Element\PageBreak;
 use PhpOffice\PhpWord\Element\Text as TextElement;
 use PhpOffice\PhpWord\Writer\HTML;
 use PhpOffice\PhpWord\Writer\HTML\Element\Text;
@@ @@
 /**
  * Test class for PhpOffice\PhpWord\Writer\HTML\Element subnamespace
  */
-class ElementTest extends \PHPUnit\Framework\TestCase
+class ElementTest extends TestCase
 {
     /**
      * Test unmatched elements
@@ @@
         foreach ($elements as $element) {
             $objectClass = 'PhpOffice\\PhpWord\\Writer\\HTML\\Element\\' . $element;
             $parentWriter = new HTML();
-            $newElement = new \PhpOffice\PhpWord\Element\PageBreak();
+            $newElement = new PageBreak();
             $object = new $objectClass($parentWriter, $newElement);

             $this->assertEquals('', $object->write());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


98) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/TemplateProcessorTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord;

+use PHPUnit\Framework\TestCase;
 /**
  * @covers \PhpOffice\PhpWord\TemplateProcessor
  * @coversDefaultClass \PhpOffice\PhpWord\TemplateProcessor
  * @runTestsInSeparateProcesses
  */
-final class TemplateProcessorTest extends \PHPUnit\Framework\TestCase
+final class TemplateProcessorTest extends TestCase
 {
     /**
      * Template can be saved in temporary location.
@@ @@
      * XSL stylesheet cannot be applied on failure in setting parameter value.
      *
      * @covers                   ::applyXslStyleSheet
-     * @expectedException        \PhpOffice\PhpWord\Exception\Exception
-     * @expectedExceptionMessage Could not set values for the given XSL style sheet parameters.
      * @test
      */
     final public function testXslStyleSheetCanNotBeAppliedOnFailureOfSettingParameterValue()
     {
+        $this->expectException(\PhpOffice\PhpWord\Exception\Exception::class);
+        $this->expectExceptionMessage('Could not set values for the given XSL style sheet parameters.');
         $templateProcessor = new TemplateProcessor(__DIR__ . '/_files/templates/blank.docx');

         $xslDomDocument = new \DOMDocument();
@@ @@
      * XSL stylesheet can be applied on failure of loading XML from template.
      *
      * @covers                   ::applyXslStyleSheet
-     * @expectedException        \PhpOffice\PhpWord\Exception\Exception
-     * @expectedExceptionMessage Could not load the given XML document.
      * @test
      */
     final public function testXslStyleSheetCanNotBeAppliedOnFailureOfLoadingXmlFromTemplate()
     {
+        $this->expectException(\PhpOffice\PhpWord\Exception\Exception::class);
+        $this->expectExceptionMessage('Could not load the given XML document.');
         $templateProcessor = new TemplateProcessor(__DIR__ . '/_files/templates/corrupted_main_document_part.docx');

         $xslDomDocument = new \DOMDocument();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


99) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/StyleTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\Jc;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Style
  * @runTestsInSeparateProcesses
  */
-class StyleTest extends \PHPUnit\Framework\TestCase
+class StyleTest extends TestCase
 {
     /**
      * Add and get paragraph, font, link, title, and table styles
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


100) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TextBoxTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\Jc;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Image
  * @runTestsInSeparateProcesses
  */
-class TextBoxTest extends \PHPUnit\Framework\TestCase
+class TextBoxTest extends TestCase
 {
     /**
      * Test setting style with normal value
@@ @@

     /**
      * Test setWrappingStyle exception
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testSetWrappingStyleException()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $object = new TextBox();
         $object->setWrappingStyle('foo');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


101) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TableTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\JcTable;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class TableTest extends \PHPUnit\Framework\TestCase
+class TableTest extends TestCase
 {
     /**
      * Test class construction
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


102) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TabTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Tab
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Tab
  */
-class TabTest extends \PHPUnit\Framework\TestCase
+class TabTest extends TestCase
 {
     /**
      * Test get/set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


103) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/TOCTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\TOC
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\TOC
  */
-class TOCTest extends \PHPUnit\Framework\TestCase
+class TOCTest extends TestCase
 {
     /**
      * Test get/set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


104) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/SpacingTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Spacing
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Spacing
  */
-class SpacingTest extends \PHPUnit\Framework\TestCase
+class SpacingTest extends TestCase
 {
     /**
      * Test get/set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


105) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ShadingTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Shading
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Shading
  */
-class ShadingTest extends \PHPUnit\Framework\TestCase
+class ShadingTest extends TestCase
 {
     /**
      * Test get/set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


106) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/SectionTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Section
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Element\Section
  * @runTestsInSeparateProcesses
  */
-class SectionTest extends \PHPUnit\Framework\TestCase
+class SectionTest extends TestCase
 {
     /**
      * Executed before each method of the class
@@ @@
         $oSettings = new Section();

         $this->assertEquals('portrait', $oSettings->getOrientation());
-        $this->assertEquals(Section::DEFAULT_WIDTH, $oSettings->getPageSizeW(), '', 0.000000001);
-        $this->assertEquals(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeH(), '', 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_WIDTH, $oSettings->getPageSizeW(), 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeH(), 0.000000001);
         $this->assertEquals('A4', $oSettings->getPaperSize());

         $oSettings->setSettingValue('orientation', 'landscape');
         $this->assertEquals('landscape', $oSettings->getOrientation());
-        $this->assertEquals(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeW(), '', 0.000000001);
-        $this->assertEquals(Section::DEFAULT_WIDTH, $oSettings->getPageSizeH(), '', 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeW(), 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_WIDTH, $oSettings->getPageSizeH(), 0.000000001);

         $iVal = rand(1, 1000);
         $oSettings->setSettingValue('borderSize', $iVal);
@@ @@
         // Section Settings
         $oSettings = new Section();

-        $this->assertEquals(Section::DEFAULT_WIDTH, $oSettings->getPageSizeW(), '', 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_WIDTH, $oSettings->getPageSizeW(), 0.000000001);
         $iVal = rand(1, 1000);
         $oSettings->setSettingValue('pageSizeW', $iVal);
         $this->assertEquals($iVal, $oSettings->getPageSizeW());
@@ @@
         // Section Settings
         $oSettings = new Section();

-        $this->assertEquals(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeH(), '', 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeH(), 0.000000001);
         $iVal = rand(1, 1000);
         $oSettings->setSettingValue('pageSizeH', $iVal);
         $this->assertEquals($iVal, $oSettings->getPageSizeH());
@@ @@

         $oSettings->setLandscape();
         $this->assertEquals('landscape', $oSettings->getOrientation());
-        $this->assertEquals(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeW(), '', 0.000000001);
-        $this->assertEquals(Section::DEFAULT_WIDTH, $oSettings->getPageSizeH(), '', 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeW(), 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_WIDTH, $oSettings->getPageSizeH(), 0.000000001);
     }

     /**
@@ @@

         $oSettings->setPortrait();
         $this->assertEquals('portrait', $oSettings->getOrientation());
-        $this->assertEquals(Section::DEFAULT_WIDTH, $oSettings->getPageSizeW(), '', 0.000000001);
-        $this->assertEquals(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeH(), '', 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_WIDTH, $oSettings->getPageSizeW(), 0.000000001);
+        $this->assertEqualsWithDelta(Section::DEFAULT_HEIGHT, $oSettings->getPageSizeH(), 0.000000001);
     }

     /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualsParameterToSpecificMethodsTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


107) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/RowTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Row
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Row
  * @runTestsInSeparateProcesses
  */
-class RowTest extends \PHPUnit\Framework\TestCase
+class RowTest extends TestCase
 {
     /**
      * Test properties with boolean value
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


108) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ParagraphTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\InvalidStyleException;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\LineSpacingRule;
 use PhpOffice\PhpWord\TestHelperDOCX;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class ParagraphTest extends \PHPUnit\Framework\TestCase
+class ParagraphTest extends TestCase
 {
     /**
      * Tear down after each test
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@

     /**
      * Test line height exception by using nonnumeric value
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidStyleException
      */
     public function testLineHeightException()
     {
+        $this->expectException(InvalidStyleException::class);
         $object = new Paragraph();
         $object->setLineHeight('a');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


109) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/PaperTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\TestHelperDOCX;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class PaperTest extends \PHPUnit\Framework\TestCase
+class PaperTest extends TestCase
 {
     /**
      * Tear down after each test
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@
         $object = new Paper('B5');

         $this->assertEquals('B5', $object->getSize());
-        $this->assertEquals(9977.9527559055, $object->getWidth(), '', 0.000000001);
-        $this->assertEquals(14173.228346457, $object->getHeight(), '', 0.000000001);
+        $this->assertEqualsWithDelta(9977.9527559055, $object->getWidth(), 0.000000001);
+        $this->assertEqualsWithDelta(14173.228346457, $object->getHeight(), 0.000000001);
     }

     /**
@@ @@
         $object->setSize('Folio');

         $this->assertEquals('Folio', $object->getSize());
-        $this->assertEquals(12240, $object->getWidth(), '', 0.1);
-        $this->assertEquals(18720, $object->getHeight(), '', 0.1);
+        $this->assertEqualsWithDelta(12240, $object->getWidth(), 0.1);
+        $this->assertEqualsWithDelta(18720, $object->getHeight(), 0.1);
     }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualsParameterToSpecificMethodsTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


110) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/NumberingTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Numbering
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Numbering
  */
-class NumberingTest extends \PHPUnit\Framework\TestCase
+class NumberingTest extends TestCase
 {
     /**
      * Test get/set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


111) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/NumberingLevelTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\Jc;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class NumberingLevelTest extends \PHPUnit\Framework\TestCase
+class NumberingLevelTest extends TestCase
 {
     /**
      * Test setting style with normal value
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


112) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ListItemTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\ListItem
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Style\ListItem
  * @runTestsInSeparateProcesses
  */
-class ListItemTest extends \PHPUnit\Framework\TestCase
+class ListItemTest extends TestCase
 {
     /**
      * Test construct
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


113) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/LineTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Image
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Image
  * @runTestsInSeparateProcesses
  */
-class LineTest extends \PHPUnit\Framework\TestCase
+class LineTest extends TestCase
 {
     /**
      * Test setting style with normal value
@@ @@
         $object = new Line();

         $properties = array(
-            'connectorType' => \PhpOffice\PhpWord\Style\Line::CONNECTOR_TYPE_STRAIGHT,
-            'beginArrow'    => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_BLOCK,
-            'endArrow'      => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_OVAL,
-            'dash'          => \PhpOffice\PhpWord\Style\Line::DASH_STYLE_LONG_DASH_DOT_DOT,
+            'connectorType' => Line::CONNECTOR_TYPE_STRAIGHT,
+            'beginArrow'    => Line::ARROW_STYLE_BLOCK,
+            'endArrow'      => Line::ARROW_STYLE_OVAL,
+            'dash'          => Line::DASH_STYLE_LONG_DASH_DOT_DOT,
             'weight'        => 10,
             'color'         => 'red',
         );
@@ @@
         $object = new Line();

         $properties = array(
-            'connectorType' => \PhpOffice\PhpWord\Style\Line::CONNECTOR_TYPE_STRAIGHT,
-            'beginArrow'    => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_BLOCK,
-            'endArrow'      => \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_OVAL,
-            'dash'          => \PhpOffice\PhpWord\Style\Line::DASH_STYLE_LONG_DASH_DOT_DOT,
+            'connectorType' => Line::CONNECTOR_TYPE_STRAIGHT,
+            'beginArrow'    => Line::ARROW_STYLE_BLOCK,
+            'endArrow'      => Line::ARROW_STYLE_OVAL,
+            'dash'          => Line::DASH_STYLE_LONG_DASH_DOT_DOT,
             'weight'        => 10,
             'color'         => 'red',
         );
@@ @@
      */
     public function testSetGetConnectorType()
     {
-        $expected = \PhpOffice\PhpWord\Style\Line::CONNECTOR_TYPE_STRAIGHT;
+        $expected = Line::CONNECTOR_TYPE_STRAIGHT;
         $object = new Line();
         $object->setConnectorType($expected);
         $this->assertEquals($expected, $object->getConnectorType());
@@ @@
      */
     public function testSetGetDash()
     {
-        $expected = \PhpOffice\PhpWord\Style\Line::DASH_STYLE_LONG_DASH_DOT_DOT;
+        $expected = Line::DASH_STYLE_LONG_DASH_DOT_DOT;
         $object = new Line();
         $object->setDash($expected);
         $this->assertEquals($expected, $object->getDash());
@@ @@
      */
     public function testSetGetBeginArrow()
     {
-        $expected = \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_BLOCK;
+        $expected = Line::ARROW_STYLE_BLOCK;
         $object = new Line();
         $object->setBeginArrow($expected);
         $this->assertEquals($expected, $object->getBeginArrow());
@@ @@
      */
     public function testSetGetEndArrow()
     {
-        $expected = \PhpOffice\PhpWord\Style\Line::ARROW_STYLE_CLASSIC;
+        $expected = Line::ARROW_STYLE_CLASSIC;
         $object = new Line();
         $object->setEndArrow($expected);
         $this->assertEquals($expected, $object->getEndArrow());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


114) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/LineNumberingTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\LineNumbering
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\LineNumbering
  */
-class LineNumberingTest extends \PHPUnit\Framework\TestCase
+class LineNumberingTest extends TestCase
 {
     /**
      * Test get/set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


115) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/LanguageTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Language
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Language
  */
-class LanguageTest extends \PHPUnit\Framework\TestCase
+class LanguageTest extends TestCase
 {
     /**
      * Test get/set
@@ @@

     /**
      * Test throws exception if wrong locale is given
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testWrongLanguage()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $language = new Language();
         $language->setLatin('fr');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


116) modules/contrib/doc_serialization/vendor/zendframework/zend-escaper/src/Escaper.php:8

    ---------- begin diff ----------
@@ @@

 namespace Zend\Escaper;

+use Zend\Escaper\Exception\InvalidArgumentException;
+use Zend\Escaper\Exception\RuntimeException;
 /**
  * Context specific methods for use in secure output escaping
  */
@@ @@
         if ($encoding !== null) {
             $encoding = (string) $encoding;
             if ($encoding === '') {
-                throw new Exception\InvalidArgumentException(
+                throw new InvalidArgumentException(
                     get_class($this) . ' constructor parameter does not allow a blank value'
                 );
             }
@@ @@

             $encoding = strtolower($encoding);
             if (!in_array($encoding, $this->supportedEncodings)) {
-                throw new Exception\InvalidArgumentException(
+                throw new InvalidArgumentException(
                     'Value of \'' . $encoding . '\' passed to ' . get_class($this)
                     . ' constructor parameter is invalid. Provide an encoding supported by htmlspecialchars()'
                 );
@@ @@
         }

         if (!$this->isUtf8($result)) {
-            throw new Exception\RuntimeException(
+            throw new RuntimeException(
                 sprintf('String to be escaped was not valid UTF-8 or could not be converted: %s', $result)
             );
         }
@@ @@
         } elseif (function_exists('mb_convert_encoding')) {
             $result = mb_convert_encoding($string, $to, $from);
         } else {
-            throw new Exception\RuntimeException(
+            throw new RuntimeException(
                 get_class($this)
                 . ' requires either the iconv or mbstring extension to be installed'
                 . ' when escaping for non UTF-8 strings.'
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


117) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007Test.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\TestHelperDOCX;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class Word2007Test extends \PHPUnit\Framework\TestCase
+class Word2007Test extends TestCase
 {
     /**
      * Tear down after each test
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@

     /**
      * Use disk caching exception
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
      */
     public function testSetUseDiskCachingException()
     {
+        $this->expectException(Exception::class);
         $dir = implode(DIRECTORY_SEPARATOR, array(PHPWORD_TESTS_BASE_DIR, 'foo'));

         $object = new Word2007();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


118) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/StyleTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\Common\XMLWriter;

 /**
  * Test class for PhpOffice\PhpWord\Writer\Word2007\Style subnamespace
  */
-class StyleTest extends \PHPUnit\Framework\TestCase
+class StyleTest extends TestCase
 {
     /**
      * Test empty styles
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


119) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Style/ParagraphTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Style;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\TestHelperDOCX;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\Word2007\Style\Paragraph
  * @runTestsInSeparateProcesses
  */
-class ParagraphTest extends \PHPUnit\Framework\TestCase
+class ParagraphTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@
      */
     public function testParagraphNumbering()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $phpWord->addParagraphStyle('testStyle', array('indent' => '10'));
         $section = $phpWord->addSection();
         $section->addText('test', null, array('numStyle' => 'testStyle', 'numLevel' => '1'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


120) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Style/FontTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Style;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\PhpWord;
+use PhpOffice\PhpWord\Style\Language;
 use PhpOffice\PhpWord\TestHelperDOCX;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\Word2007\Style\Font
  * @runTestsInSeparateProcesses
  */
-class FontTest extends \PHPUnit\Framework\TestCase
+class FontTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@
      */
     public function testFontRTL()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         $textrun = $section->addTextRun();
         $textrun->addText('سلام این یک پاراگراف راست به چپ است', array('rtl' => true));
@@ @@
      */
     public function testFontWithLang()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
-        $section->addText('Ce texte-ci est en français.', array('lang' => \PhpOffice\PhpWord\Style\Language::FR_BE));
+        $section->addText('Ce texte-ci est en français.', array('lang' => Language::FR_BE));
         $doc = TestHelperDOCX::getDocument($phpWord, 'Word2007');

         $file = 'word/document.xml';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


121) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/PartTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\Writer\Word2007\Part\RelsPart;

 /**
@@ @@
  *
  * Covers miscellaneous tests
  */
-class PartTest extends \PHPUnit\Framework\TestCase
+class PartTest extends TestCase
 {
     /**
      * Test exception when no type or target assigned to a relation
      *
      * @covers \PhpOffice\PhpWord\Writer\Word2007\Part\Rels::writeRel
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
-     * @expectedExceptionMessage Invalid parameters passed.
      */
     public function testRelsWriteRelException()
     {
+        $this->expectException(Exception::class);
+        $this->expectExceptionMessage('Invalid parameters passed.');
         $object = new RelsPart();
         $object->setMedia(array(array('type' => '', 'target' => '')));
         $object->write();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


122) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/StylesTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\Style\Font;
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\Word2007\Part\Styles
  * @runTestsInSeparateProcesses
  */
-class StylesTest extends \PHPUnit\Framework\TestCase
+class StylesTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


123) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/SettingsTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\ComplexType\ProofState;
 use PhpOffice\PhpWord\ComplexType\TrackChangesView;
 use PhpOffice\PhpWord\PhpWord;
@@ @@
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\Word2007\Part\Settings
  */
-class SettingsTest extends \PHPUnit\Framework\TestCase
+class SettingsTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


124) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/NumberingTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\SimpleType\NumberFormat;
@@ @@
  * @runTestsInSeparateProcesses
  * @since 0.10.0
  */
-class NumberingTest extends \PHPUnit\Framework\TestCase
+class NumberingTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


125) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/HeaderTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Writer\Word2007;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class HeaderTest extends \PHPUnit\Framework\TestCase
+class HeaderTest extends TestCase
 {
     /**
      * Write header
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


126) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/IndentationTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Indentation
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Indentation
  */
-class IndentationTest extends \PHPUnit\Framework\TestCase
+class IndentationTest extends TestCase
 {
     /**
      * Test get/set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


127) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/ImageTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\SimpleType\Jc;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Image
  * @runTestsInSeparateProcesses
  */
-class ImageTest extends \PHPUnit\Framework\TestCase
+class ImageTest extends TestCase
 {
     /**
      * Test setting style with normal value
@@ @@
             'alignment'        => Jc::START,
             'marginTop'        => 240,
             'marginLeft'       => 240,
-            'positioning'      => \PhpOffice\PhpWord\Style\Image::POSITION_ABSOLUTE,
-            'posHorizontal'    => \PhpOffice\PhpWord\Style\Image::POSITION_HORIZONTAL_CENTER,
-            'posVertical'      => \PhpOffice\PhpWord\Style\Image::POSITION_VERTICAL_TOP,
-            'posHorizontalRel' => \PhpOffice\PhpWord\Style\Image::POSITION_RELATIVE_TO_COLUMN,
-            'posVerticalRel'   => \PhpOffice\PhpWord\Style\Image::POSITION_RELATIVE_TO_IMARGIN,
+            'positioning'      => Image::POSITION_ABSOLUTE,
+            'posHorizontal'    => Image::POSITION_HORIZONTAL_CENTER,
+            'posVertical'      => Image::POSITION_VERTICAL_TOP,
+            'posHorizontalRel' => Image::POSITION_RELATIVE_TO_COLUMN,
+            'posVerticalRel'   => Image::POSITION_RELATIVE_TO_IMARGIN,
         );
         foreach ($properties as $key => $value) {
             $get = "get{$key}";
@@ @@

     /**
      * Test setWrappingStyle exception
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testSetWrappingStyleException()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $object = new Image();
         $object->setWrappingStyle('foo');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


128) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/FontTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\InvalidStyleException;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\TestHelperDOCX;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class FontTest extends \PHPUnit\Framework\TestCase
+class FontTest extends TestCase
 {
     /**
      * Tear down after each test
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@

         $this->assertEquals('text', $object->getStyleType());
         $this->assertInstanceOf('PhpOffice\\PhpWord\\Style\\Paragraph', $object->getParagraphStyle());
-        $this->assertInternalType('array', $object->getStyleValues());
+        $this->assertIsArray($object->getStyleValues());
     }

     /**
@@ @@

     /**
      * Test line height exception by using nonnumeric value
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\InvalidStyleException
      */
     public function testLineHeightException()
     {
+        $this->expectException(InvalidStyleException::class);
         $object = new Font();
         $object->setLineHeight('a');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * SpecificAssertInternalTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


129) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/CellTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\Cell
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Style\Cell
  * @runTestsInSeparateProcesses
  */
-class CellTest extends \PHPUnit\Framework\TestCase
+class CellTest extends TestCase
 {
     /**
      * Test setting style with normal value
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


130) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Style/AbstractStyleTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Style;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Style\AbstractStyle
  *
  * @runTestsInSeparateProcesses
  */
-class AbstractStyleTest extends \PHPUnit\Framework\TestCase
+class AbstractStyleTest extends TestCase
 {
     /**
      * Test set style by array
@@ @@

     /**
      * Test setEnumVal exception
-     *
-     * @expectedException \InvalidArgumentException
      */
     public function testSetValEnumException()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $stub = $this->getMockForAbstractClass('\PhpOffice\PhpWord\Style\AbstractStyle');

         $this->assertEquals('b', self::callProtectedMethod($stub, 'setEnumVal', array('z', array('a', 'b'), 'b')));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


131) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/ZipArchiveTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Shared;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Settings;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Shared\ZipArchive
  * @runTestsInSeparateProcesses
  */
-class ZipArchiveTest extends \PHPUnit\Framework\TestCase
+class ZipArchiveTest extends TestCase
 {
 //     /**
 //      * Test close method exception: Working in local, not working in Travis
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


132) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/Microsoft/PasswordEncoderTest.php:23

    ---------- begin diff ----------
@@ @@
  * Test class for PhpOffice\PhpWord\Shared\Html
  * @coversDefaultClass \PhpOffice\PhpWord\Shared\Html
  */
-class PasswordEncoderTest extends \PHPUnit\Framework\TestCase
+class PasswordEncoderTest extends TestCase
 {
     /**
      * Test that a password can be hashed without specifying any additional parameters
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


133) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/HtmlTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Shared;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Element\Section;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\TestHelperDOCX;
@@ @@
  * Test class for PhpOffice\PhpWord\Shared\Html
  * @coversDefaultClass \PhpOffice\PhpWord\Shared\Html
  */
-class HtmlTest extends \PHPUnit\Framework\TestCase
+class HtmlTest extends TestCase
 {
     /**
      * Test unit conversion functions with various numbers
@@ @@
     public function testParseUnderline()
     {
         $html = '<u>test</u>';
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         Html::addHtml($section, $html);

@@ @@
     public function testParseTextDecoration()
     {
         $html = '<span style="text-decoration: underline;">test</span>';
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         Html::addHtml($section, $html);

@@ @@
      */
     public function testParseTextAlign()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         Html::addHtml($section, '<p style="text-align: left;">test</p>');
         Html::addHtml($section, '<p style="text-align: right;">test</p>');
@@ @@
      */
     public function testParseFontSize()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         Html::addHtml($section, '<span style="font-size: 10pt;">test</span>');
         Html::addHtml($section, '<span style="font-size: 10px;">test</span>');
@@ @@
      */
     public function testParseFontFamily()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         Html::addHtml($section, '<span style="font-family: Arial">test</span>');
         Html::addHtml($section, '<span style="font-family: Times New Roman;">test</span>');
@@ @@
      */
     public function testParseParagraphAndSpanStyle()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         Html::addHtml($section, '<p style="text-align: center;"><span style="text-decoration: underline;">test</span></p>');

@@ @@
      */
     public function testParseTable()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         $html = '<table style="width: 50%; border: 6px #0000FF solid;">
                 <thead>
@@ @@
      */
     public function testParseList()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         $html = '<ul>
                 <li>
@@ @@
      */
     public function testParseLineBreak()
     {
-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         $html = '<p>This is some text<br/>with a linebreak.</p>';
         Html::addHtml($section, $html);
@@ @@
     {
         $src = __DIR__ . '/../_files/images/firefox.png';

-        $phpWord = new \PhpOffice\PhpWord\PhpWord();
+        $phpWord = new PhpWord();
         $section = $phpWord->addSection();
         $html = '<p><img src="' . $src . '" width="150" height="200" style="float: right;"/><img src="' . $src . '" style="float: left;"/></p>';
         Html::addHtml($section, $html);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


134) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Shared/ConverterTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Shared;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Shared\Converter
  *
  * @coversDefaultClass \PhpOffice\PhpWord\Shared\Converter
  */
-class ConverterTest extends \PHPUnit\Framework\TestCase
+class ConverterTest extends TestCase
 {
     /**
      * Test unit conversion functions with various numbers
@@ @@
             $this->assertEquals(round($value / 9525), $result);

             $result = Converter::picaToPoint($value);
-            $this->assertEquals($value / 6 * 72, $result, '', 0.00001);
+            $this->assertEqualsWithDelta($value / 6 * 72, $result, 0.00001);

             $result = Converter::degreeToAngle($value);
             $this->assertEquals((int) round($value * 60000), $result);
@@ @@
         $this->assertEquals(7.5, Converter::cssToPoint('10px'));
         $this->assertEquals(720, Converter::cssToPoint('10in'));
         $this->assertEquals(120, Converter::cssToPoint('10pc'));
-        $this->assertEquals(28.346457, Converter::cssToPoint('10mm'), '', 0.000001);
-        $this->assertEquals(283.464567, Converter::cssToPoint('10cm'), '', 0.000001);
+        $this->assertEqualsWithDelta(28.346457, Converter::cssToPoint('10mm'), 0.000001);
+        $this->assertEqualsWithDelta(283.464567, Converter::cssToPoint('10cm'), 0.000001);
     }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualsParameterToSpecificMethodsTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


135) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/SettingsTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Settings
  *
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Settings
  * @runTestsInSeparateProcesses
  */
-class SettingsTest extends \PHPUnit\Framework\TestCase
+class SettingsTest extends TestCase
 {
     /**
      * Test set/get compatibity option
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


136) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/Word2007Test.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Reader;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\IOFactory;
 use PhpOffice\PhpWord\TestHelperDOCX;

@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Reader\Word2007
  * @runTestsInSeparateProcesses
  */
-class Word2007Test extends \PHPUnit\Framework\TestCase
+class Word2007Test extends TestCase
 {
     /**
      * Test canRead() method
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


137) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/RTFTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Reader;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\IOFactory;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Reader\RTF
  * @runTestsInSeparateProcesses
  */
-class RTFTest extends \PHPUnit\Framework\TestCase
+class RTFTest extends TestCase
 {
     /**
      * Test load
@@ @@

     /**
      * Test load exception
-     *
-     * @expectedException \Exception
-     * @expectedExceptionMessage Cannot read
      */
     public function testLoadException()
     {
+        $this->expectException(\Exception::class);
+        $this->expectExceptionMessage('Cannot read');
         $filename = __DIR__ . '/../_files/documents/foo.rtf';
         IOFactory::load($filename, 'RTF');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


138) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/ODTextTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Reader;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\IOFactory;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Reader\ODText
  * @runTestsInSeparateProcesses
  */
-class ODTextTest extends \PHPUnit\Framework\TestCase
+class ODTextTest extends TestCase
 {
     /**
      * Load
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


139) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/MsDocTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Reader;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\IOFactory;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Reader\MsDoc
  * @runTestsInSeparateProcesses
  */
-class MsDocTest extends \PHPUnit\Framework\TestCase
+class MsDocTest extends TestCase
 {
     /**
      * Test canRead() method
@@ @@

     /**
      * Test exception on not existing file
-     * @expectedException \Exception
      */
     public function testFailIfFileNotReadable()
     {
+        $this->expectException(\Exception::class);
         $filename = __DIR__ . '/../_files/documents/not_existing_reader.doc';
         IOFactory::load($filename, 'MsDoc');
     }
@@ @@

     /**
      * Test exception on non OLE document
-     * @expectedException \Exception
      */
     public function testFailIfFileNotOle()
     {
+        $this->expectException(\Exception::class);
         $filename = __DIR__ . '/../_files/documents/reader.odt';
         IOFactory::load($filename, 'MsDoc');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


140) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Reader/HTMLTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Reader;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\IOFactory;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Reader\HTML
  * @runTestsInSeparateProcesses
  */
-class HTMLTest extends \PHPUnit\Framework\TestCase
+class HTMLTest extends TestCase
 {
     /**
      * Test load
@@ @@

     /**
      * Test load exception
-     *
-     * @expectedException \Exception
-     * @expectedExceptionMessage Cannot read
      */
     public function testLoadException()
     {
+        $this->expectException(\Exception::class);
+        $this->expectExceptionMessage('Cannot read');
         $filename = __DIR__ . '/../_files/documents/foo.html';
         IOFactory::load($filename, 'HTML');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


141) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/PhpWordTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\Metadata\DocInfo;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class PhpWordTest extends \PHPUnit\Framework\TestCase
+class PhpWordTest extends TestCase
 {
     /**
      * Test object creation
@@ @@
      * Test load template exception
      *
      * @deprecated 0.12.0
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
      */
     public function testLoadTemplateException()
     {
+        $this->expectException(Exception::class);
         $templateFqfn = implode(
             DIRECTORY_SEPARATOR,
             array(PHPWORD_TESTS_BASE_DIR, 'PhpWord', 'Tests', '_files', 'templates', 'blanks.docx')
@@ @@

     /**
      * Test calling undefined method
-     *
-     * @expectedException \BadMethodCallException
-     * @expectedExceptionMessage is not defined
      */
     public function testCallUndefinedMethod()
     {
+        $this->expectException(\BadMethodCallException::class);
+        $this->expectExceptionMessage('is not defined');
         $phpWord = new PhpWord();
         $phpWord->undefinedMethod();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


142) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Metadata/SettingsTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Metadata;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\ComplexType\ProofState;
 use PhpOffice\PhpWord\SimpleType\Zoom;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class SettingsTest extends \PHPUnit\Framework\TestCase
+class SettingsTest extends TestCase
 {
     /**
      * EvenAndOddHeaders
@@ @@

     /**
      * Test setting an invalid salt
-     * @expectedException \InvalidArgumentException
      */
     public function testInvalidSalt()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $protection = new Protection();
         $protection->setSalt('123');
     }
@@ @@
         $this->assertEquals(ProofState::DIRTY, $oSettings->getProofState()->getSpelling());
     }

-    /**
-     * @expectedException \InvalidArgumentException
-     */
     public function testWrongProofStateGrammar()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $proofState = new ProofState();
         $proofState->setGrammar('wrong');
     }

-    /**
-     * @expectedException \InvalidArgumentException
-     */
     public function testWrongProofStateSpelling()
     {
+        $this->expectException(\InvalidArgumentException::class);
         $proofState = new ProofState();
         $proofState->setSpelling('wrong');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


143) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Metadata/DocInfoTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Metadata;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Metadata\DocInfo
  *
  * @runTestsInSeparateProcesses
  */
-class DocInfoTest extends \PHPUnit\Framework\TestCase
+class DocInfoTest extends TestCase
 {
     /**
      * Creator
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


144) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/MediaTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Element\Image;

 /**
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class MediaTest extends \PHPUnit\Framework\TestCase
+class MediaTest extends TestCase
 {
     /**
      * Get section media elements
@@ @@

     /**
      * Add image element exception
-     *
-     * @expectedException \Exception
-     * @expectedExceptionMessage Image object not assigned.
      */
     public function testAddElementImageException()
     {
+        $this->expectException(\Exception::class);
+        $this->expectExceptionMessage('Image object not assigned.');
         Media::addElement('section', 'image', __DIR__ . '/_files/images/mars.jpg');
     }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


145) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/IOFactoryTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 /**
  * Test class for PhpOffice\PhpWord\IOFactory
  *
  * @runTestsInSeparateProcesses
  */
-class IOFactoryTest extends \PHPUnit\Framework\TestCase
+class IOFactoryTest extends TestCase
 {
     /**
      * Create existing writer
@@ @@

     /**
      * Create non-existing writer
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
      */
     public function testNonexistentWriterCanNotBeCreated()
     {
+        $this->expectException(Exception::class);
         IOFactory::createWriter(new PhpWord(), 'Word2006');
     }

@@ @@

     /**
      * Create non-existing reader
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
      */
     public function testNonexistentReaderCanNotBeCreated()
     {
+        $this->expectException(Exception::class);
         IOFactory::createReader('Word2006');
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


146) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/FootnotesTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\TestHelperDOCX;
@@ @@
  * @coversNothing
  * @runTestsInSeparateProcesses
  */
-class FootnotesTest extends \PHPUnit\Framework\TestCase
+class FootnotesTest extends TestCase
 {
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


147) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/FooterTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Writer\Word2007;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\Word2007\Part\Footer
  * @runTestsInSeparateProcesses
  */
-class FooterTest extends \PHPUnit\Framework\TestCase
+class FooterTest extends TestCase
 {
     /**
      * Write footer
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


148) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/DocumentTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Style\Tab;
 use PhpOffice\PhpWord\ComplexType\FootnoteProperties;
 use PhpOffice\PhpWord\Metadata\DocInfo;
 use PhpOffice\PhpWord\PhpWord;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class DocumentTest extends \PHPUnit\Framework\TestCase
+class DocumentTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@
     {
         $objectSrc = __DIR__ . '/../../../_files/documents/sheet.xls';

-        $tabs = array(new \PhpOffice\PhpWord\Style\Tab('right', 9090));
+        $tabs = array(new Tab('right', 9090));
         $phpWord = new PhpWord();
         $phpWord->addParagraphStyle(
             'pStyle',
@@ @@
         // behind
         $element = $doc->getElement('/w:document/w:body/w:p[2]/w:r/w:pict/v:shape');
         $style = $element->getAttribute('style');
-        $this->assertRegExp('/z\-index:\-[0-9]*/', $style);
+        $this->assertMatchesRegularExpression('/z\-index:\-[0-9]*/', $style);

         // square
         $element = $doc->getElement('/w:document/w:body/w:p[4]/w:r/w:pict/v:shape/w10:wrap');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


149) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/CommentsTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Element\Comment;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\TestHelperDOCX;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class CommentsTest extends \PHPUnit\Framework\TestCase
+class CommentsTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@
      */
     public function testWriteComments()
     {
-        $comment = new \PhpOffice\PhpWord\Element\Comment('Authors name', new \DateTime(), 'my_initials');
+        $comment = new Comment('Authors name', new \DateTime(), 'my_initials');
         $comment->addText('Test');

         $phpWord = new PhpWord();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


150) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/Part/AbstractPartTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Writer\Word2007;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\Word2007\Part\AbstractWriterPart
  * @runTestsInSeparateProcesses
  */
-class AbstractPartTest extends \PHPUnit\Framework\TestCase
+class AbstractPartTest extends TestCase
 {
     /**
      * covers   ::setParentWriter
@@ @@

     /**
      * covers   ::getParentWriter
-     *
-     * @expectedException \Exception
-     * @expectedExceptionMessage No parent WriterInterface assigned.
      */
     public function testSetGetParentWriterNull()
     {
+        $this->expectException(\Exception::class);
+        $this->expectExceptionMessage('No parent WriterInterface assigned.');
         $object = $this->getMockForAbstractClass('PhpOffice\\PhpWord\\Writer\\Word2007\\Part\\AbstractPart');
         $object->getParentWriter();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


151) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/Word2007/ElementTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\Word2007;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Element\PageBreak;
+use PhpOffice\PhpWord\SimpleType\JcTable;
 use PhpOffice\Common\XMLWriter;
 use PhpOffice\PhpWord\Element\Comment;
 use PhpOffice\PhpWord\Element\Text;
@@ @@
 /**
  * Test class for PhpOffice\PhpWord\Writer\Word2007\Element subnamespace
  */
-class ElementTest extends \PHPUnit\Framework\TestCase
+class ElementTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
@@ @@
         foreach ($elements as $element) {
             $objectClass = 'PhpOffice\\PhpWord\\Writer\\Word2007\\Element\\' . $element;
             $xmlWriter = new XMLWriter();
-            $newElement = new \PhpOffice\PhpWord\Element\PageBreak();
+            $newElement = new PageBreak();
             $object = new $objectClass($xmlWriter, $newElement);
             $object->write();

@@ @@
         $phpWord = new PhpWord();
         $section = $phpWord->addSection();

-        $table = $section->addTable(array('alignment' => \PhpOffice\PhpWord\SimpleType\JcTable::CENTER));
+        $table = $section->addTable(array('alignment' => JcTable::CENTER));
         $table->addRow(900);
         $table->addCell(2000)->addText('Row 1');
         $table->addCell(2000)->addText('Row 2');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


152) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/RTFTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class RTFTest extends \PHPUnit\Framework\TestCase
+class RTFTest extends TestCase
 {
     /**
      * Construct
@@ @@

     /**
      * Construct with null
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
-     * @expectedExceptionMessage No PhpWord assigned.
      */
     public function testConstructWithNull()
     {
+        $this->expectException(Exception::class);
+        $this->expectExceptionMessage('No PhpWord assigned.');
         $object = new RTF();
         $object->getPhpWord();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


153) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/RTF/StyleTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\RTF;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Writer\RTF\Style\Border;

 /**
  * Test class for PhpOffice\PhpWord\Writer\RTF\Style subnamespace
  */
-class StyleTest extends \PHPUnit\Framework\TestCase
+class StyleTest extends TestCase
 {
     /**
      * Test empty styles
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


154) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/RTF/ElementTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\RTF;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Element\PageBreak;
 use PhpOffice\PhpWord\Writer\RTF;

 /**
  * Test class for PhpOffice\PhpWord\Writer\RTF\Element subnamespace
  */
-class ElementTest extends \PHPUnit\Framework\TestCase
+class ElementTest extends TestCase
 {
     /**
      * Test unmatched elements
@@ @@
         foreach ($elements as $element) {
             $objectClass = 'PhpOffice\\PhpWord\\Writer\\RTF\\Element\\' . $element;
             $parentWriter = new RTF();
-            $newElement = new \PhpOffice\PhpWord\Element\PageBreak();
+            $newElement = new PageBreak();
             $object = new $objectClass($parentWriter, $newElement);

             $this->assertEquals('', $object->write());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


155) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDFTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Settings;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class PDFTest extends \PHPUnit\Framework\TestCase
+class PDFTest extends TestCase
 {
     /**
      * Test normal construct
@@ @@

     /**
      * Test construct exception
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
-     * @expectedExceptionMessage PDF rendering library or library path has not been defined.
      */
     public function testConstructException()
     {
+        $this->expectException(Exception::class);
+        $this->expectExceptionMessage('PDF rendering library or library path has not been defined.');
         $writer = new PDF(new PhpWord());
         $writer->save();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


156) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDF/TCPDFTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\PDF;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Settings;
 use PhpOffice\PhpWord\Writer\PDF;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class TCPDFTest extends \PHPUnit\Framework\TestCase
+class TCPDFTest extends TestCase
 {
     /**
      * Test construct
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


157) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDF/MPDFTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\PDF;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Settings;
 use PhpOffice\PhpWord\Writer\PDF;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class MPDFTest extends \PHPUnit\Framework\TestCase
+class MPDFTest extends TestCase
 {
     /**
      * Test construct
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


158) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/PDF/DomPDFTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\PDF;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Settings;
 use PhpOffice\PhpWord\Writer\PDF;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class DomPDFTest extends \PHPUnit\Framework\TestCase
+class DomPDFTest extends TestCase
 {
     /**
      * Test construct
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


159) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODTextTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;

@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class ODTextTest extends \PHPUnit\Framework\TestCase
+class ODTextTest extends TestCase
 {
     /**
      * Construct
@@ @@

     /**
      * Construct with null
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
-     * @expectedExceptionMessage No PhpWord assigned.
      */
     public function testConstructWithNull()
     {
+        $this->expectException(Exception::class);
+        $this->expectExceptionMessage('No PhpWord assigned.');
         $object = new ODText();
         $object->getPhpWord();
     }
@@ @@

     /**
      * Use disk caching exception
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
      */
     public function testSetUseDiskCachingException()
     {
+        $this->expectException(Exception::class);
         $dir = implode(DIRECTORY_SEPARATOR, array(PHPWORD_TESTS_BASE_DIR, 'foo'));

         $object = new ODText();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


160) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/StyleTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\ODText;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\Common\XMLWriter;

 /**
  * Test class for PhpOffice\PhpWord\Writer\ODText\Style subnamespace
  */
-class StyleTest extends \PHPUnit\Framework\TestCase
+class StyleTest extends TestCase
 {
     /**
      * Test empty styles
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


161) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/Part/ContentTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\ODText\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\SimpleType\Jc;
 use PhpOffice\PhpWord\TestHelperDOCX;
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\ODText\Part\Content
  * @runTestsInSeparateProcesses
  */
-class ContentTest extends \PHPUnit\Framework\TestCase
+class ContentTest extends TestCase
 {
     /**
      * Executed before each method of the class
      */
-    public function tearDown()
+    public function tearDown(): void
     {
         TestHelperDOCX::clear();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


162) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/Part/AbstractPartTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\ODText\Part;

+use PHPUnit\Framework\TestCase;
 use PhpOffice\PhpWord\Writer\ODText;

 /**
@@ @@
  * @coversDefaultClass \PhpOffice\PhpWord\Writer\ODText\Part\AbstractPart
  * @runTestsInSeparateProcesses
  */
-class AbstractPartTest extends \PHPUnit\Framework\TestCase
+class AbstractPartTest extends TestCase
 {
     /**
      * covers   ::setParentWriter
@@ @@

     /**
      * covers   ::getParentWriter
-     *
-     * @expectedException \Exception
-     * @expectedExceptionMessage No parent WriterInterface assigned.
      */
     public function testSetGetParentWriterNull()
     {
+        $this->expectException(\Exception::class);
+        $this->expectExceptionMessage('No parent WriterInterface assigned.');
         $object = $this->getMockForAbstractClass('PhpOffice\\PhpWord\\Writer\\ODText\\Part\\AbstractPart');
         $object->getParentWriter();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


163) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/ODText/ElementTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\ODText;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Element\PageBreak;
 use PhpOffice\Common\XMLWriter;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\TestHelperDOCX;
@@ @@
 /**
  * Test class for PhpOffice\PhpWord\Writer\ODText\Element subnamespace
  */
-class ElementTest extends \PHPUnit\Framework\TestCase
+class ElementTest extends TestCase
 {
     /**
      * Test unmatched elements
@@ @@
         foreach ($elements as $element) {
             $objectClass = 'PhpOffice\\PhpWord\\Writer\\ODText\\Element\\' . $element;
             $xmlWriter = new XMLWriter();
-            $newElement = new \PhpOffice\PhpWord\Element\PageBreak();
+            $newElement = new PageBreak();
             $object = new $objectClass($xmlWriter, $newElement);
             $object->write();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


164) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTMLTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer;

+use PHPUnit\Framework\TestCase;
+use PhpOffice\PhpWord\Exception\Exception;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Settings;
 use PhpOffice\PhpWord\SimpleType\Jc;
@@ @@
  *
  * @runTestsInSeparateProcesses
  */
-class HTMLTest extends \PHPUnit\Framework\TestCase
+class HTMLTest extends TestCase
 {
     /**
      * Construct
@@ @@

     /**
      * Construct with null
-     *
-     * @expectedException \PhpOffice\PhpWord\Exception\Exception
-     * @expectedExceptionMessage No PhpWord assigned.
      */
     public function testConstructWithNull()
     {
+        $this->expectException(Exception::class);
+        $this->expectExceptionMessage('No PhpWord assigned.');
         $object = new HTML();
         $object->getPhpWord();
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


165) modules/contrib/doc_serialization/vendor/phpoffice/phpword/tests/PhpWord/Writer/HTML/StyleTest.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Writer\HTML;

+use PHPUnit\Framework\TestCase;
 /**
  * Test class for PhpOffice\PhpWord\Writer\HTML\Style subnamespace
  */
-class StyleTest extends \PHPUnit\Framework\TestCase
+class StyleTest extends TestCase
 {
     /**
      * Test empty styles
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


166) modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Reader/MsDoc.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Reader;

+use PhpOffice\PhpWord\Style\Font;
 use PhpOffice\Common\Drawing;
 use PhpOffice\PhpWord\PhpWord;
 use PhpOffice\PhpWord\Shared\OLERead;
@@ @@
                         case 0x3E:
                             switch (dechex($operand)) {
                                 case 0x00:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_NONE;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_NONE;
                                     break;
                                 case 0x01:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_SINGLE;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_SINGLE;
                                     break;
                                 case 0x02:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_WORDS;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_WORDS;
                                     break;
                                 case 0x03:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DOUBLE;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DOUBLE;
                                     break;
                                 case 0x04:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DOTTED;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DOTTED;
                                     break;
                                 case 0x06:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_HEAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_HEAVY;
                                     break;
                                 case 0x07:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DASH;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DASH;
                                     break;
                                 case 0x09:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DOTDASH;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DOTDASH;
                                     break;
                                 case 0x0A:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DOTDOTDASH;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DOTDOTDASH;
                                     break;
                                 case 0x0B:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_WAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_WAVY;
                                     break;
                                 case 0x14:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DOTTEDHEAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DOTTEDHEAVY;
                                     break;
                                 case 0x17:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DASHHEAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DASHHEAVY;
                                     break;
                                 case 0x19:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DOTDASHHEAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DOTDASHHEAVY;
                                     break;
                                 case 0x1A:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DOTDOTDASHHEAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DOTDOTDASHHEAVY;
                                     break;
                                 case 0x1B:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_WAVYHEAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_WAVYHEAVY;
                                     break;
                                 case 0x27:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DASHLONG;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DASHLONG;
                                     break;
                                 case 0x2B:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_WAVYDOUBLE;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_WAVYDOUBLE;
                                     break;
                                 case 0x37:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_DASHLONGHEAVY;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_DASHLONGHEAVY;
                                     break;
                                 default:
-                                    $oStylePrl->styleFont['underline'] = Style\Font::UNDERLINE_NONE;
+                                    $oStylePrl->styleFont['underline'] = Font::UNDERLINE_NONE;
                                     break;
                             }
                             break;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


167) modules/contrib/doc_serialization/vendor/phpoffice/phpword/src/PhpWord/Shared/Html.php:16

    ---------- begin diff ----------
@@ @@

 namespace PhpOffice\PhpWord\Shared;

+use PhpOffice\PhpWord\Style\Image;
 use PhpOffice\PhpWord\Element\AbstractContainer;
 use PhpOffice\PhpWord\Element\Cell;
 use PhpOffice\PhpWord\Element\Row;
@@ @@
                             switch ($k) {
                                 case 'float':
                                     if (trim($v) == 'right') {
-                                        $style['hPos'] = \PhpOffice\PhpWord\Style\Image::POS_RIGHT;
-                                        $style['hPosRelTo'] = \PhpOffice\PhpWord\Style\Image::POS_RELTO_PAGE;
-                                        $style['pos'] = \PhpOffice\PhpWord\Style\Image::POS_RELATIVE;
-                                        $style['wrap'] = \PhpOffice\PhpWord\Style\Image::WRAP_TIGHT;
+                                        $style['hPos'] = Image::POS_RIGHT;
+                                        $style['hPosRelTo'] = Image::POS_RELTO_PAGE;
+                                        $style['pos'] = Image::POS_RELATIVE;
+                                        $style['wrap'] = Image::WRAP_TIGHT;
                                         $style['overlap'] = true;
                                     }
                                     if (trim($v) == 'left') {
-                                        $style['hPos'] = \PhpOffice\PhpWord\Style\Image::POS_LEFT;
-                                        $style['hPosRelTo'] = \PhpOffice\PhpWord\Style\Image::POS_RELTO_PAGE;
-                                        $style['pos'] = \PhpOffice\PhpWord\Style\Image::POS_RELATIVE;
-                                        $style['wrap'] = \PhpOffice\PhpWord\Style\Image::WRAP_TIGHT;
+                                        $style['hPos'] = Image::POS_LEFT;
+                                        $style['hPosRelTo'] = Image::POS_RELTO_PAGE;
+                                        $style['pos'] = Image::POS_RELATIVE;
+                                        $style['wrap'] = Image::WRAP_TIGHT;
                                         $style['overlap'] = true;
                                     }
                                     break;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


168) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/FontTest.php:22

    ---------- begin diff ----------
@@ @@
  *
  * @coversDefaultClass PhpOffice\Common\Font
  */
-class FontTest extends \PHPUnit_Framework_TestCase
+class FontTest extends \PHPUnit\Framework\TestCase
 {
     /**
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


169) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/FileTest.php:22

    ---------- begin diff ----------
@@ @@
  *
  * @coversDefaultClass PhpOffice\Common\File
  */
-class FileTest extends \PHPUnit_Framework_TestCase
+class FileTest extends \PHPUnit\Framework\TestCase
 {
     /**
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


170) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/DrawingTest.php:22

    ---------- begin diff ----------
@@ @@
  *
  * @coversDefaultClass PhpOffice\Common\IOFactory
  */
-class DrawingTest extends \PHPUnit_Framework_TestCase
+class DrawingTest extends \PHPUnit\Framework\TestCase
 {
     /**
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


171) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/AutoloaderTest.php:20

    ---------- begin diff ----------
@@ @@
 /**
  * Test class for Autoloader
  */
-class AutoloaderTest extends \PHPUnit_Framework_TestCase
+class AutoloaderTest extends \PHPUnit\Framework\TestCase
 {
     /**
      * Register
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


172) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/Adapter/Zip/ZipArchiveAdapterTest.php:4

    ---------- begin diff ----------
@@ @@
 use PhpOffice\Common\Adapter\Zip\ZipArchiveAdapter;
 use PhpOffice\Common\Tests\TestHelperZip;

-class ZipArchiveAdapterTest extends \PHPUnit_Framework_TestCase
+class ZipArchiveAdapterTest extends \PHPUnit\Framework\TestCase
 {
     protected $zipTest;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


173) modules/contrib/doc_serialization/vendor/phpoffice/common/tests/Common/Tests/Adapter/Zip/PclZipAdapterTest.php:4

    ---------- begin diff ----------
@@ @@
 use PhpOffice\Common\Adapter\Zip\PclZipAdapter;
 use PhpOffice\Common\Tests\TestHelperZip;

-class PclZipAdapterTest extends \PHPUnit_Framework_TestCase
+class PclZipAdapterTest extends \PHPUnit\Framework\TestCase
 {
     protected $zipTest;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 173 files have been changed by Rector                                     

