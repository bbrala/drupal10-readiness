modules/contrib/unpublished_nodes_redirect/src/EventSubscriber/UnpublishedNodesRedirectOn403Subscriber.php
modules/contrib/unpublished_nodes_redirect/src/Form/UnpublishedNodesRedirectSettingsForm.php
modules/contrib/unpublished_nodes_redirect/src/Utils/UnpublishedNodesRedirectUtils.php
modules/contrib/unpublished_nodes_redirect/tests/src/Unit/UnpublishedNodesRedirectTest.php
modules/contrib/unpublished_nodes_redirect/unpublished_nodes_redirect.api.php

2 files with changes
====================

1) modules/contrib/unpublished_nodes_redirect/tests/src/Unit/UnpublishedNodesRedirectTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    *
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->utils = new Utils();
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/unpublished_nodes_redirect/src/EventSubscriber/UnpublishedNodesRedirectOn403Subscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\unpublished_nodes_redirect\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\EventSubscriber\HttpExceptionSubscriberBase;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\node\Entity\Node;
 use Drupal\unpublished_nodes_redirect\Utils\UnpublishedNodesRedirectUtils as Utils;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;

 /**
  * Unpublished Nodes Redirect On 403 Subscriber class.
@@ @@
   /**
    * Fires redirects whenever a 403 meets the criteria for unpublished nodes.
    *
-   * @param GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *
    * @see Utils::checksBeforeRedirect for criteria relating to if a node
    * unpublished node should be redirected.
-   *
    */
-  public function on403(GetResponseForExceptionEvent $event) {
+  public function on403(ExceptionEvent $event) {
     if ($event->getRequest()->attributes->get('node') != NULL) {
       $nid = \Drupal::routeMatch()->getRawParameter('node');
       $node = Node::load($nid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

