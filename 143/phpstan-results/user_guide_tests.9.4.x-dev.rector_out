modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/DBTableRenameFilter.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/DrupalScreenshotTest.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/FileExcludeEmptyDirFilter.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/ScreenshotTestBase.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestBase.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestCa.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestEn.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestFa.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestFr.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestHu.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestHy.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestJa.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestRu.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestUk.php
modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestZhHans.php
modules/contrib/user_guide_tests/user_guide_tests.module

1 file with changes
===================

1) modules/contrib/user_guide_tests/tests/src/FunctionalJavascript/UserGuideDemoTestBase.php:238

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->rootUser);

     // Figure out where the assets directory is.
-    $this->assetsDirectory = drupal_get_path('module', 'user_guide_tests') . '/assets/';
+    $this->assetsDirectory = \Drupal::service('extension.list.module')->getPath('user_guide_tests') . '/assets/';
     $this->assertTrue(is_readable(DRUPAL_ROOT . '/' . $this->assetsDirectory . 'farm.jpg'), 'Farm asset file exists and is readable');

     // Create subdirectories for backups and screenshots, and verify temp
@@ @@
     $this->ensureDirectoryWriteable($this->tempFilesDirectory, 'temp');

     // Run all the desired chapters.
-    $backup_read_dir = \Drupal::service('file_system')->realpath(drupal_get_path('module', 'user_guide_tests') . '/backups/' . $this->demoInput['first_langcode']);
+    $backup_read_dir = \Drupal::service('file_system')->realpath(\Drupal::service('extension.list.module')->getPath('user_guide_tests') . '/backups/' . $this->demoInput['first_langcode']);
     $previous = '';
     foreach ($this->runList as $method => $op) {
       if (($op == 'restore' || $op == 'restore_backup') && $previous) {
@@ @@
       // Turn on the language and locale modules.
       $this->flushAll();
       $this->drupalGet('admin/modules');
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
           'modules[language][enable]' => TRUE,
           'modules[locale][enable]' => TRUE,
           'modules[config_translation][enable]' => TRUE,
@@ @@

       // Add the main language and fully import translations.
       $this->fixTranslationSettings();
-      $this->drupalPostForm('admin/config/regional/language/add', [
+      $this->drupalGet('admin/config/regional/language/add');
+      $this->submitForm([
           'predefined_langcode' => $this->demoInput['first_langcode'],
         ], 'Add language');
       $this->importTranslations($this->demoInput['first_langcode']);
+      $this->drupalGet('admin/config/regional/language');

       // Set the new language to default. After this, the UI should be
       // translated.
-      $this->drupalPostForm('admin/config/regional/language', [
+      $this->submitForm([
           'site_default_language' => $this->demoInput['first_langcode'],
         ], 'Save configuration');
       $this->flushAll();
+      $this->drupalGet('admin/config/regional/language/delete/en');

       // Delete English and flush caches.
-      $this->drupalPostForm('admin/config/regional/language/delete/en', [], $this->callT('Delete'));
+      $this->submitForm([], $this->callT('Delete'));
       $this->flushAll();

       $this->verifyTranslations();
@@ @@
     $this->assertText($this->callT('Slogan'));
     $this->assertText($this->callT('Email address'));
     $this->assertText($this->callT('Default front page'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'site_name' => $this->demoInput['site_name'],
         'site_slogan' => $this->demoInput['site_slogan'],
         'site_mail' => $this->demoInput['site_mail'],
@@ @@
     $this->assertText($this->callT('First day of week'));
     $this->assertText($this->callT('Time zones'));
     $this->assertText($this->callT('Default time zone'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'site_default_country' => $this->demoInput['site_default_country'],
       'date_default_timezone' => $this->demoInput['date_default_timezone'],
       'configurable_timezones' => FALSE,
@@ @@

     // Top part of Core section of admin/modules, with Activity Tracker checked.
     $this->makeScreenShot('config-install-check-modules.png', 'jQuery(\'#edit-modules-tracker-enable\').attr(\'checked\', 1);' . $this->hideArea('#toolbar-administration, header, .region-pre-content, .region-highlighted, .help, .action-links, .region-breadcrumb, #edit-filters, #edit-actions') . $this->hideArea('#edit-modules-core-experimental, #edit-modules-field-types, #edit-modules-multilingual, #edit-modules-other, #edit-modules-administration, #edit-modules-testing, #edit-modules-web-services, #edit-modules-migration') . $this->hideArea('#edit-modules-core table tbody tr:gt(4)'));
+    $this->drupalGet('admin/modules');

-    $this->drupalPostForm('admin/modules', [
+    $this->submitForm([
         'modules[tracker][enable]' => TRUE,
       ], $this->callT('Install'));

@@ @@
     $this->waitForInteraction('css', '#edit-uninstall-tracker');
     $this->waitForInteraction('css', '#edit-uninstall-history');
     $this->waitForInteraction('css', '#edit-uninstall-search');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'uninstall[tracker]' => TRUE,
         'uninstall[search]' => TRUE,
         'uninstall[history]' => TRUE,
@@ @@
     // Uninstall confirmation screen, after checking Activity Tracker, History,
     // and Search modules from admin/modules/uninstall.
     $this->makeScreenShot('config-uninstall_confirmUninstall.png', $this->hideArea('#toolbar-administration') . $this->setWidth('.block-system-main-block') . $this->setWidth('header', 640) . $this->removeScrollbars());
-    $this->drupalPostForm(NULL, [], $this->callT('Uninstall'));
+    $this->submitForm([], $this->callT('Uninstall'));
     $this->flushAll();

     // Topic: config-user - Configuring user account settings.
@@ @@
     $this->assertText($this->callT('Welcome (new user created by administrator)'));

     $this->drupalGet('admin/config/people/accounts');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'user_register' => 'admin_only',
       ], $this->callT('Save configuration'));
     // Registration and cancellation section of admin/config/people/accounts.
@@ @@
     // Logo upload section of admin/appearance/settings/bartik.
     $this->makeScreenShot('config-theme_logo_upload.png', 'window.scroll(0,6000); ' . $this->addBorder('#edit-logo-upload') . $this->showOnly('#edit-logo') . $this->setWidth('#edit-logo'), "jQuery('*').show();");

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'scheme' => '',
         'palette[top]' => '#7db84a',
         'palette[bottom]' => '#2a3524',
@@ @@
     $this->assertText($this->callT('URL alias'));
     $this->assertText($this->callT('Published'));
     $this->waitForInteraction('css', '#edit-submit', 'focus');
-    $this->assertRaw((string) $this->callT('Save'));
+    $this->assertSession()->responseContains((string) $this->callT('Save'));
     $this->waitForInteraction('css', '#edit-preview', 'focus');
-    $this->assertRaw((string) $this->callT('Preview'));
+    $this->assertSession()->responseContains((string) $this->callT('Preview'));

     // Fill in the body text. Also open up the path edit area.
     $this->waitForInteraction('css', '#edit-path-0 summary');
@@ @@
     $this->makeScreenShot('content-create-create-basic-page.png', 'jQuery(\'#edit-title-0-value\').val("' . $this->demoInput['home_title'] . '"); jQuery(\'#edit-path-0-alias\').val(\'' . $this->demoInput['home_path'] . '\');' . $this->hideArea('#toolbar-administration') . $this->removeScrollbars(), "jQuery('body').css('overflow', 'scroll');");

     // Submit the rest of the form.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'title[0][value]' => $this->demoInput['home_title'],
         'path[0][alias]' => $this->demoInput['home_path'],
       ], $this->callT('Save'));
@@ @@
     $this->waitForInteraction('css', '#edit-submit', 'focus');
     $this->waitForInteraction('css', '#edit-path-0 summary');
     $this->fillInBody($this->demoInput['about_body']);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'title[0][value]' => $this->demoInput['about_title'],
         'path[0][alias]' => $this->demoInput['about_path'],
       ], $this->callT('Save'));
@@ @@
     // Some of these filters are mentioned on other topics.
     $this->assertText($this->callT('Language'));
     $this->assertText($this->callT('Published status'));
-    $this->assertRaw((string) $this->callT('Filter'));
+    $this->assertSession()->responseContains((string) $this->callT('Filter'));

     // Content list on admin/content, with filters above.
     $this->makeScreenShot('content-edit-admin-content.png', $this->showOnly('.block-system-main-block') . $this->hideArea('.secondary-action') . $this->setBodyColor());
@@ @@

     // Revision area of the content node edit page.
     $this->makeScreenShot('content-edit-revision.png', $this->showOnly('#edit-meta') . 'jQuery(\'#edit-revision\').attr(\'checked\', 1); jQuery(\'#edit-revision-log-0-value\').append("' . $this->demoInput['home_revision_log_message'] . '");');
+    $this->drupalGet('node/1/edit');
     // Submit the revision.
-    $this->drupalPostForm('node/1/edit', [
+    $this->submitForm([
         'revision_log[0][value]' => $this->demoInput['home_revision_log_message'],
       ], $this->callT('Save'));

@@ @@
     $this->drupalGet('admin/config/system/site-information');
     $this->assertText($this->callT('Front page'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'site_frontpage' => $this->demoInput['home_path'],
       ], $this->callT('Save configuration'));
     // Fix the prefix showing the site URL to say example.com.
@@ @@
     // English.
     if ($this->demoInput['first_langcode'] == 'en') {
       $this->drupalGet('admin/structure/menu');
-      $this->assertRaw((string) $this->callT('Main navigation'));
-      $this->assertRaw((string) $this->callT('Administration'));
-      $this->assertRaw((string) $this->callT('User account menu'));
-      $this->assertRaw((string) $this->callT('Footer'));
-      $this->assertRaw((string) $this->callT('Tools'));
+      $this->assertSession()->responseContains((string) $this->callT('Main navigation'));
+      $this->assertSession()->responseContains((string) $this->callT('Administration'));
+      $this->assertSession()->responseContains((string) $this->callT('User account menu'));
+      $this->assertSession()->responseContains((string) $this->callT('Footer'));
+      $this->assertSession()->responseContains((string) $this->callT('Tools'));
     }

     // Topic: menu-link-from-content: Adding a page to the navigation.
@@ @@
     $this->assertText($this->callT('Parent link'));
     $this->assertText($this->callT('Weight'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'menu[enabled]' => TRUE,
         'menu[title]' => $this->demoInput['about_title'],
         'menu[description]' => $this->demoInput['about_description'],
@@ @@
     if ($this->demoInput['first_langcode'] == 'en') {
       // Menu names are in English, so do not translate this text. See also
       // https://www.drupal.org/project/user_guide/issues/2959852
-      $this->assertRaw((string) $this->callT('Edit menu %label', TRUE, ['%label' => 'Main navigation']));
+      $this->assertSession()->responseContains((string) $this->callT('Edit menu %label', TRUE, ['%label' => 'Main navigation']));
     }
-    $this->assertRaw((string) $this->callT('Save'));
+    $this->assertSession()->responseContains((string) $this->callT('Save'));
     $this->assertSession()->linkExists($this->callT('Home'));
     $this->assertSession()->linkExists($this->demoInput['about_title']);

@@ @@
     // the change in the test, go back to the about page and edit the weight
     // there.
     $this->drupalGet('node/2/edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'menu[weight]' => 10,
       ], $this->callT('Save'));
     $this->drupalGet('<front>');
@@ @@
     $this->drupalGet('admin/structure/types');

     $this->clickLink($this->callT('Add content type'));
-    $this->assertRaw((string) $this->callT('Add content type'));
+    $this->assertSession()->responseContains((string) $this->callT('Add content type'));
     $this->assertText($this->callT('Name'));
     $this->assertText($this->callT('Description'));
     $this->assertText($this->callT('Submission form settings'));
@@ @@
     // Open machine name section and submit form.
     $this->openMachineNameEdit();
     $this->waitForInteraction('css', '#edit-type', 'none');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name' => $this->demoInput['vendor_type_name'],
         'type' => $vendor,
         'description' => $this->demoInput['vendor_type_description'],
         'title_label' => $this->demoInput['vendor_type_title_label'],
       ], $this->callT('Save and manage fields'));
-    $this->assertRaw((string) $this->callT('Manage fields'));
+    $this->assertSession()->responseContains((string) $this->callT('Manage fields'));

     // Manage fields page after adding Vendor content type.
     $this->makeScreenShot('structure-content-type-add-confirmation.png', $this->hideArea('#toolbar-administration') . $this->setWidth('header, .page-content', 800));
@@ @@
     $this->clickLink($this->callT('Submission form settings'));
     $this->waitForInteraction('css', '#edit-title-label', 'focus');
     $this->waitForInteraction('css', '#edit-save-continue', 'focus');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name' => $this->demoInput['recipe_type_name'],
         'type' => $recipe,
         'description' => $this->demoInput['recipe_type_description'],
@@ @@
     $this->assertText($this->callT('This action cannot be undone.'));
     // This test is problematic in non-English, due to entities or something.
     if ($this->demoInput['first_langcode'] == 'en') {
-      $this->assertRaw((string) $this->callT('Are you sure you want to delete the @entity-type %label?', TRUE, ['@entity-type' => $this->callT('content type'), '%label' => $this->callT('Article')]));
+      $this->assertSession()->responseContains((string) $this->callT('Are you sure you want to delete the @entity-type %label?', TRUE, ['@entity-type' => $this->callT('content type'), '%label' => $this->callT('Article')]));
     }

     // Confirmation page for deleting Article content type.
     $this->makeScreenShot('structure-content-type-delete-confirmation.png', $this->hideArea('#toolbar-administration') . $this->setWidth('header, .page-content', 800) . $this->removeScrollbars());
-    $this->drupalPostForm(NULL, [], $this->callT('Delete'));
+    $this->submitForm([], $this->callT('Delete'));
     if ($this->demoInput['first_langcode'] == 'en') {
-      $this->assertRaw((string) $this->callT('The @entity-type %label has been deleted.', TRUE, ['@entity-type' => $this->callT('content type'), '%label' => $this->callT('Article')]));
+      $this->assertSession()->responseContains((string) $this->callT('The @entity-type %label has been deleted.', TRUE, ['@entity-type' => $this->callT('content type'), '%label' => $this->callT('Article')]));
     }

     // Confirmation message after deleting Article content type.
@@ @@
     // Navigation to the Manage fields page has been tested in previous topics.
     $this->drupalGet('admin/structure/types/manage/' . $vendor . '/fields');
     $this->clickLink($this->callT('Add field'));
-    $this->assertRaw((string) $this->callT('Add field'));
+    $this->assertSession()->responseContains((string) $this->callT('Add field'));
     $this->assertText($this->callT('Add a new field'));

     // Fill in the form in the screenshot: choose Link for field type and
@@ @@
     $this->drupalGet('admin/structure/types/manage/' . $vendor . '/fields/add-field');
     $this->setUpAddNewField('link');
     $this->assertText($this->callT('Label'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'new_storage_type' => 'link',
         'label' => $this->demoInput['vendor_field_url_label'],
         'field_name' => $vendor_url,
       ], $this->callT('Save and continue'));

-    $this->assertRaw($this->demoInput['vendor_field_url_label']);
+    $this->assertSession()->responseContains($this->demoInput['vendor_field_url_label']);
     $this->assertText($this->callT('Allowed number of values'));
-    $this->drupalPostForm(NULL, [], $this->callT('Save field settings'));
+    $this->submitForm([], $this->callT('Save field settings'));

-    $this->assertRaw($this->demoInput['vendor_field_url_label']);
+    $this->assertSession()->responseContains($this->demoInput['vendor_field_url_label']);
     $this->assertText($this->callT('Label'));
     $this->assertText($this->callT('Help text'));
     $this->assertText($this->callT('Required field'));
     $this->assertText($this->callT('Allowed link type'));
     $this->assertText($this->callT('Allow link text'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'settings[link_type]' => 16,
         'settings[title]' => 0,
       ], $this->callT('Save settings'));
@@ @@
     // Add Main Image field to Vendor content type.
     $this->drupalGet('admin/structure/types/manage/' . $vendor . '/fields/add-field');
     $this->setUpAddNewField('image');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'new_storage_type' => 'image',
         'label' => $this->demoInput['vendor_field_image_label'],
         'field_name' => $main_image,
       ], $this->callT('Save and continue'));
-    $this->drupalPostForm(NULL, [], $this->callT('Save field settings'));
+    $this->submitForm([], $this->callT('Save field settings'));

-    $this->assertRaw($this->demoInput['vendor_field_image_label']);
+    $this->assertSession()->responseContains($this->demoInput['vendor_field_image_label']);
     $this->assertText($this->callT('Label'));
     $this->assertText($this->callT('Help text'));
     $this->assertText($this->callT('Required field'));
@@ @@
     $this->assertText($this->callT('File directory'));
     $this->assertText($this->callT('Minimum image resolution'));
     $this->assertText($this->callT('Maximum upload size'));
-    $this->assertRaw((string) $this->callT('Enable <em>Alt</em> field'));
-    $this->assertRaw((string) $this->callT('<em>Alt</em> field required'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('Enable <em>Alt</em> field'));
+    $this->assertSession()->responseContains((string) $this->callT('<em>Alt</em> field required'));
+    $this->submitForm([
         'required' => 1,
         'settings[file_directory]' => $this->demoInput['vendor_field_image_directory'],
         'settings[min_resolution][x]' => 600,
@@ @@
     // Add the main image field to Recipe. No screenshots.
     $this->drupalGet('admin/structure/types/manage/' . $recipe . '/fields/add-field');
     $this->setUpAddExistingField('field_' . $main_image);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'existing_storage_name' => 'field_' . $main_image,
         'existing_storage_label' => $this->demoInput['vendor_field_image_label'],
       ], $this->callT('Save and continue'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'required' => 1,
         'settings[file_directory]' => $this->demoInput['recipe_field_image_directory'],
         'settings[min_resolution][x]' => 600,
@@ @@
     $this->getSession()->getPage()->attachFileToField('files[field_' . $main_image . '_0]', DRUPAL_ROOT . '/' . $this->assetsDirectory . 'farm.jpg');

     // Submit once.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'title[0][value]' => $this->demoInput['vendor_1_title'],
         'path[0][alias]' => $this->demoInput['vendor_1_path'],
         'field_' . $vendor_url . '[0][uri]' => $this->demoInput['vendor_1_url'],
@@ @@
       ], $this->callT('Save'));
     // This will cause an error about missing alt text. Submit again with the
     // alt text defined.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'field_' . $main_image . '[0][alt]' => $this->demoInput['vendor_1_title'],
       ], $this->callT('Save'));

@@ @@
     $this->fillInBody($this->demoInput['vendor_2_body']);
     $this->fillInSummary($this->demoInput['vendor_2_summary']);
     $this->getSession()->getPage()->attachFileToField('files[field_' . $main_image . '_0]', DRUPAL_ROOT . '/' . $this->assetsDirectory . 'honey_bee.jpg');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'title[0][value]' => $this->demoInput['vendor_2_title'],
         'path[0][alias]' => $this->demoInput['vendor_2_path'],
         'field_' . $vendor_url . '[0][uri]' => $this->demoInput['vendor_2_url'],
       ], $this->callT('Save'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'field_' . $main_image . '[0][alt]' => $this->demoInput['vendor_2_title'],
       ], $this->callT('Save'));

@@ @@
     // Add Ingredients vocabulary from admin/structure/taxonomy/add.
     $this->makeScreenShot('structure-taxonomy-setup-add-vocabulary.png', 'jQuery(\'#edit-name\').val("' . $this->demoInput['recipe_field_ingredients_label'] . '");' . $this->hideArea('#toolbar-administration') . $this->setWidth('header, .page-content'));
     $this->openMachineNameEdit();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name' => $this->demoInput['recipe_field_ingredients_label'],
         'vid' => $ingredients,
       ], $this->callT('Save'));
-    $this->assertRaw($this->demoInput['recipe_field_ingredients_label']);
+    $this->assertSession()->responseContains($this->demoInput['recipe_field_ingredients_label']);

     // Ingredients vocabulary page
     // (admin/structure/taxonomy/manage/ingredients/overview).
@@ @@
     $this->makeScreenShot('structure-taxonomy-setup-add-term.png', 'jQuery(\'#edit-name-0-value\').val("' . $this->demoInput['recipe_field_ingredients_term_1'] . '");' . $this->hideArea('#toolbar-administration') . $this->removeScrollbars() . $this->setWidth('header, .layout-container', 800));

     // Add the rest of the terms, with no screenshots.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name[0][value]' => $this->demoInput['recipe_field_ingredients_term_1'],
       ], $this->callT('Save'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name[0][value]' => $this->demoInput['recipe_field_ingredients_term_2'],
       ], $this->callT('Save'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name[0][value]' => $this->demoInput['recipe_field_ingredients_term_3'],
       ], $this->callT('Save'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name[0][value]' => $this->demoInput['recipe_field_ingredients_term_4'],
       ], $this->callT('Save'));

@@ @@
     // Reset the form and submit.
     $this->drupalGet('admin/structure/types/manage/' . $recipe . '/fields/add-field');
     $this->setUpAddNewField('field_ui:entity_reference:taxonomy_term');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'new_storage_type' => 'field_ui:entity_reference:taxonomy_term',
         'label' => $this->demoInput['recipe_field_ingredients_label'],
         'field_name' => $ingredients,
@@ @@

     $this->assertText($this->callT('Type of item to reference'));
     $this->assertText($this->callT('Allowed number of values'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'cardinality' => '-1',
       ], $this->callT('Save field settings'));

@@ @@
     // The checkboxes for vocabulary on this page are a bit weird in the test.
     // So check them outside of the form submit.
     $this->waitForInteraction('css', '.form-item-settings-handler-settings-target-bundles-' . $ingredients_hyphens . ' input');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'description' => $this->demoInput['recipe_field_ingredients_help'],
         'settings[handler_settings][auto_create]' => 1,
       ], $this->callT('Save settings'));
@@ @@
     // Reset the form and submit.
     $this->drupalGet('admin/structure/types/manage/' . $recipe . '/fields/add-field');
     $this->setUpAddNewField('field_ui:entity_reference:node');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'new_storage_type' => 'field_ui:entity_reference:node',
         'label' => $this->demoInput['recipe_field_submitted_label'],
         'field_name' => $submitted_by,
@@ @@
     // Field storage settings page for Submitted by field.
     $this->makeScreenshot('structure-adding-reference-set-field-basic.png', $this->hideArea('#toolbar-administration') . $this->setWidth('header, .layout-container'));

-    $this->drupalPostForm(NULL, [], $this->callT('Save field settings'));
+    $this->submitForm([], $this->callT('Save field settings'));

     $this->assertText($this->callT('Label'));
     $this->assertText($this->callT('Help text'));
@@ @@
     // for sorting is visible.
     $this->waitForInteraction('css', '.form-item-settings-handler-settings-sort-field select', 'none');
     $this->assertText($this->callT('Sort by'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'description' => $this->demoInput['recipe_field_submitted_help'],
         'required' => 1,
       ], $this->callT('Save settings'));
@@ @@
       ->selectOption('title');
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertText($this->callT('Sort direction'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       ], $this->callT('Save settings'));

     // Topic: structure-form-editing - Changing Content Entry Forms.
@@ @@

     // Set the Ingredients field to use tag-style autocomplete.
     $this->drupalGet('admin/structure/types/manage/' . $recipe . '/form-display');
-    $this->assertRaw((string) $this->callT('Autocomplete (Tags style)'));
+    $this->assertSession()->responseContains((string) $this->callT('Autocomplete (Tags style)'));
     // When you set a widget to a new type, some Ajax things happen, so make
     // this selection outside of the drupalPostForm() call, wait for the Ajax
     // to complete, and then submit the form. Tests were intermittently failing
@@ @@
       ->find('css', '#edit-fields-field-' . $ingredients_hyphens . '-type')
       ->selectOption('entity_reference_autocomplete_tags');
     $this->assertSession()->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [], $this->callT('Save'));
+    $this->submitForm([], $this->callT('Save'));

     $this->drupalGet('node/add/' . $recipe);
     // Create recipe page (node/add/recipe).
@@ @@
     $this->getSession()->getPage()->attachFileToField('files[field_' . $main_image . '_0]', DRUPAL_ROOT . '/' . $this->assetsDirectory . 'salad.jpg');
     // Submit once.
     $this->scrollWindowUp();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'title[0][value]' => $this->demoInput['recipe_1_title'],
         'path[0][alias]' => $this->demoInput['recipe_1_path'],
         'field_' . $ingredients . '[target_id]' => $this->demoInput['recipe_1_ingredients'],
@@ @@
       ], $this->callT('Save'));
     // This will cause an error about missing alt text. Submit again with the
     // alt text defined.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'field_' . $main_image . '[0][alt]' => $this->demoInput['recipe_1_title'],
       ], $this->callT('Save'));

@@ @@
     $this->waitForInteraction('css', '#edit-path-0 summary');
     $this->fillInBody($this->demoInput['recipe_2_body']);
     $this->getSession()->getPage()->attachFileToField('files[field_' . $main_image . '_0]', DRUPAL_ROOT . '/' . $this->assetsDirectory . 'carrots.jpg');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'title[0][value]' => $this->demoInput['recipe_2_title'],
         'path[0][alias]' => $this->demoInput['recipe_2_path'],
         'field_' . $ingredients . '[target_id]' => $this->demoInput['recipe_2_ingredients'],
         'field_' . $submitted_by . '[0][target_id]' => $this->demoInput['vendor_1_title'],
       ], $this->callT('Save'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'field_' . $main_image . '[0][alt]' => $this->demoInput['recipe_2_title'],
       ], $this->callT('Save'));

@@ @@
     // Set the labels for main image and vendor URL to hidden.
     $this->drupalGet('admin/structure/types/manage/' . $vendor . '/display');
     $this->assertText($this->callT('Label'));
-    $this->assertRaw((string) $this->callT('Hidden'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('Hidden'));
+    $this->submitForm([
         'fields[field_' . $main_image . '][label]' => 'hidden',
         'fields[field_' . $vendor_url . '][label]' => 'hidden',
       ], $this->callT('Save'));
@@ @@
     // entities etc.
     if ($this->demoInput['first_langcode'] == 'en') {
       $this->assertText($this->callT('Trim link text length'));
-      $this->assertRaw((string) $this->callT('Open link in new window'));
-      $this->assertRaw((string) $this->callT('Update'));
+      $this->assertSession()->responseContains((string) $this->callT('Open link in new window'));
+      $this->assertSession()->responseContains((string) $this->callT('Update'));
     }

     // Vendor URL settings form, with trim length cleared, and open link in
@@ @@
     $this->assertSession()->assertWaitOnAjaxRequest();

     // Set the trim length to zero and set links to open in a new window.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'fields[field_' . $vendor_url . '][settings_edit_form][settings][trim_length]' => '',
         'fields[field_' . $vendor_url . '][settings_edit_form][settings][target]' => '_blank',
       ], $this->callT('Save'));
@@ @@
     $this->drupalGet('admin/structure/types/manage/' . $vendor . '/display');
     $this->waitForInteraction('css', '.tabledrag-toggle-weight');
     $this->waitForInteraction('css', '#edit-fields-field-' . $main_image_hyphens . '-weight', 'focus');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'fields[field_' . $main_image . '][weight]' => 10,
         'fields[body][weight]' => 20,
         'fields[field_' . $vendor_url . '][weight]' => 30,
@@ @@
     // Show weights should still be toggled. Just in case, use jQuery.
     $this->getSession()->getDriver()->executeScript("jQuery('.tabledrag-hide').show();");
     $this->waitForInteraction('css', '#edit-fields-field-' . $main_image_hyphens . '-weight', 'focus');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'fields[field_' . $main_image . '][weight]' => 10,
         'fields[field_' . $main_image . '][label]' => 'hidden',
         'fields[body][weight]' => 20,
@@ @@

     $this->clickLink($this->callT('Add image style'));
     $this->openMachineNameEdit('#edit-label');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'label' => $this->demoInput['image_style_label'],
         'name' => $this->demoInput['image_style_machine_name'],
       ], $this->callT('Create new style'));
@@ @@


     $this->assertText($this->callT('Effect'));
-    $this->assertRaw((string) $this->callT('Scale and crop'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('Scale and crop'));
+    $this->submitForm([
         'new' => 'image_scale_and_crop',
       ], $this->callT('Add'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'data[width]' => 300,
         'data[height]' => 200,
       ], $this->callT('Add effect'));
@@ @@
     // entities etc.
     if ($this->demoInput['first_langcode'] == 'en') {
       $this->assertText($this->callT('Image style'));
-      $this->assertRaw((string) $this->callT('Link image to'));
-      $this->assertRaw((string) $this->callT('Nothing'));
-      $this->assertRaw((string) $this->callT('Update'));
+      $this->assertSession()->responseContains((string) $this->callT('Link image to'));
+      $this->assertSession()->responseContains((string) $this->callT('Nothing'));
+      $this->assertSession()->responseContains((string) $this->callT('Update'));
     }

     // Main image settings area of Vendor content type.
@@ @@
     $this->waitForInteraction('css', '#edit-fields-field-' . $main_image_hyphens . '-settings-edit');
     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'fields[field_' . $main_image . '][settings_edit_form][settings][image_style]' => $this->demoInput['image_style_machine_name'],
       ], $this->callT('Save'));

@@ @@
     $this->drupalGet('admin/structure/types/manage/' . $recipe . '/display');
     $this->waitForInteraction('css', '#edit-fields-field-' . $main_image_hyphens . '-settings-edit');
     $this->assertSession()->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'fields[field_' . $main_image . '][settings_edit_form][settings][image_style]' => $this->demoInput['image_style_machine_name'],
       ], $this->callT('Save'));

@@ @@
     // but has a text field behind the scenes. So, save the configuration and
     // then come back for the screenshot, after showing the text form.
     $this->getSession()->getDriver()->executeScript("jQuery('.form-item-editor-settings-toolbar-button-groups').show();");
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'editor[settings][toolbar][button_groups]' => '[[{"name":"' . $this->callT('Formatting') . '","items":["Bold","Italic"]},{"name":"' . $this->callT('Links') . '","items":["DrupalLink","DrupalUnlink"]},{"name":"' . $this->callT('Lists') . '","items":["BulletedList","NumberedList"]},{"name":"' . $this->callT('Media') . '","items":["Blockquote","DrupalImage"]},{"name":"' . $this->callT('Tools') . '","items":["Source", "HorizontalRule"]}]]',
         'filters[filter_html][settings][allowed_html]' => '<hr> <a hreflang href> <em> <strong> <cite> <blockquote cite> <code> <ul type> <ol type start> <li> <dl> <dt> <dd> <h2 id> <h3 id> <h4 id> <h5 id> <h6 id> <p> <br> <span> <img width height data-caption data-align data-entity-uuid data-entity-type alt src> <hr>',
       ], $this->callT('Save configuration'));
@@ @@
     // Add role page (admin/people/roles/add).
     $this->makeScreenShot('user-new-role-add-role.png', 'jQuery(\'#edit-label\').val("' . $this->demoInput['vendor_type_name'] . '"); jQuery(\'.form-item-label .field-suffix\').show(); jQuery(\'#edit-label\').trigger(\'formUpdated.machineName\'); jQuery(\'.machine-name-value\').html("' . $vendor . '"); ' . $this->setWidth('.layout-container, header') . $this->hideArea('#toolbar-administration'));
     $this->openMachineNameEdit('#edit-label');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'label' => $this->demoInput['vendor_type_name'],
         'id' => $vendor,
       ], $this->callT('Save'));
     if ($this->demoInput['first_langcode'] == 'en') {
-      $this->assertRaw((string) $this->callT('Role %label has been added.', TRUE, ['%label' => $this->demoInput['vendor_type_name']]));
+      $this->assertSession()->responseContains((string) $this->callT('Role %label has been added.', TRUE, ['%label' => $this->demoInput['vendor_type_name']]));
     }

     // Confirmation message after adding new role.
@@ @@
     $password = $this->randomString();
     // Fill in the file field.
     $this->getSession()->getPage()->attachFileToField('files[user_picture_0]', DRUPAL_ROOT . '/' . $this->assetsDirectory . 'honey_bee.jpg');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'mail' => $this->demoInput['vendor_2_email'],
         'name' => $this->demoInput['vendor_2_title'],
         'pass[pass1]' => $password,
@@ @@
       // Looking for the whole string requires that we know the URL. So,
       // just look for the two parts separately. This will only work in
       // English.
-      $this->assertRaw((string) $this->callT('A welcome message with further instructions has been emailed to the new user'));
-      $this->assertRaw($this->demoInput['vendor_2_title']);
+      $this->assertSession()->responseContains((string) $this->callT('A welcome message with further instructions has been emailed to the new user'));
+      $this->assertSession()->responseContains($this->demoInput['vendor_2_title']);
     }

     // Confirmation message after adding new user.
@@ @@
     $this->drupalGet('admin/people/create');
     $password = $this->randomString();
     $this->getSession()->getPage()->attachFileToField('files[user_picture_0]', DRUPAL_ROOT . '/' . $this->assetsDirectory . 'farm.jpg');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'mail' => $this->demoInput['vendor_1_email'],
         'name' => $this->demoInput['vendor_1_title'],
         'pass[pass1]' => $password,
@@ @@
     $this->assertSession()->linkExists($this->callT('Edit permissions'));
     $this->assertText($this->demoInput['vendor_type_name']);
     $this->drupalGet('admin/people/permissions/' . $vendor);
-    $this->assertRaw((string) $this->callT('Edit role'));
+    $this->assertSession()->responseContains((string) $this->callT('Edit role'));
     $this->assertText($this->callT('Post comments'));
     $this->assertText($this->callT('Administer blocks'));
     $this->assertText('Contact');
@@ @@
       $this->assertText('Use the');
       $this->assertText('Restricted HTML');
       $this->assertText('text format');
-      $this->assertRaw((string) $this->callT('%type_name: Create new content', TRUE, ['%type_name' => $this->demoInput['recipe_type_name']]));
-      $this->assertRaw((string) $this->callT('%type_name: Edit own content', TRUE, ['%type_name' => $this->demoInput['recipe_type_name']]));
-      $this->assertRaw((string) $this->callT('%type_name: Delete own content', TRUE, ['%type_name' => $this->demoInput['recipe_type_name']]));
-      $this->assertRaw((string) $this->callT('%type_name: Edit own content', TRUE, ['%type_name' => $this->demoInput['vendor_type_name']]));
+      $this->assertSession()->responseContains((string) $this->callT('%type_name: Create new content', TRUE, ['%type_name' => $this->demoInput['recipe_type_name']]));
+      $this->assertSession()->responseContains((string) $this->callT('%type_name: Edit own content', TRUE, ['%type_name' => $this->demoInput['recipe_type_name']]));
+      $this->assertSession()->responseContains((string) $this->callT('%type_name: Delete own content', TRUE, ['%type_name' => $this->demoInput['recipe_type_name']]));
+      $this->assertSession()->responseContains((string) $this->callT('%type_name: Edit own content', TRUE, ['%type_name' => $this->demoInput['vendor_type_name']]));
     }

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         $vendor . '[access user contact forms]' => 1,
         $vendor . '[use text format restricted_html]' => 1,
         $vendor . '[create ' . $recipe . ' content]' => 1,
@@ @@
     $this->drupalGet('admin/people');
     $this->assertSession()->linkExists($this->callT('Edit'));
     $this->assertText($this->callT('Name or email contains'));
-    $this->assertRaw((string) $this->callT('Filter'));
+    $this->assertSession()->responseContains((string) $this->callT('Filter'));

     // People page (admin/people), with user 1's Edit button outlined.
     $this->makeScreenShot('user-roles_people-list.png', $this->addBorder('a[href*="user/1/edit"]') . $this->hideArea('#toolbar-administration') . $this->removeScrollbars());
@@ @@

     // Reload the page and submit form.
     $this->drupalGet('user/1/edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'roles[administrator]' => 1,
       ], $this->callT('Save'));
     $this->assertText($this->callT('The changes have been saved.'));
@@ @@

     // Update two accounts using bulk edit.
     $this->drupalGet('admin/people');
-    $this->assertRaw((string) $this->callT('Action'));
+    $this->assertSession()->responseContains((string) $this->callT('Action'));
     if ($this->demoInput['first_langcode'] == 'en') {
-      $this->assertRaw((string) $this->callT('Add the @label role to the selected user(s)', TRUE, ['@label' => $this->demoInput['vendor_type_name']]));
+      $this->assertSession()->responseContains((string) $this->callT('Add the @label role to the selected user(s)', TRUE, ['@label' => $this->demoInput['vendor_type_name']]));
     }

     // Bulk editing form on People page (admin/people).
@@ @@
     $this->makeScreenShot('user-roles_bulk.png', $this->hideArea('#toolbar-administration, header, .region-breadcrumb, #block-seven-local-actions, .view-filters') . 'jQuery(\'#edit-user-bulk-form-0, #edit-user-bulk-form-1\').attr(\'checked\', 1).parents(\'tr\').addClass(\'selected\');' . 'jQuery(\'#edit-action\').val(\'user_add_role_action.' . $vendor . '\');' . $this->removeScrollbars() . $this->setBodyColor());

     $this->drupalGet('admin/people');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'user_bulk_form[0]' => 1,
         'user_bulk_form[1]' => 1,
         'action' => 'user_add_role_action.' . $vendor,
       ], $this->callT('Apply to selected items'));
     if ($this->demoInput['first_langcode'] == 'en') {
-      $this->assertRaw((string) $this->callT('%action was applied to @count items.', TRUE, ['@count' => 2, '%action' => $this->callT('Add the @label role to the selected user(s)', TRUE, ['@label' => $this->demoInput['vendor_type_name']])]));
+      $this->assertSession()->responseContains((string) $this->callT('%action was applied to @count items.', TRUE, ['@count' => 2, '%action' => $this->callT('Add the @label role to the selected user(s)', TRUE, ['@label' => $this->demoInput['vendor_type_name']])]));
     }

     // Confirmation message after bulk user update.
@@ @@
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertText($this->callT('Authored by'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'uid[0][target_id]' => $this->demoInput['vendor_1_title'],
       ], $this->callT('Save'));
     if ($this->demoInput['first_langcode'] == 'en') {
@@ @@
     $this->drupalGet('node/4/edit');
     $this->waitForInteraction('css', '#edit-author summary');
     $this->assertSession()->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'uid[0][target_id]' => $this->demoInput['vendor_2_title'],
       ], $this->callT('Save'));
   }
@@ @@

     // Some UI tests from the block-concept topic.
     $this->drupalGet('admin/structure/block');
-    $this->assertRaw((string) $this->callT('Block layout'));
+    $this->assertSession()->responseContains((string) $this->callT('Block layout'));
     $this->drupalGet('admin/structure/block/library/bartik');
     // We should test the "Who's online" block title, but due to the ' being
     // sometimes an entity, this is problematic. So only test in English and
@@ @@
     $this->drupalGet('admin/structure/block');
     $this->clickLink($this->callT('Custom block library'));
     $this->clickLink($this->callT('Add custom block'));
-    $this->assertRaw((string) $this->callT('Add custom block'));
+    $this->assertSession()->responseContains((string) $this->callT('Add custom block'));
     $this->assertText($this->callT('Block description'));
-    $this->assertRaw((string) $this->callT('Body'));
+    $this->assertSession()->responseContains((string) $this->callT('Body'));

     // Now navigate directly to the page, without the destination set.
     // Without the destination set, saving a custom block takes you to the
@@ @@
     // Block add page (block/add).
     $this->makeScreenShot('block-create-custom-add-custom-block.png', 'jQuery(\'#edit-info-0-value\').val("' . $this->demoInput['hours_block_description'] . '");' . $this->hideArea('#toolbar-administration') . $this->setWidth('.content-header, .layout-container', 800) . $this->removeScrollbars());

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'info[0][value]' => $this->demoInput['hours_block_description'],
       ], $this->callT('Save'));

     // Topic: block-place - Placing a Block in a Region.
     // Configuration page for placing a custom block in the sidebar.
-    $this->assertRaw((string) $this->callT('Configure block'));
+    $this->assertSession()->responseContains((string) $this->callT('Configure block'));
     $this->assertText($this->callT('Title'));
     $this->assertText($this->callT('Display title'));
     $this->assertText($this->callT('Region'));
@@ @@

     // Place the block in Bartik, sidebar second.
     $this->waitForInteraction('css', '#edit-settings-label-machine-name-suffix button');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'settings[label]' => $this->demoInput['hours_block_title'],
         'id' => $this->demoInput['hours_block_title_machine_name'],
         'region' => 'sidebar_second',
@@ @@

     // Verify some UI text on several block pages, without checking navigation.
     $this->drupalGet('admin/structure/block');
-    $this->assertRaw('Bartik');
+    $this->assertSession()->responseContains('Bartik');
     // Block and menu names are shown in English for built-in blocks. See
     // https://www.drupal.org/project/user_guide/issues/2959852
     $this->assertText('Powered by Drupal');
@@ @@
     $this->assertText($this->callT('Sidebar first'));
     $this->assertText($this->callT('Sidebar second'));
     $this->assertText($this->callT('Operations'));
-    $this->assertRaw((string) $this->callT('Disable'));
-    $this->assertRaw((string) $this->callT('Remove'));
+    $this->assertSession()->responseContains((string) $this->callT('Disable'));
+    $this->assertSession()->responseContains((string) $this->callT('Remove'));
     // The Place block link on this page has some other hidden text in it. So,
     // only test in English.
     if ($this->demoInput['first_langcode'] == 'en') {
@@ @@
     }

     $this->drupalGet('admin/structure/block/library/bartik');
-    $this->assertRaw((string) $this->callT('Place block'));
-    $this->assertRaw((string) $this->callT('User login'));
+    $this->assertSession()->responseContains((string) $this->callT('Place block'));
+    $this->assertSession()->responseContains((string) $this->callT('User login'));

     $this->drupalGet('admin/structure/block/block-content');
-    $this->assertRaw((string) $this->callT('Edit'));
+    $this->assertSession()->responseContains((string) $this->callT('Edit'));
   }

   /**
@@ @@
     $this->clickLink($this->callT('Add view'));
     $this->assertText($this->callT('View name'));
     $this->assertText($this->callT('Show'));
-    $this->assertRaw((string) $this->callT('Content'));
+    $this->assertSession()->responseContains((string) $this->callT('Content'));
     $this->assertText($this->callT('of type'));
     $this->assertText($this->callT('sorted by'));
     $this->assertText($this->callT('Create a page'));
@@ @@
     $this->assertText($this->callT('Page title'));
     $this->assertText($this->callT('Path'));
     $this->assertText($this->callT('Display format'));
-    $this->assertRaw((string) $this->callT('Table'));
+    $this->assertSession()->responseContains((string) $this->callT('Table'));
     $this->assertText($this->callT('Items to display'));
     $this->assertText($this->callT('Use a pager'));
     $this->assertText($this->callT('Create a menu link'));
@@ @@
     $this->waitForInteraction('css', '#edit-page-link');
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertText($this->callT('Menu'));
-    $this->assertRaw((string) $this->callT('Main navigation'));
+    $this->assertSession()->responseContains((string) $this->callT('Main navigation'));
     $this->assertText($this->callT('Link text'));

     // Add view wizard.
@@ @@
     $this->waitForInteraction('css', '#edit-page-link');
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->openMachineNameEdit('#edit-label');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'label' => $this->demoInput['vendors_view_title'],
         'id' => $vendors_view,
         'page[create]' => TRUE,
@@ @@
     // test.
     // Add the main image field.
     $this->clickLinkContainingUrl('add-handler');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name[node__field_' . $main_image . '.field_' . $main_image . ']' => 'node__field_' . $main_image . '.field_' . $main_image,
       ], $this->callT('Add and configure @types', TRUE, ['@types' => $this->callT('fields')]));
     $this->assertText($this->callT('Create a label'));
     $this->assertText($this->callT('Image style'));
     $this->assertText($this->callT('Link image to'));
-    $this->assertRaw((string) $this->callT('Content'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('Content'));
+    $this->submitForm([
         'options[custom_label]' => FALSE,
         'options[settings][image_style]' => 'medium',
         'options[settings][image_link]' => 'content',
@@ @@

     // Add the body field.
     $this->clickLinkContainingUrl('add-handler');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name[node__body.body]' => 'node__body.body',
       ], $this->callT('Add and configure @types', TRUE, ['@types' => $this->callT('fields')]));
     $this->assertText($this->callT('Create a label'));
     $this->assertText($this->callT('Formatter'));
-    $this->assertRaw((string) $this->callT('Summary or trimmed'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('Summary or trimmed'));
+    $this->submitForm([
         'options[custom_label]' => FALSE,
         'options[type]' => 'text_summary_or_trimmed',
       ], $this->callT('Apply'));
@@ @@
     // Fix the configuration for the Title field: remove the label.
     $this->clickLinkContainingUrl('field/title');
     $this->assertText($this->callT('Create a label'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'options[custom_label]' => FALSE,
       ], $this->callT('Apply'));

     // Fix the configuration for the Body field: change the trim length.
     $this->clickLinkContainingUrl('field/body');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'options[settings][trim_length]' => 120,
       ], $this->callT('Apply'));

@@ @@
     $this->clickLinkContainingUrl('rearrange');
     // Show weight fields.
     $this->getSession()->getDriver()->executeScript("jQuery('.tabledrag-hide').show();");
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'fields[title][weight]' => 3,
         'fields[body][weight]' => 4,
       ], $this->callT('Apply'));
@@ @@

     // Fix the menu weight.
     $this->clickLinkContainingUrl('menu');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'menu[weight]' => 20,
       ], $this->callT('Apply'));
     if ($this->demoInput['first_langcode'] == 'en') {
-      $this->assertRaw((string) $this->callT('Update preview'));
+      $this->assertSession()->responseContains((string) $this->callT('Update preview'));
     }

     // Save the view.
-    $this->drupalPostForm(NULL, [], $this->callT('Save'));
+    $this->submitForm([], $this->callT('Save'));
     $this->assertSession()->assertWaitOnAjaxRequest();

     // Completed vendors view administration page.
@@ @@
     // Topic: views-duplicate - Duplicating a View.
     // Duplicate the Vendors view.
     $this->drupalGet('admin/structure/views');
-    $this->assertRaw((string) $this->callT('Duplicate'));
+    $this->assertSession()->responseContains((string) $this->callT('Duplicate'));

     // Views page (admin/structure/views), with operations dropdown
     // for Vendor view open.
@@ @@
     $this->drupalGet('admin/structure/views');
     $this->clickLinkContainingUrl('views/view/' . $vendors_view . '/duplicate');
     $this->openMachineNameEdit('#edit-label');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'label' => $this->demoInput['recipes_view_title'],
         'id' => $recipes_view,
       ], $this->callT('Duplicate'));
@@ @@
     // Page title.
     $this->assertText($this->callT('Title'));
     $this->clickLinkContainingUrl('page_1/title');
-    $this->assertRaw((string) $this->callT('The title of this view'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('The title of this view'));
+    $this->submitForm([
         'title' => $this->demoInput['recipes_view_title'],
       ], $this->callT('Apply'));

@@ @@
     $this->clickLinkContainingUrl('page_1/title');
     // View title configuration screen.
     $this->makeScreenShot('views-duplicate_title.png', $this->hideArea('#toolbar-administration, .content-header, .breadcrumb') . $this->setWidth('layout-container'));
-    $this->drupalPostForm(NULL, [], $this->callT('Apply'));
+    $this->submitForm([], $this->callT('Apply'));

     // Grid style.
     $this->assertText($this->callT('Format'));
     $this->clickLinkContainingUrl('page_1/style');
-    $this->assertRaw((string) $this->callT('How should this view be styled'));
-    $this->assertRaw((string) $this->callT('Grid'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('How should this view be styled'));
+    $this->assertSession()->responseContains((string) $this->callT('Grid'));
+    $this->submitForm([
         'style[type]' => 'grid',
       ], $this->callT('Apply'));
-    $this->assertRaw((string) $this->callT('Style options'));
-    $this->drupalPostForm(NULL, [], $this->callT('Apply'));
+    $this->assertSession()->responseContains((string) $this->callT('Style options'));
+    $this->submitForm([], $this->callT('Apply'));

     // Remove body field.
     $this->clickLinkContainingUrl('page_1/field/body');
-    $this->drupalPostForm(NULL, [], $this->callT('Remove'));
+    $this->submitForm([], $this->callT('Remove'));

     // Filter on Recipe content type.
-    $this->assertRaw((string) $this->callT('Filter criteria'));
+    $this->assertSession()->responseContains((string) $this->callT('Filter criteria'));
     $this->clickLinkContainingUrl('page_1/filter/type');
-    $this->assertRaw((string) $this->callT('filter criterion'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('filter criterion'));
+    $this->submitForm([
         'options[value][' . $vendor . ']' => FALSE,
         'options[value][' . $recipe . ']' => $recipe,
       ], $this->callT('Apply'));
@@ @@

     // Add exposed filter for Ingredients.
     $this->clickLinkContainingUrl('add-handler/' . $recipes_view . '/page_1/filter');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name[node__field_' . $ingredients . '.field_' . $ingredients . '_target_id]' => 'node__field_' . $ingredients . '.field_' . $ingredients . '_target_id',
       ], $this->callT('Add and configure @types', TRUE, ['@types' => $this->callT('filter criteria')]));
-    $this->drupalPostForm(NULL, [], $this->callT('Apply'));
+    $this->submitForm([], $this->callT('Apply'));
     $this->assertText($this->callT('Expose this filter to visitors, to allow them to change it'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'options[expose_button][checkbox][checkbox]' => 1,
       ], $this->callT('Expose filter'));
     $this->assertText($this->callT('Required'));
     $this->assertText($this->callT('Label'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'options[expose][label]' => $this->demoInput['recipes_view_ingredients_label'],
       ], $this->callT('Apply'));
     $this->clickLinkContainingUrl('/page_1/filter/field_');
     // Ingredients field exposed filter configuration.
     $this->makeScreenShot('views-duplicate_expose.png', $this->hideArea('#toolbar-administration, .content-header, .breadcrumb, .exposed-description, #edit-options-expose-button-button, .grouped-description, #edit-options-group-button-button, #edit-options-operator--wrapper, .form-item-options-value, .form-item-options-expose-use-operator, .form-item-options-expose-operator-id, .form-item-options-expose-multiple, .form-item-options-expose-remember, #edit-options-expose-remember-roles--wrapper, .form-item-options-expose-identifier, .form-item-options-error-message, .form-item-options-reduce-duplicates, .form-item-options-expose-operator-list, #edit-options-admin-label') . $this->setWidth('layout-container', 800) . $this->removeScrollbars());
-    $this->drupalPostForm(NULL, [], $this->callT('Apply'));
+    $this->submitForm([], $this->callT('Apply'));

     // Path and menu link title.
     $this->assertText($this->callT('Page settings'));
     $this->clickLinkContainingUrl('page_1/path');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'path' => $this->demoInput['recipes_view_path'],
       ], $this->callT('Apply'));
     $this->clickLinkContainingUrl('page_1/menu');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'menu[title]' => $this->demoInput['recipes_view_title'],
       ], $this->callT('Apply'));

     // Use Ajax.
-    $this->assertRaw((string) $this->callT('Advanced'));
+    $this->assertSession()->responseContains((string) $this->callT('Advanced'));
     // Open up the Advanced section.
     $this->waitForInteraction('css', '.third summary');
     $this->assertSession()->assertWaitOnAjaxRequest();
@@ @@
     $this->assertText($this->callT('Other'));
     $this->assertText($this->callT('Use AJAX'));
     $this->clickLinkContainingUrl('page_1/use_ajax');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'use_ajax' => 1,
       ], $this->callT('Apply'));

     // Save the view and view the output.
-    $this->drupalPostForm(NULL, [], $this->callT('Save'));
+    $this->submitForm([], $this->callT('Save'));
     $this->drupalGet($this->demoInput['recipes_view_path']);
     // Completed recipes view output.
     $this->makeScreenShot('views-duplicate_final.png', $this->hideArea('#toolbar-administration, .site-footer') . $this->removeScrollbars() . $this->setBodyColor());
@@ @@

     // Display title.
     if ($this->demoInput['first_langcode'] == 'en') {
-      $this->assertRaw((string) $this->callT('Display name'));
+      $this->assertSession()->responseContains((string) $this->callT('Display name'));
     }
     $this->clickLinkContainingUrl('block_1/display_title');
-    $this->assertRaw((string) $this->callT('The name and the description of this display'));
-    $this->assertRaw((string) $this->callT('Administrative name'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('The name and the description of this display'));
+    $this->assertSession()->responseContains((string) $this->callT('Administrative name'));
+    $this->submitForm([
         'display_title' => $this->demoInput['recipes_view_block_display_name'],
       ], $this->callT('Apply'));

@@ @@
     $this->clickLinkContainingUrl('block_1/title');
     // Configuring the block title for this display only.
     $this->makeScreenShot('views-block_title.png', $this->hideArea('#toolbar-administration, .region-breadcrumbs, .region-highlighted') . 'jQuery(\'#edit-override-dropdown\').val(\'block_1\'); jQuery(\'#edit-title\').val("' . $this->demoInput['recipes_view_block_title'] . '");' . $this->setWidth('.content-header, .layout-container'));
-    $this->assertRaw((string) $this->callT('This @display_type (override)', TRUE, ['@display_type' => 'block']));
+    $this->assertSession()->responseContains((string) $this->callT('This @display_type (override)', TRUE, ['@display_type' => 'block']));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'override[dropdown]' => 'block_1',
         'title' => $this->demoInput['recipes_view_block_title'],
       ], $this->callT('Apply'));
@@ @@
     // Style - unformatted list.
     $this->clickLinkContainingUrl('block_1/style');
     $this->assertText($this->callT('Unformatted list'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'override[dropdown]' => 'block_1',
         'style[type]' => 'default',
       ], $this->callT('Apply'));
-    $this->drupalPostForm(NULL, [], $this->callT('Apply'));
+    $this->submitForm([], $this->callT('Apply'));

     // Image field.
     $this->clickLinkContainingUrl('block_1/field/field_' . $main_image);
     // Configuring the image field for this display only.
     $this->makeScreenShot('views-block_image.png', $this->hideArea('#toolbar-administration, .region_breadcrumbs, .region-highlighted') . 'jQuery(\'#edit-override-dropdown\').val(\'block_1\'); jQuery(\'#edit-options-settings-image-style\').val(\'thumbnail\');' . $this->addBorder('#edit-override-dropdown, #edit-options-settings-image-style') . $this->setWidth('.content-header, .layout-container') . $this->removeScrollbars());
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'override[dropdown]' => 'block_1',
         'options[settings][image_style]' => 'thumbnail',
       ], $this->callT('Apply'));
@@ @@

     // Remove ingredients filter.
     $this->clickLinkContainingUrl('block_1/filter/field_');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'override[dropdown]' => 'block_1',
       ], $this->callT('Remove'));

     // Add sort by authored date.
-    $this->assertRaw((string) $this->callT('Sort criteria'));
+    $this->assertSession()->responseContains((string) $this->callT('Sort criteria'));
     $this->clickLinkContainingUrl('add-handler/' . $recipes_view . '/block_1/sort');
-    $this->assertRaw((string) $this->callT('Authored on'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('Authored on'));
+    $this->submitForm([
         'override[dropdown]' => 'block_1',
         'name[node_field_data.created]' => 'node_field_data.created',
       ], $this->callT('Add and configure @types', TRUE, ['@types' => $this->callT('sort criteria')]));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'override[dropdown]' => 'block_1',
         'options[order]' => 'DESC',
       ], $this->callT('Apply'));
@@ @@

     // Instead of pager, display 5 recipes.
     $this->assertText($this->callT('Pager'));
-    $this->assertRaw((string) $this->callT('Mini'));
+    $this->assertSession()->responseContains((string) $this->callT('Mini'));
     $this->clickLinkContainingUrl('block_1/pager');
-    $this->assertRaw((string) $this->callT('Display a specified number of items'));
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains((string) $this->callT('Display a specified number of items'));
+    $this->submitForm([
         'override[dropdown]' => 'block_1',
         'pager[type]' => 'some',
       ], $this->callT('Apply'));
-    $this->assertRaw((string) $this->callT('Pager options'));
+    $this->assertSession()->responseContains((string) $this->callT('Pager options'));
     $this->assertText($this->callT('Items to display'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'pager_options[items_per_page]' => 5,
       ], $this->callT('Apply'));

     // Save the view.
-    $this->drupalPostForm(NULL, [], $this->callT('Save'));
+    $this->submitForm([], $this->callT('Save'));
     if ($this->demoInput['first_langcode'] == 'en') {
       $this->assertText('The view');
       $this->assertText('has been saved.');
@@ @@
         'modules[config_translation][enable]' => TRUE,
       ];
     }
-    $this->drupalPostForm(NULL, $values, $this->callT('Install'));
+    $this->submitForm($values, $this->callT('Install'));

     // Due to a core bug, installing a module corrupts translations. So,
     // import the saved translations.
@@ @@
     $this->drupalGet('admin/config/regional/language');
     $this->clickLink($this->callT('Add language'));
     $this->assertText($this->callT('Language name'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'predefined_langcode' => $this->demoInput['second_langcode'],
       ], $this->callT('Add language'));
     // Confirmation and language list after adding second language.
@@ @@

     // Place the Language Switcher block in sidebar second (no screenshots).
     $this->drupalGet('admin/structure/block/library/bartik');
-    $this->assertRaw((string) $this->callT('Language switcher'));
+    $this->assertSession()->responseContains((string) $this->callT('Language switcher'));
     $this->placeBlock('language_block:language_interface', [
         'region' => 'sidebar_second',
         'theme' => 'bartik',
@@ @@
       $this->assertText($this->callT('URL alias'));
     }

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'entity_types[node]' => 'node',
         'settings[node][page][translatable]' => TRUE,
         'settings[node][page][settings][language][language_alterable]' => TRUE,
@@ @@
     $this->assertText($this->callT('URL alias'));

     $this->fillInBody($this->demoInput['home_body_translated']);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'title[0][value]' => $this->demoInput['home_title_translated'],
         'path[0][alias]' => $this->demoInput['home_path_translated'],
         // This looks strange, but that is how the button text is translated.
@@ @@
     $this->scrollWindowUp();
     // Exposed form options for Recipes view.
     $this->makeScreenShot('language-config-translate-recipes-view.png', $this->hideArea('#toolbar-administration') . $this->removeScrollbars(), "jQuery('body').css('overflow', 'scroll');");
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'translation[config_names][views.view.' . $recipes_view . '][display][default][display_options][title]' => $this->demoInput['recipes_view_title_translated'],
         'translation[config_names][views.view.' . $recipes_view . '][display][default][display_options][exposed_form][options][submit_button]' => $this->demoInput['recipes_view_submit_button_translated'],
         'translation[config_names][views.view.' . $recipes_view . '][display][default][display_options][filters][field_' . $ingredients . '_target_id][expose][label]' => $this->demoInput['recipes_view_ingredients_label_translated'],
@@ @@
     $this->assertText($this->callT('Put site into maintenance mode'));
     $this->assertText($this->callT('Message to display when in maintenance mode'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'maintenance_mode' => 1,
       ], $this->callT('Save configuration'));
     $this->clearCache();
@@ @@
     // Site in maintenance mode.
     $this->makeScreenShot('extend-maintenance-mode-enabled.png', "document.documentElement.style.overflow = 'hidden';");
     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm('admin/config/development/maintenance', [
+    $this->drupalGet('admin/config/development/maintenance');
+    $this->submitForm([
         'maintenance_mode' => FALSE,
       ], $this->callT('Save configuration'));
     $this->clearCache();
@@ @@
     $this->clickLink($this->callT('Extend'));
     $this->clickLink($this->callT('Install new module'));
     $this->assertText($this->callT('Install from a URL'));
-    $this->assertRaw((string) $this->callT('Install'));
+    $this->assertSession()->responseContains((string) $this->callT('Install'));

     // Install new module page (admin/modules/install).
     $this->makeScreenShot('extend-module-install-admin-toolbar-do.png', $this->hideArea('#toolbar-administration') . $this->setWidth('.content-header, .layout-container', 600));
@@ @@
     $this->clickLink($this->callT('Appearance'));
     $this->clickLink($this->callT('Install new theme'));
     $this->assertText($this->callT('Install from a URL'));
-    $this->assertRaw((string) $this->callT('Install'));
+    $this->assertSession()->responseContains((string) $this->callT('Install'));

     $this->drupalGet('admin/theme/install');
     // Install new theme page (admin/theme/install).
@@ @@
       $this->assertText($this->callT('Performance'));
     }
     $this->drupalGet('admin/config/development/performance');
-    $this->assertRaw((string) $this->callT('Clear all caches'));
+    $this->assertSession()->responseContains((string) $this->callT('Clear all caches'));

     // Topic: prevent-log - Concept: Log.
     // Test navigation for this and the next few topics.
@@ @@
     }
     $this->drupalGet('admin/config/system/cron');
     $this->assertText($this->callT('Cron settings'));
-    $this->assertRaw((string) $this->callT('Save configuration'));
+    $this->assertSession()->responseContains((string) $this->callT('Save configuration'));

     // Cron configuration page (admin/config/system/cron).
     $this->makeScreenShot('security-cron.png', $this->hideArea('#toolbar-administration') . $this->setWidth('.content-header, .layout-container', 600) . $this->removeScrollbars() . $this->replaceUrl() . 'window.scroll(0,0)');
+    $this->drupalGet('admin/modules');

     // Topic: security-update-module - Updating a Module.

     // Install an old version of the Admin Toolbar module, and visit the
     // Updates page.
-    $this->drupalPostForm('admin/modules', [
+    $this->submitForm([
         'modules[admin_toolbar][enable]' => TRUE,
       ], $this->callT('Install'));
     update_storage_clear();
@@ @@
     // This link text is in an earlier topic on security notifications.
     $this->assertSession()->linkExists($this->callT('Settings'));
     $this->clickLink($this->callT('Update'));
-    $this->assertRaw((string) $this->callT('Download these updates'));
+    $this->assertSession()->responseContains((string) $this->callT('Download these updates'));

     $this->drupalGet('admin/reports/updates/update');
     // Update page for module (admin/reports/updates/update).
     $this->makeScreenShot('security-update-module-updates.png', $this->hideArea('#toolbar-administration') . $this->setWidth('.content-header, .layout-container', 800) . $this->removeScrollbars());
+    $this->drupalGet('admin/modules/uninstall');
     // Uninstall the module.
-    $this->drupalPostForm('admin/modules/uninstall', [
+    $this->submitForm([
         'uninstall[admin_toolbar]' => 1,
       ], $this->callT('Uninstall'));
-    $this->drupalPostForm(NULL, [], $this->callT('Uninstall'));
+    $this->submitForm([], $this->callT('Uninstall'));

     // Topic: security-update-theme - Updating a Theme.

@@ @@
     update_storage_clear();

     $this->drupalGet('admin/reports/updates/update');
-    $this->assertRaw('Honey');
+    $this->assertSession()->responseContains('Honey');
     // Update page for theme (admin/reports/updates/update).
     $this->makeScreenShot('security-update-theme-updates.png', $this->hideArea('#toolbar-administration') . $this->setWidth('.content-header, .layout-container', 800) . $this->removeScrollbars());
     // As this is the last screenshot, do not bother to uninstall the theme.
@@ @@
    * Clears the Drupal cache using the user interface page.
    */
   protected function clearCache() {
-    $this->drupalPostForm('admin/config/development/performance', [], $this->callT('Clear all caches'));
+    $this->drupalGet('admin/config/development/performance');
+    $this->submitForm([], $this->callT('Clear all caches'));
   }

   /**
@@ @@
    */
   protected function drupalLogin(AccountInterface $account) {
     $this->drupalGet('user/login');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
         'name' => $account->getAccountName(),
         'pass' => $account->pass_raw,
       ], $this->callT('Log in'));
@@ @@
       $pattern = '|[a-zA-Z0-9_\-\.]+\.po$|';
       $options = ['recurse' => FALSE];
       $result = [];
-      $directory = \Drupal::service('file_system')->realpath(drupal_get_path('module', 'user_guide_tests') . '/translations/' . $langcode);
+      $directory = \Drupal::service('file_system')->realpath(\Drupal::service('extension.list.module')->getPath('user_guide_tests') . '/translations/' . $langcode);
       if (is_dir($directory)) {
         $this->logTestMessage('CHECKING FOR INITIAL TRANSLATIONS IN: ' . $directory);
         $result = \Drupal::service('file_system')->scanDirectory($directory, $pattern, $options);
@@ @@
     ];

     foreach ($to_test as $string) {
-      $this->assertNotEqual($string, (string) $this->callT($string, $first));
+      $this->assertNotEquals($string, (string) $this->callT($string, $first));
     }

     // If we're looking at the site's main language (it is not English if we
@@ @@
     // above.
     if ($first) {
       $config = \Drupal::config('system.menu.main');
-      $this->assertNotEqual('Main navigation', $config->get('label'));
-      $this->assertNotEqual('Site section links', $config->get('description'));
+      $this->assertNotEquals('Main navigation', $config->get('label'));
+      $this->assertNotEquals('Site section links', $config->get('description'));

       // Menu names and descriptions on this page are in English, even if site
       // language is not English, so only test UI text here.
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * AssertRawRector
 * DrupalGetPathRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

