modules/contrib/mutual_credit/mcapi.api.php
modules/contrib/mutual_credit/mcapi.install
modules/contrib/mutual_credit/modules/bursers/mcapi_bursers.install
modules/contrib/mutual_credit/modules/clearingcentral/mcapi_cc.module
modules/contrib/mutual_credit/modules/clearingcentral/src/MigrationSubscriber.php
modules/contrib/mutual_credit/modules/credit_commons/src/Access/HashChecker.php
modules/contrib/mutual_credit/modules/forms/src/FirstPartyTransactionForm.php
modules/contrib/mutual_credit/modules/limits/mcapi_limits.views.inc
modules/contrib/mutual_credit/modules/limits/src/Annotation/Limits.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/Validation/Constraint/TransactionLimitsConstraint.php
modules/contrib/mutual_credit/modules/masspay/src/MassPay.php
modules/contrib/mutual_credit/modules/signatures/src/Controller/RemoteSign.php
modules/contrib/mutual_credit/modules/limits/src/Element/MinMax.php
modules/contrib/mutual_credit/src/Controller/WalletController.php
modules/contrib/mutual_credit/src/Entity/Query/TransactionQuery.php
modules/contrib/mutual_credit/src/Entity/ViewBuilder/WalletViewBuilder.php
modules/contrib/mutual_credit/src/Plugin/Action/Delete.php
modules/contrib/mutual_credit/src/Plugin/DevelGenerate/TransactionDevelGenerate.php
modules/contrib/mutual_credit/src/Plugin/TransactionRelative/Creator.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/Validation/Constraint/TransactionLimitsConstraintValidator.php
modules/contrib/mutual_credit/modules/credit_commons/src/Controller/Responder.php
modules/contrib/mutual_credit/modules/clearingcentral/src/Plugin/migrate/source/IntertradingWallet.php
modules/contrib/mutual_credit/modules/credit_commons/src/SettingsForm.php
modules/contrib/mutual_credit/modules/limits/src/Event/TransactionPreventedEvent.php
modules/contrib/mutual_credit/modules/limits/src/Form/WalletLimitOverride.php
modules/contrib/mutual_credit/modules/command/mcapi_command.install
modules/contrib/mutual_credit/modules/command/mcapi_command.module
modules/contrib/mutual_credit/modules/bursers/mcapi_bursers.module
modules/contrib/mutual_credit/modules/forms/src/Plugin/Block/FirstParty.php
modules/contrib/mutual_credit/modules/forms/mcapi_forms.inc
modules/contrib/mutual_credit/modules/signatures/src/Form/Settings.php
modules/contrib/mutual_credit/modules/bursers/src/BurserTransactionAccessControlHandler.php
modules/contrib/mutual_credit/modules/clearingcentral/src/ClearingCentral.php
modules/contrib/mutual_credit/src/Plugin/Action/Edit.php
modules/contrib/mutual_credit/modules/forms/src/Plugin/Derivative/NewTransactionForm.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/Action/Sign.php
modules/contrib/mutual_credit/modules/forms/src/Plugin/Field/FieldWidget/MyWalletWidget.php
modules/contrib/mutual_credit/src/Entity/Query/TransactionQueryFactory.php
modules/contrib/mutual_credit/src/Entity/Query/WalletQuery.php
modules/contrib/mutual_credit/src/Entity/Query/WalletQueryFactory.php
modules/contrib/mutual_credit/src/Plugin/Action/EditPeriod.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/Action/SignOff.php
modules/contrib/mutual_credit/src/Entity/RouteProvider/CurrencyRouteProvider.php
modules/contrib/mutual_credit/src/Plugin/Action/Email.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/Block/Pending.php
modules/contrib/mutual_credit/modules/limits/src/McapiLimitsEvents.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/Block/BalanceLimits.php
modules/contrib/mutual_credit/src/Entity/RouteProvider/TransactionRouteProvider.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/Limits/Balanced.php
modules/contrib/mutual_credit/src/Entity/RouteProvider/WalletRouteProvider.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/Limits/Calculated.php
modules/contrib/mutual_credit/src/Plugin/TransactionRelative/Manager.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/RulesAction/MailPendingSignatories.php
modules/contrib/mutual_credit/src/Entity/Views/TransactionViewsData.php
modules/contrib/mutual_credit/src/Plugin/Action/Erase.php
modules/contrib/mutual_credit/src/Element/BalanceHistories.php
modules/contrib/mutual_credit/modules/forms/src/Plugin/migrate/destination/McapiForm.php
modules/contrib/mutual_credit/modules/bursers/src/BurserWalletAccessControlHandler.php
modules/contrib/mutual_credit/src/Plugin/TransactionRelative/Payee.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/TransactionRelative/PendingSignatory.php
modules/contrib/mutual_credit/src/Entity/State.php
modules/contrib/mutual_credit/src/Plugin/Action/Save.php
modules/contrib/mutual_credit/modules/bursers/src/BurserWalletStorage.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/Limits/Explicit.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/TransactionRelative/Signatory.php
modules/contrib/mutual_credit/src/Entity/Storage/TransactionIndexStorage.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/Limits/None.php
modules/contrib/mutual_credit/mcapi.module
modules/contrib/mutual_credit/src/Plugin/Action/Unerase.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/LimitsPluginManager.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/migrate/destination/Signatures.php
modules/contrib/mutual_credit/modules/bursers/src/Plugin/EntityReferenceSelection/WalletBurserSelection.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/McapiLimitsBase.php
modules/contrib/mutual_credit/src/Plugin/TransactionRelative/Payer.php
modules/contrib/mutual_credit/modules/bursers/src/Plugin/Field/FieldType/BurserReferenceFieldItemList.php
modules/contrib/mutual_credit/src/Plugin/Action/View.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/migrate/process/SignDate.php
modules/contrib/mutual_credit/modules/forms/src/Plugin/migrate/process/McapiFormContent.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/migrate/source/Signatures.php
modules/contrib/mutual_credit/modules/command/src/Form/CommandSettings.php
modules/contrib/mutual_credit/modules/masspay/src/RouteSubscriber.php
modules/contrib/mutual_credit/modules/signatures/mcapi_signatures.install
modules/contrib/mutual_credit/modules/bursers/src/Plugin/Field/FieldType/BurserReferenceItem.php
modules/contrib/mutual_credit/modules/signatures/src/Plugin/views/field/SignedDate.php
modules/contrib/mutual_credit/src/Plugin/Block/BalanceHistory.php
modules/contrib/mutual_credit/src/Entity/Views/WalletViewsData.php
modules/contrib/mutual_credit/modules/clearingcentral/src/Controller/Endpoint.php
modules/contrib/mutual_credit/modules/bursers/src/Plugin/TransactionRelative/Burser.php
modules/contrib/mutual_credit/src/Plugin/TransactionRelativeInterface.php
modules/contrib/mutual_credit/src/Plugin/TransactionRelativeManager.php
modules/contrib/mutual_credit/modules/signatures/src/RemoteSignAccess.php
modules/contrib/mutual_credit/src/Entity/Wallet.php
modules/contrib/mutual_credit/src/Element/CurrencySelect.php
modules/contrib/mutual_credit/modules/clearingcentral/src/Controller/Pages.php
modules/contrib/mutual_credit/modules/clearingcentral/mcapi_cc.install
modules/contrib/mutual_credit/modules/clearingcentral/src/Entity/WalletQuery.php
modules/contrib/mutual_credit/modules/forms/src/Plugin/migrate/process/McapiFormTemplate.php
modules/contrib/mutual_credit/modules/clearingcentral/src/Entity/WalletQueryFactory.php
modules/contrib/mutual_credit/modules/clearingcentral/src/Form/RemoteTransactionBillForm.php
modules/contrib/mutual_credit/src/Plugin/migrate/process/ObjectProperty.php
modules/contrib/mutual_credit/src/Plugin/migrate/process/Sentence.php
modules/contrib/mutual_credit/src/Element/OrderedWallets.php
modules/contrib/mutual_credit/modules/signatures/src/SignAllConfirm.php
modules/contrib/mutual_credit/src/Plugin/migrate/process/WorthField.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/McapiLimitsInterface.php
modules/contrib/mutual_credit/modules/greco/mcapi_greco.install
modules/contrib/mutual_credit/src/Plugin/views/filter/Wallet.php
modules/contrib/mutual_credit/src/Plugin/Block/Currencies.php
modules/contrib/mutual_credit/modules/greco/mcapi_greco.module
modules/contrib/mutual_credit/src/Plugin/migrate/process/WorthVar.php
modules/contrib/mutual_credit/modules/clearingcentral/src/Form/RemoteTransactionCreditForm.php
modules/contrib/mutual_credit/modules/signatures/src/Signatures.php
modules/contrib/mutual_credit/src/Plugin/migrate/source/d7/Ctools.php
modules/contrib/mutual_credit/src/Plugin/Block/SystemStats.php
modules/contrib/mutual_credit/modules/signatures/mcapi_signatures.module
modules/contrib/mutual_credit/modules/clearingcentral/src/Form/RemoteTransactionForm.php
modules/contrib/mutual_credit/src/Plugin/EntityReferenceSelection/WalletSelection.php
modules/contrib/mutual_credit/src/Plugin/Validation/Constraint/Autowallet.php
modules/contrib/mutual_credit/src/Element/Relatives.php
modules/contrib/mutual_credit/modules/command/src/Form/TestCommand.php
modules/contrib/mutual_credit/src/Plugin/Validation/Constraint/AutowalletValidator.php
modules/contrib/mutual_credit/src/Element/WalletAutocomplete.php
modules/contrib/mutual_credit/src/Plugin/migrate/source/d7/Transaction.php
modules/contrib/mutual_credit/src/Element/WorthForm.php
modules/contrib/mutual_credit/modules/greco/src/Block/Greco.php
modules/contrib/mutual_credit/modules/credit_commons/mcapi_credcom_leaf.install
modules/contrib/mutual_credit/src/Plugin/views/argument_default/CurrentUserWallets.php
modules/contrib/mutual_credit/modules/credit_commons/mcapi_credcom_leaf.module
modules/contrib/mutual_credit/modules/signatures/mcapi_signatures.tokens.inc
modules/contrib/mutual_credit/modules/limits/mcapi_limits.inc
modules/contrib/mutual_credit/src/Plugin/Validation/Constraint/DifferentWalletsConstraint.php
modules/contrib/mutual_credit/modules/forms/mcapi_forms.install
modules/contrib/mutual_credit/src/Plugin/Validation/Constraint/DifferentWalletsConstraintValidator.php
modules/contrib/mutual_credit/modules/signatures/mcapi_signatures.views.inc
modules/contrib/mutual_credit/src/Plugin/views/argument_validator/WalletPrivate.php
modules/contrib/mutual_credit/src/Plugin/Validation/Constraint/SameStateConstraint.php
modules/contrib/mutual_credit/src/Plugin/Validation/Constraint/SameStateConstraintValidator.php
modules/contrib/mutual_credit/tests/src/Unit/McapiTest.php
modules/contrib/mutual_credit/src/Plugin/views/row/TransactionRow.php
modules/contrib/mutual_credit/modules/clearingcentral/src/Form/SettingsForm.php
modules/contrib/mutual_credit/src/Plugin/Block/WalletContextBlockBase.php
modules/contrib/mutual_credit/src/Plugin/Validation/Constraint/WalletNameUnique.php
modules/contrib/mutual_credit/src/Plugin/Field/CurrencyComputedProperty.php
modules/contrib/mutual_credit/src/Plugin/migrate/Transaction.php
modules/contrib/mutual_credit/src/Plugin/views/wizard/Transaction.php
modules/contrib/mutual_credit/src/Plugin/views/cache/WalletArg.php
modules/contrib/mutual_credit/src/Annotation/TransactionRelative.php
modules/contrib/mutual_credit/src/Plugin/migrate/destination/EntityCurrency.php
modules/contrib/mutual_credit/src/Plugin/views/wizard/TransactionIndex.php
modules/contrib/mutual_credit/src/ProxyClass/UninstallValidator.php
modules/contrib/mutual_credit/src/Controller/AccountingAdmin.php
modules/contrib/mutual_credit/src/Plugin/migrate/destination/EntityTransaction.php
modules/contrib/mutual_credit/modules/forms/mcapi_forms.module
modules/contrib/mutual_credit/src/TransactionOperations.php
modules/contrib/mutual_credit/src/Controller/ActionListOverride.php
modules/contrib/mutual_credit/src/Plugin/views/field/ComputedWorths.php
modules/contrib/mutual_credit/src/Controller/FormList.php
modules/contrib/mutual_credit/modules/clearingcentral/src/IntertradeAccess.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldFormatter/TransactionWalletHolderFormatter.php
modules/contrib/mutual_credit/modules/clearingcentral/src/IntertradingInterface.php
modules/contrib/mutual_credit/src/TransactionSerialConverter.php
modules/contrib/mutual_credit/modules/clearingcentral/src/McapiccServiceProvider.php
modules/contrib/mutual_credit/src/Plugin/migrate/destination/EntityWallet.php
modules/contrib/mutual_credit/src/Plugin/migrate/field/Worth.php
modules/contrib/mutual_credit/mcapi.theme.inc
modules/contrib/mutual_credit/src/Plugin/migrate/process/CheckWallet.php
modules/contrib/mutual_credit/src/Plugin/views/field/Currency.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldFormatter/WalletHolderLabelFormatter.php
modules/contrib/mutual_credit/src/Element/WorthView.php
modules/contrib/mutual_credit/src/Element/WorthsForm.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldFormatter/WorthFormatter.php
modules/contrib/mutual_credit/modules/limits/mcapi_limits.install
modules/contrib/mutual_credit/src/Plugin/views/field/Dummy.php
modules/contrib/mutual_credit/src/Plugin/views/field/HolderType.php
modules/contrib/mutual_credit/modules/limits/mcapi_limits.module
modules/contrib/mutual_credit/src/Plugin/migrate/process/CurrencyFormat.php
modules/contrib/mutual_credit/src/Plugin/views/field/RunningBalance.php
modules/contrib/mutual_credit/src/UninstallValidator.php
modules/contrib/mutual_credit/src/Entity/Storage/TransactionStorage.php
modules/contrib/mutual_credit/modules/forms/src/Element/MyWallets.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldType/WalletReferenceItem.php
modules/contrib/mutual_credit/modules/forms/src/EventSubscriber/MigrationSubscriber.php
modules/contrib/mutual_credit/src/Plugin/views/field/State.php
modules/contrib/mutual_credit/src/Plugin/views/field/Type.php
modules/contrib/mutual_credit/modules/forms/src/EventSubscriber/RouteSubscriber.php
modules/contrib/mutual_credit/src/Plugin/views/field/WalletLabel.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldType/WorthFieldItemList.php
modules/contrib/mutual_credit/src/Entity/WalletInterface.php
modules/contrib/mutual_credit/mcapi.tokens.inc
modules/contrib/mutual_credit/src/Event/McapiEvents.php
modules/contrib/mutual_credit/src/Event/TransactionAssembleEvent.php
modules/contrib/mutual_credit/src/Element/WorthsView.php
modules/contrib/mutual_credit/src/Plugin/Block/WalletStats.php
modules/contrib/mutual_credit/src/Plugin/views/field/WalletStat.php
modules/contrib/mutual_credit/src/Plugin/Block/WalletView.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldType/WorthItem.php
modules/contrib/mutual_credit/src/Plugin/Condition/EntityWorthMoreThan.php
modules/contrib/mutual_credit/src/Plugin/views/field/Worth.php
modules/contrib/mutual_credit/src/Event/TransactionSaveEvents.php
modules/contrib/mutual_credit/src/Plugin/views/filter/Currencies.php
modules/contrib/mutual_credit/src/EventSubscriber/MigrationSubscriber.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldWidget/WalletReferenceAutocompleteWidget.php
modules/contrib/mutual_credit/src/Entity/Storage/TransactionStorageInterface.php
modules/contrib/mutual_credit/src/Plugin/Condition/TransactionIsMain.php
modules/contrib/mutual_credit/src/Entity/Storage/TransactionStorageSchema.php
modules/contrib/mutual_credit/src/Plugin/Condition/TransactionState.php
modules/contrib/mutual_credit/src/Entity/Access/CurrencyAccessControlHandler.php
modules/contrib/mutual_credit/src/Entity/Storage/WalletStorage.php
modules/contrib/mutual_credit/src/Plugin/Condition/TransactionType.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/migrate/destination/CurrencyLimits.php
modules/contrib/mutual_credit/modules/automation/mcapi_auto.module
modules/contrib/mutual_credit/src/Entity/Access/EntityWalletsAccess.php
modules/contrib/mutual_credit/src/Entity/Storage/WalletStorageInterface.php
modules/contrib/mutual_credit/src/Entity/Storage/WalletStorageSchema.php
modules/contrib/mutual_credit/src/Entity/Access/TransactionAccessControlHandler.php
modules/contrib/mutual_credit/src/Plugin/DataType/Worth.php
modules/contrib/mutual_credit/src/Plugin/Field/FieldWidget/WorthWidget.php
modules/contrib/mutual_credit/src/Entity/Transaction.php
modules/contrib/mutual_credit/src/Plugin/Derivative/WalletLocalAction.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/migrate/destination/CurrencyWalletLimits.php
modules/contrib/mutual_credit/src/Plugin/Field/WalletBalance.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/migrate/process/CurrencyLimits.php
modules/contrib/mutual_credit/src/Plugin/Field/WalletIncome.php
modules/contrib/mutual_credit/src/Plugin/Field/WalletOutgoing.php
modules/contrib/mutual_credit/src/Entity/Access/WalletAccessControlHandler.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/migrate/process/WalletLimits.php
modules/contrib/mutual_credit/src/Plugin/Field/WalletPartners.php
modules/contrib/mutual_credit/src/Plugin/Field/WalletTrades.php
modules/contrib/mutual_credit/src/Plugin/Field/WalletVolume.php
modules/contrib/mutual_credit/src/Plugin/Search/TransactionSearch.php
modules/contrib/mutual_credit/src/Entity/Currency.php
modules/contrib/mutual_credit/modules/limits/src/Plugin/views/field/Limits.php
modules/contrib/mutual_credit/src/Entity/CurrencyInterface.php
modules/contrib/mutual_credit/src/Entity/ListBuilder/CurrencyListBuilder.php
modules/contrib/mutual_credit/modules/limits/src/WalletLimiter.php
modules/contrib/mutual_credit/src/EventSubscriber/RouteSubscriber.php
modules/contrib/mutual_credit/src/EventSubscriber/TransactionEventSubscriber.php
modules/contrib/mutual_credit/src/Form/CurrencyForm.php
modules/contrib/mutual_credit/src/Entity/ListBuilder/TransactionListBuilder.php
modules/contrib/mutual_credit/modules/masspay/mcapi_mass.module
modules/contrib/mutual_credit/src/Entity/ListBuilder/WalletListBuilder.php
modules/contrib/mutual_credit/src/Entity/ListBuilder/WorkflowListBuilder.php
modules/contrib/mutual_credit/src/Plugin/TransactionActionBase.php
modules/contrib/mutual_credit/src/Form/MiscSettings.php
modules/contrib/mutual_credit/src/Plugin/TransactionActionInterface.php
modules/contrib/mutual_credit/src/Form/OperationForm.php
modules/contrib/mutual_credit/src/Entity/TransactionInterface.php
modules/contrib/mutual_credit/src/Entity/Type.php
modules/contrib/mutual_credit/src/Entity/ViewBuilder/CurrencyViewBuilder.php
modules/contrib/mutual_credit/src/Form/TransactionActionEditForm.php
modules/contrib/mutual_credit/src/Form/TransactionForm.php
modules/contrib/mutual_credit/src/Entity/ViewBuilder/TransactionViewBuilder.php
modules/contrib/mutual_credit/src/Form/TransactionStatsFilterForm.php
modules/contrib/mutual_credit/src/Form/WalletAddForm.php
modules/contrib/mutual_credit/src/Form/WalletForm.php
modules/contrib/mutual_credit/src/Mcapi.php

29 files with changes
=====================

1) modules/contrib/mutual_credit/modules/bursers/mcapi_bursers.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormState;
 /**
  * Implements hook_entity_info_alter().
  */
@@ @@
  *
  * Remove the default values field from the bursers field config form.
  */
-function mcapi_bursers_form_field_config_edit_form_alter(&$form, Drupal\Core\Form\FormState $form_state) {
+function mcapi_bursers_form_field_config_edit_form_alter(&$form, FormState $form_state) {
   if ($form_state->getFormObject()->getEntity()->getType() == 'burser_reference') {
     unset($form['default_value']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/mutual_credit/modules/limits/src/Plugin/McapiLimitsBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi_limits\Plugin;

+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\mcapi\Entity\Type;
 use Drupal\mcapi\Entity\TransactionInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
  */
 abstract class McapiLimitsBase implements McapiLimitsInterface {

-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;

   public $id;

@@ @@
       ],
       '#weight' => 6,
     ];
-    if (\Drupal\mcapi\Entity\Type::load('mass')) {
+    if (Type::load('mass')) {
       $subform['skip']['#options']['mass'] = $this->t("of type 'mass'"); // NB mass transactions are now a separate module
     }
     $subform['prevent'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/mutual_credit/modules/limits/src/Form/WalletLimitOverride.php:182

    ---------- begin diff ----------
@@ @@
           'max' => (int) ($limit == 'max'),
           'value' => $worth['value'],
           'editor' => $this->currentUser()->id(),
-          'date' => REQUEST_TIME,
+          'date' => \Drupal::time()->getRequestTime(),
         ];
         $q->values($row);
       }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/mutual_credit/modules/clearingcentral/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi_cc\Form;

+use Drupal\Core\Url;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
         'Network Identifier in the Community Exchange Network. For example: cen0123. You can check your account at %link.',
         ['%link' => Link::fromTextAndUrl(
           t('Clearing Central'),
-          \Drupal\Core\Url::fromUri(ClearingCentral::CLEARING_CENTRAL_URL)
+          Url::fromUri(ClearingCentral::CLEARING_CENTRAL_URL)
         )->toString()]
       ),
       '#size' => 15,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/mutual_credit/modules/clearingcentral/src/Entity/WalletQueryFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi_cc\Entity;

+use Drupal\mcapi\Entity\WalletQuery;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Query\Sql\QueryFactory as QueryFactoryBase;

@@ @@
 class WalletQueryFactory extends QueryFactoryBase {

   public function get(EntityTypeInterface $entity_type, $conjunction) {
-    return new \Drupal\mcapi\Entity\WalletQuery($entity_type, $conjunction, $this->connection, $this->namespaces);
+    return new WalletQuery($entity_type, $conjunction, $this->connection, $this->namespaces);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mutual_credit/modules/clearingcentral/mcapi_cc.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Database\Query\Select;
+use Drupal\Core\Access\AccessResultNeutral;
 /**
  * @file
  * Define remote transactions and handle operations with clearing central.
@@ @@
  *
  * Ensure the intertrading wallet is never listed unless expressly demanded.
  */
-function mcapi_cc_query_entity_query_mcapi_wallet_alter(Drupal\Core\Database\Query\Select $query) {
+function mcapi_cc_query_entity_query_mcapi_wallet_alter(Select $query) {
   // Currently no way to disable access control when validating transaction payer and payee
   if ($query->hasTag('mcapi_wallet_access')) {
     //$query->condition('base_table.name', INTERTRADING_WALLET_NAME, '<>');
@@ @@
  */
 function mcapi_cc_mcapi_transaction_access($entity, $operation, AccountInterface $account) {
   if ($entity->type->target_id == 'remote') {
-    $access = new Drupal\Core\Access\AccessResultNeutral();
+    $access = new AccessResultNeutral();
     if ($operation == 'delete' or $operation == 'erase') {
       $access = AccessResult::forbiddenif($account->id() <> 1)->cachePerUser();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/mutual_credit/modules/signatures/src/Signatures.php:134

    ---------- begin diff ----------
@@ @@
       $uid = $this->currentUser->id();
     }
     if (isset($this->transaction->signatures[$uid]) and empty($this->transaction->signatures[$uid])) {
-      $this->transaction->signatures[$uid] = REQUEST_TIME;
+      $this->transaction->signatures[$uid] = \Drupal::time()->getRequestTime();
       // Set the state to finished if there are no outstanding signatures.
       if (array_search(0, $this->transaction->signatures) === FALSE) {
         $this->transaction->set('state', 'done');
@@ @@
   public function signOff() {
     foreach ($this->transaction->signatures as $uid => $signed) {
       if (!$signed) {
-        $this->transaction->signatures[$uid] = REQUEST_TIME;
+        $this->transaction->signatures[$uid] = \Drupal::time()->getRequestTime();
       }
     }
     $this->transaction->set('state', 'done');
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/mutual_credit/modules/greco/mcapi_greco.module:60

    ---------- begin diff ----------
@@ @@
     }

     \Drupal::database()->insert('mcapi_greco')
-      ->fields(array('curr_id' => $curr_id, 'timestamp' => REQUEST_TIME, 'value' => $indicator))
+      ->fields(array('curr_id' => $curr_id, 'timestamp' => \Drupal::time()->getRequestTime(), 'value' => $indicator))
       ->execute();
   }
 }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector


9) modules/contrib/mutual_credit/src/ProxyClass/UninstallValidator.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\mcapi\UninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class UninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class UninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


10) modules/contrib/mutual_credit/modules/forms/mcapi_forms.module:267

    ---------- begin diff ----------
@@ @@
   \Drupal::messenger()->addStatus(t('Now edit your new transaction form'));
   $form_mode_name = substr($form_state->getValue('id'), 18);
   $form_state->setRedirectUrl(
-    \Drupal\Core\Url::fromRoute('entity.entity_form_display.mcapi_transaction.form_mode',
+    Url::fromRoute('entity.entity_form_display.mcapi_transaction.form_mode',
     ['form_mode_name' => $form_mode_name])
   );
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/mutual_credit/modules/forms/mcapi_forms.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Entity\EntityFormMode;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;

 /**
@@ @@
     unset($values['uuid'], $values['dependencies']);
     $values['id'] .= '_designed';
     $values['label'] .= ' (designed)';
-    $new = \Drupal\Core\Entity\Entity\EntityFormMode::create($values);
+    $new = EntityFormMode::create($values);
     $new->save();
     $form_mode->delete();

@@ @@
     $new = EntityFormDisplay::create($values)->save();

   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/mutual_credit/modules/credit_commons/src/Access/HashChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi_credcom_leaf\Access;

+use Drupal\Core\Routing\Access\AccessInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
 use Drupal\Core\Access\AccessResult;
@@ @@
 /**
  * Access check for requests from rootwards nodes.
  */
-class HashChecker implements \Drupal\Core\Routing\Access\AccessInterface{
+class HashChecker implements AccessInterface{

   /**
    * Checks access.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


13) modules/contrib/mutual_credit/src/Plugin/views/field/WalletLabel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi\Plugin\views\field;

+use Drupal\mcapi\Entity\Wallet;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    $wallet = \Drupal\mcapi\Entity\Wallet::load($values->wid);
+    $wallet = Wallet::load($values->wid);

     if (!empty($this->options['link_to_entity'])) {
       try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/mutual_credit/mcapi.tokens.inc:48

    ---------- begin diff ----------
@@ @@
           break;

         case 'created':
-          $replacements[$original] = format_date($transaction->created->value, 'medium');
+          $replacements[$original] = \Drupal::service('date.formatter')->format($transaction->created->value, 'medium');
           break;

         case 'changed':
-          $replacements[$original] = format_date($transaction->changed->value, 'medium');
+          $replacements[$original] = \Drupal::service('date.formatter')->format($transaction->changed->value, 'medium');
           break;

         case 'url':
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector


15) modules/contrib/mutual_credit/mcapi.theme.inc:114

    ---------- begin diff ----------
@@ @@
 function template_preprocess_mcapi_transaction(&$vars, $hook, $info) {
   $elements = $vars['elements'];
   foreach (Element::children($vars['elements']) as $key) {
-    $vars[$key] = render($vars['elements'][$key]);
+    $vars[$key] = \Drupal::service('renderer')->render($vars['elements'][$key]);
   }
   if (isset($elements['#watermark'])) {
     // to add a watermark to the render array, add #watermark => blah
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


16) modules/contrib/mutual_credit/mcapi.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormState;
+use Drupal\Core\Render\Element;
+use Drupal\Core\Access\AccessResult;
+use Drupal\views\ViewExecutable;
+use Drupal\views\Plugin\views\query\QueryPluginBase;
 /**
  * @file
  * Hooks and common functions for Community Accounting.
@@ @@
 /**
  * Entity builder callback
  */
-function mcapi_entity_form_builder_add_autowallet($entityTypeId, ContentEntityInterface $entity, $form, Drupal\Core\Form\FormState $form_state) {
+function mcapi_entity_form_builder_add_autowallet($entityTypeId, ContentEntityInterface $entity, $form, FormState $form_state) {
   // prevent this running for ajax rebuilds
   if ($form_state->isSubmitted()) {
     // this runs for both validation and submission of the form, not ideal
@@ @@
   }
   if ($field_config->getName() == 'holder') {
     unset($form['required']);
-    foreach (\Drupal\Core\Render\Element::Children($form['settings']) as $entity_type_id) {
+    foreach (Element::Children($form['settings']) as $entity_type_id) {
       if ($form['settings'][$entity_type_id]['handler']) {
         $form['settings'][$entity_type_id]['handler']['autowallet'] = [
           '#type' => 'checkbox',
@@ @@
  */
 function mcapi_field_config_access($entity, $operation, $account) {
   if ($entity->id() == 'mcapi_wallet.mcapi_wallet.holder' and $operation == 'delete') {
-    return \Drupal\Core\Access\AccessResult::forbidden('Field cannot be deleted');
+    return AccessResult::forbidden('Field cannot be deleted');
   }
 }

@@ @@
  * children in the larger ones, and views loses track of them, so filter them
  * out of all views, except aggregated views
  */
-function mcapi_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
+function mcapi_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
   $base_tables = $view->getBaseTables();
   // There's probably a better way to do this but altering $query->query() has no effect.
   if (isset($base_tables['mcapi_transaction'])) {
@@ @@
  * Implements hook_views_pre_render().
  * Set the title of all views with a wallet argument
  */
-function mcapi_views_pre_render(Drupal\views\ViewExecutable $view) {
+function mcapi_views_pre_render(ViewExecutable $view) {
   foreach (['payer', 'payee', 'wallet_id'] as $tok) {
     if (isset($view->argument[$tok])) {
       $pos = array_search($tok, $view->argument);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


17) modules/contrib/mutual_credit/src/Plugin/Action/Edit.php:54

    ---------- begin diff ----------
@@ @@
     if ($this->accessState($object, $account)) {
       if ($this->accessOp($object, $account)) {
         if ($this->configuration['period']) {
-          $result = AccessResult::allowedIf($this->configuration['period'] > REQUEST_TIME);
+          $result = AccessResult::allowedIf($this->configuration['period'] > \Drupal::time()->getRequestTime());
         }
         else {
           $result = AccessResult::allowed();
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/mutual_credit/modules/limits/src/Plugin/migrate/process/WalletLimits.php:54

    ---------- begin diff ----------
@@ @@
               'max' => (int)$limit == 'max',
               'value' => $quant,
               'editor' => 1, //User 1 because this field didn't exist in 7
-              'date' => REQUEST_TIME
+              'date' => \Drupal::time()->getRequestTime()
             ];
           }
         }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/mutual_credit/src/Element/WorthsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi\Element;

+use Drupal\Core\Render\Element\CompositeFormElementTrait;
 use Drupal\mcapi\Entity\Currency;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;
@@ @@
  * @FormElement("worths_form")
  */
 class WorthsForm extends FormElement {
-  use \Drupal\Core\Render\Element\CompositeFormElementTrait;
+  use CompositeFormElementTrait;

   /**
    * {@inheritdoc}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/mutual_credit/src/Element/WorthForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi\Element;

+use Drupal\Core\Render\Element\CompositeFormElementTrait;
 use Drupal\mcapi\Entity\Currency;
 use Drupal\mcapi\Mcapi;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
  * @FormElement("worth_form")
  */
 class WorthForm extends FormElement {
-  use \Drupal\Core\Render\Element\CompositeFormElementTrait;
+  use CompositeFormElementTrait;

   /**
    * {@inheritdoc}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/mutual_credit/src/Element/BalanceHistories.php:45

    ---------- begin diff ----------
@@ @@
       }
       // Add a start and end points showing the balance at this moment.
       $points = [$element['#wallet']->created->value => 0] +
-      $points += [REQUEST_TIME => end($points)];
+      $points += [\Drupal::time()->getRequestTime() => end($points)];
       
       $element[$currency->id()] = [
         '#theme' => 'mcapi_timeline',
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/mutual_credit/src/Plugin/DevelGenerate/TransactionDevelGenerate.php:256

    ---------- begin diff ----------
@@ @@
     //get the youngest wallet and make a time between its creation and now.
     $wallets = Wallet::loadMultiple([$wid1, $wid2]);
     $latest = max($wallets[$wid1]->created->value, $wallets[$wid2]->created->value);
-    return rand($latest, REQUEST_TIME);
+    return rand($latest, \Drupal::time()->getRequestTime());
   }

   public static function sortTransactions() {
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


23) modules/contrib/mutual_credit/src/Entity/ViewBuilder/TransactionViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi\Entity\ViewBuilder;

+use Drupal\Component\Render\PlainTextOutput;
 use Drupal\mcapi\Entity\Transaction;
 use Drupal\mcapi\TransactionOperations;
 use Drupal\Core\Link;
@@ @@
         $template = $this->settings->get('sentence_template');
         $sentence =$this->token->replace($template, ['xaction' => $entity]);
         // @todo replace this in 9.4 with RenderPlain
-        $build['#markup'] = \Drupal\Component\Render\PlainTextOutput::renderFromHtml($sentence);
+        $build['#markup'] = PlainTextOutput::renderFromHtml($sentence);
         break;
     }
     $build += [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/mutual_credit/src/Entity/ViewBuilder/CurrencyViewBuilder.php:198

    ---------- begin diff ----------
@@ @@
    */
   public function periodQueryParams(array $conditions) : array {
     $since = isset($conditions['since']) ? $conditions['since'] : 0;
-    $until = isset($conditions['until']) ? $conditions['until'] : REQUEST_TIME;
+    $until = isset($conditions['until']) ? $conditions['until'] : \Drupal::time()->getRequestTime();
     $span = $until - $since;
     $day = 86400;
     // $year = 31560192;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/mutual_credit/src/Entity/Storage/TransactionStorage.php:79

    ---------- begin diff ----------
@@ @@
    */
   public function doSave($id, EntityInterface $entity) {
     $record = $this->mapToStorageRecord($entity);
-    $record->changed = REQUEST_TIME;
+    $record->changed = \Drupal::time()->getRequestTime();
     $return = parent::doSave($entity->xid->value, $entity);
     // The entity is no longer new.
     // because we were working on a clone.
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/mutual_credit/src/Form/TransactionStatsFilterForm.php:61

    ---------- begin diff ----------
@@ @@
       '#type' => 'select',
       '#empty_option' => t('Now'),
       '#required' => FALSE,
-      '#default_value' => isset($previous['until']) ? $previous['until'] : REQUEST_TIME
+      '#default_value' => isset($previous['until']) ? $previous['until'] : \Drupal::time()->getRequestTime()
     ];

     $earliest = $currency->firstUsed();
@@ @@
     if ($earliest > strtotime('-2 years')) {
       // System is less than two years old, so show months
       $start_of_month = strtotime("01-{$month}-{$year}");
-      while ($start_of_month < REQUEST_TIME) {
+      while ($start_of_month < \Drupal::time()->getRequestTime()) {
         $this->nextMonth($month, $year);
         $start_of_month = strtotime('01-'.$month.'-'.$year);
         $end_of_month = strtotime('01-'.($month+1).'-'.$year) -1;
@@ @@
       // System is more than 2 years old, so show years.
       $start_of_year = strtotime('01-01-'.$year);
       //$form['since']['#options'][$next_year] = date('Y', $next_year);
-      while ($start_of_year < REQUEST_TIME) {
+      while ($start_of_year < \Drupal::time()->getRequestTime()) {
         $form['since']['#options'][$start_of_year] = date('Y', $start_of_year);
         $year++;
         $form['until']['#options'][strtotime('01-01-'.$year)-1] = $year;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/mutual_credit/src/Form/TransactionForm.php:159

    ---------- begin diff ----------
@@ @@
     }

     if (!$form_state->getValue('created')) {
-      $form_state->setValue('created', REQUEST_TIME);
+      $form_state->setValue('created', \Drupal::time()->getRequestTime());
     }
     return $entity;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/mutual_credit/src/Form/OperationForm.php:185

    ---------- begin diff ----------
@@ @@
         'action' => $this->getOperation(),
       ];
       $events = new TransactionSaveEvents($transaction, $context);
-      $this->eventDispatcher->dispatch(McapiEvents::ACTION, $events);
+      $this->eventDispatcher->dispatch($events, McapiEvents::ACTION);
       if ($m = $this->config['message']) {
         $this->messenger()->addMessage($m, 'status');
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/mutual_credit/src/EventSubscriber/MigrationSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mcapi\EventSubscriber;

+use Drupal\user\Entity\User;
 use Drupal\mcapi\Entity\Currency;
 use Drupal\mcapi\Entity\Wallet;
 use Drupal\user\Entity\Role;
@@ @@
       $existing_wids = \Drupal::database()->select('mcapi_wallet', 'w')
         ->fields('w', ['wid'])
         ->execute()->fetchCol();
-      $user1 = \Drupal\user\Entity\User::load(1);
+      $user1 = User::load(1);
       foreach (array_diff($all_wids, $existing_wids) as $wid) {
         Wallet::Create([
           'name' => t("D7 Deleted user @wid", ['@wid' => $wid]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 29 files have been changed by Rector                                      

