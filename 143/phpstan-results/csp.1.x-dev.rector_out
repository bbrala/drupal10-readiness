modules/contrib/csp/csp.install
modules/contrib/csp/src/Csp.php
modules/contrib/csp/tests/src/Unit/EventSubscriber/Ie9CspSubscriberTest.php
modules/contrib/csp/csp.module
modules/contrib/csp/csp_extras/csp_extras.module
modules/contrib/csp/csp_extras/src/Ajax/AddAssetsCommand.php
modules/contrib/csp/csp_extras/src/Ajax/AjaxResponseAttachmentsProcessor.php
modules/contrib/csp/src/CspEvents.php
modules/contrib/csp/src/Event/PolicyAlterEvent.php
modules/contrib/csp/src/Annotation/CspReportingHandler.php
modules/contrib/csp/src/EventSubscriber/CoreCspSubscriber.php
modules/contrib/csp/src/Controller/ReportUri.php
modules/contrib/csp/src/EventSubscriber/Ie9CspSubscriber.php
modules/contrib/csp/src/EventSubscriber/ResponseCspSubscriber.php
modules/contrib/csp/tests/src/Unit/EventSubscriber/ResponseCspSubscriberTest.php
modules/contrib/csp/src/Form/CspSettingsForm.php
modules/contrib/csp/tests/src/Unit/Form/CspSettingsFormTest.php
modules/contrib/csp/tests/src/Unit/LibraryPolicyBuilderTest.php
modules/contrib/csp/src/LibraryPolicyBuilder.php
modules/contrib/csp/src/Plugin/CspReportingHandler/None.php
modules/contrib/csp/src/Plugin/CspReportingHandler/ReportUri.php
modules/contrib/csp/src/Plugin/CspReportingHandler/SiteLog.php
modules/contrib/csp/src/Plugin/CspReportingHandler/Uri.php
modules/contrib/csp/src/Plugin/ReportingHandlerBase.php
modules/contrib/csp/src/Plugin/ReportingHandlerInterface.php
modules/contrib/csp/src/ReportingHandlerPluginManager.php
modules/contrib/csp/tests/src/Unit/Controller/ReportUriTest.php
modules/contrib/csp/tests/src/Unit/CspFirefoxBugTest.php
modules/contrib/csp/tests/src/Unit/CspOptimizationTest.php
modules/contrib/csp/tests/src/Unit/CspTest.php
modules/contrib/csp/tests/src/Unit/EventSubscriber/CoreCspSubscriberTest.php

9 files with changes
====================

1) modules/contrib/csp/csp_extras/src/Ajax/AjaxResponseAttachmentsProcessor.php:165

    ---------- begin diff ----------
@@ @@
             'type' => 'stylesheet',
             'attributes' => [
               'media' => $css_asset['media'],
-              'href' => file_url_transform_relative(file_create_url($css_asset['data'])),
+              'href' => \Drupal::service('file_url_generator')->generateString($css_asset['data']),
             ],
           ];

@@ @@
           $asset = [
             'type' => 'script',
             'attributes' => [
-              'src' => file_url_transform_relative(file_create_url($js_asset['data'])),
+              'src' => \Drupal::service('file_url_generator')->generateString($js_asset['data']),
             ],
           ];
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/csp/csp_extras/csp_extras.module:11

    ---------- begin diff ----------
@@ @@

   // Add module ajax.js to core library.
   if ($extension == 'core' && isset($libraries['drupal.ajax'])) {
-    $path = '/' . drupal_get_path('module', 'csp_extras') . '/js/ajax.js';
+    $path = '/' . \Drupal::service('extension.list.module')->getPath('csp_extras') . '/js/ajax.js';
     $libraries['drupal.ajax']['js'][$path] = [
       'version' => '1.13',
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


3) modules/contrib/csp/tests/src/Unit/LibraryPolicyBuilderTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Mock Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * Mock Active Theme.
    *
-   * @var \Drupal\Core\Theme\ActiveTheme|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Theme\ActiveTheme|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $activeTheme;

@@ @@
   /**
    * Mock Theme Handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ThemeHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $themeHandler;

@@ @@
   /**
    * Mock Library Discovery.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $libraryDiscovery;

@@ @@

     $this->cache = new MemoryBackend();

-    $this->moduleHandler = $this->getMockBuilder(ModuleHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->moduleHandler = $this->createMock(ModuleHandler::class);

-    $this->themeHandler = $this->getMockBuilder(ThemeHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->themeHandler = $this->createMock(ThemeHandler::class);

-    $this->libraryDiscovery = $this->getMockBuilder(LibraryDiscovery::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->libraryDiscovery = $this->createMock(LibraryDiscovery::class);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/csp/tests/src/Unit/EventSubscriber/ResponseCspSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\csp\Unit\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\csp\Csp;
@@ @@
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\EventDispatcher\EventDispatcher;
 use Symfony\Component\HttpFoundation\ResponseHeaderBag;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Mock HTTP Response.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $response;

@@ @@
   /**
    * Mock Response Event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $event;

@@ @@
   /**
    * The Library Policy service.
    *
-   * @var \Drupal\csp\LibraryPolicyBuilder|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\csp\LibraryPolicyBuilder|\PHPUnit\Framework\MockObject\MockObject
    */
   private $libraryPolicy;

@@ @@
   /**
    * The Reporting Handler Plugin Manager service.
    *
-   * @var \Drupal\csp\ReportingHandlerPluginManager|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\csp\ReportingHandlerPluginManager|\PHPUnit\Framework\MockObject\MockObject
    */
   private $reportingHandlerPluginManager;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->response->headers = $this->getMockBuilder(ResponseHeaderBag::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $responseCacheableMetadata = $this->getMockBuilder(CacheableMetadata::class)
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
+    $this->response->headers = $this->createMock(ResponseHeaderBag::class);
+    $responseCacheableMetadata = $this->createMock(CacheableMetadata::class);
     $this->response->method('getCacheableMetadata')
       ->willReturn($responseCacheableMetadata);

-    /** @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject $event */
-    $this->event = $this->getMockBuilder(FilterResponseEvent::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\PHPUnit\Framework\MockObject\MockObject $event */
+    $this->event = $this->createMock(ResponseEvent::class);
     $this->event->expects($this->any())
       ->method('isMasterRequest')
       ->willReturn(TRUE);
@@ @@
       ->method('getResponse')
       ->willReturn($this->response);

-    $this->libraryPolicy = $this->getMockBuilder(LibraryPolicyBuilder::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->libraryPolicy = $this->createMock(LibraryPolicyBuilder::class);

-    $this->reportingHandlerPluginManager = $this->getMockBuilder(ReportingHandlerPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->reportingHandlerPluginManager = $this->createMock(ReportingHandlerPluginManager::class);

-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcher::class);
   }

   /**
@@ @@
    */
   public function testPolicyAlterEvent() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
    * @covers ::onKernelResponse
    */
   public function testEmptyDirective() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
    * @covers ::onKernelResponse
    */
   public function testUnoptimizedResponse() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
    */
   public function testOptimizedResponse() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testEnforcedResponse() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testBothPolicies() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testWithLibraryDirective() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testDisabledLibraryDirective() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/csp/tests/src/Unit/EventSubscriber/Ie9CspSubscriberTest.php:36

    ---------- begin diff ----------
@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->moduleHandler = $this->getMockBuilder(ModuleHandlerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
   }

   /**
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
       ->with($this->equalTo('ie9'))
       ->willReturn(TRUE);

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/csp/tests/src/Unit/EventSubscriber/CoreCspSubscriberTest.php:50

    ---------- begin diff ----------
@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->libraryDependencyResolver = $this->getMockBuilder(LibraryDependencyResolverInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->libraryDependencyResolver = $this->createMock(LibraryDependencyResolverInterface::class);
     $this->libraryDependencyResolver->method('getLibrariesWithDependencies')
       ->willReturnArgument(0);

-    $this->moduleHandler = $this->getMockBuilder(ModuleHandlerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);

     $this->coreCspSubscriber = new CoreCspSubscriber($this->libraryDependencyResolver, $this->moduleHandler);
   }
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/csp/tests/src/Unit/Controller/ReportUriTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\csp\Unit\Controller;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\csp\Controller\ReportUri;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
@@ @@
  */
 class ReportUriTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Valid JSON should get sent to the logger.
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/csp/src/EventSubscriber/ResponseCspSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\csp\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Drupal\csp\ReportingHandlerPluginManager;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Add Content-Security-Policy header to response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@
       }

       $this->eventDispatcher->dispatch(
-        CspEvents::POLICY_ALTER,
-        new PolicyAlterEvent($policy, $response)
+        new PolicyAlterEvent($policy, $response),
+        CspEvents::POLICY_ALTER
       );

       if (($headerValue = $policy->getHeaderValue())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


9) modules/contrib/csp/src/Event/PolicyAlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\csp\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\csp\Csp;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Response;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

