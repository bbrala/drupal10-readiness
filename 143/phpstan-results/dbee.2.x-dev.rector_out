modules/contrib/dbee/dbee.install
modules/contrib/dbee/tests/src/Functional/DbeeWebSwitchTestBase.php
modules/contrib/dbee/dbee.module
modules/contrib/dbee/tests/src/Functional/DbeeWebTestBase.php
modules/contrib/dbee/dbee.update.inc
modules/contrib/dbee/dbee.users.inc
modules/contrib/dbee/src/Authentication/Provider/DbeeCookie.php
modules/contrib/dbee/src/Entity/DbeeUser.php
modules/contrib/dbee/tests/src/Functional/DbeeAdminPeopleTest.php
modules/contrib/dbee/tests/src/Functional/DbeeAllUsersBatchTest.php
modules/contrib/dbee/tests/src/Functional/DbeeAllUsersTest.php
modules/contrib/dbee/tests/src/Functional/DbeeContactMailTest.php
modules/contrib/dbee/tests/src/Functional/DbeeCoreFunctionsTest.php
modules/contrib/dbee/tests/src/Functional/DbeeEditUserTest.php
modules/contrib/dbee/tests/src/Functional/DbeeEncryptStringTest.php
modules/contrib/dbee/tests/src/Functional/DbeeNewUsersTest.php
modules/contrib/dbee/tests/src/Functional/DbeeQueryUsersTest.php
modules/contrib/dbee/tests/src/Functional/DbeeSearchUserTest.php
modules/contrib/dbee/tests/src/Functional/DbeeUserResetPassTest.php

10 files with changes
=====================

1) modules/contrib/dbee/tests/src/Functional/DbeeWebTestBase.php:68

    ---------- begin diff ----------
@@ @@
   /**
    * Make sure that the dbee functions are availables.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     if (!function_exists('dbee_encrypt')) {
       module_load_include('module', 'dbee');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/dbee/tests/src/Functional/DbeeWebSwitchTestBase.php:53

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a user who can enable the dbee module.
@@ @@
     $confirm_page_route = ($enabling) ? 'system.modules_list_confirm' : 'system.modules_uninstall_confirm';
     $confirm_submit_text = ($enabling) ? 'Continue' : 'Uninstall';
     $success_text = ($enabling) ? 'been enabled' : 'The selected modules have been uninstalled.';
-    $this->drupalPostForm($uri, $edit0, $submit_text);
+    $this->drupalGet($uri);
+    $this->submitForm($edit0, $submit_text);
     // Check if dependencies needs to be loaded.
     if ($this->getUrl() == Url::fromRoute($confirm_page_route)->setAbsolute()->toString()) {
-      $this->drupalPostForm(NULL, [], $confirm_submit_text);
+      $this->submitForm([], $confirm_submit_text);
     }
     $arg_enabled = ($enabling) ? 'enabled' : 'disabled';
     $session = $this->assertSession();
@@ @@
         }
       }

-      $edit['pass'] = user_password();
+      $edit['pass'] = \Drupal::service('password_generator')->generate();
       $edit['status'] = 1;
       $edit['init'] = $edit['mail'];
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/dbee/tests/src/Functional/DbeeUserResetPassTest.php:34

    ---------- begin diff ----------
@@ @@
    *
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create a basic user with mail = 'example@example.com'. This email will
     // be used to testing if the system prevent from creating a new user with
@@ @@
     $edit1 = [
       'name' => $data0[$uid]['mail'],
     ];
-    $this->drupalPostForm('user/password', $edit1, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit1, 'Submit');
     $session = $this->assertSession();
     // Login link successfully sent for the exact sensitive case email.
     $session->pageTextContains('Further instructions have been sent to your email address.');
@@ @@
     $edit2 = [
       'name' => mb_strtolower($data0[$uid]['mail']),
     ];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
     // Login link successfully sent for lowercase email.
     $session->pageTextContains('Further instructions have been sent to your email address.');

@@ @@
     $edit3 = [
       'name' => mb_strtoupper($data0[$uid]['mail']),
     ];
-    $this->drupalPostForm('user/password', $edit3, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit3, 'Submit');
     // Login link successfully sent for other sensitive case email.
     $session->pageTextContains('Further instructions have been sent to your email address.');

@@ @@
     $edit4 = [
       'name' => $this->editedUserAccount->getAccountName(),
     ];
-    $this->drupalPostForm('user/password', $edit4, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit4, 'Submit');
     // Login link successfully sent for username.
     $session->pageTextContains('Further instructions have been sent to your email address.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/dbee/tests/src/Functional/DbeeSearchUserTest.php:56

    ---------- begin diff ----------
@@ @@
    *
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable any modules required for the test.
     parent::setUp();

@@ @@
     $this->drupalLogin($this->searchUsersAccount);
     // Search the completed email address.
     $edit1 = ['keys' => mb_strtoupper($this->existingUser1->getEmail())];
-    $this->drupalPostForm('search/user', $edit1, 'Search');
+    $this->drupalGet('search/user');
+    $this->submitForm($edit1, 'Search');
     $session = $this->assertSession();
     // The searching of the user by completed email address succeeds.
     $label1 = $this->existingUser1->getAccountName() . ' (' . $this->existingUser1->getEmail() . ')';
@@ @@

     // Search the partial email address.
     $edit2 = ['keys' => mb_strtoupper($this->provider)];
-    $this->drupalPostForm('search/user', $edit2, 'Search');
+    $this->drupalGet('search/user');
+    $this->submitForm($edit2, 'Search');
     // The searching of the user by partial email address succeeds
     // (first user found).
     $session->linkExists($label1);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/dbee/tests/src/Functional/DbeeQueryUsersTest.php:57

    ---------- begin diff ----------
@@ @@
    *
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable any modules required for the test.
     parent::setUp();
     // Create a user who can enable the dbee module.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/dbee/tests/src/Functional/DbeeNewUsersTest.php:55

    ---------- begin diff ----------
@@ @@
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
    * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable any modules required for the test.
     parent::setUp();

@@ @@
       'name' => $name,
       'mail' => $mail,
     ];
-    $this->drupalPostForm('user/register', $edit1, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit1, 'Create new account');
     $session = $this->assertSession();
     // Anonymous user successfully registered.
     $session->responseContains('A welcome message with further instructions has been sent to your email address.');
@@ @@
       // Set email to 'STRING@EXAMPLE.COM'.
       'mail' => mb_strtoupper($this->existingUser->getEmail()),
     ];
-    $this->drupalPostForm('user/register', $edit2, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit2, 'Create new account');
     // The module successfully detects when someone trying to register the same
     // email twice, even if there is case conflict.
     $session->pageTextContains("The email address {$edit2['mail']} is already taken");
@@ @@

     // Try to create a new user from the admin interface.
     $this->drupalLogin($this->adminUsersAccount);
-    $password3 = user_password();
+    $password3 = \Drupal::service('password_generator')->generate();
     $name3 = $this->randomMachineName();
     $mail3 = $name3 . '@example.com';
     $edit3 = [
@@ @@
       'pass[pass1]' => $password3,
       'pass[pass2]' => $password3,
     ];
-    $this->drupalPostForm('admin/people/create', $edit3, 'Create new account');
+    $this->drupalGet('admin/people/create');
+    $this->submitForm($edit3, 'Create new account');
     // Check if new user account has not been created.
     // From the user_profile_form_submit() function.
     /** @var \Drupal\user\UserInterface[] $users */
@@ @@

     // Try to create a new user with an email already register, the system
     // should not validate it.
-    $password4 = user_password();
+    $password4 = \Drupal::service('password_generator')->generate();
     $name4 = $this->randomMachineName();
     // Set email to 'STRING@EXAMPLE.COM'.
     $mail4 = mb_strtoupper($this->existingUser->getEmail());
@@ @@
       'pass[pass1]' => $password4,
       'pass[pass2]' => $password4,
     ];
-    $this->drupalPostForm('admin/people/create', $edit4, 'Create new account');
+    $this->drupalGet('admin/people/create');
+    $this->submitForm($edit4, 'Create new account');
     // Check if new user account has not been created.
     // Trying to add a new user with an existing email displays an error
     // message, even if there is case conflict.
@@ @@
     // Attempt to bypass duplicate email registration validation by adding
     // spaces.
     $edit['mail'] = '   ' . $mail4 . '   ';
+    $this->drupalGet('admin/people/create');

-    $this->drupalPostForm('admin/people/create', $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
     // Supplying a duplicate email address with added whitespace displays an
     // error message.
     $session->pageTextContains("The email address {$mail4} is already taken.");

     // Try to save a new user programmatically.
-    $password5 = user_password();
+    $password5 = \Drupal::service('password_generator')->generate();
     $name5 = $this->randomMachineName();
     $mail5 = $name5 . '@exAMple.com';
     $prog_user_array = [
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/dbee/tests/src/Functional/DbeeEditUserTest.php:34

    ---------- begin diff ----------
@@ @@
    *
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create a basic user with mail = 'example@example.com'. This email will
     // be used to testing if the system prevent from creating a new user with
@@ @@
       'mail' => mb_strtolower($data0[$uid]['mail']),
       'current_pass' => $pass,
     ];
-    $this->drupalPostForm('user/' . $uid . '/edit', $edit1, 'Save');
+    $this->drupalGet('user/' . $uid . '/edit');
+    $this->submitForm($edit1, 'Save');
     $data1 = $data0;
     $data1[$uid]['mail'] = $edit1['mail'];
     $this->assertTrue($this->dbeeAllUsersValid($data1), 'The user mail is correctly encrypted.');
@@ @@
       'mail' => $this->randomMachineName() . '@EXAMple.com',
       'current_pass' => $pass,
     ];
-    $this->drupalPostForm('user/' . $uid . '/edit', $edit3, 'Save');
+    $this->drupalGet('user/' . $uid . '/edit');
+    $this->submitForm($edit3, 'Save');
     // Check user account on edition.
     // We successfully edit the user email address :
     // to a new case sensitive email address:
@@ @@
       'mail' => mb_strtolower($this->randomMachineName() . '@example.com'),
       'current_pass' => $pass,
     ];
-    $this->drupalPostForm('user/' . $uid . '/edit', $edit4, 'Save');
+    $this->drupalGet('user/' . $uid . '/edit');
+    $this->submitForm($edit4, 'Save');
     // Check user account on edition.
     // We successfully edit the user email address again:
     // back to a new lower case email address:
@@ @@
       'mail' => mb_strtoupper($this->existingUser->getEmail()),
       'current_pass' => $pass,
     ];
-    $this->drupalPostForm('user/' . $uid . '/edit', $edit5, 'Save');
+    $this->drupalGet('user/' . $uid . '/edit');
+    $this->submitForm($edit5, 'Save');
     // Check if new user account has not been created.
     // From the user_account_form_validate() function.
     // The system successfully detects when someone trying to save the same
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/dbee/tests/src/Functional/DbeeCoreFunctionsTest.php:37

    ---------- begin diff ----------
@@ @@
    *
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable any modules required for the test.
     parent::setUp();
     $this->userToLoad = $this->drupalCreateUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/dbee/tests/src/Functional/DbeeContactMailTest.php:40

    ---------- begin diff ----------
@@ @@
    *
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable any modules required for the test.
     parent::setUp();
     $this->recipientUser = $this->drupalCreateUser();
@@ @@
       'subject[0][value]' => $this->randomString(20),
       'message[0][value]' => $this->randomString(128),
     ];
-    $this->drupalPostForm($contact_uri, $edit, 'Send message');
+    $this->drupalGet($contact_uri);
+    $this->submitForm($edit, 'Send message');
     $session->responseContains('Your message has been sent.');
     $this->assertMail('to', $this->recipientUser->getEmail(), 'The recipient email address is valid');
     $this->assertMail('reply-to', $this->senderUser->getEmail(), 'The sender email address is valid');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/dbee/dbee.users.inc:62

    ---------- begin diff ----------
@@ @@
         ],
       ],
       'finished' => 'dbee_update_crypt_users_all_batch_finished',
-      'file' => drupal_get_path('module', 'dbee') . '/dbee.users.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('dbee') . '/dbee.users.inc',
     ];
     batch_set($batch);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/dbee/tests/src/Functional/DbeeAdminPeopleTest.php"    
         file, due to:                                                          
         "System error:                                                         
         "DrupalRector\Rector\Deprecation\AssertNoUniqueTextRector cannot handle
         argument of type PhpParser\Node\Expr\MethodCall"                       
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 87           

