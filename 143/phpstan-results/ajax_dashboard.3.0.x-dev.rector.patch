diff --git a/modules/ajax_dashboard_example/src/Plugin/AJAXDashboardButton/AJAXDashboardJSAlertExample.php b/modules/ajax_dashboard_example/src/Plugin/AJAXDashboardButton/AJAXDashboardJSAlertExample.php
index c4b624a..1d74348 100644
--- a/modules/ajax_dashboard_example/src/Plugin/AJAXDashboardButton/AJAXDashboardJSAlertExample.php
+++ b/modules/ajax_dashboard_example/src/Plugin/AJAXDashboardButton/AJAXDashboardJSAlertExample.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ajax_dashboard_example\Plugin\AJAXDashboardButton;
 
+use Drupal\Core\Ajax\AlertCommand;
 use Drupal\ajax_dashboard\Plugin\AJAXDashboardButtonBase;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Session\AccountInterface;
@@ -47,8 +48,8 @@ class AJAXDashboardJSAlertExample extends AJAXDashboardButtonBase {
    * {@inheritdoc}
    */
   public static function AddAJAXResponseCommands(AjaxResponse $response = NULL, array $params = [], array $active_button = []) {
-    $response->addCommand(new \Drupal\Core\Ajax\AlertCommand('This example loads a Javascript alert, and the button code illustrates how to add multiple AJAX commands to a button.'));
-    $response->addCommand(new \Drupal\Core\Ajax\AlertCommand('This is a second alert command.'));
+    $response->addCommand(new AlertCommand('This example loads a Javascript alert, and the button code illustrates how to add multiple AJAX commands to a button.'));
+    $response->addCommand(new AlertCommand('This is a second alert command.'));
     return $response;
   }
 
diff --git a/src/Plugin/AJAXDashboardButton/Redirect.php b/src/Plugin/AJAXDashboardButton/Redirect.php
index 5e45426..738eb7a 100644
--- a/src/Plugin/AJAXDashboardButton/Redirect.php
+++ b/src/Plugin/AJAXDashboardButton/Redirect.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ajax_dashboard\Plugin\AJAXDashboardButton;
 
+use Drupal\Core\Ajax\RedirectCommand;
 use Drupal\ajax_dashboard\Plugin\AJAXDashboardButtonBase;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Url;
@@ -69,7 +70,7 @@ class Redirect extends AJAXDashboardButtonBase {
     if (!empty($active_button['button_data']['uri'])) {
       $url = self::getUrlFromButtonData($active_button['button_data']);
       if ($url) {
-        $response->addCommand(new \Drupal\Core\Ajax\RedirectCommand($url));
+        $response->addCommand(new RedirectCommand($url));
       }
     }
     return $response;
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 0f4ce7e..6ccf171 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -29,7 +29,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
diff --git a/vendor/composer/autoload_real.php b/vendor/composer/autoload_real.php
index bfe6955..430197e 100644
--- a/vendor/composer/autoload_real.php
+++ b/vendor/composer/autoload_real.php
@@ -1,7 +1,8 @@
 <?php
 
+use Composer\Autoload\ClassLoader;
+use Composer\Autoload\ComposerStaticInit75212614921ddadef6ee37dea4feb762;
 // autoload_real.php @generated by Composer
-
 class ComposerAutoloaderInit75212614921ddadef6ee37dea4feb762
 {
     private static $loader;
@@ -23,14 +24,14 @@ class ComposerAutoloaderInit75212614921ddadef6ee37dea4feb762
         }
 
         spl_autoload_register(array('ComposerAutoloaderInit75212614921ddadef6ee37dea4feb762', 'loadClassLoader'), true, true);
-        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
+        self::$loader = $loader = new ClassLoader();
         spl_autoload_unregister(array('ComposerAutoloaderInit75212614921ddadef6ee37dea4feb762', 'loadClassLoader'));
 
         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
         if ($useStaticLoader) {
             require_once __DIR__ . '/autoload_static.php';
 
-            call_user_func(\Composer\Autoload\ComposerStaticInit75212614921ddadef6ee37dea4feb762::getInitializer($loader));
+            call_user_func(ComposerStaticInit75212614921ddadef6ee37dea4feb762::getInitializer($loader));
         } else {
             $map = require __DIR__ . '/autoload_namespaces.php';
             foreach ($map as $namespace => $path) {
