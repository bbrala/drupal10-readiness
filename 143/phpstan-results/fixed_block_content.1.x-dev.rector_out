modules/contrib/fixed_block_content/fixed_block_content.install
modules/contrib/fixed_block_content/src/Form/ExportConfirmForm.php
modules/contrib/fixed_block_content/fixed_block_content.module
modules/contrib/fixed_block_content/fixed_block_content.post_update.php
modules/contrib/fixed_block_content/src/DefaultContentHandler.php
modules/contrib/fixed_block_content/src/Form/FixedBlockContentDeleteForm.php
modules/contrib/fixed_block_content/src/Form/FixedBlockContentForm.php
modules/contrib/fixed_block_content/src/DefaultContentHandlerInterface.php
modules/contrib/fixed_block_content/src/Entity/FixedBlockContent.php
modules/contrib/fixed_block_content/src/EventSubscriber/ConfigEventSubscriber.php
modules/contrib/fixed_block_content/src/Form/ImportConfirmForm.php
modules/contrib/fixed_block_content/src/Normalizer/BlockContentNormalizer.php
modules/contrib/fixed_block_content/src/EventSubscriber/SetFixedBlockDependency.php
modules/contrib/fixed_block_content/src/Plugin/Block/FixedBlockContentBlock.php
modules/contrib/fixed_block_content/src/FixedBlockContentAccessControlHandler.php
modules/contrib/fixed_block_content/src/FixedBlockContentInterface.php
modules/contrib/fixed_block_content/src/FixedBlockContentListBuilder.php
modules/contrib/fixed_block_content/src/Plugin/Derivative/FixedBlockContent.php
modules/contrib/fixed_block_content/tests/src/Functional/BasicFixedBlockTest.php
modules/contrib/fixed_block_content/src/FixedToContentMappingHandler.php
modules/contrib/fixed_block_content/src/FixedToContentMappingHandlerInterface.php
modules/contrib/fixed_block_content/tests/src/Functional/FixedBlockAdminTest.php
modules/contrib/fixed_block_content/tests/src/Functional/FunctionalFixedBlockTestBase.php
modules/contrib/fixed_block_content/tests/src/Kernel/AutoExportTest.php
modules/contrib/fixed_block_content/tests/src/Kernel/DefaultContentTest.php
modules/contrib/fixed_block_content/tests/src/Kernel/FixedBlockContentKernelTestBase.php
modules/contrib/fixed_block_content/tests/src/Kernel/FixedToContentMappingTest.php
modules/contrib/fixed_block_content/tests/src/Kernel/ProtectedFixedBlockTest.php

6 files with changes
====================

1) modules/contrib/fixed_block_content/tests/src/Kernel/FixedToContentMappingTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mappingHandler = $this->entityTypeManager->getHandler('fixed_block_content', 'mapping_handler');
     // Create a simple block content to work with it.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fixed_block_content/tests/src/Kernel/FixedBlockContentKernelTestBase.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/fixed_block_content/tests/src/Kernel/DefaultContentTest.php:25

    ---------- begin diff ----------
@@ @@
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     $this->assertNotNull($block_content);
     // Test that it is a new block content.
-    $this->assertEqual($block_content->id(), 1);
+    $this->assertEquals($block_content->id(), 1);

     // Tests that the default content export updates existing block content.
     $block_content->get('body')->setValue('To be overridden.');
@@ @@
     $this->fixedBlock->exportDefaultContent(TRUE);
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     // Must be the same block content.
-    $this->assertEqual($block_content->id(), 1);
+    $this->assertEquals($block_content->id(), 1);
     // The body must be empty, as it is in the default content.
     $this->assertTrue($block_content->get('body')->isEmpty());

@@ @@
     $this->fixedBlock->exportDefaultContent();
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     // It must be a new block content.
-    $this->assertEqual($block_content->id(), 2);
+    $this->assertEquals($block_content->id(), 2);
     // Tests that the default content was correctly exported.
-    $this->assertEqual($block_content->get('body')->getString(), $test_content);
+    $this->assertEquals($block_content->get('body')->getString(), $test_content);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fixed_block_content/tests/src/Kernel/AutoExportTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Export the initial config, including fixed blocks from the test module.
@@ @@

     // Check that there is no changes in the block content linked to the test
     // fixed block with the auto-export option disabled.
-    $this->assertEqual($fixed_blocks['test_auto_export_disabled']->getBlockContent(FALSE), $block_contents['test_auto_export_disabled']);
+    $this->assertEquals($fixed_blocks['test_auto_export_disabled']->getBlockContent(FALSE), $block_contents['test_auto_export_disabled']);

     // Check that the fixed block with the auto-export on empty option
     // has no changes.
-    $this->assertEqual($fixed_blocks['auto_export_on_empty']->getBlockContent(FALSE), $block_contents['auto_export_on_empty']);
+    $this->assertEquals($fixed_blocks['auto_export_on_empty']->getBlockContent(FALSE), $block_contents['auto_export_on_empty']);

     // Check that the fixed block with the auto-export always option
     // has a block content linked.
-    $this->assertNotEqual($fixed_blocks['auto_export_always']->getBlockContent(FALSE), $block_contents['auto_export_always']);
+    $this->assertNotEquals($fixed_blocks['auto_export_always']->getBlockContent(FALSE), $block_contents['auto_export_always']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/fixed_block_content/tests/src/Functional/FunctionalFixedBlockTestBase.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a content block type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/fixed_block_content/tests/src/Functional/FixedBlockAdminTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create and log in an administrative user.
@@ @@
     $this->clickLink('Custom block library');
     $this->clickLink('Fixed blocks');
     $this->clickLink('Restore default content');
-    $this->assertText('Are you sure you want to restore the Basic fixed to its default content?');
+    $this->assertSession()->pageTextContains('Are you sure you want to restore the Basic fixed to its default content?');
     // Confirm the form.
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->submitForm([], 'Confirm');
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
     // The block content must be created.
     $this->assertNotNull($block_content);
@@ @@
     $this->clickLink('Custom block library');
     $this->clickLink('Fixed blocks');
     $this->clickLink('Set contents as default');
-    $this->assertText('Are you sure you want to set the Basic fixed current content as the default?');
+    $this->assertSession()->pageTextContains('Are you sure you want to set the Basic fixed current content as the default?');
     // Confirm the form.
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->submitForm([], 'Confirm');
     // Update the fixed block content object.
     $this->fixedBlock = $this->container->get('entity_type.manager')
       ->getStorage('fixed_block_content')->load('basic_fixed');
@@ @@

     // Go to export (restore) block with the default content page.
     $this->drupalGet('admin/structure/block/block-content/fixed-block-content/manage/basic_fixed/export');
-    $this->assertText('Are you sure you want to restore the Basic fixed to its default content?');
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->assertSession()->pageTextContains('Are you sure you want to restore the Basic fixed to its default content?');
+    $this->submitForm([], 'Confirm');

     // A new block must has been created.
     $block_content = $this->fixedBlock->getBlockContent(FALSE);
@@ @@
     // Go to export (restore) block with the default content page.
     $this->drupalGet('admin/structure/block/block-content/fixed-block-content/manage/basic_fixed/export');
     // The update existing option must be present.
-    $this->assertText('Update the existing block content');
+    $this->assertSession()->pageTextContains('Update the existing block content');
     // Proceed enabling the update existing option.
-    $this->drupalPostForm(NULL, ['update_existing' => TRUE], 'Confirm');
+    $this->submitForm(['update_existing' => TRUE], 'Confirm');

     // The block content must be the same as the previously existing.
     $new_block_content = $this->fixedBlock->getBlockContent(FALSE);
@@ @@
     $this->drupalGet('admin/structure/block/block-content/fixed-block-content');
     $this->clickLink('Delete');
     // The "Delete the linked custom block as well" must be present in the form.
-    $this->assertText('Delete the linked custom block as well');
+    $this->assertSession()->pageTextContains('Delete the linked custom block as well');
     // Enable it.
     $edit = ['delete_linked_block' => TRUE];
     // Confirm the form.
-    $this->drupalPostForm(NULL, $edit, 'Delete');
-    $this->assertText('The fixed block content Basic fixed has been deleted.');
+    $this->submitForm($edit, 'Delete');
+    $this->assertSession()->pageTextContains('The fixed block content Basic fixed has been deleted.');

     // Test that the fixed block content was deleted.
     $this->fixedBlock = $this->container->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

