modules/contrib/password_change_rules/password_change_rules.module
modules/contrib/password_change_rules/src/EventSubscriber/EnforcePasswordChange.php
modules/contrib/password_change_rules/src/Form/SettingsForm.php
modules/contrib/password_change_rules/src/PasswordEnforcer.php
modules/contrib/password_change_rules/tests/src/Functional/PasswordChangeAdminUi.php
modules/contrib/password_change_rules/tests/src/Functional/PasswordChangeTest.php

3 files with changes
====================

1) modules/contrib/password_change_rules/tests/src/Functional/PasswordChangeTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->admin = $this->createUser([
       'administer users',
@@ @@

     $username = $this->randomMachineName();
     $mail = $username . '@example.com';
-    $pass = user_password();
-    $this->drupalPostForm('/user/register', [
+    $pass = \Drupal::service('password_generator')->generate();
+    $this->drupalGet('/user/register');
+    $this->submitForm([
       'name' => $username,
       'mail' => $mail,
       'pass[pass1]' => $pass,
@@ @@
     $this->drupalLogin($this->admin);
     $mail = $this->randomMachineName() . '@example.com';
     $original_password = 'admin-set-password';
-    $this->drupalPostForm(Url::fromRoute('user.admin_create'), [
+    $this->drupalGet(Url::fromRoute('user.admin_create'));
+    $this->submitForm([
       'mail' => $mail,
       'name' => $mail,
       'pass[pass1]' => $original_password,
@@ @@
     ], 'Create new account');

     $this->drupalLogout();
-    $this->drupalPostForm(Url::fromRoute('user.login'), ['name' => $mail, 'pass' => $original_password], 'Log in');
+    $this->drupalGet(Url::fromRoute('user.login'));
+    $this->submitForm(['name' => $mail, 'pass' => $original_password], 'Log in');
     // @TODO, remove this...
     $this->drupalGet($this->getUrl() . '/edit');

@@ @@
     $this->assertSession()->pageTextContains($this->getPasswordChangeMessage());

     // Attempt to change it to the same password.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'current_pass' => $original_password,
       'pass[pass1]' => $original_password,
       'pass[pass2]' => $original_password,
@@ @@
     ], 'Save');
     $this->assertSession()->pageTextContains('You must change your password to something new');

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'current_pass' => $original_password,
       'pass[pass1]' => 'new-password',
       'pass[pass2]' => 'new-password',
@@ @@
     // Reset the password as an admin and then force the user to change their
     // password.
     $url = Url::fromRoute('entity.user.edit_form', ['user' => $this->user->id()]);
-    $this->drupalPostForm($url, [
+    $this->drupalGet($url);
+    $this->submitForm([
       'pass[pass1]' => $original_password,
       'pass[pass2]' => $original_password,
       'password_change_rules[value]' => TRUE,
@@ @@

     // Login as the user and ensure we're required to reset our password.
     $this->drupalLogout();
-    $this->drupalPostForm(Url::fromRoute('user.login'), ['name' => $this->user->getAccountName(), 'pass' => $original_password], 'Log in');
+    $this->drupalGet(Url::fromRoute('user.login'));
+    $this->submitForm(['name' => $this->user->getAccountName(), 'pass' => $original_password], 'Log in');
     $this->assertSession()->pageTextContains($this->getPasswordChangeMessage());

     // Update our account and the password notification will disappear.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'current_pass' => $original_password,
       'pass[pass1]' => 'new-password',
       'pass[pass2]' => 'new-password',
@@ @@
     $this->assertSession()->fieldNotExists('password_change_rules[value]');

     $mail = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm(Url::fromRoute('user.admin_create'), [
+    $this->drupalGet(Url::fromRoute('user.admin_create'));
+    $this->submitForm([
       'mail' => $mail,
       'name' => $mail,
       'pass[pass1]' => $original_password,
@@ @@
     ], 'Create new account');

     $this->drupalLogout();
-    $this->drupalPostForm(Url::fromRoute('user.login'), [
+    $this->drupalGet(Url::fromRoute('user.login'));
+    $this->submitForm([
       'name' => $mail,
       'pass' => $original_password,
     ], 'Log in');
@@ @@
       // Login as the admin and change the users password.
       $this->drupalLogin($this->admin);
       $url = Url::fromRoute('entity.user.edit_form', ['user' => $this->user->id()]);
-      $this->drupalPostForm($url, [
+      $this->drupalGet($url);
+      $this->submitForm([
         'pass[pass1]' => 'new-password',
         'pass[pass2]' => 'new-password',
       ], 'Save');
@@ @@

       // Login as the user.
       $this->drupalLogout();
-      $this->drupalPostForm(Url::fromRoute('user.login'), [
+      $this->drupalGet(Url::fromRoute('user.login'));
+      $this->submitForm([
         'name' => $this->user->getAccountName(),
         'pass' => 'new-password',
       ], 'Log in');
@@ @@
     $this->user->save();
     $url = user_pass_reset_url($this->user);
     $this->drupalGet($url);
-    $this->drupalPostForm(NULL, [], 'Log in');
+    $this->submitForm([], 'Log in');

     // We should not be required to enter our current password.
     $this->assertSession()->pageTextNotContains('Current password');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/password_change_rules/tests/src/Functional/PasswordChangeAdminUi.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->admin = $this->createUser([
       'administer password change rules',
@@ @@
     $session->checkboxNotChecked('admin_change_password');

     // Change settings and ensure they're saved.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'change_password_message' => 'Test message',
       'admin_registered_account' => '1',
       'admin_change_password' => '1',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/password_change_rules/src/EventSubscriber/EnforcePasswordChange.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\password_change_rules\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Routing\LocalRedirectResponse;
@@ @@
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Force the user to change their password.
    */
-  public function enforcePasswordChange(FilterResponseEvent $event) {
+  public function enforcePasswordChange(ResponseEvent $event) {
     $request = $event->getRequest();

     // If they're not logged in or already or the correct page do nothing.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

