modules/contrib/search_api_sorts/search_api_sorts.api.php
modules/contrib/search_api_sorts/tests/fixtures/update/search-api-sorts-db-base.php
modules/contrib/search_api_sorts/search_api_sorts.install
modules/contrib/search_api_sorts/tests/src/Functional/Update/SearchApiSortsUpdate8103Test.php
modules/contrib/search_api_sorts/tests/fixtures/update/search-api-sorts-test-update-8102.php
modules/contrib/search_api_sorts/tests/fixtures/update/search-api-sorts-test-update-8103.php
modules/contrib/search_api_sorts/search_api_sorts.module
modules/contrib/search_api_sorts/tests/search_api_sorts_test_entity/src/Entity/SearchApiSortsTestEntityQuery.php
modules/contrib/search_api_sorts/src/ConfigIdEscapeTrait.php
modules/contrib/search_api_sorts/src/Controller/AdminController.php
modules/contrib/search_api_sorts/tests/search_api_sorts_test_entity/src/Entity/SearchApiSortsTestEntityQueryFactory.php
modules/contrib/search_api_sorts/tests/search_api_sorts_test_hook/search_api_sorts_test_hook.module
modules/contrib/search_api_sorts/tests/src/Functional/HooksTest.php
modules/contrib/search_api_sorts/tests/src/Functional/Update/SearchApiSortsUpdateBase.php
modules/contrib/search_api_sorts/tests/src/Kernel/SearchApiSortsKernelTest.php
modules/contrib/search_api_sorts/src/Entity/SearchApiSortsField.php
modules/contrib/search_api_sorts/src/EventSubscriber/SearchApiSortsQueryPreExecute.php
modules/contrib/search_api_sorts/tests/src/Unit/SearchApiSortsManagerTest.php
modules/contrib/search_api_sorts/src/Form/ManageSortFieldsForm.php
modules/contrib/search_api_sorts/tests/src/Functional/IntegrationTest.php
modules/contrib/search_api_sorts/tests/src/Unit/SortsFieldTest.php
modules/contrib/search_api_sorts/tests/src/Functional/SortsFunctionalBase.php
modules/contrib/search_api_sorts/src/Plugin/Block/SearchApiSortsBlock.php
modules/contrib/search_api_sorts/tests/src/Functional/TranslationTest.php
modules/contrib/search_api_sorts/src/Plugin/Block/SearchApiSortsBlockDeriver.php
modules/contrib/search_api_sorts/src/SearchApiSortsManager.php
modules/contrib/search_api_sorts/src/SearchApiSortsManagerInterface.php
modules/contrib/search_api_sorts/src/SortsField.php
modules/contrib/search_api_sorts/tests/src/Functional/Update/SearchApiSortsUpdate8102Test.php

5 files with changes
====================

1) modules/contrib/search_api_sorts/tests/src/Unit/SearchApiSortsManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\search_api_sorts\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class SearchApiSortsManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * ModuleHandler object.
    *
@@ @@

     $sortsField = new SearchApiSortsField(['id' => $this->randomMachineName()], 'search_api_sorts_field');

-    $storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $storage = $this->createMock(EntityStorageInterface::class);

     $storage->expects($this->once())
       ->method('loadByProperties')
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/search_api_sorts/search_api_sorts.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api_sorts\SortsField;
+use Drupal\search_api\Display\DisplayInterface;
 /**
  * @file
  * Hooks provided by the Search API sorts module.
@@ @@
  *
  * @see \Drupal\search_api_sorts\SearchApiSortsManager
  */
-function hook_search_api_sorts_active_sort_alter(\Drupal\search_api_sorts\SortsField &$sort, \Drupal\search_api\Display\DisplayInterface $display) {
+function hook_search_api_sorts_active_sort_alter(SortsField &$sort, DisplayInterface $display) {

   // Example: use different price for anonymous users when sorting on price.
   if ($sort->getFieldName() === "price" && \Drupal::currentUser()->isAnonymous()) {
@@ @@
  *
  * @see \Drupal\search_api_sorts\SearchApiSortsManager
  */
-function hook_search_api_sorts_default_sort_alter(\Drupal\search_api_sorts\SortsField &$sort, \Drupal\search_api\Display\DisplayInterface $display) {
+function hook_search_api_sorts_default_sort_alter(SortsField &$sort, DisplayInterface $display) {
   $sort->setFieldName("title");
   $sort->setOrder("desc");
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/search_api_sorts/tests/src/Functional/TranslationTest.php:80

    ---------- begin diff ----------
@@ @@
       'sorts[id][status]' => TRUE,
       'default_sort' => 'id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Check if the config is saved in the default language.
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'id');
@@ @@
       'sorts[id][status]' => TRUE,
       'default_sort' => 'id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Check if config is saved in the default language (EN).
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'id');
@@ @@
     $edit = [
       'sorts[created][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Check if ID field config is still saved in the default language.
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'id');
@@ @@
     // Check if created config is also saved in the default language.
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'created');
     $this->assertEquals('en', $search_api_sorts_field->language()->getId());
+    $this->drupalGet('admin/config/search/search-api/sorts/' . $this->escapedDisplayId . '_' . 'id' . '/translate/fr/add');

     // Translate the ID field.
-    $this->drupalPostForm('admin/config/search/search-api/sorts/' . $this->escapedDisplayId . '_' . 'id' . '/translate/fr/add', [
+    $this->submitForm([
       'translation[config_names][search_api_sorts.search_api_sorts_field.' . $this->escapedDisplayId . '_' . 'id' . '][label]' => 'Identifiant',
     ], 'Save translation');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/search_api_sorts/tests/src/Functional/IntegrationTest.php:22

    ---------- begin diff ----------
@@ @@
     $edit = [
       'sorts[id][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Check for non-existence of the block first.
     $this->drupalGet('search-api-sorts-test');
@@ @@
       'sorts[search_api_relevance][status]' => TRUE,
       'sorts[type][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Make sure the ID and type link are available.
     $this->drupalGet('search-api-sorts-test');
@@ @@
     // Remove the type field from the index.
     $this->drupalGet('admin/config/search/search-api/index/' . $this->indexId . '/fields');
     $this->getSession()->getPage()->find('css', '#edit-fields-type-remove')->click();
-    $this->drupalPostForm(NULL, [], 'Save changes');
+    $this->submitForm([], 'Save changes');

     // The type field was removed from the index. Make sure the type field is
     // also removed from the sorts block.
@@ @@
       'sorts[type][status]' => TRUE,
       'default_sort' => 'id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     $configs_to_be_saved = ['id', 'created', 'type'];
     $configs_not_to_be_saved = ['search_api_relevance',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/search_api_sorts/tests/src/Functional/HooksTest.php:22

    ---------- begin diff ----------
@@ @@
     $sorts_config = 'admin/config/search/search-api/index/' . $this->indexId . '/sorts/' . $this->escapedDisplayId;
     $this->drupalGet($sorts_config);
     $edit = ['sorts[id][status]' => TRUE, 'default_sort' => 'id'];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

     // Add and place the sorts block in the footer.
     $block_settings = ['region' => 'footer', 'id' => 'sorts-id'];
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

