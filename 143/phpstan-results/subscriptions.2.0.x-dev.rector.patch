diff --git a/subscriptions.admin.old.php b/subscriptions.admin.old.php
index d2d1c41..8fae30a 100644
--- a/subscriptions.admin.old.php
+++ b/subscriptions.admin.old.php
@@ -75,9 +75,9 @@ function subscriptions_settings_form(array $form, array &$form_state) {
         !module_exists('subscriptions_content') ||
         !module_exists('subscriptions_taxonomy'))) {
     if (empty($_POST)) {
-      drupal_set_message(t('Note: For standard Subscriptions functionality you need to enable the following modules:')
+      \Drupal::messenger()->addWarning(t('Note: For standard Subscriptions functionality you need to enable the following modules:')
                          . '<ul><li>' . $tr('Subscriptions UI') . '</li><li>' . $tr('Subscriptions Mail ')
-                         . '</li><li>' . $tr('Content Subscriptions') . '</li><li>' . $tr('Taxonomy Subscriptions') . '</li></ul>', 'warning', FALSE);
+                         . '</li><li>' . $tr('Content Subscriptions') . '</li><li>' . $tr('Taxonomy Subscriptions') . '</li></ul>', FALSE);
     }
     $form['subscriptions_show_install_info'] = array(
       '#type'          => 'checkbox',
@@ -107,7 +107,7 @@ function theme_subscriptions_form_table(array $variables) {
   $element = $variables['element'];
   $output = '';
   $rows = array();
-  drupal_add_js(drupal_get_path('module', 'subscriptions') . '/subscriptions_tableselect.js', array('preprocess' => FALSE));
+  drupal_add_js(\Drupal::service('extension.list.module')->getPath('subscriptions') . '/subscriptions_tableselect.js', array('preprocess' => FALSE));
   $columns['checkboxes']      = array('data' => '', 'width' => '1%', 'class' => 'subscriptions-table select-all');
   $columns['labels']          = array('data' => t('Subscription'), 'width' => '18%');
   if (isset($element['send_interval']) && $element['send_interval']['#access']) {
@@ -145,7 +145,7 @@ function theme_subscriptions_form_table(array $variables) {
         }
         $row = array();
         foreach ($column_keys as $colkey) {
-          $row[] = drupal_render($element[$colkey][$key][$key1]);
+          $row[] = \Drupal::service('renderer')->render($element[$colkey][$key][$key1]);
         }
         $rows[] = $row;
       }
@@ -227,7 +227,7 @@ function subscriptions_page_form_submit(array $form, array &$form_state) {
       }
     }
     if (!empty($changed)) {
-      drupal_set_message(t('Your subscriptions were updated.'));
+      \Drupal::messenger()->addStatus(t('Your subscriptions were updated.'));
     }
   }
   if (!empty($rid0)) {
@@ -379,7 +379,7 @@ function subscriptions_page_user_overview(array $form, array &$form_state, $acco
   // Build summary
   $uid = (!empty($account) ? $account->uid : -DRUPAL_AUTHENTICATED_RID);
   $counts = array();
-  $result = db_query("SELECT module, field, COUNT(1) AS number FROM {subscriptions} WHERE recipient_uid = :recipient_uid GROUP BY module, field", array(':recipient_uid' => $uid));
+  $result = \Drupal::database()->query("SELECT module, field, COUNT(1) AS number FROM {subscriptions} WHERE recipient_uid = :recipient_uid GROUP BY module, field", array(':recipient_uid' => $uid));
   foreach ($result as $subs) {
     if (!empty($subs->module)) {
       $counts[$subs->module][$subs->field] = $subs->number;
@@ -457,7 +457,7 @@ function subscriptions_user_suspend_form(array &$form, array &$form_state, $acco
   );
   $count = 0;
   if ($suspended) {
-    $count = db_query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE uid = :uid AND suspended <> 0", array(':uid' => $uid))->fetchField();
+    $count = \Drupal::database()->query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE uid = :uid AND suspended <> 0", array(':uid' => $uid))->fetchField();
   }
   $tr = 't';
   $options[] = $tr('Yes');
@@ -506,14 +506,14 @@ function _subscriptions_user_suspend_form_submit(array $form, array &$form_state
     $uid = $form_values['uid'];
     $suspended = $form_values['state'];
     if ($suspended == -1) {
-      db_delete('subscriptions_queue')
+      \Drupal::database()->delete('subscriptions_queue')
         ->condition('uid', $uid)
         ->condition('suspended', 0, '<>')
         ->execute();
       $suspended = 0;
     }
     _subscriptions_user_suspend($uid, $suspended);
-    drupal_set_message(t('The changes have been saved.'));
+    \Drupal::messenger()->addStatus(t('The changes have been saved.'));
   }
 }
 
@@ -524,13 +524,13 @@ function _subscriptions_user_suspend_form_submit(array $form, array &$form_state
  * @param int $suspend
  */
 function _subscriptions_user_suspend($uid, $suspended) {
-  db_update('subscriptions_user')
+  \Drupal::database()->update('subscriptions_user')
     ->fields(array(
         'suspended' => $suspended,
       ))
     ->condition('uid', $uid)
     ->execute();
-  db_update('subscriptions_queue')
+  \Drupal::database()->update('subscriptions_queue')
     ->fields(array(
         'suspended' => $suspended,
       ))
@@ -551,14 +551,14 @@ function _subscriptions_suspended_alert($uid, $suspended) {
     case 2:
       $msg = t('Your subscriptions have been suspended because your e-mail address did not work anymore!');
       if (!(subscriptions_arg(0) == 'user' && subscriptions_arg(1, 'uid') == $uid && subscriptions_arg(2) == 'edit')) {
-        drupal_set_message($msg . '<br />' . t('Please go <a href="@path1">here</a> to update your e-mail address and then <a href="@path2">here</a> to resume delivery of your notifications.', array('@path1' => url("user/$uid/edit"), '@path2' => $path2)), 'error', FALSE);
+        \Drupal::messenger()->addError($msg . '<br />' . t('Please go <a href="@path1">here</a> to update your e-mail address and then <a href="@path2">here</a> to resume delivery of your notifications.', array('@path1' => url("user/$uid/edit"), '@path2' => $path2)), FALSE);
       }
       else {
-        drupal_set_message($msg . '<br />' . t('Please correct/verify your e-mail address below and then go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), 'error', FALSE);
+        \Drupal::messenger()->addError($msg . '<br />' . t('Please correct/verify your e-mail address below and then go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), FALSE);
       }
       break;
     case 1:
-      drupal_set_message(t('Your subscriptions are suspended. Please go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), 'warning', FALSE);
+      \Drupal::messenger()->addWarning(t('Your subscriptions are suspended. Please go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), FALSE);
       break;
   }
 }
@@ -803,7 +803,7 @@ function _subscriptions_user_settings_form_submit(array $form, array &$form_stat
   $uid = subscriptions_arg(1, 'uid');
   if (isset($form_state['values']['reset']) && $form_state['values']['op'] == $form_state['values']['reset']) {
     if ($uid > 0) {
-      db_update('subscriptions_user')
+      \Drupal::database()->update('subscriptions_user')
         ->fields(array(
           'digest' => -1,
           'secure_links' => -1,
@@ -820,7 +820,7 @@ function _subscriptions_user_settings_form_submit(array $form, array &$form_stat
         ))
         ->condition('uid', $uid)
         ->execute();
-      drupal_set_message(t('The site defaults were restored.'));
+      \Drupal::messenger()->addStatus(t('The site defaults were restored.'));
     }
   }
   elseif ($form_state['values']['op'] == $form_state['values']['save_settings']) {
@@ -834,7 +834,7 @@ function _subscriptions_user_settings_form_submit(array $form, array &$form_stat
     $send_interval_visible = 1 - $form_state['values']['send_interval_visible'];
     $send_updates_visible = 1 - $form_state['values']['send_updates_visible'];
     $send_comments_visible = 1 - $form_state['values']['send_comments_visible'];
-    db_update('subscriptions_user')
+    \Drupal::database()->update('subscriptions_user')
       ->fields(array(
         'digest' => $form_state['values']['digest'],
         'secure_links' => (isset($form_state['values']['secure_links']) ? $form_state['values']['secure_links'] : 0),
@@ -851,7 +851,7 @@ function _subscriptions_user_settings_form_submit(array $form, array &$form_stat
       ))
       ->condition('uid', $uid)
       ->execute();
-    drupal_set_message(t('The changes have been saved.'));
+    \Drupal::messenger()->addStatus(t('The changes have been saved.'));
   }
 }
 
@@ -971,7 +971,7 @@ function subscriptions_intervals_submit(array $form, array &$form_state) {
     }
   }
   variable_set('subscriptions_send_intervals', $intervals);
-  drupal_set_message(t('The changes have been saved.'));
+  \Drupal::messenger()->addStatus(t('The changes have been saved.'));
 }
 
 /**
@@ -1042,11 +1042,11 @@ function subscriptions_add_form_submit(array $form, array &$form_state) {
     list($module, $field, $value, $author_uid) = $a;
     $uid = $form_state['values']['uid'];
     subscriptions_write_subscription($module, $field, $value, $author_uid, $uid, $form_state['values']['send_interval'], $form_state['values']['updates'], $form_state['values']['comments']);
-    drupal_set_message(t('Your subscription was activated.'));
+    \Drupal::messenger()->addStatus(t('Your subscription was activated.'));
     $form_state['redirect'] = '<front>';
   }
   else {
-    drupal_set_message(t('Your subscription could not be activated.'));
+    \Drupal::messenger()->addStatus(t('Your subscription could not be activated.'));
   }
 }
 
@@ -1081,7 +1081,7 @@ function subscriptions_del_form(array $form, array &$form_state, $stype, $sid, $
     list($module, $field, $value, $author_uid) = $a;
     return subscriptions_delete_form($form, $form_state, $module, $field, $value, $author_uid, $user->uid);
   }
-  drupal_set_message(t('Your subscription could not be deactivated.'));
+  \Drupal::messenger()->addStatus(t('Your subscription could not be deactivated.'));
   return NULL;
 }
 
@@ -1131,7 +1131,7 @@ function subscriptions_form_helper(array &$form, array &$defaults, $author_uid,
     $defaults['send_updates'][$key][$author_uid] = 1;
   }
   if (isset($subscription['author_uid']) && $subscription['author_uid'] > 0) {
-    $author_value = format_username(user_load($subscription['author_uid']));
+    $author_value = format_username(\Drupal::service('entity_type.manager')->getStorage('user')->load($subscription['author_uid']));
   }
   elseif ($author_uid == 0) {
     $author_value = format_username(NULL);
diff --git a/subscriptions.api.php b/subscriptions.api.php
index 5e51774..5b3cd7d 100644
--- a/subscriptions.api.php
+++ b/subscriptions.api.php
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\subscriptions\Event\QueueEvent;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Hooks for the subscriptions module.
@@ -52,7 +56,7 @@ function hook_subscriptions_access_alter() {
  * @param \Drupal\Core\Session\AccountInterface $account
  *   The user whose counts are being collected.
  */
-function hook_subscriptions_counts_alter(array &$counts, \Drupal\Core\Session\AccountInterface $account) {
+function hook_subscriptions_counts_alter(array &$counts, AccountInterface $account) {
   $counts['example']['eid'] += $account->id();
 }
 
@@ -106,11 +110,11 @@ function hook_subscriptions_queue() {
   subscriptions_queue($event);
 
   // Drupal 9:
-  $event = new \Drupal\subscriptions\Event\QueueEvent(
+  $event = new QueueEvent(
     'node',
     'nid',
     $node->id(),
-    $inserted ? \Drupal\subscriptions\Event\QueueEvent::OPERATION_INSERT : \Drupal\subscriptions\Event\QueueEvent::OPERATION_UPDATE,
+    $inserted ? QueueEvent::OPERATION_INSERT : QueueEvent::OPERATION_UPDATE,
     $node->getOwnerId(),
   );
   /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
@@ -258,18 +262,18 @@ function hook_subscriptions_types(): array {
  * @ingroup callbacks
  * @ingroup subscriptions
  */
-function callback_subscriptions_example_access(\Drupal\Core\Session\AccountInterface $user, array $subscription_type): \Drupal\Core\Access\AccessResultInterface {
+function callback_subscriptions_example_access(AccountInterface $user, array $subscription_type): AccessResultInterface {
   // Allow access if the user's ID is an odd number.
   if ($user->id() % 2 === 1) {
-    return \Drupal\Core\Access\AccessResult::allowed();
+    return AccessResult::allowed();
   }
   // Deny access if the user has the letter Y anywhere in their account name.
   elseif (mb_stripos($user->getAccountName(), 'Y') !== FALSE) {
-    return \Drupal\Core\Access\AccessResult::forbidden();
+    return AccessResult::forbidden();
   }
   // If nothing else, return a neutral result.
   else {
-    return \Drupal\Core\Access\AccessResult::neutral();
+    return AccessResult::neutral();
   }
 }
 
diff --git a/subscriptions.module.old.php b/subscriptions.module.old.php
index 662b8cb..f0609ea 100644
--- a/subscriptions.module.old.php
+++ b/subscriptions.module.old.php
@@ -322,7 +322,7 @@ function subscriptions_permission() {
  */
 function subscriptions_user_insert(array $edit, &$account, $category) {
   $new_uid = &drupal_static('subscriptions_user_insert', 0);
-  db_insert('subscriptions_user')
+  \Drupal::database()->insert('subscriptions_user')
     ->fields(array(
       'uid' => $account->uid,
     ))
@@ -335,13 +335,13 @@ function subscriptions_user_insert(array $edit, &$account, $category) {
   foreach (array_keys($account->roles) as $rid) {
     $rids[] = -$rid;
   }
-  $query = db_select('subscriptions', 's')
+  $query = \Drupal::database()->select('subscriptions', 's')
     ->fields('s', array('module', 'field', 'value'));
   $query->addExpression($new_uid, 'recipient_uid');
   $query
     ->fields('s', array('send_interval', 'author_uid', 'send_updates', 'send_comments'))
     ->condition('s.recipient_uid', $rids, 'IN');
-  db_insert('subscriptions', array('return' => Database::RETURN_NULL))
+  \Drupal::database()->insert('subscriptions', array('return' => Database::RETURN_NULL))
     ->from($query)
     ->execute();
 }
@@ -385,14 +385,14 @@ function subscriptions_user_cancel($edit, $account) {
  * @ingroup hooks
  */
 function subscriptions_user_delete($account) {
-  db_delete('subscriptions_queue')
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('uid', $account->uid)
     ->execute();
-  db_delete('subscriptions_user')
+  \Drupal::database()->delete('subscriptions_user')
     ->condition('uid', $account->uid)
     ->execute();
   subscriptions_delete($account->uid);
-  db_delete('subscriptions_last_sent')
+  \Drupal::database()->delete('subscriptions_last_sent')
     ->condition('uid', $account->uid)
     ->execute();
 }
@@ -416,7 +416,7 @@ function subscriptions_user_delete($account) {
  *   The number of deleted rows or a database connection-dependent value.
  */
 function subscriptions_delete($recipient_uid, $module = NULL, $field = NULL, $value = NULL, $author_uid = NULL) {
-  $query = db_delete('subscriptions');
+  $query = \Drupal::database()->delete('subscriptions');
   foreach (array('module', 'field', 'value', 'author_uid', 'recipient_uid') as $column) {
     if (!empty($$column)) {
       $query->condition($column, $$column);
@@ -518,7 +518,7 @@ function subscriptions_queue(array $event) {
     }
     foreach ($subs_module_query as $module => $module_query) {
       foreach ($module_query as $field => $query) {
-        $select = db_select('subscriptions', 's');
+        $select = \Drupal::database()->select('subscriptions', 's');
         $select->innerJoin('subscriptions_user', 'su', 's.recipient_uid = su.uid');
         $select->innerJoin('users', 'u', 'su.uid = u.uid');
         $select->leftJoin('subscriptions_last_sent', 'sls', 'su.uid = sls.uid AND s.send_interval = sls.send_interval');
@@ -577,7 +577,7 @@ function subscriptions_queue(array $event) {
           $select
             ->groupBy($query['groupby']);
         }
-        $insert = db_insert('subscriptions_queue', array('return' => Database::RETURN_NULL))
+        $insert = \Drupal::database()->insert('subscriptions_queue', array('return' => Database::RETURN_NULL))
           ->from($select);
         /*  for debugging:
         $sqid = $insert->execute();
@@ -605,7 +605,7 @@ function subscriptions_get_subscription($uid, $module, $field, $value, $author_u
   static $subscriptions;
 
   if (!isset($subscriptions[$uid][$module][$field][$value][$author_uid])) {
-    $subscriptions[$uid][$module][$field][$value][$author_uid] = db_query("SELECT sid FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND author_uid = :author_uid AND recipient_uid = :recipient_uid", array(
+    $subscriptions[$uid][$module][$field][$value][$author_uid] = \Drupal::database()->query("SELECT sid FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND author_uid = :author_uid AND recipient_uid = :recipient_uid", array(
       ':module' => $module,
       ':field' => $field,
       ':value' => $value,
@@ -693,7 +693,7 @@ function subscriptions_delete_form(array $form, array &$form_state, $module, $fi
 function subscriptions_delete_form_submit(array $form, array &$form_state) {
   $data = $form_state['values']['data'];
   subscriptions_delete($data['4'], $data['0'], $data['1'], $data['2'], $data['3']);
-  drupal_set_message(t('Your subscription was deactivated.'));
+  \Drupal::messenger()->addStatus(t('Your subscription was deactivated.'));
   $form_state['redirect'] = '<front>';
 }
 
@@ -726,7 +726,7 @@ function subscriptions_autosubscribe($module, $field, $value, $context) {
 function subscriptions_get(array $params) {
   $subscriptions = array();
   // Build query
-  $query = db_select('subscriptions', 's');
+  $query = \Drupal::database()->select('subscriptions', 's');
   $query->fields('s');
   foreach ($params as $field => $value) {
     $query->condition($field, $value);
@@ -816,7 +816,7 @@ function _subscriptions_validate_hook_result($stype, array $data) {
         }
       }
     }
-    drupal_set_message(t('The following modules return invalid data from %hook: !modules   Either they are buggy !Subscriptions add-ons, or they are unrelated to !Subscriptions and should not define %hook!', array('%hook' => 'hook_subscriptions()', '!modules' => '<ul><li>' . implode($modules, '</li><li>') . '</li></ul>', '!Subscriptions' => 'Subscriptions')), 'error', FALSE);
+    \Drupal::messenger()->addError(t('The following modules return invalid data from %hook: !modules   Either they are buggy !Subscriptions add-ons, or they are unrelated to !Subscriptions and should not define %hook!', array('%hook' => 'hook_subscriptions()', '!modules' => '<ul><li>' . implode($modules, '</li><li>') . '</li></ul>', '!Subscriptions' => 'Subscriptions')), FALSE);
   }
   return FALSE;
 }
@@ -900,7 +900,7 @@ function _subscriptions_get_setting($name, $account) {
 
   static $defaults = array();
   if (!isset($defaults[$uid][$name])) {
-    $result = db_select('subscriptions_user', 'su', array('fetch' => PDO::FETCH_ASSOC))
+    $result = \Drupal::database()->select('subscriptions_user', 'su', array('fetch' => PDO::FETCH_ASSOC))
       ->fields('su', array('uid', 'digest', 'secure_links', 'send_interval', 'send_updates', 'send_comments', 'send_interval_visible', 'send_updates_visible', 'send_comments_visible', 'autosub_on_post', 'autosub_on_update', 'autosub_on_comment', 'send_self'))
       ->condition('su.uid', array(-DRUPAL_AUTHENTICATED_RID, $uid), 'IN')
       ->orderBy('su.uid')
@@ -917,11 +917,11 @@ function _subscriptions_get_setting($name, $account) {
       // Let's add the missing records, as if the user were being created just
       // now, with the expected hook_user() invocations:
       if ($uid > 0) {
-        $account = user_load($uid);
+        $account = \Drupal::service('entity_type.manager')->getStorage('user')->load($uid);
         subscriptions_user_insert(array(), $account, NULL);
       }
       else {
-        db_insert('subscriptions_user')
+        \Drupal::database()->insert('subscriptions_user')
           ->fields(array(
             'uid' => $uid,
           ))
@@ -965,7 +965,7 @@ function _subscriptions_get_setting($name, $account) {
  */
 function subscriptions_suspended($uid, $alert = FALSE) {
   /** @var $result bool */
-  $result = db_query("SELECT suspended FROM {subscriptions_user} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
+  $result = \Drupal::database()->query("SELECT suspended FROM {subscriptions_user} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
   if ($result && $alert && empty($_POST)) {
     _subscriptions_module_load_include('subscriptions', 'admin.inc');
     _subscriptions_suspended_alert($uid, $result);
@@ -1087,8 +1087,8 @@ function subscriptions_arg($index, $member_name = FALSE) {
  */
 function subscriptions_coder_ignore() {
   return array(
-    'path'        => drupal_get_path('module', 'subscriptions'),
-    'line prefix' => drupal_get_path('module', 'subscriptions') . '/',
+    'path'        => \Drupal::service('extension.list.module')->getPath('subscriptions'),
+    'line prefix' => \Drupal::service('extension.list.module')->getPath('subscriptions') . '/',
   );
 }
 
diff --git a/subscriptions.tokens.old.php b/subscriptions.tokens.old.php
index a56e42d..d24989c 100644
--- a/subscriptions.tokens.old.php
+++ b/subscriptions.tokens.old.php
@@ -202,7 +202,7 @@ function subscriptions_tokens($type, array $tokens, array $data = array(), array
           break;
         case 'forum':
           if (isset($data['node']['forum_tid'])) {
-            $replacements[$original] = render(taxonomy_term_view(taxonomy_term_load($data['node']['forum_tid']), 'full', $language_code));
+            $replacements[$original] = \Drupal::service('renderer')->render(taxonomy_term_view(taxonomy_term_load($data['node']['forum_tid']), 'full', $language_code));
           }
           break;
       }
@@ -278,12 +278,12 @@ function subscriptions_tokens($type, array $tokens, array $data = array(), array
       switch ($name) {
         case 'first':
           $value = $array[$keys[0]];
-          $value = is_array($value) ? render($value) : (string) $value;
+          $value = is_array($value) ? \Drupal::service('renderer')->render($value) : (string) $value;
           $replacements[$original] = $sanitize ? check_plain($value) : $value;
           break;
         case 'last':
           $value = $array[$keys[count($keys) - 1]];
-          $value = is_array($value) ? render($value) : (string) $value;
+          $value = is_array($value) ? \Drupal::service('renderer')->render($value) : (string) $value;
           $replacements[$original] = $sanitize ? check_plain($value) : $value;
           break;
         case 'count':
diff --git a/subscriptions_blog_ui/subscriptions_blog_ui.module b/subscriptions_blog_ui/subscriptions_blog_ui.module
index aec40e6..0af6383 100644
--- a/subscriptions_blog_ui/subscriptions_blog_ui.module
+++ b/subscriptions_blog_ui/subscriptions_blog_ui.module
@@ -71,7 +71,7 @@ function _subscriptions_blog_ui_types() {
 function subscriptions_blog_ui_page_blog(array $form, $uid) {
   $blogs = array();
   // get the blogs
-  $query = db_select('node', 'n');
+  $query = \Drupal::database()->select('node', 'n');
   $user_alias = $query->join('users', 'u', 'n.uid = u.uid');
   $uids = $query
     ->fields($user_alias, array('uid'))
@@ -84,7 +84,7 @@ function subscriptions_blog_ui_page_blog(array $form, $uid) {
   $all_uids = $uids;
   if ($uid > 0) {
     // possibly additional blog subscription entries (no blog nodes)
-    $entries = db_select('subscriptions', 's')
+    $entries = \Drupal::database()->select('subscriptions', 's')
       ->fields('s', array('author_uid'))
       ->condition('s.module', 'node')
       ->condition('s.field', 'type')
@@ -140,7 +140,7 @@ function _subscriptions_blog_ui_blog_form(array $blogs, array $form, $uid) {
     $uid = -DRUPAL_AUTHENTICATED_RID;
   }
   else {
-    $result = db_query("
+    $result = \Drupal::database()->query("
       SELECT s.value, s.send_interval, s.author_uid, s.send_comments, s.send_updates, u.name
       FROM {subscriptions} s
       INNER JOIN {users} u ON s.author_uid = u.uid
@@ -195,6 +195,6 @@ function _subscriptions_blog_ui_blog_form(array $blogs, array $form, $uid) {
  * @ingroup hooks
  */
 function subscriptions_blog_ui_subscriptions_counts_alter(array &$counts, $uid) {
-  $counts['node']['blog'] = db_query("SELECT count(*) FROM {subscriptions} WHERE module = 'node' AND field = 'type' AND value = 'blog' AND author_uid <> -1 AND recipient_uid = :recipient_uid", array(':recipient_uid' => $uid))->fetchField();
+  $counts['node']['blog'] = \Drupal::database()->query("SELECT count(*) FROM {subscriptions} WHERE module = 'node' AND field = 'type' AND value = 'blog' AND author_uid <> -1 AND recipient_uid = :recipient_uid", array(':recipient_uid' => $uid))->fetchField();
 }
 
diff --git a/subscriptions_content/subscriptions_content.api.php b/subscriptions_content/subscriptions_content.api.php
index 16cb25e..4e637e9 100644
--- a/subscriptions_content/subscriptions_content.api.php
+++ b/subscriptions_content/subscriptions_content.api.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Hooks for the Subscriptions Content module.
@@ -27,7 +29,7 @@
  * @ingroup subscriptions
  * @ingroup subscriptions_content
  */
-function hook_subscriptions_content_node_options(\Drupal\Core\Session\AccountInterface $account, \Drupal\node\NodeInterface $node): array {
+function hook_subscriptions_content_node_options(AccountInterface $account, NodeInterface $node): array {
   $options = [];
 
   $options['eid'] = [
diff --git a/subscriptions_content/subscriptions_content.module b/subscriptions_content/subscriptions_content.module
index 42930d6..e3b20d4 100644
--- a/subscriptions_content/subscriptions_content.module
+++ b/subscriptions_content/subscriptions_content.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Subscriptions Content Events.
@@ -35,7 +36,7 @@ use Drupal\subscriptions\Event\SubscriptionsEvents;
  * @ingroup hooks
  * @ingroup form
  */
-function subscriptions_content_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function subscriptions_content_form_node_form_alter(&$form, FormStateInterface $form_state) {
   // Make sure the Promotion options section is set on the node form.
   if (isset($form['options'])) {
     $tr = 't';
@@ -78,7 +79,7 @@ function subscriptions_content_form_node_form_alter(&$form, \Drupal\Core\Form\Fo
  *   State of the form when the user saves.
  *
  */
-function subscriptions_content_subscriptions_notify_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function subscriptions_content_subscriptions_notify_submit(array $form, FormStateInterface $form_state) {
   // Fetch form field values.
   $values = $form_state->getValues();
 
diff --git a/subscriptions_content/subscriptions_content_old.admin.inc b/subscriptions_content/subscriptions_content_old.admin.inc
index 6f31204..3401e3a 100644
--- a/subscriptions_content/subscriptions_content_old.admin.inc
+++ b/subscriptions_content/subscriptions_content_old.admin.inc
@@ -121,7 +121,7 @@ function _subscriptions_content_validate_blocked_nodes(array $form, array $form_
 function _subscriptions_content_node_form(array $form, $uid) {
   $tr = 't';
   $subscriptions = [];
-  $query = db_select('node', 'n', ['fetch' => PDO::FETCH_ASSOC])
+  $query = \Drupal::database()->select('node', 'n', ['fetch' => PDO::FETCH_ASSOC])
     ->extend('PagerDefault')
     ->limit(50);
   $query
@@ -156,7 +156,7 @@ function _subscriptions_content_node_form(array $form, $uid) {
   if (module_exists('comment')) {
     // Check whether we've commented:
     if (db_driver() == 'pgsql') {
-      $select = db_select('subscriptions', 's');
+      $select = \Drupal::database()->select('subscriptions', 's');
       $select->addExpression('CAST(s.value AS decimal)', 'value');
       $select = $select
         ->condition('s.module', 'node')
@@ -164,13 +164,13 @@ function _subscriptions_content_node_form(array $form, $uid) {
         ->condition('s.recipient_uid', $uid);
     }
     else {
-      $select = db_select('subscriptions', 's')
+      $select = \Drupal::database()->select('subscriptions', 's')
         ->fields('s', ['value'])
         ->condition('s.module', 'node')
         ->condition('s.field', 'nid')
         ->condition('s.recipient_uid', $uid);
     }
-    $result = db_select('comment', 'c')
+    $result = \Drupal::database()->select('comment', 'c')
       ->fields('c', ['nid'])
       ->condition('c.nid', $select, 'IN')
       ->condition('c.uid', $uid)
@@ -256,7 +256,7 @@ function _subscriptions_content_type_form(array $form, $uid) {
     $uid = -DRUPAL_AUTHENTICATED_RID;
   }
   else {
-    $query = db_select('subscriptions', 's', ['fetch' => PDO::FETCH_ASSOC]);
+    $query = \Drupal::database()->select('subscriptions', 's', ['fetch' => PDO::FETCH_ASSOC]);
     $nt_alias = $query->join('node_type', 'nt', 's.value = nt.type');
     $result = $query
       ->fields('s', ['value', 'send_interval', 'author_uid', 'send_comments', 'send_updates'])
diff --git a/subscriptions_content/subscriptions_content_old.module b/subscriptions_content/subscriptions_content_old.module
index acb161d..0040206 100644
--- a/subscriptions_content/subscriptions_content_old.module
+++ b/subscriptions_content/subscriptions_content_old.module
@@ -153,7 +153,7 @@ function _subscriptions_content_node_options($account, $node) {
       ];
       // Content type and author.
       $options['type'][] = [
-        'name' => t('To %type content by %name', ['%type' => $type_name, '%name' => format_username(user_load($node->uid))]) . $unlisted_tag,
+        'name' => t('To %type content by %name', ['%type' => $type_name, '%name' => format_username(\Drupal::service('entity_type.manager')->getStorage('user')->load($node->uid))]) . $unlisted_tag,
         'params' => ['module' => 'node', 'field' => 'type', 'value' => $node->type, 'author_uid' => $node->uid],
         'link' => 'type/' . $node->type . '/' . $node->uid,
       ];
@@ -276,7 +276,7 @@ function subscriptions_content_node_load(array $nodes, array $types) {
  *   Returns TRUE if the node is unpublished by workbench_moderation standards.
  */
 function subscriptions_content_workbench_moderation_check_is_unpublished($node) {
-  $states = db_select('workbench_moderation_node_history', 'wbmnh')
+  $states = \Drupal::database()->select('workbench_moderation_node_history', 'wbmnh')
     ->condition('nid', $node->nid)
     ->fields('wbmnh', ['state'])
     ->execute()->fetchCol();
@@ -367,7 +367,7 @@ function subscriptions_content_node_delete($node) {
  * @param object $comment
  */
 function subscriptions_content_comment_insert($comment) {
-  $node = node_load($comment->nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($comment->nid);
   if (!isset($comment->subscriptions_notify) || $comment->subscriptions_notify) {
     $event = [
       'module' => 'node',
@@ -393,7 +393,7 @@ function subscriptions_content_comment_insert($comment) {
  * @param object $comment
  */
 function subscriptions_content_comment_update($comment) {
-  $node = node_load($comment->nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($comment->nid);
   if (!isset($comment->subscriptions_notify) || $comment->subscriptions_notify) {
     $event = [
       'module' => 'node',
@@ -590,7 +590,7 @@ function subscriptions_content_form_comment_form_alter(array &$form, array &$for
       '#title' => t('Send subscriptions notifications'),
     ];
 
-    $node = node_load($form['nid']['#value']);
+    $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($form['nid']['#value']);
     $default_workflow = subscriptions_content_get_default_workflow($node->type);
     if ($is_update && $is_unpublished) {
       $item['#description'] = t('Subscriptions notifications are not sent for unpublished comments (except to users who have the %administer_comments permission), but when you change !Status to %Published, Subscriptions will send out "new" notifications, unless you suppress this here. ', [
@@ -626,7 +626,7 @@ function subscriptions_content_node_admin_nodes_submit(array $form, array &$form
   }
   elseif ($form_state['values']['operation'] == 'publish') {
     foreach ($form_state['values']['nodes'] as $nid) {
-      if ($nid != 0 && ($node = node_load($nid)) && !$node->status) {
+      if ($nid != 0 && ($node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid)) && !$node->status) {
         subscriptions_content_node_prepare($node);
         subscriptions_content_node_update($node);
       }
@@ -746,7 +746,7 @@ function subscriptions_content_load_comment(array &$subs) {
     $cid = $subs['load_args'];
     $sqid = $subs['sqid'];
     /** @var int $nid */
-    if ($nid = db_query('SELECT nid FROM {comment} WHERE cid = :cid', [':cid' => $cid])->fetchField()) {
+    if ($nid = \Drupal::database()->query('SELECT nid FROM {comment} WHERE cid = :cid', [':cid' => $cid])->fetchField()) {
       if ($subs['module'] != 'node' || $subs['field'] != 'nid') {
         // Only if we're processing a node/nid queue item should we cut off
         // the comments at an update item, otherwise not.
@@ -799,7 +799,7 @@ function subscriptions_content_page_type(array $form, $uid) {
  */
 function subscriptions_content_node_type_delete($info) {
   $type = $info->type;
-  db_delete('subscriptions_queue')
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('module', 'node')
     ->condition('field', 'type')
     ->condition('value', $type)
@@ -820,13 +820,13 @@ function subscriptions_content_node_type_delete($info) {
  * @ingroup hooks
  */
 function subscriptions_content_cron() {
-  $result = db_query("SELECT name, weight FROM {system} WHERE name IN ('taxonomy', 'subscriptions_content') AND type = 'module'");
+  $result = \Drupal::database()->query("SELECT name, weight FROM {system} WHERE name IN ('taxonomy', 'subscriptions_content') AND type = 'module'");
   $weights = [];
   foreach ($result as $module) {
     $weights[$module->name] = $module->weight;
   }
   if ($weights['subscriptions_content'] <= $weights['taxonomy']) {
-    db_update('system')
+    \Drupal::database()->update('system')
       ->fields([
         'weight' => $weights['taxonomy'] + 1,
       ])
@@ -844,7 +844,7 @@ function subscriptions_content_cron() {
  * @ingroup hooks
  */
 function subscriptions_content_disable() {
-  db_delete('subscriptions_queue')
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('load_function', 'subscriptions_content_%', 'LIKE')
     ->execute();
 }
diff --git a/subscriptions_content/subscriptions_content_old.notify.inc b/subscriptions_content/subscriptions_content_old.notify.inc
index 06895fe..4f1055e 100644
--- a/subscriptions_content/subscriptions_content_old.notify.inc
+++ b/subscriptions_content/subscriptions_content_old.notify.inc
@@ -19,7 +19,7 @@
 function _subscriptions_content_load($nid, $comment_load_sqid = NULL) {
   global $user;
 
-  $node = node_load($nid, NULL, TRUE);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   // Note: we must not cache across users (access checking), and we take care
   // not to process the same node more than once (except for multiple batches
   // of comments), so we don't gain from caching nodes; on the contrary: we
@@ -33,7 +33,7 @@ function _subscriptions_content_load($nid, $comment_load_sqid = NULL) {
   else {
     if (module_exists('comment')) {
       // Load comments like comment_get_thread().
-      $query = db_select('comment', 'c');
+      $query = \Drupal::database()->select('comment', 'c');
       $query->addField('c', 'cid');
       $query
         ->condition('c.nid', $nid)
@@ -74,7 +74,7 @@ function _subscriptions_content_load($nid, $comment_load_sqid = NULL) {
         $sqids[] = $comment_info->_subscriptions_sqid;
       }
       if ($sqids) {
-        db_delete('subscriptions_queue')
+        \Drupal::database()->delete('subscriptions_queue')
           ->condition('sqid', $sqids, 'IN')
           ->execute();
       }
diff --git a/subscriptions_mail/subscriptions_mail.admin.inc b/subscriptions_mail/subscriptions_mail.admin.inc
index 6b6ef6c..c9bc964 100644
--- a/subscriptions_mail/subscriptions_mail.admin.inc
+++ b/subscriptions_mail/subscriptions_mail.admin.inc
@@ -15,7 +15,7 @@
  */
 function _subscriptions_mail_form_subscriptions_settings_form_alter(array &$form, array &$form_state) {
   if (variable_get('subscriptions_mail_trash_silently', 0)) {
-    drupal_set_message(t('All notification mails are discarded because the %varname variable is set &mdash; see the @filename file for more information.', array('%varname' => 'subscriptions_mail_trash_silently', '@filename' => 'README.txt')), 'error');
+    \Drupal::messenger()->addError(t('All notification mails are discarded because the %varname variable is set &mdash; see the @filename file for more information.', array('%varname' => 'subscriptions_mail_trash_silently', '@filename' => 'README.txt')));
   }
   _subscriptions_mail_check_baseurl(TRUE);
 
@@ -53,10 +53,10 @@ function _subscriptions_mail_form_subscriptions_settings_form_alter(array &$form
   );
   if (empty($_POST) && $cron_percentage <= 0) {
     $message = t('@Subscriptions cannot send any notifications because its <a href="@link">cron job time</a> is 0!', $variables + array('@link' => '#edit-subscriptions-cron-percent'));
-    drupal_set_message(filter_xss(t('Warning: !message', array('!message' => $message))), 'error');
+    \Drupal::messenger()->addError(filter_xss(t('Warning: !message', array('!message' => $message))));
     $form['mail_settings']['subscriptions_cron_percent']['#attributes'] = array('class' => array('error'));
   }
-  $result = db_query("SELECT COUNT(sqid) AS count, suspended FROM {subscriptions_queue} GROUP BY suspended", array(), array('fetch' => PDO::FETCH_ASSOC));
+  $result = \Drupal::database()->query("SELECT COUNT(sqid) AS count, suspended FROM {subscriptions_queue} GROUP BY suspended", array(), array('fetch' => PDO::FETCH_ASSOC));
   $active_count = $suspended_count = 0;
   foreach ($result as $record) {
     if (!$record['suspended']) {
diff --git a/subscriptions_mail/subscriptions_mail.api.php b/subscriptions_mail/subscriptions_mail.api.php
index eb0cae0..f8c2913 100644
--- a/subscriptions_mail/subscriptions_mail.api.php
+++ b/subscriptions_mail/subscriptions_mail.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\node\Entity\NodeType;
 /**
  * @file
  * Hooks for the Subscriptions Mail module.
@@ -37,7 +38,7 @@ function hook_subscriptions_mail_mailkey_alter(string &$mailkey, $item) {
 function hook_subscriptions_mail_mailkeys(): array {
   $mailkeys = [];
 
-  foreach (\Drupal\node\Entity\NodeType::loadMultiple() as $key => $type) {
+  foreach (NodeType::loadMultiple() as $key => $type) {
     $mailkeys['node-type-' . $key] = t('Notifications for %type !content_type subscriptions', [
       '%type' => $type->label(),
       '!content_type' => t('content type'),
diff --git a/subscriptions_mail/subscriptions_mail.cron.inc b/subscriptions_mail/subscriptions_mail.cron.inc
index 01010dc..a31c50f 100644
--- a/subscriptions_mail/subscriptions_mail.cron.inc
+++ b/subscriptions_mail/subscriptions_mail.cron.inc
@@ -48,7 +48,7 @@ function _subscriptions_mail_cron() {
       break;  // No more ready queue items, terminate loop.
     }
 
-    if (!$subscriber = user_load($queue_item['uid'])) {
+    if (!$subscriber = \Drupal::service('entity_type.manager')->getStorage('user')->load($queue_item['uid'])) {
       $watchdog('subscriptions', t('Subscriber %uid not found.', array('%uid' => $queue_item['uid'])), NULL, WATCHDOG_WARNING);
       continue;
     }
@@ -57,7 +57,7 @@ function _subscriptions_mail_cron() {
     $saved_language = $language;
     drupal_save_session(FALSE);
     // Clear the term cache to avoid getting a different user's set of terms.
-    entity_load('taxonomy_term', array(), array(), TRUE);
+    \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->load(array());
     $lang_code = $language->language;
     $user      = $subscriber;
 
@@ -122,7 +122,7 @@ function _subscriptions_mail_cron() {
               'type'             => $fields[$lang_code][$module][$field]['subs_type'],
               'unsubscribe_path' => "s/del/$module/$ori_field/$ori_value/" . $queue_item['author_uid'] . '/' . $queue_item['uid'] . '/' . md5(drupal_get_private_key() . $module . $ori_field . $ori_value . $queue_item['author_uid'] . $queue_item['uid']),
             ),
-            'user' => user_load(!empty($object->revision_uid) ? $object->revision_uid : $object->uid),
+            'user' => \Drupal::service('entity_type.manager')->getStorage('user')->load(!empty($object->revision_uid) ? $object->revision_uid : $object->uid),
           );
           $data_function($data, $object, $queue_item);
           drupal_alter('subscriptions_data', $data, $object, $queue_item);
@@ -139,7 +139,7 @@ function _subscriptions_mail_cron() {
           }
         }
       }
-      db_delete('subscriptions_queue')
+      \Drupal::database()->delete('subscriptions_queue')
         ->condition('load_function', $queue_item['load_function'])
         ->condition('load_args', $queue_item['load_args'])
         ->condition('uid', $queue_item['uid'])
@@ -166,7 +166,7 @@ function _subscriptions_mail_cron() {
 
   if (module_exists('taxonomy')) {
     // Clear the term cache again for the next cron client.
-    entity_load('taxonomy_term', array(), array(), TRUE);
+    \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->load(array());
   }
 
   if ($single_count + $digest_count + $single_failed + $digest_failed > 0) {
@@ -178,8 +178,8 @@ function _subscriptions_mail_cron() {
       '!digest_failed'     => $digest_failed,
       '!used_seconds'      => round($current_seconds - $lost_seconds),
       '!total_seconds'     => $total_seconds,
-      '!remaining_items'   => db_query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended = 0", array(':send_interval' => REQUEST_TIME))->fetchField(),
-      '!suspended_items'   => db_query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended <> 0", array(':send_interval' => REQUEST_TIME))->fetchField(),
+      '!remaining_items'   => \Drupal::database()->query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended = 0", array(':send_interval' => \Drupal::time()->getRequestTime()))->fetchField(),
+      '!suspended_items'   => \Drupal::database()->query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended <> 0", array(':send_interval' => \Drupal::time()->getRequestTime()))->fetchField(),
       '!remaining_seconds' => round($total_seconds - $current_seconds),
       '%varname'           => 'subscriptions_mail_trash_silently',
       '!cron'              => 'cron',
@@ -333,7 +333,7 @@ function _subscriptions_mail_send($module, $mailkey, $name, $to, $from, $uid, $s
           'send_interval' => $send_interval,
         ))
         ->fields(array(
-          'last_sent'     => REQUEST_TIME,
+          'last_sent'     => \Drupal::time()->getRequestTime(),
         ))
         ->execute();
     }
diff --git a/subscriptions_mail/subscriptions_mail.mail_edit.inc b/subscriptions_mail/subscriptions_mail.mail_edit.inc
index 865b8c3..8468ba3 100644
--- a/subscriptions_mail/subscriptions_mail.mail_edit.inc
+++ b/subscriptions_mail/subscriptions_mail.mail_edit.inc
@@ -233,7 +233,7 @@ function _subscriptions_mail_preview_form(array $values) {
   $preview_mode = variable_get('subscriptions_preview_mode', 'text');
   $digest_data = array('subs' => array('type' => 'digest'));
 
-  $query = db_select('node', 'n')
+  $query = \Drupal::database()->select('node', 'n')
     ->fields('n', array('nid', 'comment'));
   if (isset($values['content_type'])) {
     $query
@@ -296,7 +296,7 @@ function _subscriptions_mail_preview_form(array $values) {
             'subs-field'       => 'FIELD',
             'subs-value'       => 'VALUE',
           ),
-          'user' => user_load(!empty($node->revision_uid) ? $node->revision_uid : $node->uid),
+          'user' => \Drupal::service('entity_type.manager')->getStorage('user')->load(!empty($node->revision_uid) ? $node->revision_uid : $node->uid),
         );
         $data_function($data, $node, $queue_item);
         drupal_alter('subscriptions_data', $data, $node, $queue_item);
diff --git a/subscriptions_mail/subscriptions_mail.module b/subscriptions_mail/subscriptions_mail.module
index 9c8bff0..ef2847c 100644
--- a/subscriptions_mail/subscriptions_mail.module
+++ b/subscriptions_mail/subscriptions_mail.module
@@ -107,9 +107,9 @@ function _subscriptions_mail_purge_queue_form(array $form_state) {
  * Purge the Subscriptions queue.
  */
 function subscriptions_purge_queue() {
-  $count = db_delete('subscriptions_queue')->execute();
+  $count = \Drupal::database()->delete('subscriptions_queue')->execute();
   $variables = array('@Subscriptions' => 'Subscriptions', '%count' => $count);
-  drupal_set_message(t('All %count items have been purged.', $variables));
+  \Drupal::messenger()->addStatus(t('All %count items have been purged.', $variables));
   $watchdog = 'watchdog';  // keep potx from translating 'cron'
   $watchdog('cron', t('@Subscriptions: all %count items have been purged.', $variables), NULL, WATCHDOG_WARNING);
 }
@@ -281,7 +281,7 @@ function _subscriptions_mail_check_baseurl($interactive) {
   if (empty($_POST) && preg_match('!//($|/|localhost/|([0-9]{1,3}\.){3}[0-9]{1,3}/)!', $url)) {
     $msg = t('Your installation returns %url as the base URL of the site. This is probably not what you want, and it can usually be fixed by setting the %variable variable in your %file file.', array('%url' => $url, '%variable' => '$base_url', '%file' => 'settings.php'));
     if ($interactive) {
-      drupal_set_message($msg, 'error');
+      \Drupal::messenger()->addError($msg);
     }
     else {
       $watchdog = 'watchdog';  // keep potx from translating 'cron'
diff --git a/subscriptions_mail/subscriptions_mail.templates.inc b/subscriptions_mail/subscriptions_mail.templates.inc
index f6a3cf5..8dbd52e 100644
--- a/subscriptions_mail/subscriptions_mail.templates.inc
+++ b/subscriptions_mail/subscriptions_mail.templates.inc
@@ -124,7 +124,7 @@ function subscriptions_mail_template_load($mailmod, $mailkey, $langcode, $part,
     $id = $mailmod . '_' . $mailkey;
     static $cache = array();
     if (!isset($cache[$langcode][$id])) {
-      $query = db_select('mail_edit', 'me')
+      $query = \Drupal::database()->select('mail_edit', 'me')
         ->fields('me')
         ->condition('me.id', $id)
         ->condition('me.language', $langcode);
diff --git a/subscriptions_og/subscriptions_og.install b/subscriptions_og/subscriptions_og.install
index 741abe9..f16953e 100644
--- a/subscriptions_og/subscriptions_og.install
+++ b/subscriptions_og/subscriptions_og.install
@@ -10,7 +10,7 @@
  */
 function subscriptions_og_disable() {
   // Removes our queue items.
-  db_delete('subscriptions_queue')
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('module', 'node')
     ->condition('field', 'group_audience')
     ->execute();
diff --git a/subscriptions_og/subscriptions_og.module b/subscriptions_og/subscriptions_og.module
index 7881b30..c20dbb3 100644
--- a/subscriptions_og/subscriptions_og.module
+++ b/subscriptions_og/subscriptions_og.module
@@ -107,7 +107,7 @@ function subscriptions_og_subscriptions($op, $arg0 = NULL, $arg1 = NULL, $arg2 =
         // We take only the first group to which this node is posted. This won't
         // be correct if this node is posted to multiple, different group types.
         if (!empty($groups) && !empty($groups['node'])) {
-          $group = node_load(current($groups['node']));
+          $group = \Drupal::service('entity_type.manager')->getStorage('node')->load(current($groups['node']));
           return 'group-type-' . $group->type;
         }
       }
@@ -150,10 +150,10 @@ function subscriptions_og_subscriptions($op, $arg0 = NULL, $arg1 = NULL, $arg2 =
  *   The form array.
  */
 function subscriptions_og_page(array $form, $uid) {
-  $account = user_load($uid);
+  $account = \Drupal::service('entity_type.manager')->getStorage('user')->load($uid);
 
   // Load all active OG subscriptions for this user.
-  $query = db_select('subscriptions', 's', array('fetch' => PDO::FETCH_ASSOC));
+  $query = \Drupal::database()->select('subscriptions', 's', array('fetch' => PDO::FETCH_ASSOC));
   $result = $query
     ->fields('s', array(
       'value',
diff --git a/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc b/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
index 31eb4cc..0da5af5 100644
--- a/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
+++ b/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
@@ -75,7 +75,7 @@ function _subscriptions_taxonomy_form_subscriptions_settings_form_alter(array &$
  * @ingroup form
  */
 function _subscriptions_taxonomy_taxa_form(array $form, $uid, array $vocabularies) {
-  $query = db_select('taxonomy_term_data', 't', array('fetch' => PDO::FETCH_ASSOC));
+  $query = \Drupal::database()->select('taxonomy_term_data', 't', array('fetch' => PDO::FETCH_ASSOC));
   $query->join('subscriptions', 's', (db_driver() != 'pgsql' ? 't.tid = s.value' : 'CAST(t.tid AS VARCHAR) = s.value'));
   $result = $query
     ->fields('s', array('value', 'send_interval', 'author_uid', 'send_comments', 'send_updates'))
diff --git a/subscriptions_taxonomy/subscriptions_taxonomy.install b/subscriptions_taxonomy/subscriptions_taxonomy.install
index f8ad6b0..aa1d02f 100644
--- a/subscriptions_taxonomy/subscriptions_taxonomy.install
+++ b/subscriptions_taxonomy/subscriptions_taxonomy.install
@@ -31,13 +31,13 @@ function subscriptions_taxonomy_uninstall() {
  */
 function subscriptions_taxonomy_update_7001() {
   // Fetch all existing term ids.
-  $taxonomy_tids = db_select('taxonomy_term_data', 'ttd')
+  $taxonomy_tids = \Drupal::database()->select('taxonomy_term_data', 'ttd')
     ->fields('ttd', array('tid'))
     ->execute()
     ->fetchCol();
 
   // Fetch all tids from subscriptions table.
-  $subscriptions_tids = db_select('subscriptions', 'sub')
+  $subscriptions_tids = \Drupal::database()->select('subscriptions', 'sub')
     ->fields('sub', array('value'))
     ->distinct('sub.value')
     ->condition('module', 'node')
@@ -46,7 +46,7 @@ function subscriptions_taxonomy_update_7001() {
     ->fetchCol();
 
   // Fetch all tids from subscriptions_queue table.
-  $subscriptions_queue_tids = db_select('subscriptions_queue', 'subq')
+  $subscriptions_queue_tids = \Drupal::database()->select('subscriptions_queue', 'subq')
     ->fields('subq', array('value'))
     ->distinct('subq.value')
     ->condition('module', 'node')
@@ -57,7 +57,7 @@ function subscriptions_taxonomy_update_7001() {
   // Delete orphaned entries from subscriptions table.
   $subscriptions_tids_diff = array_diff($subscriptions_tids, $taxonomy_tids);
   if (!empty($subscriptions_tids_diff)) {
-    db_delete('subscriptions')
+    \Drupal::database()->delete('subscriptions')
       ->condition('module', 'node')
       ->condition('field', 'tid')
       ->condition('value', $subscriptions_tids_diff)
@@ -67,7 +67,7 @@ function subscriptions_taxonomy_update_7001() {
   // Delete orphaned entries from subscriptions_queue table.
   $subscriptions_queue_tids_diff = array_diff($subscriptions_queue_tids, $taxonomy_tids);
   if (!empty($subscriptions_queue_tids_diff)) {
-    db_delete('subscriptions_queue')
+    \Drupal::database()->delete('subscriptions_queue')
       ->condition('module', 'node')
       ->condition('field', 'tid')
       ->condition('value', $subscriptions_tids_diff)
diff --git a/subscriptions_taxonomy/subscriptions_taxonomy.module b/subscriptions_taxonomy/subscriptions_taxonomy.module
index b282477..d73fc38 100644
--- a/subscriptions_taxonomy/subscriptions_taxonomy.module
+++ b/subscriptions_taxonomy/subscriptions_taxonomy.module
@@ -128,7 +128,7 @@ function _subscriptions_taxonomy_node_options($account, $node) {
                 'link'   => 'taxa/' . $tid,
               ) + $hidden;
               $options['tid'][] = array(
-                'name'   => t('To content in %term by %name', array('%term' => $term->name, '%name' => format_username(user_load($node->uid)))) . $unavailable,
+                'name'   => t('To content in %term by %name', array('%term' => $term->name, '%name' => format_username(\Drupal::service('entity_type.manager')->getStorage('user')->load($node->uid)))) . $unavailable,
                 'params' => array('module' => 'node', 'field' => 'tid', 'value' => $tid, 'author_uid' => $node->uid),
                 'link'   => 'taxa/' . $tid . '/' . $node->uid,
               ) + $hidden;
@@ -240,7 +240,7 @@ function subscriptions_taxonomy_data(array &$data, $node, array $queue_item) {
  * @ingroup hooks
  */
 function subscriptions_taxonomy_disable() {
-  db_delete('subscriptions_queue')
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('module', 'node')
     ->condition('field', 'tid')
     ->execute();
@@ -253,7 +253,7 @@ function subscriptions_taxonomy_disable() {
  */
 function subscriptions_taxonomy_taxonomy_term_delete($term) {
   foreach (array('subscriptions', 'subscriptions_queue') as $table) {
-    db_delete($table)
+    \Drupal::database()->delete($table)
       ->condition('module', 'node')
       ->condition('field', 'tid')
       ->condition('value', $term->tid)
diff --git a/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc b/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc
index c44801a..c96a431 100644
--- a/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc
+++ b/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc
@@ -55,7 +55,7 @@ function subscriptions_taxonomy_tokens($type, $tokens, array $data = array(), ar
           // Default values for the chained tokens handled below.
         case 'category':
           //$replacements[$original] = $sanitize ? filter_xss($term->name) : $term->name;
-          $replacements[$original] = render(taxonomy_term_view($term, 'full', $language_code));
+          $replacements[$original] = \Drupal::service('renderer')->render(taxonomy_term_view($term, 'full', $language_code));
           break;
       }
     }
diff --git a/subscriptions_ui/subscriptions_ui.api.php b/subscriptions_ui/subscriptions_ui.api.php
index b7bc693..cf19301 100644
--- a/subscriptions_ui/subscriptions_ui.api.php
+++ b/subscriptions_ui/subscriptions_ui.api.php
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Hooks for the Subscriptions UI module.
@@ -21,7 +24,7 @@
  *   - priority: (required) Priority weight.
  *   - module: (required) Module name.
  */
-function hook_subscriptions_ui(\Drupal\node\NodeInterface $node): ?array {
+function hook_subscriptions_ui(NodeInterface $node): ?array {
   return [
     'priority' => 0,
     'module' => 'subscriptions_ui',
@@ -39,16 +42,16 @@ function hook_subscriptions_ui(\Drupal\node\NodeInterface $node): ?array {
  * @return \Drupal\Core\Access\AccessResultInterface
  *   An access result object.
  */
-function hook_subscriptions_ui_get_permission_to_handle(\Drupal\node\NodeInterface $node, string $module): \Drupal\Core\Access\AccessResultInterface {
+function hook_subscriptions_ui_get_permission_to_handle(NodeInterface $node, string $module): AccessResultInterface {
   // Allow good_type nodes.
   if ($node->getType() == 'good_type') {
-    return \Drupal\Core\Access\AccessResult::allowed();
+    return AccessResult::allowed();
   }
   // Forbid bad_type nodes.
   elseif ($node->getType() == 'bad_type') {
-    return \Drupal\Core\Access\AccessResult::forbidden();
+    return AccessResult::forbidden();
   }
 
   // Otherwise, neutral response.
-  return \Drupal\Core\Access\AccessResult::neutral();
+  return AccessResult::neutral();
 }
diff --git a/subscriptions_ui/subscriptions_ui.module.old.php b/subscriptions_ui/subscriptions_ui.module.old.php
index 9d3dad7..432960f 100644
--- a/subscriptions_ui/subscriptions_ui.module.old.php
+++ b/subscriptions_ui/subscriptions_ui.module.old.php
@@ -152,13 +152,13 @@ function subscriptions_ui_node_form($form, &$form_state, $node, $expand = NULL)
   uasort($node_options, '_subscriptions_cmp_by_weight');
 
   foreach (array(
-    db_query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND recipient_uid = :recipient_uid", array(
+    \Drupal::database()->query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND recipient_uid = :recipient_uid", array(
       ':module' => 'node',
       ':field' => 'nid',
       ':value' => $node->nid,
       ':recipient_uid' => $account->uid
     ), array('fetch' => PDO::FETCH_ASSOC)),
-    db_query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field <> :field AND recipient_uid = :recipient_uid", array(
+    \Drupal::database()->query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field <> :field AND recipient_uid = :recipient_uid", array(
       ':module' => 'node',
       ':field' => 'nid',
       ':recipient_uid' => $account->uid
@@ -290,7 +290,7 @@ function theme_subscriptions_ui_table($element) {
     $row = array();
     foreach (array('subscriptions', 'updates', 'comments') as $eli => $elv) {
       if (isset($element[$elv]) && $element[$elv]['#access']) {
-        $row[] = drupal_render($element[$elv][$key]);
+        $row[] = \Drupal::service('renderer')->render($element[$elv][$key]);
         $headers[$eli] = $header_strings[$eli];
       }
     }
@@ -300,7 +300,7 @@ function theme_subscriptions_ui_table($element) {
   unset($headers[end($col_indexes)]['width']);
   $output = theme('table', array('header' => $headers, 'rows' => $rows));
   $output .= drupal_render_children($element);
-  drupal_add_js(drupal_get_path('module', 'subscriptions') . '/subscriptions_tableselect.js');
+  drupal_add_js(\Drupal::service('extension.list.module')->getPath('subscriptions') . '/subscriptions_tableselect.js');
   return $output;
 }
 
@@ -451,7 +451,7 @@ function subscriptions_ui_subscriptions_ui($nid) {
 function subscriptions_ui_field_extra_fields() {
   $extra = array();
   if (variable_get('subscriptions_form_in_block', 0)) {
-    $types = db_query("SELECT type FROM {block_node_type} WHERE module = :module AND delta = :delta", array(
+    $types = \Drupal::database()->query("SELECT type FROM {block_node_type} WHERE module = :module AND delta = :delta", array(
       ':module' => 'subscriptions_ui',
       ':delta' => 0,
     ))->fetchCol();
