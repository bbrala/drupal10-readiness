modules/contrib/map_widget/map_widget.install
modules/contrib/map_widget/src/Element/AssociativeArray.php
modules/contrib/map_widget/src/Plugin/Field/FieldWidget/AssociativeArrayWidget.php
modules/contrib/map_widget/tests/src/Functional/LoadTest.php
modules/contrib/map_widget/tests/src/Functional/MapWidgetTest.php
modules/contrib/map_widget/tests/src/FunctionalJavascript/MapWidgetAjaxTest.php

3 files with changes
====================

1) modules/contrib/map_widget/tests/src/FunctionalJavascript/MapWidgetAjaxTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->state = $this->container->get('state');
     // Create a field.
@@ @@
   public function testMapWidgetAjax() {
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("map_test_field[0][value][0][key]", '');
-    $this->assertFieldByName("map_test_field[0][value][0][value]", '');
-    $this->assertElementPresent('input[name="map_test_field_0_add_more"]');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][key]", '');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][value]", '');
+    $this->assertSession()->elementExists('input[name="map_test_field_0_add_more"]');
     // Ajax test.
     $button = $this->getSession()->getPage()->find('css', 'input[name="map_test_field_0_add_more"]');
     $button->click();
@@ @@
       "map_test_field[0][value][1][key]" => $keys[1],
       "map_test_field[0][value][1][value]" => $values[1],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $testEntity = EntityTest::load($id);
     $storedValue = $testEntity->get('map_test_field')->value;
     $this->assertTrue(is_array($storedValue), 'map_test_field does not contain an array');
-    $this->assertEqual(count($storedValue), 2, 'Returned array does not have exactly two elements.');
+    $this->assertEquals(count($storedValue), 2, 'Returned array does not have exactly two elements.');
     for ($index = 0; $index < 2; $index++) {
       $this->assertTrue(isset($storedValue[$keys[$index]]), "Test key $index not present in value array.");
-      $this->assertEqual($storedValue[$keys[$index]], $values[$index], "The value stored for the test key $index in the MapItem does not match the test value.");
+      $this->assertEquals($storedValue[$keys[$index]], $values[$index], "The value stored for the test key $index in the MapItem does not match the test value.");
     }
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][key]', $keys[0]);
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][value]', $values[0]);
    ----------- end diff -----------

Applied rules:
 * AssertElementPresentRector
 * AssertEqualRector
 * AssertFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/map_widget/tests/src/Functional/MapWidgetTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->state = $this->container->get('state');
     // Create a field.
@@ @@
   public function testMapWidget() {
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("map_test_field[0][value][0][key]", '');
-    $this->assertFieldByName("map_test_field[0][value][0][value]", '');
-    $this->assertRaw('placeholder="Key placeholder for map_assoc_widget"');
-    $this->assertRaw('placeholder="Value placeholder for map_assoc_widget"');
-    $this->assertRaw('Map Widget description');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][key]", '');
+    $this->assertSession()->fieldValueEquals("map_test_field[0][value][0][value]", '');
+    $this->assertSession()->responseContains('placeholder="Key placeholder for map_assoc_widget"');
+    $this->assertSession()->responseContains('placeholder="Value placeholder for map_assoc_widget"');
+    $this->assertSession()->responseContains('Map Widget description');

     // Submit with some value.
     $key = $this->randomMachineName();
@@ @@
       "map_test_field[0][value][0][key]" => $key,
       "map_test_field[0][value][0][value]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText("entity_test $id has been created.");
+    $this->assertSession()->pageTextContains("entity_test $id has been created.");
     $testEntity = EntityTest::load($id);
     $storedValue = $testEntity->get('map_test_field')->value;
     $this->assertTrue(is_array($storedValue), 'map_test_field does not contain an array');
-    $this->assertEqual(count($storedValue), 1, 'Returned array does not have exactly one element.');
+    $this->assertEquals(count($storedValue), 1, 'Returned array does not have exactly one element.');
     $this->assertTrue(isset($storedValue[$key]), 'Test key not present in value array.');
-    $this->assertEqual($storedValue[$key], $value, 'The value stored for the test key in the MapItem does not match the test value.');
+    $this->assertEquals($storedValue[$key], $value, 'The value stored for the test key in the MapItem does not match the test value.');
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][key]', $key);
     $this->assertSession()->fieldValueEquals('map_test_field[0][value][0][value]', $value);
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/map_widget/tests/src/Functional/LoadTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

