modules/contrib/qyweixin/qyweixin.install
modules/contrib/qyweixin/qyweixin.module
modules/contrib/qyweixin/src/lib/WXBizMsgCrypt.php
modules/contrib/qyweixin/src/lib/errorCode.php
modules/contrib/qyweixin/src/lib/pkcs7Encoder.php
modules/contrib/qyweixin/src/lib/sha1.php
modules/contrib/qyweixin/src/lib/xmlparse.php
modules/contrib/qyweixin/src/AgentBase.php
modules/contrib/qyweixin/src/AgentInterface.php
modules/contrib/qyweixin/src/Annotation/QyWeixinAgent.php
modules/contrib/qyweixin/src/Controller/QyWeixinController.php
modules/contrib/qyweixin/src/CorpBase.php
modules/contrib/qyweixin/src/Form/SettingsForm.php
modules/contrib/qyweixin/src/MessageBase.php
modules/contrib/qyweixin/src/MessageInterface.php
modules/contrib/qyweixin/src/Plugin/Mail/QyWeixinMail.php
modules/contrib/qyweixin/src/Plugin/QueueWorker/RemoveDepartmentFromUser.php
modules/contrib/qyweixin/src/QyWeixinAgentManager.php
modules/contrib/qyweixin/src/Routing/AgentsRoutes.php

5 files with changes
====================

1) modules/contrib/qyweixin/src/Plugin/Mail/QyWeixinMail.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\qyweixin\Plugin\Mail;

+use Drupal\user\UserInterface;
 use Drupal\Core\Mail\MailFormatHelper;
 use Drupal\Core\Mail\MailInterface;
 use Drupal\qyweixin\CorpBase;
@@ @@
 		if(filter_var($message['to'], FILTER_VALIDATE_EMAIL)) {
 			$message['to']=user_load_by_mail($message['to']);
 		}
-		if($message['to'] instanceOf \Drupal\user\UserInterface) {
+		if($message['to'] instanceOf UserInterface) {
 			$message['to']=$user->getUsername();
 		}
 		if(is_string($message['to'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/qyweixin/src/MessageBase.php:5

    ---------- begin diff ----------
@@ @@
  */

 namespace Drupal\qyweixin;
+use Drupal\Component\Utility\Html;
 use Drupal\qyweixin\MessageInterface;

 /**
@@ @@
 	}
 	
 	public function setContent($content='') {
-		$this->content=\Drupal\Component\Utility\Html::decodeEntities((string)$content);
+		$this->content=Html::decodeEntities((string)$content);
 		return $this;
 	}
 	
@@ @@

 	public function setToUser($user, $isOpenID=FALSE) {
 		if(is_array($user)) $this->toUser=implode('|',$user);
-		else if($isOpenID) $this->toUser=\Drupal\qyweixin\CorpBase::userConvertToUserid($user);
+		else if($isOpenID) $this->toUser=CorpBase::userConvertToUserid($user);
 		else $this->toUser=$user;
 		return $this;
 	}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/qyweixin/src/Form/SettingsForm.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\qyweixin\Form;

+use Drupal\Core\Url;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 			);
 			if($config->get('agent.'.$agent->agentid.'.enabled')) {
 				$routename=sprintf('qyweixin.%s.%s.%s', $config->get('corpid'), $config->get('agent.'.$agent->agentid.'.entryclass'), $agent->agentid);
-				$url=\Drupal\Core\Url::fromRoute($routename)->setAbsolute(TRUE);
+				$url=Url::fromRoute($routename)->setAbsolute(TRUE);
 				$form['agents'][$agent->agentid]['callbackurl']=array(
 					'#type'=>'markup',
 					'#markup' => t('This callback url of this agent is <code>@url</code> currently.', ['@url'=>$url->toString()]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/qyweixin/src/CorpBase.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\qyweixin;

+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\File\FileSystem;
 use Drupal\file\FileInterface;
 use Drupal\qyweixin\lib\WXBizMsgCrypt;

@@ @@
 	 *   Exception could be thrown if error occurs. The caller should take care of the exception.
 	 *
 	 */
-	public static function mediaGet($media_id, $destination = NULL, $managed = FALSE, $replace = \Drupal\Core\File\FileSystemInterface::EXISTS_RENAME) {
+	public static function mediaGet($media_id, $destination = NULL, $managed = FALSE, $replace = FileSystemInterface::EXISTS_RENAME) {
 		$file=FALSE;
 		try {
 			$access_token=self::getAccessToken();
@@ @@
 			$parsed_url = parse_url($url);
 			if (!isset($destination)) {
 				$header=explode('"',$response->getHeader('Content-disposition'));
-				$path = file_build_uri(\Drupal\Core\File\FileSystem::basename($header[1]));
+				$path = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . FileSystem::basename($header[1])));
 			}
 			else {
-				if (is_dir(\Drupal\Core\File\FileSystem::realpath($destination))) {
+				if (is_dir(FileSystem::realpath($destination))) {
 					// Prevent URIs with triple slashes when glueing parts together.
-					$path = str_replace('///', '//', "$destination/") . \Drupal\Core\File\FileSystem::drupal_basename($parsed_url['path']);
+					$path = str_replace('///', '//', "$destination/") . FileSystem::drupal_basename($parsed_url['path']);
 				}
 				else {
 					$path = $destination;
 				}
 			}
-			$file = $managed ? file_save_data($data, $path, $replace) : \Drupal\Core\File\FileSystemInterface::saveData($data, $path, $replace);
+			$file = $managed ? \Drupal::service('file.repository')->writeData($data, $path, $replace) : FileSystemInterface::saveData($data, $path, $replace);
 		} catch (\Exception $e) {
 			throw new \Exception($e->getMessage(), $e->getCode());
 		} finally {
    ----------- end diff -----------

Applied rules:
 * FileBuildUriRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


5) modules/contrib/qyweixin/qyweixin.module:8

    ---------- begin diff ----------
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_insert for user entity type.
  */
-function qyweixin_user_insert(Drupal\user\UserInterface $user) {
+function qyweixin_user_insert(UserInterface $user) {
 	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
 	try {
 		$u=new stdClass();
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_update for user entity type.
  */
-function qyweixin_user_update(Drupal\user\UserInterface $user) {
+function qyweixin_user_update(UserInterface $user) {
 	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
 	try {
 		$u=new stdClass();
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_delete for user entity type.
  */
-function qyweixin_user_delete(Drupal\user\UserInterface $user) {
+function qyweixin_user_delete(UserInterface $user) {
 	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
 	try {
 		CorpBase::userDelete($user->id());
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_presave for user_role entity type.
  */
-function qyweixin_user_role_presave(Drupal\user\RoleInterface $role) {
+function qyweixin_user_role_presave(RoleInterface $role) {
 	$departmentid=$role->getThirdPartySetting('qyweixin','departmentid');
 	if(empty($departmentid)) {
 		$max_department_id=Drupal::state()->get('qyweixin.max_department_id', 1)+1;
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_insert for user_role entity type.
  */
-function qyweixin_user_role_insert(Drupal\user\RoleInterface $role) {
+function qyweixin_user_role_insert(RoleInterface $role) {
 	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
 	try {
 		$r=new stdClass();
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_update for user_role entity type.
  */
-function qyweixin_user_role_update(Drupal\user\RoleInterface $role) {
+function qyweixin_user_role_update(RoleInterface $role) {
 	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
 	try {
 		$r=new stdClass();
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_predelete for user_role entity type.
  */
-function qyweixin_user_role_predelete(Drupal\user\RoleInterface $role) {
+function qyweixin_user_role_predelete(RoleInterface $role) {
 	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
 	try {
 		// First lets remove the role from related users
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

