modules/contrib/weather-weather/src/Commands/WeatherCommands.php
modules/contrib/weather-weather/src/Form/WeatherDisplayDeleteForm.php
modules/contrib/weather-weather/weather.install
modules/contrib/weather-weather/weather.module
modules/contrib/weather-weather/src/Form/WeatherDisplayForm.php
modules/contrib/weather-weather/src/Controller/WeatherDetailedForecastController.php
modules/contrib/weather-weather/src/Controller/WeatherUserConfiguredDisplayController.php
modules/contrib/weather-weather/src/Entity/WeatherDisplay.php
modules/contrib/weather-weather/src/Form/WeatherDisplayPlaceDeleteForm.php
modules/contrib/weather-weather/src/Form/WeatherDisplayPlaceForm.php
modules/contrib/weather-weather/src/Entity/WeatherDisplayInterface.php
modules/contrib/weather-weather/src/Entity/WeatherDisplayPlace.php
modules/contrib/weather-weather/src/Entity/WeatherDisplayPlaceInterface.php
modules/contrib/weather-weather/src/Entity/WeatherForecast.php
modules/contrib/weather-weather/src/Entity/WeatherForecastInformation.php
modules/contrib/weather-weather/src/Entity/WeatherForecastInformationInterface.php
modules/contrib/weather-weather/src/Entity/WeatherForecastInterface.php
modules/contrib/weather-weather/src/Entity/WeatherPlace.php
modules/contrib/weather-weather/src/Plugin/Block/WeatherDisplayBlockTrait.php
modules/contrib/weather-weather/src/Plugin/Block/WeatherSystemDisplayBlock.php
modules/contrib/weather-weather/src/Entity/WeatherPlaceInterface.php
modules/contrib/weather-weather/src/Form/AddCustomPlaceForm.php
modules/contrib/weather-weather/src/Plugin/Block/WeatherUserDisplayBlock.php
modules/contrib/weather-weather/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
modules/contrib/weather-weather/src/Service/DataService.php
modules/contrib/weather-weather/src/Form/SettingsForm.php
modules/contrib/weather-weather/src/Service/HelperService.php
modules/contrib/weather-weather/src/Service/ParserService.php
modules/contrib/weather-weather/src/Service/ThemeService.php
modules/contrib/weather-weather/src/WeatherAccessControlHandler.php
modules/contrib/weather-weather/tests/src/Functional/ConfigurationTest.php
modules/contrib/weather-weather/tests/src/Functional/FunctionsTest.php
modules/contrib/weather-weather/tests/src/Functional/ParserTest.php
modules/contrib/weather-weather/tests/src/Functional/PermissionsTest.php
modules/contrib/weather-weather/tests/src/Functional/WeatherCommonTestTrait.php

6 files with changes
====================

1) modules/contrib/weather-weather/src/Form/SettingsForm.php:128

    ---------- begin diff ----------
@@ @@

     // Additional weather settings.
     $theme = $this->config('system.theme')->get('default');
-    $theme_path = drupal_get_path('theme', $theme);
+    $theme_path = \Drupal::service('extension.list.theme')->getPath($theme);
     $config = $this->config('weather.settings');

     $form['weather_image_directory'] = [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/weather-weather/src/Commands/WeatherCommands.php:63

    ---------- begin diff ----------
@@ @@
    * Open file.
    */
   private function csv() {
-    return fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    return fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/weather-weather/tests/src/Functional/WeatherCommonTestTrait.php:16

    ---------- begin diff ----------
@@ @@
    */
   public function weatherFillWeatherSchema($source = 'geonames_2911298.xml') {
     // Fetch forecast data from xml file.
-    $xml_source = drupal_get_path('module', 'weather') . '/tests/src/Functional/data/' . $source;
+    $xml_source = \Drupal::service('extension.list.module')->getPath('weather') . '/tests/src/Functional/data/' . $source;
     $xml_source_stream_content = stream_get_contents(fopen($xml_source, 'rb'));
     $element_data = new \SimpleXMLElement($xml_source_stream_content);
     // Prepare data for DB compatible format.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/weather-weather/tests/src/Functional/ParserTest.php:347

    ---------- begin diff ----------
@@ @@
     $config = \Drupal::configFactory()->getEditable('weather.settings');
     $time = $config->get('weather_time_for_testing');
     if ($time !== \Drupal::time()->getRequestTime()) {
-      $path = drupal_get_path('module', 'weather') . '/tests/src/Functional/data/' . $geoid . '.xml';
+      $path = \Drupal::service('extension.list.module')->getPath('weather') . '/tests/src/Functional/data/' . $geoid . '.xml';
       if (is_readable($path)) {
         $xml = file_get_contents($path);
       }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/weather-weather/src/Service/ThemeService.php:258

    ---------- begin diff ----------
@@ @@
     // Construct the filename.
     $image = $custom_path . $symbol . '.png';
     if (!is_readable($image)) {
-      $default_path = drupal_get_path('module', 'weather') . '/images/';
+      $default_path = \Drupal::service('extension.list.module')->getPath('weather') . '/images/';
       $image = $default_path . $symbol . '.png';
     }
     $size = getimagesize($image);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


6) modules/contrib/weather-weather/src/Service/DataService.php:99

    ---------- begin diff ----------
@@ @@
       ->execute();

     // Read the data file and create Places in system.
-    $file = fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    $file = fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
     $items = [];
     while (($line = fgetcsv($file, 0, '	')) !== FALSE) {
       // Check if the geoid has been modified, if so, skip it.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

