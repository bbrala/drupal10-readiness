modules/contrib/pbf/pbf.install
modules/contrib/pbf/tests/src/Functional/PbfAccessWithSynchronizationTest.php
modules/contrib/pbf/pbf.module
modules/contrib/pbf/src/PbfSynchronize.php
modules/contrib/pbf/src/PbfSynchronizeInterface.php
modules/contrib/pbf/src/Plugin/Field/FieldFormatter/PbfFieldFormatter.php
modules/contrib/pbf/src/Plugin/Field/FieldType/Pbf.php
modules/contrib/pbf/src/Plugin/Field/FieldWidget/PbfFieldWidget.php
modules/contrib/pbf/tests/src/Functional/PbfBaseTest.php
modules/contrib/pbf/src/Plugin/Field/PbfFieldItemList.php
modules/contrib/pbf/tests/src/Functional/PbfAccessByNodeRefTest.php
modules/contrib/pbf/tests/src/Functional/PbfAccessByRoleTest.php
modules/contrib/pbf/tests/src/Functional/PbfBasicTest.php
modules/contrib/pbf/tests/src/Functional/PbfAccessByTermRefTest.php
modules/contrib/pbf/tests/src/Functional/PbfAccessByUserDirectTest.php
modules/contrib/pbf/tests/src/Functional/PbfAccessByUserRefTest.php
modules/contrib/pbf/tests/src/Functional/PbfAccessWithFormWidgetValueTest.php

9 files with changes
====================

1) modules/contrib/pbf/tests/src/Functional/PbfBasicTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and Rebuild node access.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->article1 = $this->createSimpleArticle('Article 1');
     $this->article2 = $this->createSimpleArticle('Article 2');
@@ @@
     $this->drupalLogin($this->normalUser);

     $this->drupalGet('node/' . $this->article1->id());
-    $this->assertResponse(200);
-    $this->assertTitle('Article 1 | Drupal', t('Correct title for article 1 found'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals('Article 1 | Drupal', t('Correct title for article 1 found'));

     $this->drupalGet('node/' . $this->article2->id());
-    $this->assertResponse(200);
-    $this->assertTitle('Article 2 | Drupal', t('Correct title for article 2 found'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals('Article 2 | Drupal', t('Correct title for article 2 found'));

     $this->drupalGet('node/' . $this->group1->id());
-    $this->assertResponse(200);
-    $this->assertTitle('Group 1 | Drupal', t('Correct title for group 1 found'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals('Group 1 | Drupal', t('Correct title for group 1 found'));

     $this->drupalGet('node/' . $this->group2->id());
-    $this->assertResponse(200);
-    $this->assertTitle('Group 2 | Drupal', t('Correct title for group 2 found'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals('Group 2 | Drupal', t('Correct title for group 2 found'));

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@

     $this->drupalLogout();
     $this->drupalGet('node/' . $this->article1->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet('node/' . $this->article2->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTitleRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/pbf/tests/src/Functional/PbfBaseTest.php:157

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and Rebuild node access.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article']);
@@ @@
    *   Expected result count.
    */
   protected function checkSearchResults($search_query, $expected_result_count) {
-    $this->drupalPostForm('search/node', array('keys' => $search_query), 'Search');
+    $this->drupalGet('search/node');
+    $this->submitForm(array('keys' => $search_query), 'Search');
     $search_results = $this->xpath("//ol[contains(@class, 'search-results')]/li");
-    $this->assertEqual(count($search_results), $expected_result_count, t('Found the expected number of search results'));
+    $this->assertEquals(count($search_results), $expected_result_count, t('Found the expected number of search results'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/pbf/tests/src/Functional/PbfAccessWithSynchronizationTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and create content with Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fieldname = 'field_pbf_group';
@@ @@
     $this->drupalLogin($this->adminUser);

     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
     $this->drupalGet("node/{$this->group1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the group 1.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the group 1.');

     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');

     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Member of group', 'User Obf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');

     $bundle_path = 'admin/structure/types/manage/group';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-group-user"]/td[1]', 'Group members', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_group_user][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_group_user][type]', 'pbf_widget');

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-group-user"]/td[1]', 'Group members', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_group_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_group_user][type]', 'pbf_formatter_default');

     // We change cardinality to limited.
     $field_group_path_storage_settings = 'admin/structure/types/manage/group/fields/node.group.' . $this->group_fieldname . '/storage';
@@ @@
       'cardinality' => 'number',
       'cardinality_number' => 1,
     ];
-    $this->drupalPostForm($field_group_path_storage_settings, $edit, t('Save field settings'));
     $this->drupalGet($field_group_path_storage_settings);
-    $this->assertFieldByName('cardinality', 'number', 'The storage settings field is set to limited.');
+    $this->submitForm($edit, t('Save field settings'));
+    $this->drupalGet($field_group_path_storage_settings);
+    $this->assertSession()->fieldValueEquals('cardinality', 'number');

     // The group Pbf field can not be synchronized.
     $field_group_path_settings = 'admin/structure/types/manage/group/fields/node.group.' . $this->group_fieldname;
     $this->drupalGet($field_group_path_settings);
-    $this->assertText(t('Only field with an unlimited cardinality can be synchronized'));
+    $this->assertSession()->pageTextContains(t('Only field with an unlimited cardinality can be synchronized'));

     // We change cardinality to unlimited.
     $edit = [
       'cardinality' => -1,
     ];
-    $this->drupalPostForm($field_group_path_storage_settings, $edit, t('Save field settings'));
     $this->drupalGet($field_group_path_storage_settings);
-    $this->assertFieldByName('cardinality', -1, 'The storage settings field is set to unlimited.');
+    $this->submitForm($edit, t('Save field settings'));
+    $this->drupalGet($field_group_path_storage_settings);
+    $this->assertSession()->fieldValueEquals('cardinality', -1);

     // We can select the user Pbf field to be synchronized.
     $this->drupalGet($field_group_path_settings);
-    $this->assertOption('edit-settings-synchronized-with', 'user.user.' . $this->fieldname);
+    $this->assertSession()->optionExists('edit-settings-synchronized-with', 'user.user.' . $this->fieldname);

     // We change the user's field cardinlaty to limited.
     $user_path_storage_settings = 'admin/config/people/accounts/fields/user.user.' . $this->fieldname . '/storage';
@@ @@
       'cardinality' => 'number',
       'cardinality_number' => 1,
     ];
-    $this->drupalPostForm($user_path_storage_settings, $edit, t('Save field settings'));
     $this->drupalGet($user_path_storage_settings);
-    $this->assertFieldByName('cardinality', 'number', 'The storage settings field for user is set to limited.');
+    $this->submitForm($edit, t('Save field settings'));
+    $this->drupalGet($user_path_storage_settings);
+    $this->assertSession()->fieldValueEquals('cardinality', 'number');

     // We can not select the user Pbf field to be synchronized.
     $this->drupalGet($field_group_path_settings);
-    $this->assertNoOption('edit-settings-synchronized-with', 'user.user.' . $this->fieldname);
+    $this->assertSession()->optionNotExists('edit-settings-synchronized-with', 'user.user.' . $this->fieldname);

     // We change the user's field cardinlaty to unlimited.
     $edit = [
       'cardinality' => -1,
     ];
-    $this->drupalPostForm($user_path_storage_settings, $edit, t('Save field settings'));
     $this->drupalGet($user_path_storage_settings);
-    $this->assertFieldByName('cardinality', -1, 'The storage settings field for user is set to unlimited.');
+    $this->submitForm($edit, t('Save field settings'));
+    $this->drupalGet($user_path_storage_settings);
+    $this->assertSession()->fieldValueEquals('cardinality', -1);

     // We synchronize the Pbf field (field_group_user) on group with
     // user Pbf field (field_pbf_group).
@@ @@
       'settings[synchronized_with]' => 'user.user.' . $this->fieldname,
 //      'settings[synchronized_from_target]' => '',
     ];
-    $this->drupalPostForm($field_group_path_settings, $edit, t('Save settings'));
     $this->drupalGet($field_group_path_settings);
-    $this->assertOptionSelected('edit-settings-synchronized-with', 'user.user.' . $this->fieldname);
-    $this->assertNoFieldChecked('edit-settings-synchronized-from-target');
+    $this->submitForm($edit, t('Save settings'));
+    $this->drupalGet($field_group_path_settings);
+    $this->assertTrue($this->assertSession()->optionExists('edit-settings-synchronized-with', 'user.user.' . $this->fieldname)->hasAttribute('selected'));
+    $this->assertSession()->checkboxNotChecked('edit-settings-synchronized-from-target');

     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@
     // Reference normalUser from group1 node.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet("node/{$this->group1->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $edit = [
       $this->group_fieldname . '[0][target_id]' => $this->normalUser->getDisplayName() . ' (' . $this->normalUser->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->group1->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('/node/' . $this->group1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     // normalUser has access to node article.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->container->get('cron')->run();
     $this->checkSearchResults('Article', 2);

@@ @@
     // otherUser has not access to node article.
     $this->drupalLogin($this->otherUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 0);


@@ @@
       $this->group_fieldname . '[0][target_id]' => $this->normalUser->getDisplayName() . ' (' . $this->normalUser->id() . ')',
       $this->group_fieldname . '[1][target_id]' => $this->otherUser->getDisplayName() . ' (' . $this->otherUser->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->group1->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('/node/' . $this->group1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet("user/{$this->otherUser->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     // otherUser has now access to node article.
     $this->drupalLogin($this->otherUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);

     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Check if users are well displayed in the node group1.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet("node/{$this->group1->id()}");
-    $this->assertLink($this->normalUser->getDisplayName());
-    $this->assertLink($this->otherUser->getDisplayName());
+    $this->assertSession()->linkExists($this->normalUser->getDisplayName());
+    $this->assertSession()->linkExists($this->otherUser->getDisplayName());

     // Remove group1 referenced for otherUser.
     $edit = [
       $this->fieldname . '[0][target_id]' => '',
     ];
-    $this->drupalPostForm('/user/' . $this->otherUser->id() . '/edit', $edit, t('Save'));
-    $this->assertNoLink($this->group1->getTitle());
+    $this->drupalGet('/user/' . $this->otherUser->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->linkNotExists($this->group1->getTitle());
     $this->drupalGet("node/{$this->group1->id()}");
-    $this->assertLink($this->otherUser->getDisplayName());
+    $this->assertSession()->linkExists($this->otherUser->getDisplayName());

     // otherUser does not have access to node article.
     $this->drupalLogin($this->otherUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 0);

     // We add the synchronization from target option in the Pbf field
@@ @@
       'settings[synchronized_with]' => 'user.user.' . $this->fieldname,
       'settings[synchronized_from_target]' => '1',
     ];
-    $this->drupalPostForm($field_group_path_settings, $edit, t('Save settings'));
     $this->drupalGet($field_group_path_settings);
-    $this->assertOptionSelected('edit-settings-synchronized-with', 'user.user.' . $this->fieldname);
-    $this->assertFieldChecked('edit-settings-synchronized-from-target');
+    $this->submitForm($edit, t('Save settings'));
+    $this->drupalGet($field_group_path_settings);
+    $this->assertTrue($this->assertSession()->optionExists('edit-settings-synchronized-with', 'user.user.' . $this->fieldname)->hasAttribute('selected'));
+    $this->assertSession()->checkboxChecked('edit-settings-synchronized-from-target');

     // We post again otherUser as member of group1.
     $edit = [
@@ @@
       $this->group_fieldname . '[0][target_id]' => $this->normalUser->getDisplayName() . ' (' . $this->normalUser->id() . ')',
       $this->group_fieldname . '[1][target_id]' => $this->otherUser->getDisplayName() . ' (' . $this->otherUser->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->group1->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('/node/' . $this->group1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet("user/{$this->otherUser->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     // otherUser has still access to node article.
     $this->drupalLogin($this->otherUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);

     // Remove group1 referenced for otherUser.
@@ @@
     $edit = [
       $this->fieldname . '[0][target_id]' => '',
     ];
-    $this->drupalPostForm('/user/' . $this->otherUser->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('/user/' . $this->otherUser->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet("user/{$this->otherUser->id()}");
-    $this->assertNoLink($this->group1->getTitle());
+    $this->assertSession()->linkNotExists($this->group1->getTitle());
     // otherUser is not referenced from group1.
     $this->drupalGet("node/{$this->group1->id()}");
-    $this->assertNoLink($this->otherUser->getDisplayName());
+    $this->assertSession()->linkNotExists($this->otherUser->getDisplayName());
     // otherUser does not have rights access on article.
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);


   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertLinkRector
 * AssertNoFieldCheckedRector
 * AssertNoLinkRector
 * AssertNoOptionRector
 * AssertOptionRector
 * AssertOptionSelectedRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/pbf/tests/src/Functional/PbfAccessWithFormWidgetValueTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fieldname = 'field_pbf_group';
@@ @@
     $this->drupalLogin($this->adminUser);

     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
     // Check that grants are not set with the form widget settings.
-    $this->assertText(t('Grants access set on each node. Default grant access are :'));
+    $this->assertSession()->pageTextContains(t('Grants access set on each node. Default grant access are :'));

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');

     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Member of group', 'User Obf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');

     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@
     // Check that grants are set generally on the form widget settings.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet($bundle_path . '/form-display');
-    $this->assertText(t('Grants access set generally. Grant access used are :'));
+    $this->assertSession()->pageTextContains(t('Grants access set generally. Grant access used are :'));

     // Save articles for acquire new rights access.
     $edit = [
       $this->fieldname . '[0][target_id]' => $this->group1->getTitle() . ' (' . $this->group1->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->article1->id() . '/edit', $edit, t('Save'));
-    $this->assertText(t('has been updated'));
-    $this->assertResponse(200);
+    $this->drupalGet('/node/' . $this->article1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('has been updated'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     $edit = [
       $this->fieldname . '[0][target_id]' => $this->group1->getTitle() . ' (' . $this->group1->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->article2->id() . '/edit', $edit, t('Save'));
-    $this->assertText(t('has been updated'));
-    $this->assertResponse(200);
+    $this->drupalGet('/node/' . $this->article2->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('has been updated'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Nothing has changed for article 1.
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Search content Article. Must find 2 articles.
     $this->checkSearchResults('Article', 2);

@@ @@
     // Check that grants are set generally on the form widget settings.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet($bundle_path . '/form-display');
-    $this->assertText(t('Grants access set generally. Grant access used are :'));
-    $this->assertText(t('Grant view:1'));
+    $this->assertSession()->pageTextContains(t('Grants access set generally. Grant access used are :'));
+    $this->assertSession()->pageTextContains(t('Grant view:1'));

     // Save articles for acquire new rights access.
     $edit = [
       $this->fieldname . '[0][target_id]' => $this->group1->getTitle() . ' (' . $this->group1->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->article1->id() . '/edit', $edit, t('Save'));
-    $this->assertText(t('has been updated'));
-    $this->assertResponse(200);
+    $this->drupalGet('/node/' . $this->article1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('has been updated'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     $edit = [
       $this->fieldname . '[0][target_id]' => $this->group1->getTitle() . ' (' . $this->group1->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->article2->id() . '/edit', $edit, t('Save'));
-    $this->assertText(t('has been updated'));
-    $this->assertResponse(200);
+    $this->drupalGet('/node/' . $this->article2->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('has been updated'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     $this->drupalLogin($this->normalUser);

     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Article 1 must be private now..
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->checkSearchResults('Article', 0);

@@ @@

     // Check if user is well associated with group1.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->group1->getTitle());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->group1->getTitle());
+    $this->assertSession()->statusCodeEquals(200);

     // Check search.
     $this->container->get('cron')->run();
@@ @@
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Change settings in the widget form. Now Articles must be all private
     // with all rights access.
@@ @@
     // Check that grants are set generally on the form widget settings.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet($bundle_path . '/form-display');
-    $this->assertText(t('Grants access set generally. Grant access used are :'));
-    $this->assertText(t('Grant update:1'));
-    $this->assertText(t('Grant delete:1'));
+    $this->assertSession()->pageTextContains(t('Grants access set generally. Grant access used are :'));
+    $this->assertSession()->pageTextContains(t('Grant update:1'));
+    $this->assertSession()->pageTextContains(t('Grant delete:1'));

     // Save articles for acquire new rights access.
     $edit = [
       $this->fieldname . '[0][target_id]' => $this->group1->getTitle() . ' (' . $this->group1->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->article1->id() . '/edit', $edit, t('Save'));
-    $this->assertText(t('has been updated'));
-    $this->assertResponse(200);
+    $this->drupalGet('/node/' . $this->article1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('has been updated'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     $edit = [
       $this->fieldname . '[0][target_id]' => $this->group1->getTitle() . ' (' . $this->group1->id() . ')',
     ];
-    $this->drupalPostForm('/node/' . $this->article2->id() . '/edit', $edit, t('Save'));
-    $this->assertText(t('has been updated'));
-    $this->assertResponse(200);
+    $this->drupalGet('/node/' . $this->article2->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('has been updated'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertLink($this->group1->getTitle());
+    $this->assertSession()->linkExists($this->group1->getTitle());

     $this->drupalLogin($this->normalUser);

     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article1->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/pbf/tests/src/Functional/PbfAccessByUserRefTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fieldname = 'field_pbf_user';
@@ @@
     $this->drupalLogin($this->adminUser);

     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');

     if ($this->userMethod == 'ref_user') {
       $user_path_config = 'admin/config/people/accounts';
@@ @@
       $this->drupalGet($user_path_config . '/fields');
       $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-user"]/td[1]', 'User related to user', 'User Pbf field was created and appears in the overview page.');
       $this->drupalGet($user_path_config . '/form-display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
       $this->drupalGet($user_path_config . '/display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
     }

     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@
     // Login as user referenced by Article 2.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);

     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Associate normalUser with user referenced.
     $this->drupalLogin($this->normalUser);
@@ @@

     // Check if normalUser is well associated with user.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_user[0][target_id]', $this->user->getAccountName() . ' (' . $this->user->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_user[0][target_id]', $this->user->getAccountName() . ' (' . $this->user->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->user->getAccountName());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->user->getAccountName());
+    $this->assertSession()->statusCodeEquals(200);

     // Check search.
     $this->container->get('cron')->run();
@@ @@
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Set article2 with view, update, delete permissions.
     $value = [
@@ @@
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Test with user.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/pbf/tests/src/Functional/PbfAccessByUserDirectTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fieldname = 'field_pbf_user';
@@ @@
     $this->drupalLogin($this->adminUser);

     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');

     if ($this->userMethod == 'ref_user') {
       $user_path_config = 'admin/config/people/accounts';
@@ @@
       $this->drupalGet($user_path_config . '/fields');
       $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-user"]/td[1]', 'User related to user', 'User Obf field was created and appears in the overview page.');
       $this->drupalGet($user_path_config . '/form-display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
       $this->drupalGet($user_path_config . '/display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
     }

     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@
     // Login as user referenced by Article 2.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);

     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Set article2 with view, update, delete permissions.
     $value = [
@@ @@
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Test with normalUser.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/pbf/tests/src/Functional/PbfAccessByTermRefTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and create content with Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->fieldname = 'field_pbf_term';
     $this->attachPbfTermFields($this->vocabulary, $this->fieldname);
@@ @@
     $this->drupalLogin($this->adminUser);

     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-term"]/td[1]', 'Content related to term', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_widget');

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-term"]/td[1]', 'Content related to term', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_formatter_default');

     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-term"]/td[1]', 'User related to term', 'User Pbf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_formatter_default');

     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);

     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Set article2 with view permission.
     $value = [
@@ @@
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 1);

     // Associate normalUser with term1.
@@ @@

     // Check if user is well associated with group1.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_term[0][target_id]', $this->term1->getName() . ' (' . $this->term1->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_term[0][target_id]', $this->term1->getName() . ' (' . $this->term1->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->term1->getName());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->term1->getName());
+    $this->assertSession()->statusCodeEquals(200);

     // Check search.
     $this->container->get('cron')->run();
@@ @@
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Set article2 with view, update, delete permissions.
     $value = [
@@ @@
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/pbf/tests/src/Functional/PbfAccessByRoleTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fieldname = 'field_pbf_role';
@@ @@
     $this->drupalLogin($this->adminUser);

     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-role"]/td[1]', 'Grant access to role', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_role][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_role][type]', 'pbf_widget');

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-role"]/td[1]', 'Grant access to role', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_role][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_role][type]', 'pbf_formatter_default');

     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Set article2 with view, update, delete permissions.
     $value = [
@@ @@
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Test with user.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/pbf/tests/src/Functional/PbfAccessByNodeRefTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fieldname = 'field_pbf_group';
@@ @@
     $this->drupalLogin($this->adminUser);

     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');

     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ @@
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');

     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');

     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Member of group', 'User Obf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');

     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Build the search index.
     $this->container->get('cron')->run();
@@ @@
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);

     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Set article2 with view permission.
     $value = [
@@ @@
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 1);

     // Associate normalUser with group1.
@@ @@

     // Check if user is well associated with group1.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->group1->getTitle());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->group1->getTitle());
+    $this->assertSession()->statusCodeEquals(200);

     // Check search.
     $this->container->get('cron')->run();
@@ @@
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Set article2 with view, update, delete permissions.
     $value = [
@@ @@
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

