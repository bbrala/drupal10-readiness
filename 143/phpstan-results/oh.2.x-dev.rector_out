modules/contrib/oh/modules/date_recur_oh_field/date_recur_oh_field.module
modules/contrib/oh/modules/date_recur_oh_field/src/Plugin/Field/FieldType/DateRecurOHItem.php
modules/contrib/oh/modules/oh_regular/src/OhRegularMapInterface.php
modules/contrib/oh/modules/oh_regular/src/OhRegularMapListBuilder.php
modules/contrib/oh/src/Event/OhEvents.php
modules/contrib/oh/modules/date_recur_oh_field/src/Plugin/Validation/Constraint/DateRecurOhStatusConstraint.php
modules/contrib/oh/modules/date_recur_oh_field/src/Plugin/Validation/Constraint/DateRecurOhStatusConstraintValidator.php
modules/contrib/oh/src/Event/OhExceptionEvent.php
modules/contrib/oh/modules/oh_regular/src/OhRegularSubscriber.php
modules/contrib/oh/tests/src/Unit/OhFlattenTest.php
modules/contrib/oh/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php
modules/contrib/oh/src/Event/OhProcessEvent.php
modules/contrib/oh/src/Event/OhRegularEvent.php
modules/contrib/oh/src/EventSubscriber/OhEventSubscriber.php
modules/contrib/oh/src/OhDateRange.php
modules/contrib/oh/modules/oh_review/oh_review.module
modules/contrib/oh/src/OhOccurrence.php
modules/contrib/oh/src/OhOpeningHours.php
modules/contrib/oh/src/OhOpeningHoursInterface.php
modules/contrib/oh/src/OhUtility.php
modules/contrib/oh/modules/oh_regular/src/Access/IsOhBundleAccessCheck.php
modules/contrib/oh/modules/oh_regular/src/Entity/Form/OhRegularMapDeleteForm.php
modules/contrib/oh/tests/modules/oh_test/src/OhTestExceptionSubscriber.php
modules/contrib/oh/modules/oh_regular/src/Entity/Form/OhRegularMapForm.php
modules/contrib/oh/tests/modules/oh_test/src/OhTestRegularSubscriber.php
modules/contrib/oh/tests/src/Kernel/OhOpeningHoursServiceTest.php
modules/contrib/oh/modules/oh_review/src/Controller/OhReviewReport.php
modules/contrib/oh/modules/oh_regular/src/Entity/OhRegularMap.php
modules/contrib/oh/tests/src/Kernel/OhProcessTest.php
modules/contrib/oh/modules/oh_regular/src/Entity/Routing/OhRegularMapRouteProvider.php
modules/contrib/oh/modules/oh_regular/src/OhRegular.php
modules/contrib/oh/tests/src/Kernel/OhTestTrait.php
modules/contrib/oh/tests/src/Unit/OhDateRangeTest.php
modules/contrib/oh/tests/src/Unit/OhOccurrenceTest.php
modules/contrib/oh/modules/oh_regular/src/OhRegularInterface.php
modules/contrib/oh/modules/oh_review/src/Form/OhReviewSidebarForm.php
modules/contrib/oh/modules/oh_review/src/OhReviewUtility.php
modules/contrib/oh/modules/oh_review/src/Plugin/Derivative/OhReviewContextualLinks.php
modules/contrib/oh/modules/oh_review/src/Routing/OhReviewRouteSubscriber.php
modules/contrib/oh/modules/oh_review/src/tests/src/Unit/OhReviewUtilityTest.php

7 files with changes
====================

1) modules/contrib/oh/src/OhOpeningHours.php:41

    ---------- begin diff ----------
@@ @@
   public function getOccurrences(EntityInterface $entity, OhDateRange $range): array {
     $occurrences = $this->getDimensionalOccurrences($entity, $range);
     $event = new OhProcessEvent($entity, $range, $occurrences);
-    $this->eventDispatcher->dispatch(OhEvents::PROCESS, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::PROCESS);
     return $event->getOccurrences();
   }

@@ @@
    */
   public function getRegularHours(EntityInterface $entity, OhDateRange $range): array {
     $event = new OhRegularEvent($entity, $range);
-    $this->eventDispatcher->dispatch(OhEvents::REGULAR, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::REGULAR);
     return $event->getRegularHours();
   }

@@ @@
    */
   public function getExceptions(EntityInterface $entity, OhDateRange $range): array {
     $event = new OhExceptionEvent($entity, $range);
-    $this->eventDispatcher->dispatch(OhEvents::EXCEPTIONS, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::EXCEPTIONS);
     return $event->getExceptions();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/oh/src/Event/OhRegularEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
 use Drupal\oh\OhOccurrence;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to add regular hours between a date range.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/oh/src/Event/OhProcessEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to process opening hours after they have been computed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/oh/src/Event/OhExceptionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oh\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
 use Drupal\oh\OhOccurrence;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to add exceptions between a date range.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/oh/tests/src/Unit/OhOccurrenceTest.php:76

    ---------- begin diff ----------
@@ @@
    * @covers ::getCacheMaxAge
    */
   public function testCachability(): void {
-    $cacheContextsManager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cacheContextsManager = $this->createMock(CacheContextsManager::class);
     $cacheContextsManager->method('assertValidTokens')->willReturn(TRUE);
     $container = new ContainerBuilder();
     $container->set('cache_contexts_manager', $cacheContextsManager);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/oh/tests/src/Unit/OhFlattenTest.php:276

    ---------- begin diff ----------
@@ @@
    * Tests occurrences are flattened and cacheability is retained.
    */
   public function testCacheability(): void {
-    $cache_contexts_manager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock(CacheContextsManager::class);
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
     $container = new Container();
     $container->set('cache_contexts_manager', $cache_contexts_manager);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/oh/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $fieldName = 'testfield';
     $fieldStorage = FieldStorageConfig::create([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

