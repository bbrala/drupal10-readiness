modules/contrib/imotilux/imotilux.install
modules/contrib/imotilux/src/Access/ImotiluxNodeIsRemovableAccessCheck.php
modules/contrib/imotilux/tests/modules/imotilux_breadcrumb_test/imotilux_breadcrumb_test.module
modules/contrib/imotilux/tests/src/Kernel/ImotiluxPendingRevisionTest.php
modules/contrib/imotilux/imotilux.module
modules/contrib/imotilux/src/Cache/ImotiluxNavigationCacheContext.php
modules/contrib/imotilux/tests/modules/imotilux_test/imotilux_test.module
modules/contrib/imotilux/tests/src/Functional/ImotiluxBreadcrumbTest.php
modules/contrib/imotilux/src/Controller/ImotiluxController.php
modules/contrib/imotilux/src/Form/ImotiluxAdminEditForm.php
modules/contrib/imotilux/imotilux.views.inc
modules/contrib/imotilux/tests/src/Functional/ImotiluxContentModerationTest.php
modules/contrib/imotilux/src/Form/ImotiluxOutlineForm.php
modules/contrib/imotilux/tests/src/Kernel/ImotiluxUninstallTest.php
modules/contrib/imotilux/tests/src/Functional/ImotiluxTest.php
modules/contrib/imotilux/src/Form/ImotiluxRemoveForm.php
modules/contrib/imotilux/src/Form/ImotiluxSettingsForm.php
modules/contrib/imotilux/src/ImotiluxBreadcrumbBuilder.php
modules/contrib/imotilux/tests/src/Unit/ImotiluxManagerTest.php
modules/contrib/imotilux/src/ImotiluxExport.php
modules/contrib/imotilux/src/ImotiluxManager.php
modules/contrib/imotilux/tests/src/Unit/ImotiluxUninstallValidatorTest.php
modules/contrib/imotilux/tests/src/Functional/ImotiluxTestTrait.php
modules/contrib/imotilux/tests/src/Unit/Menu/ImotiluxLocalTasksTest.php
modules/contrib/imotilux/tests/src/Functional/Views/ImotiluxRelationshipTest.php
modules/contrib/imotilux/tests/src/FunctionalJavascript/ImotiluxJavascriptTest.php
modules/contrib/imotilux/tests/src/Kernel/ImotiluxInstallTest.php
modules/contrib/imotilux/src/ImotiluxManagerInterface.php
modules/contrib/imotilux/src/ImotiluxOutline.php
modules/contrib/imotilux/src/ImotiluxOutlineStorage.php
modules/contrib/imotilux/src/ImotiluxOutlineStorageInterface.php
modules/contrib/imotilux/src/ImotiluxUninstallValidator.php
modules/contrib/imotilux/src/Plugin/Block/ImotiluxNavigationBlock.php
modules/contrib/imotilux/src/Plugin/Validation/Constraint/ImotiluxOutlineConstraint.php
modules/contrib/imotilux/src/Plugin/Validation/Constraint/ImotiluxOutlineConstraintValidator.php
modules/contrib/imotilux/src/Plugin/views/argument_default/TopLevelImotilux.php
modules/contrib/imotilux/src/ProxyClass/ImotiluxUninstallValidator.php

9 files with changes
====================

1) modules/contrib/imotilux/tests/src/Unit/Menu/ImotiluxLocalTasksTest.php:10

    ---------- begin diff ----------
@@ @@
  */
 class ImotiluxLocalTasksTest extends LocalTaskIntegrationTestBase {

-  protected function setUp() {
+  protected function setUp(): void {
     $this->directoryList = [
       'imotilux' => 'core/modules/imotilux',
       'node' => 'core/modules/node',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/imotilux/tests/src/Unit/ImotiluxUninstallValidatorTest.php:13

    ---------- begin diff ----------
@@ @@
   use AssertHelperTrait;

   /**
-   * @var \Drupal\imotilux\ImotiluxUninstallValidator|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\imotilux\ImotiluxUninstallValidator|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $imotiluxUninstallValidator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
-    $this->imotiluxUninstallValidator = $this->getMockBuilder('Drupal\imotilux\ImotiluxUninstallValidator')
-      ->disableOriginalConstructor()
-      ->setMethods(['hasImotiluxOutlines', 'hasImotiluxNodes'])
-      ->getMock();
+    $this->imotiluxUninstallValidator = $this->createMock('Drupal\imotilux\ImotiluxUninstallValidator');
     $this->imotiluxUninstallValidator->setStringTranslation($this->getStringTranslationStub());
   }
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/imotilux/tests/src/Unit/ImotiluxManagerTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManager|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The mocked config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The mocked translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translation;

@@ @@
   /**
    * The mocked renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Render\RendererInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $renderer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->translation = $this->getStringTranslationStub();
     $this->configFactory = $this->getConfigFactoryStub([]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/imotilux/tests/src/Kernel/ImotiluxUninstallTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
@@ @@
   public function testImotiluxUninstall() {
     // No nodes exist.
     $validation_reasons = \Drupal::service('module_installer')->validateUninstall(['imotilux']);
-    $this->assertEqual([], $validation_reasons, 'The imotilux module is not required.');
+    $this->assertEquals([], $validation_reasons, 'The imotilux module is not required.');

     $content_type = NodeType::create([
       'type' => $this->randomMachineName(),
@@ @@

     // One node in a imotilux but not of type imotilux.
     $validation_reasons = \Drupal::service('module_installer')->validateUninstall(['imotilux']);
-    $this->assertEqual(['To uninstall Imotilux, delete all content that is part of a imotilux'], $validation_reasons['imotilux']);
+    $this->assertEquals(['To uninstall Imotilux, delete all content that is part of a imotilux'], $validation_reasons['imotilux']);

     $imotilux_node = Node::create(['title' => $this->randomString(), 'type' => 'imotilux']);
     $imotilux_node->imotilux['bid'] = FALSE;
@@ @@
     // Two nodes, one in a imotilux but not of type imotilux and one imotilux node (which is
     // not in a imotilux).
     $validation_reasons = \Drupal::service('module_installer')->validateUninstall(['imotilux']);
-    $this->assertEqual(['To uninstall Imotilux, delete all content that is part of a imotilux'], $validation_reasons['imotilux']);
+    $this->assertEquals(['To uninstall Imotilux, delete all content that is part of a imotilux'], $validation_reasons['imotilux']);

     $node->delete();
     // One node of type imotilux but not actually part of a imotilux.
     $validation_reasons = \Drupal::service('module_installer')->validateUninstall(['imotilux']);
-    $this->assertEqual(['To uninstall Imotilux, delete all content that has the Imotilux content type'], $validation_reasons['imotilux']);
+    $this->assertEquals(['To uninstall Imotilux, delete all content that has the Imotilux content type'], $validation_reasons['imotilux']);

     $imotilux_node->delete();
     // No nodes exist therefore the imotilux module is not required.
@@ @@
     // One node exists but is not part of a imotilux therefore the imotilux module is
     // not required.
     $validation_reasons = \Drupal::service('module_installer')->validateUninstall(['imotilux']);
-    $this->assertEqual([], $validation_reasons, 'The imotilux module is not required.');
+    $this->assertEquals([], $validation_reasons, 'The imotilux module is not required.');

     // Uninstall the Imotilux module and check the node type is deleted.
     \Drupal::service('module_installer')->uninstall(['imotilux']);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/imotilux/tests/src/Kernel/ImotiluxPendingRevisionTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManager|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/imotilux/tests/src/Functional/Views/ImotiluxRelationshipTest.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     // Create users.
@@ @@
     $edit['imotilux[bid]'] = $imotilux_nid;

     if ($parent !== NULL) {
-      $this->drupalPostForm('node/add/imotilux', $edit, t('Change imotilux (update list of parents)'));
+      $this->drupalGet('node/add/imotilux');
+      $this->submitForm($edit, t('Change imotilux (update list of parents)'));

       $edit['imotilux[pid]'] = $parent;
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       // Make sure the parent was flagged as having children.
       $parent_node = $this->entityTypeManager->getStorage('node')->loadUnchanged($parent);
       $this->assertFalse(empty($parent_node->imotilux['has_children']), 'Parent node is marked as having children');
     }
     else {
-      $this->drupalPostForm('node/add/imotilux', $edit, t('Save'));
+      $this->drupalGet('node/add/imotilux');
+      $this->submitForm($edit, t('Save'));
     }

     // Check to make sure the imotilux node was created.
@@ @@
       $this->drupalGet('test-imotilux/' . $nodes[$i]->id());

       for ($j = 0; $j < $i; $j++) {
-        $this->assertLink($nodes[$j]->label());
+        $this->assertSession()->linkExists($nodes[$j]->label());
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/imotilux/tests/src/Functional/ImotiluxContentModerationTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
       'title[0][value]' => $this->randomString(),
       'moderation_state[0][state]' => 'published',
     ];
-    $this->drupalPostForm('node/add/imotilux', $edit, t('Save'));
+    $this->drupalGet('node/add/imotilux');
+    $this->submitForm($edit, t('Save'));
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $this->assertTrue($node);

@@ @@
     $edit = [
       'moderation_state[0][state]' => 'draft',
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextNotContains('You can only change the imotilux outline for the published version of this content.');

     // Create a imotilux draft with no changes, then publish it.
@@ @@
     $edit = [
       'moderation_state[0][state]' => 'draft',
     ];
-    $this->drupalPostForm('node/' . $imotilux_1->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $imotilux_1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextNotContains('You can only change the imotilux outline for the published version of this content.');
     $edit = [
       'moderation_state[0][state]' => 'published',
     ];
-    $this->drupalPostForm('node/' . $imotilux_1->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $imotilux_1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Try to move Node 2 to a different parent.
     $edit = [
@@ @@
       'imotilux[pid]' => $imotilux_1_nodes[3]->id(),
       'moderation_state[0][state]' => 'draft',
     ];
-    $this->drupalPostForm('node/' . $imotilux_1_nodes[1]->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $imotilux_1_nodes[1]->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     $this->assertSession()->pageTextContains('You can only change the imotilux outline for the published version of this content.');

@@ @@
       'imotilux[bid]' => $imotilux_2->id(),
       'moderation_state[0][state]' => 'draft',
     ];
-    $this->drupalPostForm('node/' . $imotilux_1_nodes[1]->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $imotilux_1_nodes[1]->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     $this->assertSession()->pageTextContains('You can only change the imotilux outline for the published version of this content.');

@@ @@
       'imotilux[weight]' => 2,
       'moderation_state[0][state]' => 'draft',
     ];
-    $this->drupalPostForm('node/' . $imotilux_1_nodes[1]->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $imotilux_1_nodes[1]->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     $this->assertSession()->pageTextContains('You can only change the imotilux outline for the published version of this content.');

@@ @@
     $edit = [
       'moderation_state[0][state]' => 'draft',
     ];
-    $this->drupalPostForm('node/' . $imotilux_1_nodes[1]->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $imotilux_1_nodes[1]->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     $this->assertSession()->pageTextNotContains('You can only change the imotilux outline for the published version of this content.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/imotilux/tests/src/Functional/ImotiluxBreadcrumbTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('system_breadcrumb_block');
     $this->drupalPlaceBlock('page_title_block');
@@ @@
     $edit['imotilux[bid]'] = $imotilux_nid;

     if ($parent !== NULL) {
-      $this->drupalPostForm('node/add/imotilux', $edit, t('Change imotilux (update list of parents)'));
+      $this->drupalGet('node/add/imotilux');
+      $this->submitForm($edit, t('Change imotilux (update list of parents)'));

       $edit['imotilux[pid]'] = $parent;
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       // Make sure the parent was flagged as having children.
       $parent_node = $this->entityTypeManager->getStorage('node')->loadUnchanged($parent);
       $this->assertFalse(empty($parent_node->imotilux['has_children']), 'Parent node is marked as having children');
     }
     else {
-      $this->drupalPostForm('node/add/imotilux', $edit, t('Save'));
+      $this->drupalGet('node/add/imotilux');
+      $this->submitForm($edit, t('Save'));
     }

     // Check to make sure the imotilux node was created.
@@ @@
       $got_breadcrumb[] = $link->getText();
     }
     // Home link and four parent imotilux nodes should be in the breadcrumb.
-    $this->assertEqual(5, count($got_breadcrumb));
-    $this->assertEqual($nodes[3]->getTitle(), end($got_breadcrumb));
+    $this->assertEquals(5, count($got_breadcrumb));
+    $this->assertEquals($nodes[3]->getTitle(), end($got_breadcrumb));
     $edit = [
       'title[0][value]' => 'Updated node5 title',
     ];
-    $this->drupalPostForm($nodes[3]->toUrl('edit-form'), $edit, 'Save');
+    $this->drupalGet($nodes[3]->toUrl('edit-form'));
+    $this->submitForm($edit, 'Save');
     $this->drupalGet($nodes[4]->toUrl());
     // Fetch each node title in the current breadcrumb.
     $links = $this->xpath('//nav[@class="breadcrumb"]/ol/li/a');
@@ @@
     foreach ($links as $link) {
       $got_breadcrumb[] = $link->getText();
     }
-    $this->assertEqual(5, count($got_breadcrumb));
-    $this->assertEqual($edit['title[0][value]'], end($got_breadcrumb));
+    $this->assertEquals(5, count($got_breadcrumb));
+    $this->assertEquals($edit['title[0][value]'], end($got_breadcrumb));
   }

   /**
@@ @@
     $edit = [
       'title[0][value]' => "you can't see me",
     ];
-    $this->drupalPostForm($nodes[3]->toUrl('edit-form'), $edit, 'Save');
+    $this->drupalGet($nodes[3]->toUrl('edit-form'));
+    $this->submitForm($edit, 'Save');
     $this->drupalGet($nodes[4]->toUrl());
     $links = $this->xpath('//nav[@class="breadcrumb"]/ol/li/a');
     $got_breadcrumb = [];
@@ @@
     foreach ($links as $link) {
       $got_breadcrumb[] = $link->getText();
     }
-    $this->assertEqual(5, count($got_breadcrumb));
-    $this->assertEqual($edit['title[0][value]'], end($got_breadcrumb));
+    $this->assertEquals(5, count($got_breadcrumb));
+    $this->assertEquals($edit['title[0][value]'], end($got_breadcrumb));
     $config = $this->container->get('config.factory')->getEditable('imotilux_breadcrumb_test.settings');
     $config->set('hide', TRUE)->save();
     $this->drupalGet($nodes[4]->toUrl());
@@ @@
     foreach ($links as $link) {
       $got_breadcrumb[] = $link->getText();
     }
-    $this->assertEqual(4, count($got_breadcrumb));
-    $this->assertEqual($nodes[2]->getTitle(), end($got_breadcrumb));
+    $this->assertEquals(4, count($got_breadcrumb));
+    $this->assertEquals($nodes[2]->getTitle(), end($got_breadcrumb));
     $this->drupalGet($nodes[3]->toUrl());
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/imotilux/src/ProxyClass/ImotiluxUninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\imotilux\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\imotilux\ImotiluxUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ImotiluxUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class ImotiluxUninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


 [ERROR] Could not process                                                      
         "modules/contrib/imotilux/tests/src/Functional/ImotiluxTest.php" file, 
         due to:                                                                
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

 [ERROR] Could not process                                                      
         "modules/contrib/imotilux/tests/src/Functional/ImotiluxTestTrait.php"  
         file, due to:                                                          
         "System error: "Method assertPattern() was not found in reflection of  
         class Drupal\Tests\imotilux\Functional\ImotiluxTestTrait."             
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

