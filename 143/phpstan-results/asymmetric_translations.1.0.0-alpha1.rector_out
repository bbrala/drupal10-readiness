modules/contrib/asymmetric_translations/asymmetric_translations.module
modules/contrib/asymmetric_translations/src/AsymmetricNodeTranslationEntityStorageInterface.php
modules/contrib/asymmetric_translations/src/AsymmetricNodeTranslationInterface.php
modules/contrib/asymmetric_translations/src/AsymmetricNodeTranslationListBuilder.php
modules/contrib/asymmetric_translations/src/AsymmetricNodeTranslationViewBuilder.php
modules/contrib/asymmetric_translations/src/Entity/AsymmetricNodeTranslation.php
modules/contrib/asymmetric_translations/src/Event/NodeClonedEvent.php
modules/contrib/asymmetric_translations/modules/at_auto_fix_entity_references/at_auto_fix_entity_references.module
modules/contrib/asymmetric_translations/src/Event/NodeSavedEvent.php
modules/contrib/asymmetric_translations/modules/at_auto_fix_entity_references/src/EventSubscriber/AutoFixNodeReferences.php
modules/contrib/asymmetric_translations/src/Event/ParagraphClonedEvent.php
modules/contrib/asymmetric_translations/src/Event/ParagraphSavedEvent.php
modules/contrib/asymmetric_translations/src/EventSubscriber/ControllerAlterSubscriber.php
modules/contrib/asymmetric_translations/src/Form/AsymmetricNodeTranslationForm.php
modules/contrib/asymmetric_translations/src/Form/NodeEditAsymmetricNodeTranslationsForm.php
modules/contrib/asymmetric_translations/src/Plugin/Validation/Constraint/AsymmetricTranslationLanguageConstraint.php
modules/contrib/asymmetric_translations/src/Plugin/Validation/Constraint/AsymmetricTranslationLanguageConstraintValidator.php
modules/contrib/asymmetric_translations/modules/at_filter_node_reference_widgets/at_filter_node_reference_widgets.module
modules/contrib/asymmetric_translations/modules/at_frontpage_per_language/at_frontpage_per_language.module
modules/contrib/asymmetric_translations/src/AsymmetricNodeTranslationAccessControlHandler.php
modules/contrib/asymmetric_translations/src/Plugin/Validation/Constraint/NodeLanguageConstraint.php
modules/contrib/asymmetric_translations/src/Plugin/Validation/Constraint/NodeLanguageConstraintValidator.php
modules/contrib/asymmetric_translations/src/AsymmetricNodeTranslationEntityStorage.php
modules/contrib/asymmetric_translations/src/Plugin/Validation/Constraint/SingleNodeUsageConstraint.php
modules/contrib/asymmetric_translations/src/Plugin/Validation/Constraint/SingleNodeUsageConstraintValidator.php

5 files with changes
====================

1) modules/contrib/asymmetric_translations/src/Form/AsymmetricNodeTranslationForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New asymmetric node translation %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/asymmetric_translations/modules/at_filter_node_reference_widgets/at_filter_node_reference_widgets.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
 /**
  * Implements hook_field_widget_form_alter().
  * TODO: Also automate this process for node reference fields (currently done by hand)
  * TODO: Add the entity_reference_by_language view config to the installation of this module
  */
-function at_filter_node_reference_widgets_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
+function at_filter_node_reference_widgets_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
   $widget_type = $context['widget']->getPluginId();
   if ($widget_type !== 'link_default' && $widget_type !== 'link_attributes' && $widget_type !== 'link_target_field_widget') {
     return;
@@ @@
     ];
   }
 }
-
-
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/asymmetric_translations/modules/at_auto_fix_entity_references/src/EventSubscriber/AutoFixNodeReferences.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\at_auto_fix_entity_references\EventSubscriber;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\asymmetric_translations\Entity\AsymmetricNodeTranslation;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Language\Language;
@@ @@
    * @return void
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  private function recursivelyFixNodeReferences(\Drupal\Core\Entity\EntityInterface $entity, Language $language, $recursive = TRUE) {
+  private function recursivelyFixNodeReferences(EntityInterface $entity, Language $language, $recursive = TRUE) {
     foreach ($entity->getFields() as $field_name => $field) {
       $type = $field->getFieldDefinition()->getType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/asymmetric_translations/modules/at_auto_fix_entity_references/at_auto_fix_entity_references.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\NodeInterface;
 /**
  * Called when a node is cloned.
  *
@@ @@
  * @param \Drupal\node\NodeInterface $node
  *   The node being cloned.
  */
-function at_auto_fix_entity_references_cloned_node_alter(\Drupal\node\NodeInterface $node) {
+function at_auto_fix_entity_references_cloned_node_alter(NodeInterface $node) {
   if (!$language = \Drupal::request()->query->get('clone_for_translation')) {
     return;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/asymmetric_translations/asymmetric_translations.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Url;
+use Drupal\node\NodeInterface;
+use Drupal\asymmetric_translations\Event\NodeClonedEvent;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\asymmetric_translations\Event\NodeSavedEvent;
+use Drupal\asymmetric_translations\Event\ParagraphSavedEvent;
 use Drupal\asymmetric_translations\Entity\AsymmetricNodeTranslation;
 use Drupal\asymmetric_translations\Event;
 use Drupal\node\Entity\Node;
@@ @@
   $entity_types['node']->addConstraint('NodeAsymmetricTranslationLanguage');
 }

-function asymmetric_translations_language_switch_links_alter(array &$links, $type, \Drupal\Core\Url $url) {
+function asymmetric_translations_language_switch_links_alter(array &$links, $type, Url $url) {
   if (!$node = \Drupal::routeMatch()->getParameter('node')) {
     return;
   }
@@ @@
  * @param \Drupal\node\NodeInterface $node
  *   The node being cloned.
  */
-function asymmetric_translations_cloned_node_alter(\Drupal\node\NodeInterface $node) {
+function asymmetric_translations_cloned_node_alter(NodeInterface $node) {
   if (!$language = \Drupal::request()->query->get('clone_for_translation')) {
     return;
   }
@@ @@
   $node->at_source_node = \Drupal::routeMatch()->getParameter('node');

   $event_dispatcher = \Drupal::service('event_dispatcher');
-  $event_dispatcher->dispatch(new Event\NodeClonedEvent($node, $node->language()), Event\NodeClonedEvent::EVENT_NAME);
+  $event_dispatcher->dispatch(new NodeClonedEvent($node, $node->language()), NodeClonedEvent::EVENT_NAME);
 }

 /**
@@ @@
  * @param Drupal\Core\Entity\EntityInterface $entity
  *   The node being saved.
  */
-function asymmetric_translations_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function asymmetric_translations_node_presave(EntityInterface $entity) {
   $event_dispatcher = \Drupal::service('event_dispatcher');
-  $event_dispatcher->dispatch(new Event\NodeSavedEvent($entity, $entity->language()), Event\NodeSavedEvent::EVENT_NAME);
+  $event_dispatcher->dispatch(new NodeSavedEvent($entity, $entity->language()), NodeSavedEvent::EVENT_NAME);
 }

 /**
@@ @@
  * @param Drupal\Core\Entity\EntityInterface $entity
  *   The node being saved.
  */
-function asymmetric_translations_paragraph_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function asymmetric_translations_paragraph_presave(EntityInterface $entity) {
   if (!$parent_entity = $entity->getParentEntity()) {
     return;
   }

-  while(!($parent_entity instanceof \Drupal\node\NodeInterface)) {
+  while(!($parent_entity instanceof NodeInterface)) {
     if (!$parent_entity = $parent_entity->getParentEntity()) {
       return;
     }
@@ @@
   }

   $event_dispatcher = \Drupal::service('event_dispatcher');
-  $event_dispatcher->dispatch(new Event\ParagraphSavedEvent($entity, $parent_entity->language()), Event\ParagraphSavedEvent::EVENT_NAME);
+  $event_dispatcher->dispatch(new ParagraphSavedEvent($entity, $parent_entity->language()), ParagraphSavedEvent::EVENT_NAME);
 }

 /**
@@ @@
  * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
  * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
  */
-function asymmetric_translations_node_predelete(Drupal\Core\Entity\EntityInterface $node) {
+function asymmetric_translations_node_predelete(EntityInterface $node) {
   $storage = \Drupal::entityTypeManager()->getStorage('asymmetric_node_translation');
   if ($ant = $storage->getTranslationEntityByNode($node)) {

@@ @@
  * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
  * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
  */
-function asymmetric_translations_node_delete(Drupal\Core\Entity\EntityInterface $node) {
+function asymmetric_translations_node_delete(EntityInterface $node) {
   $storage = \Drupal::entityTypeManager()->getStorage('asymmetric_node_translation');
   if ($ant = $storage->getTranslationEntityByNode($node)) {
     if ($ant->getUntranslated()->language()->getId() === $node->language()->getId()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

