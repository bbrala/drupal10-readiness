modules/contrib/linkchecker/linkchecker.install
modules/contrib/linkchecker/src/Annotation/LinkStatusHandler.php
modules/contrib/linkchecker/src/Commands/LinkCheckerCommands.php
modules/contrib/linkchecker/src/Plugin/LinkExtractorInterface.php
modules/contrib/linkchecker/src/Plugin/LinkExtractorManager.php
modules/contrib/linkchecker/tests/src/Functional/LinkCheckerInterfaceTest.php
modules/contrib/linkchecker/src/Plugin/LinkStatusHandler/Repair301.php
modules/contrib/linkchecker/linkchecker.module
modules/contrib/linkchecker/src/Entity/LinkCheckerLink.php
modules/contrib/linkchecker/linkchecker.post_update.php
modules/contrib/linkchecker/linkchecker.redirect.inc
modules/contrib/linkchecker/linkchecker.views.inc
modules/contrib/linkchecker/src/Annotation/LinkExtractor.php
modules/contrib/linkchecker/src/Form/LinkCheckerAdminSettingsForm.php
modules/contrib/linkchecker/src/Plugin/LinkStatusHandler/Unpublish404.php
modules/contrib/linkchecker/src/Plugin/LinkStatusHandlerBase.php
modules/contrib/linkchecker/src/Plugin/LinkStatusHandlerInterface.php
modules/contrib/linkchecker/src/Plugin/LinkStatusHandlerManager.php
modules/contrib/linkchecker/src/Plugin/QueueWorker/LinkCheck.php
modules/contrib/linkchecker/tests/src/Functional/LinkCheckerLinkExtractionStatusTest.php
modules/contrib/linkchecker/src/Plugin/QueueWorker/LinkStatusHandle.php
modules/contrib/linkchecker/src/Plugin/views/field/LinkcheckerLinkPageEntityLabel.php
modules/contrib/linkchecker/tests/src/Functional/LinkCheckerLinkExtractionTest.php
modules/contrib/linkchecker/tests/fixtures/drupal7.php
modules/contrib/linkchecker/tests/fixtures/drupalxx/field_config.php
modules/contrib/linkchecker/tests/fixtures/drupalxx/field_config_instance.php
modules/contrib/linkchecker/tests/fixtures/drupalxx/filter.php
modules/contrib/linkchecker/tests/fixtures/drupalxx/filter_format.php
modules/contrib/linkchecker/tests/src/Functional/LinkCheckerOverviewTest.php
modules/contrib/linkchecker/tests/fixtures/drupalxx/node_type.php
modules/contrib/linkchecker/tests/fixtures/drupalxx/system.php
modules/contrib/linkchecker/src/Form/LinkCheckerLinkForm.php
modules/contrib/linkchecker/tests/fixtures/drupalxx/variable.php
modules/contrib/linkchecker/tests/src/Functional/LinkCheckerBaseTest.php
modules/contrib/linkchecker/tests/src/FunctionalJavascript/LinkCheckerOverviewTest.php
modules/contrib/linkchecker/src/LinkCheckerBatch.php
modules/contrib/linkchecker/tests/src/Kernel/LinkCheckerLinkAccessTest.php
modules/contrib/linkchecker/src/LinkCheckerLinkAccessControlHandler.php
modules/contrib/linkchecker/tests/src/Functional/LinkCheckerEditFormTest.php
modules/contrib/linkchecker/src/LinkCheckerLinkInterface.php
modules/contrib/linkchecker/src/LinkCheckerLinkRouteProvider.php
modules/contrib/linkchecker/src/LinkCheckerLinkStorageSchema.php
modules/contrib/linkchecker/src/LinkCheckerResponseCodes.php
modules/contrib/linkchecker/src/LinkCheckerResponseCodesInterface.php
modules/contrib/linkchecker/src/LinkCheckerService.php
modules/contrib/linkchecker/src/LinkCheckerStorage.php
modules/contrib/linkchecker/tests/src/Kernel/LinkCheckerMigrationTest.php
modules/contrib/linkchecker/src/LinkCleanUp.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerCleanUpTest.php
modules/contrib/linkchecker/src/LinkExtractorBatch.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerHtmlLinkExtractorTest.php
modules/contrib/linkchecker/src/LinkExtractorService.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerLinkCheckerServiceTest.php
modules/contrib/linkchecker/src/Plugin/LinkExtractor/HtmlLinkExtractor.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerLinkExtractorServiceTest.php
modules/contrib/linkchecker/src/Plugin/LinkExtractor/LinkLinkExtractor.php
modules/contrib/linkchecker/src/Plugin/LinkExtractorBase.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerLinkLinkExtractorTest.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerRedirectTest.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerRepair301Test.php
modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerUnpublish404Test.php
modules/contrib/linkchecker/tests/src/Kernel/QueueLinksTest.php
modules/contrib/linkchecker/tests/src/Unit/LinkCheckerResponseCodesTest.php

18 files with changes
=====================

1) modules/contrib/linkchecker/linkchecker.install:54

    ---------- begin diff ----------
@@ @@
  * Added new functionality to broken links view.
  */
 function linkchecker_update_8001() {
-  $config_path = drupal_get_path('module', 'linkchecker') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('linkchecker') . '/config/optional';
   $config_source = new FileStorage($config_path);
   \Drupal::service('config.installer')->installOptionalConfig($config_source);
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/linkchecker/tests/src/Functional/LinkCheckerEditFormTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create Basic page and Article node types.
     $node_type = NodeType::create([
@@ @@

     // Now visit edit form for the linkchecker entity.
     $this->drupalGet($link->toUrl('edit-form')->toString());
-    $this->assertEqual($this->getSession()->getStatusCode(), 200);
+    $this->assertEquals($this->getSession()->getStatusCode(), 200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/linkchecker/src/Plugin/QueueWorker/LinkCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkchecker\Plugin\QueueWorker;

+use function GuzzleHttp\Promise\settle;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@

     // Force wait to complete of all requests
     // to prevent next items of queue to be run.
-    Promise\settle($promises)->wait();
+    settle($promises)->wait();
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/linkchecker/tests/src/Unit/LinkCheckerResponseCodesTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->linkCheckerResponseCodes = new LinkCheckerResponseCodes();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/linkchecker/tests/src/Kernel/QueueLinksTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerUnpublish404Test.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerRepair301Test.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerRedirectTest.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerLinkLinkExtractorTest.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerLinkExtractorServiceTest.php:84

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerLinkCheckerServiceTest.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installEntitySchema('linkcheckerlink');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerHtmlLinkExtractorTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/linkchecker/tests/src/Kernel/LinkcheckerCleanUpTest.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installEntitySchema('node');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/linkchecker/tests/src/Kernel/LinkCheckerLinkAccessTest.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/linkchecker/tests/src/FunctionalJavascript/LinkCheckerOverviewTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer linkchecker',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/linkchecker/tests/src/Functional/LinkCheckerOverviewTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer linkchecker',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/linkchecker/tests/src/Functional/LinkCheckerLinkExtractionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\linkchecker\Functional;

+use Drupal\Component\Utility\Random;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\linkchecker\Entity\LinkCheckerLink;
 use Drupal\linkchecker\LinkCheckerLinkInterface;
@@ @@
 EOT;

     // Save folder names in variables for reuse.
-    $random = new \Drupal\Component\Utility\Random();
+    $random = new Random();
     $folder1 = $random->name(10);
     $folder2 = $random->name(5);

@@ @@
     // Verify path input field appears on add "Basic page" form.
     $this->drupalGet('node/add/page');
     // Verify path input is present.
-    $this->assertFieldByName('path[0][alias]', '', 'Path input field present on add Basic page form.');
+    $this->assertSession()->fieldValueEquals('path[0][alias]', '');
+    $this->drupalGet('node/add/page');

     // Save node.
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
-    $this->assertText($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]), 'Node was created.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]));

     $key = \Drupal::state()->get('system.cron_key');
     $this->drupalGet('cron/' . $key);
-    $this->assertResponse(204);
+    $this->assertSession()->statusCodeEquals(204);

     // Verify that the unsupported urls are skipped.
     $unsupported_urls = [
@@ @@
       $link = $this->getLinkCheckerLinkByUrl($check_url);

       if ($link) {
-        $this->assertIdentical($link->get('url')->value, $check_url, new FormattableMarkup('Absolute URL %org_url matches expected result %check_url.', ['%org_url' => $org_url, '%check_url' => $check_url]));
+        $this->assertSame($link->get('url')->value, $check_url, new FormattableMarkup('Absolute URL %org_url matches expected result %check_url.', ['%org_url' => $org_url, '%check_url' => $check_url]));
       }
       else {
         $this->fail(new FormattableMarkup('URL %check_url not found.', ['%check_url' => $check_url]));
@@ @@
     // - Verifies that the linkchecker filter blacklist works well.
     $urls_in_database = \Drupal::entityQuery('linkcheckerlink')->accessCheck()->count()->execute();
     $urls_expected_count = count($urls_fqdn);
-    $this->assertEqual($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));
+    $this->assertEquals($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));

     // Extract all URLs including relative path.
     // @FIXME
@@ @@

     $node = $this->drupalGetNodeByTitle($edit["title[0][value]"]);
     $this->assertNotEmpty($node);
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, $this->t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, $this->t('Save'));
     //$this->assertRaw($this->t('@type %title has been updated.', ['@type' => 'Basic page', '%title' => $edit["title[0][value]"]]));
-    $this->assertText($this->t('@type @title has been updated.', ['@type' => 'Basic page', '@title' => $edit['title[0][value]']]));
+    $this->assertSession()->pageTextContains($this->t('@type @title has been updated.', ['@type' => 'Basic page', '@title' => $edit['title[0][value]']]));

     // @todo Path alias seems not saved!???
     //$this->assertIdentical($node->path, '/' . $edit[0]['path'], format_string('URL alias "@node-path" matches path "@edit-path".', array('@node-path' => $node->path, '@edit-path' => $edit[0]['path'])));
@@ @@
     // Check if the number of links is correct.
     $urls_in_database = \Drupal::entityQuery('linkcheckerlink')->accessCheck()->count()->execute();
     $urls_expected_count = count($urls_fqdn + $urls_relative);
-    $this->assertEqual($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));
+    $this->assertEquals($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));

     // Verify if link check has been enabled for normal URLs.
     $urls = [
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/linkchecker/tests/src/Functional/LinkCheckerInterfaceTest.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $full_html_format = FilterFormat::create([
@@ @@
     // Verify path input field appears on add "Basic page" form.
     $this->drupalGet('node/add/page');
     // Verify path input is present.
-    $this->assertFieldByName('path[0][alias]', '', 'Path input field present on add Basic page form.');
+    $this->assertSession()->fieldValueEquals('path[0][alias]', '');
+    $this->drupalGet('node/add/page');

     // Save node.
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
-    $this->assertText($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]), 'Node was created.');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextContains($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]));

     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $this->assertNotEmpty($node);
@@ @@
     $link = $this->getLinkCheckerLinkByUrl($url1);

     if ($link) {
-      $this->assertIdentical($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
+      $this->assertSame($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
     }
     else {
       $this->fail(new FormattableMarkup('URL %url not found.', ['%url' => $url1]));
@@ @@
       'info[0][value]' => $random->name(8),
       'body[0][value]' => $body,
     ];
-    $this->drupalPostForm(Url::fromRoute('block_content.add_page')->toString(), $custom_block, 'Save');
+    $this->drupalGet(Url::fromRoute('block_content.add_page')->toString());
+    $this->submitForm($custom_block, 'Save');

     // Confirm that the custom block has been created, and then query the
     // created bid.
-    $this->assertText($this->t('@type @title has been created.', ['@type' => 'Basic block', '@title' => $custom_block['info[0][value]']]), 'Custom block successfully created.');
+    $this->assertSession()->pageTextContains($this->t('@type @title has been created.', ['@type' => 'Basic block', '@title' => $custom_block['info[0][value]']]));
     // Check that the block exists in the database.
     $blocks = \Drupal::entityQuery('block_content')->accessCheck()->condition('info', $custom_block['info[0][value]'])->execute();
     $block = BlockContent::load(reset($blocks));
@@ @@
     $link = $this->getLinkCheckerLinkByUrl($url1);

     if ($link) {
-      $this->assertIdentical($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
+      $this->assertSame($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
     }
     else {
       $this->fail(new FormattableMarkup('URL %url not found.', ['%url' => $url1]));
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 18 files have been changed by Rector

