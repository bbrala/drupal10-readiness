diff --git a/src/AddHTTPHeaders.php b/src/AddHTTPHeaders.php
index 9183c14..147fc92 100644
--- a/src/AddHTTPHeaders.php
+++ b/src/AddHTTPHeaders.php
@@ -7,7 +7,8 @@
 
 namespace Drupal\ip2location;
 
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use IP2Location\Database;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -19,7 +20,7 @@ class AddHTTPHeaders implements EventSubscriberInterface {
   /**
    * Sets extra HTTP headers.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -47,18 +48,18 @@ class AddHTTPHeaders implements EventSubscriberInterface {
 
       switch ($cache_mode) {
         case 'memory_cache':
-          $ip2location = new \IP2Location\Database($database_path,  \IP2Location\Database::MEMORY_CACHE);
+          $ip2location = new Database($database_path,  Database::MEMORY_CACHE);
           break;
 
         case 'shared_memory':
-          $ip2location = new \IP2Location\Database($database_path,  \IP2Location\Database::SHARED_MEMORY);
+          $ip2location = new Database($database_path,  Database::SHARED_MEMORY);
         break;
 
         default:
-          $ip2location = new \IP2Location\Database($database_path,  \IP2Location\Database::FILE_IO);
+          $ip2location = new Database($database_path,  Database::FILE_IO);
       }
 
-      $records = $ip2location->lookup($ip,  \IP2Location\Database::ALL);
+      $records = $ip2location->lookup($ip,  Database::ALL);
 
       $raw = json_encode(array(
       'ip_address' => $ip,
diff --git a/src/SettingsForm.php b/src/SettingsForm.php
index 2274edf..4f89f66 100644
--- a/src/SettingsForm.php
+++ b/src/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ip2location;
 
+use IP2Location\Database;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -81,8 +82,8 @@ class SettingsForm extends ConfigFormBase {
 	else {
       try {
         module_load_include('inc', 'ip2location', 'src/IP2Location');
-        $ip2location = new \IP2Location\Database($form_state->getValue('database_path'),  \IP2Location\Database::FILE_IO);
-        $records = $ip2location->lookup('8.8.8.8',  \IP2Location\Database::ALL);
+        $ip2location = new Database($form_state->getValue('database_path'),  Database::FILE_IO);
+        $records = $ip2location->lookup('8.8.8.8',  Database::ALL);
 
         if (empty($records['ipNumber'])) {
 		  $form_state->setErrorByName('database_path', $this->t('The IP2Location binary database is not valid or corrupted.'));
