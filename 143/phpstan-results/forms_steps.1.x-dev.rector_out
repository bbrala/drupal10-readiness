modules/contrib/forms_steps/forms_steps.install
modules/contrib/forms_steps/src/Exception/FormsStepsNotFoundException.php
modules/contrib/forms_steps/src/Form/FormsStepsAddForm.php
modules/contrib/forms_steps/src/Service/RouteHelper.php
modules/contrib/forms_steps/forms_steps.module
modules/contrib/forms_steps/src/Service/WorkflowManager.php
modules/contrib/forms_steps/src/Form/FormsStepsAlter.php
modules/contrib/forms_steps/src/Commands/FormsStepsCommands.php
modules/contrib/forms_steps/src/Step.php
modules/contrib/forms_steps/src/Form/FormsStepsEditForm.php
modules/contrib/forms_steps/src/StepInterface.php
modules/contrib/forms_steps/src/WorkflowInterface.php
modules/contrib/forms_steps/tests/src/Functional/FormsStepsNavigationTest.php
modules/contrib/forms_steps/src/Controller/FormsStepsController.php
modules/contrib/forms_steps/tests/src/Functional/FormsStepsTest.php
modules/contrib/forms_steps/src/Controller/FormsStepsListBuilder.php
modules/contrib/forms_steps/src/Controller/WorkflowController.php
modules/contrib/forms_steps/src/Controller/WorkflowListBuilder.php
modules/contrib/forms_steps/src/Entity/FormsSteps.php
modules/contrib/forms_steps/tests/src/Kernel/KernelTestBase.php
modules/contrib/forms_steps/src/Form/FormsStepsProgressStepAddForm.php
modules/contrib/forms_steps/tests/src/Traits/FormsStepsTestTrait.php
modules/contrib/forms_steps/src/Form/FormsStepsProgressStepDeleteForm.php
modules/contrib/forms_steps/src/Entity/Workflow.php
modules/contrib/forms_steps/src/Form/FormsStepsProgressStepEditForm.php
modules/contrib/forms_steps/src/Event/StepChangeEvent.php
modules/contrib/forms_steps/src/EventSubscriber/RouteSubscriber.php
modules/contrib/forms_steps/src/Form/FormsStepsSettingsForm.php
modules/contrib/forms_steps/src/Exception/AccessDeniedException.php
modules/contrib/forms_steps/src/Form/FormsStepsStepAddForm.php
modules/contrib/forms_steps/src/Form/FormsStepsStepDeleteForm.php
modules/contrib/forms_steps/src/Form/FormsStepsStepEditForm.php
modules/contrib/forms_steps/src/Form/FormsStepsStepFormBase.php
modules/contrib/forms_steps/src/FormsStepsInterface.php
modules/contrib/forms_steps/src/Plugin/Block/FormsStepsProgressBarBlock.php
modules/contrib/forms_steps/src/Plugin/Derivative/FormsStepsProgressBarBlock.php
modules/contrib/forms_steps/src/ProgressStep.php
modules/contrib/forms_steps/src/ProgressStepInterface.php
modules/contrib/forms_steps/src/Repository/WorkflowRepository.php
modules/contrib/forms_steps/src/Service/FormsStepsHelper.php
modules/contrib/forms_steps/src/Service/FormsStepsManager.php

7 files with changes
====================

1) modules/contrib/forms_steps/tests/src/Traits/FormsStepsTestTrait.php:122

    ---------- begin diff ----------
@@ @@
       );

       // Add a form mode.
-      $this->drupalPostForm(
-        NULL,
-        [
-          'label' => $form_display_mode['label'],
-          'id' => $form_display_mode['id'],
-        ],
-        t('Save')
-      );
+      $this->submitForm([
+        'label' => $form_display_mode['label'],
+        'id' => $form_display_mode['id'],
+      ], t('Save'));

       Role::load($this->user->getRoles()[1])
         ->grantPermission('use node.' . $form_display_mode['id'] . ' form mode')
@@ @@

     // Activate Test Form Modes as a custom display mode.
     foreach ($this->data['form_display_modes'] as $form_display_mode) {
-      $this->drupalPostForm(
-        NULL,
-        [
-          "display_modes_custom[${form_display_mode['id']}]" => $form_display_mode['id'],
-        ],
-        t('Save')
-      );
+      $this->submitForm([
+        "display_modes_custom[${form_display_mode['id']}]" => $form_display_mode['id'],
+      ], t('Save'));
     }

     // Configure the visible fields.
@@ @@
       )
     );

-    $this->drupalPostForm(
-      NULL,
-      [
-        'fields[title][region]' => 'content',
-        'fields[body][region]' => 'hidden',
-        'fields[status][region]' => 'hidden',
-        'fields[uid][region]' => 'hidden',
-        'fields[created][region]' => 'hidden',
-        'fields[promote][region]' => 'hidden',
-        'fields[sticky][region]' => 'hidden',
-      ],
-      t('Save')
-    );
+    $this->submitForm([
+      'fields[title][region]' => 'content',
+      'fields[body][region]' => 'hidden',
+      'fields[status][region]' => 'hidden',
+      'fields[uid][region]' => 'hidden',
+      'fields[created][region]' => 'hidden',
+      'fields[promote][region]' => 'hidden',
+      'fields[sticky][region]' => 'hidden',
+    ], t('Save'));

     // Access forms steps add page.
     $this->drupalGet(Url::fromRoute('entity.forms_steps.add_form'));

     // Test the creation of a form step.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $this->data['forms_steps']['label'],
-        'id' => $this->data['forms_steps']['id'],
-        'description' => $this->data['forms_steps']['description'],
-      ],
-      t('Save')
-    );
+    $this->submitForm([
+      'label' => $this->data['forms_steps']['label'],
+      'id' => $this->data['forms_steps']['id'],
+      'description' => $this->data['forms_steps']['description'],
+    ], t('Save'));

     // Perform steps creation.
     foreach ($this->data['forms_steps']['steps'] as $step) {
@@ @@
       );

       // Test the creation of an add step.
-      $this->drupalPostForm(
-        NULL,
-        [
-          'label' => $step['label'],
-          'id' => $step['id'],
-          'target_form_mode' => $step['target_form_mode'],
-          'target_entity_bundle' => $step['target_entity_bundle'],
-          'target_entity_type' => $step['target_entity_type'],
-          'url' => $step['url'],
-        ],
-        t('Save')
-      );
+      $this->submitForm([
+        'label' => $step['label'],
+        'id' => $step['id'],
+        'target_form_mode' => $step['target_form_mode'],
+        'target_entity_bundle' => $step['target_entity_bundle'],
+        'target_entity_type' => $step['target_entity_type'],
+        'url' => $step['url'],
+      ], t('Save'));

       if (!is_null($step['previous'])) {
+        $this->drupalGet(Url::fromRoute(
+          'entity.forms_steps.edit_step_form',
+          [
+            'forms_steps' => $this->data['forms_steps']['id'],
+            'forms_steps_step' => $step['id'],
+          ]
+        ));
         // Update step with previous label.
-        $this->drupalPostForm(
-          Url::fromRoute(
-            'entity.forms_steps.edit_step_form',
-            [
-              'forms_steps' => $this->data['forms_steps']['id'],
-              'forms_steps_step' => $step['id'],
-            ]
-          ),
-          [
-            'display_previous' => TRUE,
-            'previous_label' => $step['previous'],
-          ],
-          t('Save')
-        );
+        $this->submitForm([
+          'display_previous' => TRUE,
+          'previous_label' => $step['previous'],
+        ], t('Save'));
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/forms_steps/tests/src/Functional/FormsStepsTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Perform initial setup tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->formsStepsSetup();
@@ @@
       );
       $this->assertSession()->statusCodeEquals(200);
       // Add a form mode.
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'label' => $form_display_mode['label'],
         'id' => $form_display_mode['id'],
       ], t('Save'));
@@ @@

     // Activate Test Form Modes as a custom display mode.
     foreach ($this->data['form_display_modes'] as $form_display_mode) {
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         "display_modes_custom[${form_display_mode['id']}]" => $form_display_mode['id'],
       ], t('Save'));

@@ @@
       'form_mode_name' => $form_display_mode['id'],
     ]));
     $this->assertSession()->statusCodeEquals(200);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'fields[title][region]' => 'content',
       'fields[body][region]' => 'hidden',
       'fields[status][region]' => 'hidden',
@@ @@
     $this->drupalGet(Url::fromRoute('entity.forms_steps.add_form'));
     $this->assertSession()->statusCodeEquals(200);
     // Test the creation of a form step.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => $this->data['forms_steps']['label'],
       'id' => $this->data['forms_steps']['id'],
       'description' => $this->data['forms_steps']['description'],
@@ @@
       $this->assertSession()->statusCodeEquals(200);

       // Test the creation of an add step.
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'label' => $step['label'],
         'id' => $step['id'],
         'target_form_mode' => $step['target_form_mode'],
@@ @@
       ->pageTextContains($this->data['forms_steps']['steps'][1]['label']);

     $value = 'This is a Test Titre content';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => $value,
     ], t('Save'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/forms_steps/tests/src/Functional/FormsStepsNavigationTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Setup the env for current test using trait methods.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->formsStepsSetup();
@@ @@
       ->pageTextContains($this->data['forms_steps']['steps'][1]['label']);

     $value = 'This is an article Test Titre content';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => $value,
     ], t('Save'));

@@ @@
     $this->assertSession()->pageTextContains($value);

     $value2 = 'This is an article Test Titre content 2';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => $value2,
     ], t('Save'));

@@ @@
     $this->assertStringContainsStringIgnoringCase($this->data['forms_steps']['steps'][3]['url'], $this->getUrl());

     $value3 = 'This is a page Test Titre content';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => $value3,
     ], t('Save'));

@@ @@
     $this->assertSession()->fieldValueEquals('title[0][value]', $value2);

     // Access step 3.
-    $this->drupalPostForm(NULL, [], 'Previous');
+    $this->submitForm([], 'Previous');
     $this->assertSession()
       ->pageTextContains($this->data['forms_steps']['steps'][3]['label']);
     $this->assertSession()->fieldValueEquals('title[0][value]', $value3);

     // Access step 2.
-    $this->drupalPostForm(NULL, [], 'Previous');
+    $this->submitForm([], 'Previous');
     $this->assertSession()
       ->pageTextContains($this->data['forms_steps']['steps'][2]['label']);
     $this->assertSession()->fieldValueEquals('title[0][value]', $value2);

     // Access step 1.
-    $this->drupalPostForm(NULL, [], 'Previous');
+    $this->submitForm([], 'Previous');
     $this->assertSession()
       ->pageTextContains($this->data['forms_steps']['steps'][1]['label']);
     $this->assertSession()->fieldValueEquals('title[0][value]', $value2);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/forms_steps/src/Event/StepChangeEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\forms_steps\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormState;
 use Drupal\forms_steps\Entity\FormsSteps;
 use Drupal\forms_steps\Step;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when before we switch from one step to another.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/forms_steps/src/Plugin/Block/FormsStepsProgressBarBlock.php:142

    ---------- begin diff ----------
@@ @@
                 $saved_steps_flat[$saved_step_next->id()] = $saved_step_next->id();
               }
             }
-            $link_visibility_check = !in_array($progress_step->link(), $saved_steps_flat);
+            $link_visibility_check = !in_array($progress_step->toLink()->toString(), $saved_steps_flat);
           }
           else {
             $link_visibility_check = !in_array($step->id(), $link_visibility);
@@ @@
           // Display a simple label or the link.
           // @todo: Manage the specific case of "No workflow instance id" for the first step to avoid having no links at all on this step.
           //          if (empty($progress_step->link()) || $link_visibility_check || empty($instanceId)) {
-          if (empty($progress_step->link()) || $link_visibility_check || empty($instanceId)) {
+          if (empty($progress_step->toLink()->toString()) || $link_visibility_check || empty($instanceId)) {
             $item['#markup'] = $this->t($progress_step->label());
           }
           else {
-            $link_step = $forms_steps->getStep($progress_step->link());
+            $link_step = $forms_steps->getStep($progress_step->toLink()->toString());
             $options = [];
             if ($instanceId) {
               $options['instance_id'] = $instanceId;
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/forms_steps/src/Form/FormsStepsProgressStepEditForm.php:95

    ---------- begin diff ----------
@@ @@
         '#description' => $this->t('Select the step for which the current progress step should redirect on click. Leave empty for no link on this progress step.'),
         '#empty_option' => $this->t('- None -'),
         '#options' => $options,
-        '#default_value' => $progress_step->link(),
+        '#default_value' => $progress_step->toLink()->toString(),
       ];

       $form['link_visibility'] = [
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/forms_steps/src/Form/FormsStepsEditForm.php:254

    ---------- begin diff ----------
@@ @@
         }

         // Defines link.
-        if (empty($progress_step->link())) {
+        if (empty($progress_step->toLink()->toString())) {
           $link = $this->t('No link defined');
         }
         else {
-          $step_id = $progress_step->link();
+          $step_id = $progress_step->toLink()->toString();
           $link = $forms_steps->getStep($step_id)->label();
         }
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

