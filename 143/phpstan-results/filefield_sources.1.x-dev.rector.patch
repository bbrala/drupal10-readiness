diff --git a/src/Plugin/FilefieldSource/Clipboard.php b/src/Plugin/FilefieldSource/Clipboard.php
index ad04968..fe6d54a 100644
--- a/src/Plugin/FilefieldSource/Clipboard.php
+++ b/src/Plugin/FilefieldSource/Clipboard.php
@@ -58,7 +58,7 @@ class Clipboard implements FilefieldSourceInterface {
 
       $filename = trim($input['filefield_clipboard']['filename']);
       $filename = preg_replace('/\.[a-z0-9]{3,4}$/', '', $filename);
-      $filename = (empty($filename) ? 'paste_' . REQUEST_TIME : $filename) . '.' . $extension;
+      $filename = (empty($filename) ? 'paste_' . \Drupal::time()->getRequestTime() : $filename) . '.' . $extension;
       $filepath = \Drupal::service('file_system')->createFilename($filename, $temporary_directory);
 
       $copy_success = FALSE;
diff --git a/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php b/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php
index 241f728..e7819a6 100644
--- a/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php
+++ b/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php
@@ -7,15 +7,18 @@
 
 namespace Drupal\filefield_sources\ProxyClass\File\MimeType {
 
+    use Symfony\Component\Mime\MimeTypesInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\filefield_sources\File\MimeType\ExtensionMimeTypeGuesser.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ExtensionMimeTypeGuesser implements \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+    class ExtensionMimeTypeGuesser implements MimeTypesInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -46,7 +49,7 @@ namespace Drupal\filefield_sources\ProxyClass\File\MimeType {
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
diff --git a/tests/src/Functional/AttachSourceTest.php b/tests/src/Functional/AttachSourceTest.php
index 22b1911..9465229 100644
--- a/tests/src/Functional/AttachSourceTest.php
+++ b/tests/src/Functional/AttachSourceTest.php
@@ -96,7 +96,7 @@ class AttachSourceTest extends FileFieldSourcesTestBase {
     $this->assertTrue($this->isOptionPresent($file->uri), 'File option is present.');
 
     // Ensure empty message is not present.
-    $this->assertNoText('There currently are no files to attach.', "Empty message is not present.");
+    $this->assertSession()->pageTextNotContains('There currently are no files to attach.');
 
     // Attach button is always present.
     $this->assertFieldByXpath('//input[@type="submit"]', t('Attach'), 'Attach button is present.');
@@ -130,7 +130,7 @@ class AttachSourceTest extends FileFieldSourcesTestBase {
     $this->assertFalse($this->isOptionPresent($file->uri), 'File option is not present.');
 
     // Ensure empty message is present.
-    $this->assertText('There currently are no files to attach.', "Empty message is present.");
+    $this->assertSession()->pageTextContains('There currently are no files to attach.');
 
     // Attach button is always present.
     $this->assertFieldByXpath('//input[@type="submit"]', t('Attach'), 'Attach button is present.');
diff --git a/tests/src/Functional/EmptyValuesTest.php b/tests/src/Functional/EmptyValuesTest.php
index 886515c..d0c3ec0 100644
--- a/tests/src/Functional/EmptyValuesTest.php
+++ b/tests/src/Functional/EmptyValuesTest.php
@@ -23,7 +23,7 @@ class EmptyValuesTest extends FileFieldSourcesTestBase {
   /**
    * Sets up for empty values test case.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpImce();
   }
@@ -32,8 +32,9 @@ class EmptyValuesTest extends FileFieldSourcesTestBase {
    * Tests all sources enabled.
    */
   public function testAllSourcesEnabled() {
+    $this->drupalGet('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage');
     // Change allowed number of values.
-    $this->drupalPostForm('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage', ['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));
+    $this->submitForm(['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));
 
     $this->enableSources([
       'upload' => TRUE,
diff --git a/tests/src/Functional/FileFieldSourcesTestBase.php b/tests/src/Functional/FileFieldSourcesTestBase.php
index 7ad4989..f489f64 100644
--- a/tests/src/Functional/FileFieldSourcesTestBase.php
+++ b/tests/src/Functional/FileFieldSourcesTestBase.php
@@ -42,7 +42,7 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
   /**
    * Sets up for file field sources test cases.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Grant "administer node form display" permission.
@@ -68,7 +68,8 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
       $this->grantPermissions($role, ['administer imce']);
       // Assign member profile to user's role.
       $edit["roles_profiles[$rid][public]"] = 'member';
-      $this->drupalPostForm('admin/config/media/imce', $edit, t('Save configuration'));
+      $this->drupalGet('admin/config/media/imce');
+      $this->submitForm($edit, t('Save configuration'));
     }
   }
 
@@ -101,7 +102,7 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
     $this->assertSession()->responseContains("File field sources: upload");
 
     // Click on the widget settings button to open the widget settings form.
-    $this->drupalPostForm(NULL, [], $this->fieldName . "_settings_edit");
+    $this->submitForm([], $this->fieldName . "_settings_edit");
 
     // Enable sources.
     $prefix = 'fields[' . $this->fieldName . '][settings_edit_form][third_party_settings][filefield_sources][filefield_sources][sources]';
@@ -109,11 +110,11 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
     foreach ($sources as $source => $enabled) {
       $edit[$prefix . '[' . $source . ']'] = $enabled ? TRUE : FALSE;
     }
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_plugin_settings_update');
+    $this->submitForm($edit, $this->fieldName . '_plugin_settings_update');
     $this->assertSession()->responseContains("File field sources: " . implode(', ', array_keys($sources)));
 
     // Save the form to save the third party settings.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
 
     $add_node = 'node/add/' . $this->typeName;
     $this->drupalGet($add_node);
@@ -216,15 +217,15 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
     $this->drupalGet($manage_display);
 
     // Click on the widget settings button to open the widget settings form.
-    $this->drupalPostForm(NULL, [], $this->fieldName . "_settings_edit");
+    $this->submitForm([], $this->fieldName . "_settings_edit");
 
     // Update settings.
     $name = 'fields[' . $this->fieldName . '][settings_edit_form][third_party_settings][filefield_sources][filefield_sources]' . "[$source_key][$key]";
     $edit = [$name => $value];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_plugin_settings_update');
+    $this->submitForm($edit, $this->fieldName . '_plugin_settings_update');
 
     // Save the form to save the third party settings.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
   }
 
   /**
@@ -246,7 +247,7 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
     else {
       $edit = [];
     }
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_attach');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_attach');
 
     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ -299,7 +300,7 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
     $name = $this->fieldName . '[' . $delta . '][filefield_reference][autocomplete]';
     $value = $fid ? $filename . ' [fid:' . $fid . ']' : '';
     $edit = [$name => $value];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_autocomplete_select');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_autocomplete_select');
 
     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ -378,7 +379,7 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
   public function uploadFileByRemoteSource($url = '', $filename = '', $delta = 0) {
     $name = $this->fieldName . '[' . $delta . '][filefield_remote][url]';
     $edit = [$name => $url];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_transfer');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_transfer');
 
     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ -406,7 +407,7 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
     $edit = [
       $name => $uri ? \Drupal::getContainer()->get('file_system')->realPath($uri) : '',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_upload_button');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_upload_button');
 
     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ -425,7 +426,7 @@ abstract class FileFieldSourcesTestBase extends FileFieldTestBase {
    *   Delta in multiple values field.
    */
   public function removeFile($filename, $delta = 0) {
-    $this->drupalPostForm(NULL, [], $this->fieldName . '_' . $delta . '_remove_button');
+    $this->submitForm([], $this->fieldName . '_' . $delta . '_remove_button');
 
     // Ensure file is removed.
     $this->assertFileRemoved($filename);
diff --git a/tests/src/Functional/ImceSourceTest.php b/tests/src/Functional/ImceSourceTest.php
index 7259f33..a99610d 100644
--- a/tests/src/Functional/ImceSourceTest.php
+++ b/tests/src/Functional/ImceSourceTest.php
@@ -19,7 +19,7 @@ class ImceSourceTest extends FileFieldSourcesTestBase {
   /**
    * Sets up for imce source test case.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpImce();
   }
diff --git a/tests/src/Functional/MultipleValuesTest.php b/tests/src/Functional/MultipleValuesTest.php
index fdb9082..52a6ae3 100644
--- a/tests/src/Functional/MultipleValuesTest.php
+++ b/tests/src/Functional/MultipleValuesTest.php
@@ -56,7 +56,7 @@ class MultipleValuesTest extends FileFieldSourcesTestBase {
   /**
    * Sets up for multiple values test case.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpImce();
 
@@ -68,9 +68,10 @@ class MultipleValuesTest extends FileFieldSourcesTestBase {
 
     $path = \Drupal::config('system.file')->get('default_scheme') . '://' . FILEFIELD_SOURCE_ATTACH_DEFAULT_PATH . '/';
     $this->temporaryFile = $this->createTemporaryFile($path);
+    $this->drupalGet('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage');
 
     // Change allowed number of values.
-    $this->drupalPostForm('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage', ['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));
+    $this->submitForm(['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));
 
     $this->enableSources([
       'upload' => TRUE,
@@ -106,15 +107,15 @@ class MultipleValuesTest extends FileFieldSourcesTestBase {
   public function testUploadFilesThenSaveNode() {
     $this->uploadFiles();
 
-    $this->drupalPostForm(NULL, ['title[0][value]' => $this->randomMachineName()], t('Save'));
+    $this->submitForm(['title[0][value]' => $this->randomMachineName()], t('Save'));
 
     // Ensure all files are saved to node.
-    $this->assertLink('INSTALL.txt');
-    $this->assertLink($this->permanentFileEntity1->getFilename());
-    $this->assertLink($this->temporaryFile->filename);
-    $this->assertLink($this->temporaryFileEntity2->getFilename());
-    $this->assertLink($this->temporaryFileEntity1->getFilename());
-    $this->assertLink($this->permanentFileEntity2->getFilename());
+    $this->assertSession()->linkExists('INSTALL.txt');
+    $this->assertSession()->linkExists($this->permanentFileEntity1->getFilename());
+    $this->assertSession()->linkExists($this->temporaryFile->filename);
+    $this->assertSession()->linkExists($this->temporaryFileEntity2->getFilename());
+    $this->assertSession()->linkExists($this->temporaryFileEntity1->getFilename());
+    $this->assertSession()->linkExists($this->permanentFileEntity2->getFilename());
   }
 
   /**
@@ -155,7 +156,7 @@ class MultipleValuesTest extends FileFieldSourcesTestBase {
 
     // Ensure files have been uploaded.
     $remove_buttons = $this->xpath('//input[@type="submit" and @value="' . t('Remove') . '"]');
-    $this->assertEqual(count($remove_buttons), $uploaded_files, "There are $uploaded_files files have been uploaded.");
+    $this->assertEquals(count($remove_buttons), $uploaded_files, "There are $uploaded_files files have been uploaded.");
 
     return $uploaded_files;
   }
diff --git a/tests/src/Functional/ReferenceSourceTest.php b/tests/src/Functional/ReferenceSourceTest.php
index d992832..d0e1fa5 100644
--- a/tests/src/Functional/ReferenceSourceTest.php
+++ b/tests/src/Functional/ReferenceSourceTest.php
@@ -60,14 +60,14 @@ class ReferenceSourceTest extends FileFieldSourcesTestBase {
     $query = $this->findCharacterNotInString($first_character);
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options));
-    $this->assertEqual($autocomplete_result, [], "No files that have name starts with '$query'");
+    $this->assertEquals($autocomplete_result, [], "No files that have name starts with '$query'");
 
     // STARTS_WITH: not empty results.
     $query = $first_character;
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options + ['query' => ['q' => $query]]));
-    $this->assertEqual($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
-    $this->assertEqual($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');
+    $this->assertEquals($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
+    $this->assertEquals($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');
 
     // Switch to 'Contains' match type.
     $this->updateFilefieldSourcesSettings('source_reference', 'autocomplete', '1');
@@ -76,14 +76,14 @@ class ReferenceSourceTest extends FileFieldSourcesTestBase {
     $query = $this->findCharacterNotInString($filename);
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options + ['query' => ['q' => $query]]));
-    $this->assertEqual($autocomplete_result, [], "No files that have name contains '$query'");
+    $this->assertEquals($autocomplete_result, [], "No files that have name contains '$query'");
 
     // CONTAINS: not empty results.
     $query = $second_character;
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options + ['query' => ['q' => $query]]));
-    $this->assertEqual($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
-    $this->assertEqual($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');
+    $this->assertEquals($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
+    $this->assertEquals($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');
   }
 
   /**
