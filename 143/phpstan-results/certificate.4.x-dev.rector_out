modules/contrib/certificate/certificate.api.php
modules/contrib/certificate/modules/certificate_test/certificate_test.module
modules/contrib/certificate/src/Form/CertificateMappingsInlineEntityForm.php
modules/contrib/certificate/modules/certificate_test/src/Entity/CertificateTestEntity.php
modules/contrib/certificate/certificate.module
modules/contrib/certificate/src/Form/CertificateTypeForm.php
modules/contrib/certificate/certificate.post_update.php
modules/contrib/certificate/src/Plugin/CertificateMapperBase.php
modules/contrib/certificate/src/Plugin/CertificateMapperManager.php
modules/contrib/certificate/src/Plugin/Derivative/CertificateLocalTasks.php
modules/contrib/certificate/src/Plugin/certificate/CertificateMapper/CourseCreditCertificateMapper.php
modules/contrib/certificate/modules/certificate_test/src/Plugin/certificate/CertificateMapper/TestCertificateMapper.php
modules/contrib/certificate/src/Plugin/certificate/CertificateMapper/ManualCertificateMapper.php
modules/contrib/certificate/modules/quiz_certificate/quiz_certificate.module
modules/contrib/certificate/src/Plugin/certificate/CertificateMapper/RulesCertificateMapper.php
modules/contrib/certificate/src/Routing/CertificateRoutes.php
modules/contrib/certificate/tests/src/Functional/CertificateTest.php
modules/contrib/certificate/src/Access/CertificateMappingAccessControlHandler.php
modules/contrib/certificate/src/Annotation/CertificateMapper.php
modules/contrib/certificate/src/Config/Entity/CertificateTemplateListBuilder.php
modules/contrib/certificate/src/Config/Entity/CertificateTypeListBuilder.php
modules/contrib/certificate/src/Controller/CertificateAdminController.php
modules/contrib/certificate/src/Controller/CertificateController.php
modules/contrib/certificate/src/Controller/CertificateTemplateController.php
modules/contrib/certificate/src/Entity/CertificateMapping.php
modules/contrib/certificate/src/Entity/CertificateSnapshot.php
modules/contrib/certificate/src/Entity/CertificateTemplate.php
modules/contrib/certificate/src/Entity/CertificateType.php
modules/contrib/certificate/src/Form/CertificateConfigForm.php
modules/contrib/certificate/src/Form/CertificateEntityForm.php

7 files with changes
====================

1) modules/contrib/certificate/certificate.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Link;
 use Drupal\certificate\Form\CertificateConfigForm;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
 /**
  * Implements hook_help().
  */
-function certificate_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function certificate_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'entity.certificate_type.collection':
       return '<p>' . t('Certificate template types are used to create certificate templates. For example instead of a single WYSIWYG field, you can create a certificate template type that uses text fields and image uploads. Then you can use view modes to configure the certificate output.') . '</p>';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/certificate/certificate.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Access\AccessResult;
 /**
  * @file certificate.api.php
  * Document certificate hooks.
@@ @@
 function hook_entity_access(EntityInterface $entity, $operation, AccountInterface $user) {
   if ($operation == 'certificate') {
     if (get_score($user) > passing_score($entity)) {
-      return \Drupal\Core\Access\AccessResult::allowed();
+      return AccessResult::allowed();
     }
     else {
-      return \Drupal\Core\Access\AccessResult::forbidden();
+      return AccessResult::forbidden();
     }
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/certificate/tests/src/Functional/CertificateTest.php:25

    ---------- begin diff ----------
@@ @@
   // @todo remove node as dep, something in PDF requiring it
   protected static $modules = ['certificate', 'certificate_test', 'node'];

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->admin_user = $this->createUser(array('administer certificate'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/certificate/src/Entity/CertificateTemplate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\certificate\Entity;

+use Drupal\entity_print\Plugin\PrintEngineBase;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EditorialContentEntityBase;
@@ @@

     $fields['orientation'] = BaseFieldDefinition::create('list_string')
       ->setLabel('Orientation')
-      ->setSetting('allowed_values', [\Drupal\entity_print\Plugin\PrintEngineBase::PORTRAIT => 'Portrait', \Drupal\entity_print\Plugin\PrintEngineBase::LANDSCAPE => 'Landscape'])
-      ->setDefaultValue(\Drupal\entity_print\Plugin\PrintEngineBase::PORTRAIT)
+      ->setSetting('allowed_values', [PrintEngineBase::PORTRAIT => 'Portrait', PrintEngineBase::LANDSCAPE => 'Landscape'])
+      ->setDefaultValue(PrintEngineBase::PORTRAIT)
       ->setDisplayOptions('form', [
       'label' => 'above',
       'type' => 'options_buttons',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/certificate/src/Controller/CertificateController.php:214

    ---------- begin diff ----------
@@ @@
     // If no snapshot HTML found, load the entity
     if (empty($html)) {
       $renderView = $certificate_template->renderView($user, $entity);
-      $html = render($renderView);
+      $html = \Drupal::service('renderer')->render($renderView);
     }

     // Add base HREF so images work.
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/certificate/src/Access/CertificateMappingAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\certificate\Access;

+use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\entity\UncacheableEntityAccessControlHandler;
@@ @@

   protected function checkCreateAccess(AccountInterface $account, array $context, $entity_bundle = NULL) {
     if ($account->hasPermission('assign certificates')) {
-      return \Drupal\Core\Access\AccessResultAllowed::allowed();
+      return AccessResultAllowed::allowed();
     }

     return parent::checkCreateAccess($account, $context, $entity_bundle);
@@ @@

   function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     if ($account->hasPermission('assign certificates')) {
-      return \Drupal\Core\Access\AccessResultAllowed::allowed();
+      return AccessResultAllowed::allowed();
     }

     return parent::checkAccess($entity, $operation, $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/certificate/modules/quiz_certificate/quiz_certificate.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\quiz\Entity\Quiz;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;

@@ @@
  */
 function quiz_certificate_entity_access(EntityInterface $entity, $operation, AccountInterface $user) {
   if ($operation == 'certificate') {
-    if (is_a($entity, \Drupal\quiz\Entity\Quiz::class)) {
+    if (is_a($entity, Quiz::class)) {
       $qrids = \Drupal::entityQuery('quiz_result')
         ->condition('uid', $user->id())
         ->condition('qid', $entity->id())
@@ @@
       $results = \Drupal::entityTypeManager()->getStorage('quiz_result')->loadMultiple($qrids);
       foreach ($results as $result) {
         if ($result->score->value >= $entity->pass_rate->value) {
-          return \Drupal\Core\Access\AccessResult::allowed();
+          return AccessResult::allowed();
         }
       }

-      return \Drupal\Core\Access\AccessResult::forbidden();
+      return AccessResult::forbidden();
     }
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

