modules/contrib/braintree_cashier/braintree_cashier.api.php
modules/contrib/braintree_cashier/src/BillableUser.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierBillingPlanInterface.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierBillingPlanSettingsForm.php
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/BraintreeCashierBillingPlanEnvironmentConstraintValidator.php
modules/contrib/braintree_cashier/tests/src/Functional/WebhookTest.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierBillingPlanViewsData.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierDiscountDeleteForm.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierDiscountForm.php
modules/contrib/braintree_cashier/braintree_cashier.install
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierDiscount.php
modules/contrib/braintree_cashier/braintree_cashier.module
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/BraintreeCashierBraintreeSubscriptionIdConstraint.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierDiscountSettingsForm.php
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/BraintreeCashierBraintreeSubscriptionIdConstraintValidator.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierSubscriptionDeleteForm.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierSubscriptionForm.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierSubscriptionSettingsForm.php
modules/contrib/braintree_cashier/src/Form/CancelForm.php
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/BraintreeCashierPeriodEndDateNotEmptyConstraint.php
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/BraintreeCashierPeriodEndDateNotEmptyConstraintValidator.php
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/OneActiveBraintreeCashierSubscriptionConstraint.php
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/OneActiveBraintreeCashierSubscriptionConstraintValidator.php
modules/contrib/braintree_cashier/src/SubscriptionService.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierDiscountInterface.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierDiscountViewsData.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierSubscription.php
modules/contrib/braintree_cashier/src/Form/InvoiceBillingInformationForm.php
modules/contrib/braintree_cashier/src/Form/PaymentMethodForm.php
modules/contrib/braintree_cashier/braintree_cashier_billing_plan.page.inc
modules/contrib/braintree_cashier/braintree_cashier_discount.page.inc
modules/contrib/braintree_cashier/braintree_cashier_subscription.page.inc
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/BraintreeCashierTrait.php
modules/contrib/braintree_cashier/src/Form/PlanSelectFormBase.php
modules/contrib/braintree_cashier/src/BraintreeCashierBillingPlanAccessControlHandler.php
modules/contrib/braintree_cashier/src/BraintreeCashierBillingPlanHtmlRouteProvider.php
modules/contrib/braintree_cashier/src/BraintreeCashierBillingPlanListBuilder.php
modules/contrib/braintree_cashier/src/BraintreeCashierBillingPlanTranslationHandler.php
modules/contrib/braintree_cashier/src/BraintreeCashierDiscountAccessControlHandler.php
modules/contrib/braintree_cashier/src/BraintreeCashierDiscountHtmlRouteProvider.php
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/CancelUserTest.php
modules/contrib/braintree_cashier/src/BraintreeCashierDiscountListBuilder.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierSubscriptionInterface.php
modules/contrib/braintree_cashier/src/BraintreeCashierService.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierSubscriptionViewsData.php
modules/contrib/braintree_cashier/src/Event/BraintreeCashierEvents.php
modules/contrib/braintree_cashier/src/Event/BraintreeCustomerCreatedEvent.php
modules/contrib/braintree_cashier/src/Event/BraintreeErrorEvent.php
modules/contrib/braintree_cashier/src/Event/NewAccountAfterPlan.php
modules/contrib/braintree_cashier/src/Event/NewSubscriptionEvent.php
modules/contrib/braintree_cashier/src/Event/PaymentMethodUpdatedEvent.php
modules/contrib/braintree_cashier/src/Event/SubscriptionCanceledByUserEvent.php
modules/contrib/braintree_cashier/src/EventSubscriber/CreateMessageEventSubscriber.php
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/CouponTest.php
modules/contrib/braintree_cashier/src/Form/SettingsForm.php
modules/contrib/braintree_cashier/tests/src/Functional/AdminPagesTest.php
modules/contrib/braintree_cashier/src/EventSubscriber/KernelRequestSubscriber.php
modules/contrib/braintree_cashier/src/BraintreeCashierSubscriptionAccessControlHandler.php
modules/contrib/braintree_cashier/src/BraintreeCashierSubscriptionHtmlRouteProvider.php
modules/contrib/braintree_cashier/src/BraintreeCashierSubscriptionListBuilder.php
modules/contrib/braintree_cashier/src/Controller/InvoicesController.php
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/CreateMessagesTest.php
modules/contrib/braintree_cashier/src/Form/SignupForm.php
modules/contrib/braintree_cashier/tests/src/Functional/SignupRedirectTest.php
modules/contrib/braintree_cashier/src/EventSubscriber/WebhookSubscriber.php
modules/contrib/braintree_cashier/src/Form/UpdateSubscriptionForm.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierBillingPlanDeleteForm.php
modules/contrib/braintree_cashier/src/Controller/MySubscriptionController.php
modules/contrib/braintree_cashier/src/Form/UpdateSubscriptionFormConfirm.php
modules/contrib/braintree_cashier/src/Form/BraintreeCashierBillingPlanForm.php
modules/contrib/braintree_cashier/src/Controller/SingleInvoiceController.php
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/FreeTrialTest.php
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/RolesTest.php
modules/contrib/braintree_cashier/src/Plugin/QueueWorker/FreeTrialExpiringNotifier.php
modules/contrib/braintree_cashier/src/Controller/ThankYouController.php
modules/contrib/braintree_cashier/src/Cron.php
modules/contrib/braintree_cashier/src/Plugin/QueueWorker/PopulateNewDateFields.php
modules/contrib/braintree_cashier/src/Plugin/QueueWorker/ProcessSubscriptionWebhook.php
modules/contrib/braintree_cashier/src/CronInterface.php
modules/contrib/braintree_cashier/src/Entity/BraintreeCashierBillingPlan.php
modules/contrib/braintree_cashier/src/Plugin/QueueWorker/RetrieveExpiringFreeTrials.php
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/SignupTest.php
modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/UpdatePlanTest.php
modules/contrib/braintree_cashier/src/Plugin/Validation/Constraint/BraintreeCashierBillingPlanEnvironmentConstraint.php

21 files with changes
=====================

1) modules/contrib/braintree_cashier/tests/src/Functional/AdminPagesTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $billing_plan = $this->createMonthlyBillingPlan();
     $account = $this->createUser([], NULL, TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/braintree_cashier/src/SubscriptionService.php:315

    ---------- begin diff ----------
@@ @@
     }
     else {
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
     }
   }

@@ @@
     if (!$result->success) {
       $this->processBraintreeSubscriptionCreateFailure($result);
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
       return FALSE;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/braintree_cashier/src/EventSubscriber/KernelRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_cashier\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\braintree_cashier\BillableUser;
 use Drupal\braintree_cashier\SubscriptionService;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\RequestStack;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * Class KernelRequestSubscriber.
@@ @@
    * This method is called whenever the kernel.request event is
    * dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The symfony event.
    */
-  public function kernelRequest(GetResponseEvent $event) {
+  public function kernelRequest(RequestEvent $event) {

     if ($this->routeMatch->getRouteName() == 'braintree_cashier.signup_form') {
       // Don't cache this page even when anonymous page caching is enabled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


4) modules/contrib/braintree_cashier/src/Event/SubscriptionCanceledByUserEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_cashier\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\braintree_cashier\Entity\BraintreeCashierSubscriptionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A subscription was canceled by a user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/braintree_cashier/src/Event/PaymentMethodUpdatedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_cashier\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\Entity\User;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A user has updated their payment method.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/braintree_cashier/src/Event/NewSubscriptionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_cashier\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Braintree\Subscription;
 use Drupal\braintree_cashier\Entity\BraintreeCashierBillingPlanInterface;
 use Drupal\braintree_cashier\Entity\BraintreeCashierSubscriptionInterface;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Creates an Event when a new subscription is created after signup.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/braintree_cashier/src/Event/NewAccountAfterPlan.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_cashier\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\braintree_cashier\Entity\BraintreeCashierBillingPlanInterface;
 use Drupal\user\Entity\User;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Creates an event when a new user account is created after selecting a plan.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/braintree_cashier/src/Event/BraintreeErrorEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_cashier\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\Entity\User;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event dispatched when there's an error interacting with the Braintree API.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/braintree_cashier/src/Event/BraintreeCustomerCreatedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\braintree_cashier\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\Entity\User;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A Braintree customer has been created for a user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/braintree_cashier/src/Form/UpdateSubscriptionFormConfirm.php:285

    ---------- begin diff ----------
@@ @@
     }

     $new_subscription_event = new NewSubscriptionEvent($braintree_subscription, $this->billingPlan, $subscription_entity, $form_state);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::NEW_SUBSCRIPTION, $new_subscription_event);
+    $this->eventDispatcher->dispatch($new_subscription_event, BraintreeCashierEvents::NEW_SUBSCRIPTION);
     $form_state->setRedirect('braintree_cashier.thank_you', [
       'subscription' => $subscription_entity->id(),
     ]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/braintree_cashier/src/Form/SignupForm.php:272

    ---------- begin diff ----------
@@ @@
     }

     $new_subscription_event = new NewSubscriptionEvent($braintree_subscription, $billing_plan, $subscription_entity, $form_state);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::NEW_SUBSCRIPTION, $new_subscription_event);
+    $this->eventDispatcher->dispatch($new_subscription_event, BraintreeCashierEvents::NEW_SUBSCRIPTION);

     $form_state->setRedirect('braintree_cashier.thank_you', [
       'subscription' => $subscription_entity->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/braintree_cashier/src/Form/CancelForm.php:176

    ---------- begin diff ----------
@@ @@
       $subscription->setCanceledAtDate(time());
       $subscription->save();
       $event = new SubscriptionCanceledByUserEvent($subscription);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::SUBSCRIPTION_CANCELED_BY_USER, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::SUBSCRIPTION_CANCELED_BY_USER);
     }
     $form_state->setRedirect('braintree_cashier.my_subscription', [
       'user' => $values['uid'],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/UpdatePlanTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupBraintreeApi();
     $this->createMonthlyBillingPlan();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/SignupTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupBraintreeApi();
     $this->createMonthlyBillingPlan();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/RolesTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupBraintreeApi();
     $this->billingPlan = $this->createMonthlyBillingPlan();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/FreeTrialTest.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupBraintreeApi();
     $this->freeTrialPlanEntity = $this->createMonthlyFreeTrialBillingPlan();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/CreateMessagesTest.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->container->get('config.factory')
       ->getEditable('user.settings')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/CouponTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupBraintreeApi();
     $billing_plan = $this->createMonthlyBillingPlan();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/braintree_cashier/tests/src/FunctionalJavascript/CancelUserTest.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupBraintreeApi();
     $this->billingPlan = $this->createMonthlyBillingPlan();
@@ @@
     $this->config('user.settings')->set('cancel_method', 'user_cancel_block')->save();

     $this->drupalGet('user/' . $this->subscriberAccount->id() . '/edit');
-    $this->drupalPostForm(NULL, NULL, t('Cancel account'));
+    $this->submitForm(NULL, t('Cancel account'));
     // Confirm blocking the subscriber.
-    $this->drupalPostForm(NULL, NULL, t('Cancel account'));
+    $this->submitForm(NULL, t('Cancel account'));

     // Confirm no subscription.
     $this->drupalGet(Url::fromRoute('braintree_cashier.my_subscription', [
@@ @@
     // They are deleted instead.
     $this->config('user.settings')->set('cancel_method', 'user_cancel_reassign')->save();
     $this->drupalGet('user/' . $this->subscriberAccount->id() . '/edit');
-    $this->drupalPostForm(NULL, NULL, t('Cancel account'));
+    $this->submitForm(NULL, t('Cancel account'));

     // Confirm deleting the subscriber.
-    $this->drupalPostForm(NULL, NULL, t('Cancel account'));
+    $this->submitForm(NULL, t('Cancel account'));

     $this->assertSession()->waitForElementVisible('css', '.messages--status', 20000);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/braintree_cashier/tests/src/Functional/WebhookTest.php:68

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupBraintreeApi();
     $this->braintreeApi = \Drupal::service('braintree_api.braintree_api');
@@ @@
     // Create a sample webhook and submit it. The form will POST to the webhook
     // url /braintree/webhooks, simulating the same POST request from Braintree.
     $sample_notification = $this->braintreeApi->getGateway()->webhookTesting()->sampleNotification(WebhookNotification::SUBSCRIPTION_CANCELED, '123');
-    $this->drupalPostForm(Url::fromRoute('braintree_api_test.webhook_notification_test_form'), [
+    $this->drupalGet(Url::fromRoute('braintree_api_test.webhook_notification_test_form'));
+    $this->submitForm([
       'bt_signature' => $sample_notification['bt_signature'],
       'bt_payload' => $sample_notification['bt_payload'],
     ], 'Submit');
@@ @@
     // Create a sample webhook and submit it. The form will POST to the webhook
     // url /braintree/webhooks, simulating the same POST request from Braintree.
     $sample_notification = $this->braintreeApi->getGateway()->webhookTesting()->sampleNotification(WebhookNotification::SUBSCRIPTION_EXPIRED, '321');
-    $this->drupalPostForm(Url::fromRoute('braintree_api_test.webhook_notification_test_form'), [
+    $this->drupalGet(Url::fromRoute('braintree_api_test.webhook_notification_test_form'));
+    $this->submitForm([
       'bt_signature' => $sample_notification['bt_signature'],
       'bt_payload' => $sample_notification['bt_payload'],
     ], 'Submit');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/braintree_cashier/src/BillableUser.php:161

    ---------- begin diff ----------
@@ @@
     if (!$result->success) {
       $this->logger->error('Error creating payment method: ' . $result->message);
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
       if (!empty($result->creditCardVerification)) {
         $credit_card_verification = $result->creditCardVerification;
         if ($credit_card_verification->status == 'processor_declined') {
@@ @@
     $payment_method_type = get_class($result->paymentMethod);

     $event = new PaymentMethodUpdatedEvent($user, $payment_method_type);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::PAYMENT_METHOD_UPDATED, $event);
+    $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::PAYMENT_METHOD_UPDATED);

     return TRUE;
   }
@@ @@
     if (!$result->success) {
       $this->logger->error('Error creating Braintree customer: ' . $result->message);
       $event = new BraintreeErrorEvent($user, $result->message, $result);
-      $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_ERROR, $event);
+      $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_ERROR);
       if (!empty($result->creditCardVerification)) {
         $credit_card_verification = $result->creditCardVerification;
         if ($credit_card_verification->status == 'processor_declined') {
@@ @@
     $user->save();

     $event = new BraintreeCustomerCreatedEvent($user);
-    $this->eventDispatcher->dispatch(BraintreeCashierEvents::BRAINTREE_CUSTOMER_CREATED, $event);
+    $this->eventDispatcher->dispatch($event, BraintreeCashierEvents::BRAINTREE_CUSTOMER_CREATED);

     // Invalidate the local tasks cache to make the "Invoices" task appear when
     // viewed by other users such as administrators.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 21 files have been changed by Rector                                      

