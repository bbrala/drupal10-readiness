diff --git a/src/Event/ExternalAuthAuthmapAlterEvent.php b/src/Event/ExternalAuthAuthmapAlterEvent.php
index 62b606c..1711021 100644
--- a/src/Event/ExternalAuthAuthmapAlterEvent.php
+++ b/src/Event/ExternalAuthAuthmapAlterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\externalauth\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Allow event listeners to alter the authmap data that will get stored.
diff --git a/src/Event/ExternalAuthLoginEvent.php b/src/Event/ExternalAuthLoginEvent.php
index 8b379ac..e0536ad 100644
--- a/src/Event/ExternalAuthLoginEvent.php
+++ b/src/Event/ExternalAuthLoginEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\externalauth\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Notify event listeners about an externalauth user login.
diff --git a/src/Event/ExternalAuthRegisterEvent.php b/src/Event/ExternalAuthRegisterEvent.php
index 9a056eb..40cf7e5 100644
--- a/src/Event/ExternalAuthRegisterEvent.php
+++ b/src/Event/ExternalAuthRegisterEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\externalauth\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Notify event listeners about an externalauth user registration.
diff --git a/src/ExternalAuth.php b/src/ExternalAuth.php
index fa6d58d..c4a634a 100644
--- a/src/ExternalAuth.php
+++ b/src/ExternalAuth.php
@@ -107,7 +107,7 @@ class ExternalAuth implements ExternalAuthInterface {
       $username = $provider . '_' . $authname;
     }
 
-    $authmap_event = $this->eventDispatcher->dispatch(ExternalAuthEvents::AUTHMAP_ALTER, new ExternalAuthAuthmapAlterEvent($provider, $authname, $username, $authmap_data));
+    $authmap_event = $this->eventDispatcher->dispatch(new ExternalAuthAuthmapAlterEvent($provider, $authname, $username, $authmap_data), ExternalAuthEvents::AUTHMAP_ALTER);
     $entity_storage = $this->entityTypeManager->getStorage('user');
 
     $account_search = $entity_storage->loadByProperties(['name' => $authmap_event->getUsername()]);
@@ -130,7 +130,7 @@ class ExternalAuth implements ExternalAuthInterface {
     $account->enforceIsNew();
     $account->save();
     $this->authmap->save($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData());
-    $this->eventDispatcher->dispatch(ExternalAuthEvents::REGISTER, new ExternalAuthRegisterEvent($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData()));
+    $this->eventDispatcher->dispatch(new ExternalAuthRegisterEvent($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData()), ExternalAuthEvents::REGISTER);
     $this->logger->notice('External registration of user %name from provider %provider and authname %authname',
       [
         '%name' => $account->getAccountName(),
@@ -162,7 +162,7 @@ class ExternalAuth implements ExternalAuthInterface {
   public function userLoginFinalize(UserInterface $account, $authname, $provider) {
     user_login_finalize($account);
     $this->logger->notice('External login of user %name', ['%name' => $account->getAccountName()]);
-    $this->eventDispatcher->dispatch(ExternalAuthEvents::LOGIN, new ExternalAuthLoginEvent($account, $provider, $authname));
+    $this->eventDispatcher->dispatch(new ExternalAuthLoginEvent($account, $provider, $authname), ExternalAuthEvents::LOGIN);
     return $account;
   }
 
@@ -173,7 +173,7 @@ class ExternalAuth implements ExternalAuthInterface {
     // If a mapping (for the same provider) to this account already exists, we
     // silently skip saving this auth mapping.
     if (!$this->authmap->get($account->id(), $provider)) {
-      $authmap_event = $this->eventDispatcher->dispatch(ExternalAuthEvents::AUTHMAP_ALTER, new ExternalAuthAuthmapAlterEvent($provider, $authname, $account->getAccountName(), NULL));
+      $authmap_event = $this->eventDispatcher->dispatch(new ExternalAuthAuthmapAlterEvent($provider, $authname, $account->getAccountName(), NULL), ExternalAuthEvents::AUTHMAP_ALTER);
       $this->authmap->save($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData());
     }
   }
diff --git a/tests/src/Kernel/AuthmapTest.php b/tests/src/Kernel/AuthmapTest.php
index ad4ae37..31825f1 100644
--- a/tests/src/Kernel/AuthmapTest.php
+++ b/tests/src/Kernel/AuthmapTest.php
@@ -29,7 +29,7 @@ class AuthmapTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->authmap = \Drupal::service('externalauth.authmap');
     $this->installSchema('externalauth', ['authmap']);
diff --git a/tests/src/Unit/AuthmapTest.php b/tests/src/Unit/AuthmapTest.php
index 5fb6b67..2ac7794 100644
--- a/tests/src/Unit/AuthmapTest.php
+++ b/tests/src/Unit/AuthmapTest.php
@@ -19,14 +19,14 @@ class AuthmapTest extends UnitTestCase {
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $connection;
 
   /**
    * Mock statement.
    *
-   * @var \Drupal\Core\Database\Statement|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Statement|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $statement;
 
@@ -47,23 +47,17 @@ class AuthmapTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a Mock database connection object.
-    $this->connection = $this->getMockBuilder('Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->connection = $this->createMock('Drupal\Core\Database\Connection');
 
     // Create a Mock Statement object.
-    $this->statement = $this->getMockBuilder('Drupal\Core\Database\Driver\sqlite\Statement')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->statement = $this->createMock('Drupal\Core\Database\Driver\sqlite\Statement');
 
     // Create a Mock Select object and set expectations.
-    $this->select = $this->getMockBuilder('Drupal\Core\Database\Query\Select')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->select = $this->createMock('Drupal\Core\Database\Query\Select');
 
     $this->select->expects($this->any())
       ->method('fields')
@@ -87,9 +81,7 @@ class AuthmapTest extends UnitTestCase {
       ->will($this->returnValue($this->select));
 
     // Create a Mock Delete object and set expectations.
-    $this->delete = $this->getMockBuilder('Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->delete = $this->createMock('Drupal\Core\Database\Query\Delete');
 
     $this->delete->expects($this->any())
       ->method('condition')
@@ -109,9 +101,7 @@ class AuthmapTest extends UnitTestCase {
   public function testSave() {
     $account = $this->createMock('Drupal\user\UserInterface');
 
-    $merge = $this->getMockBuilder('Drupal\Core\Database\Query\Merge')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $merge = $this->createMock('Drupal\Core\Database\Query\Merge');
 
     $merge->expects($this->any())
       ->method('keys')
@@ -249,9 +239,7 @@ class AuthmapTest extends UnitTestCase {
    */
   public function testDeleteWithProvider() {
     // Create a Mock Delete object and set expectations.
-    $this->delete = $this->getMockBuilder('Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->delete = $this->createMock('Drupal\Core\Database\Query\Delete');
 
     $this->delete->expects($this->exactly(2))
       ->method('condition')
diff --git a/tests/src/Unit/ExternalAuthTest.php b/tests/src/Unit/ExternalAuthTest.php
index 0fd48f4..e3f2318 100644
--- a/tests/src/Unit/ExternalAuthTest.php
+++ b/tests/src/Unit/ExternalAuthTest.php
@@ -21,21 +21,21 @@ class ExternalAuthTest extends UnitTestCase {
   /**
    * The mocked entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;
 
   /**
    * The mocked authmap service.
    *
-   * @var \Drupal\externalauth\AuthmapInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\externalauth\AuthmapInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $authmap;
 
   /**
    * The mocked logger instance.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;
 
@@ -49,26 +49,20 @@ class ExternalAuthTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a mock EntityTypeManager object.
     $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
 
     // Create a Mock Logger object.
-    $this->logger = $this->getMockBuilder('\Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock('\Psr\Log\LoggerInterface');
 
     // Create a Mock EventDispatcher object.
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
 
     // Create a Mock Authmap object.
-    $this->authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->authmap = $this->createMock('\Drupal\externalauth\Authmap');
   }
 
   /**
@@ -80,10 +74,7 @@ class ExternalAuthTest extends UnitTestCase {
   public function testLoad() {
     // Set up a mock for Authmap class,
     // mocking getUid() method.
-    $authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->setMethods(['getUid'])
-      ->getMock();
+    $authmap = $this->createMock('\Drupal\externalauth\Authmap');
 
     $authmap->expects($this->once())
       ->method('getUid')
@@ -176,17 +167,12 @@ class ExternalAuthTest extends UnitTestCase {
 
     // Set up a mock for Authmap class,
     // mocking getUid() method.
-    $authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->setMethods(['save'])
-      ->getMock();
+    $authmap = $this->createMock('\Drupal\externalauth\Authmap');
 
     $authmap->expects($this->once())
       ->method('save');
 
-    $dispatched_event = $this->getMockBuilder('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatched_event = $this->createMock('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent');
 
     $dispatched_event->expects($this->any())
       ->method('getUsername')
@@ -317,10 +303,7 @@ class ExternalAuthTest extends UnitTestCase {
 
     // Set up a mock for Authmap class,
     // mocking get() & save() methods.
-    $authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->setMethods(['save', 'get'])
-      ->getMock();
+    $authmap = $this->createMock('\Drupal\externalauth\Authmap');
 
     $authmap->expects($this->once())
       ->method('get')
@@ -329,9 +312,7 @@ class ExternalAuthTest extends UnitTestCase {
     $authmap->expects($this->once())
       ->method('save');
 
-    $dispatched_event = $this->getMockBuilder('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatched_event = $this->createMock('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent');
 
     $dispatched_event->expects($this->any())
       ->method('getUsername')
