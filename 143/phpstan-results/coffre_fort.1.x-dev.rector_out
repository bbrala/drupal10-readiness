modules/contrib/coffre_fort/coffre_fort.module
modules/contrib/coffre_fort/src/ConfigurablePrivateDataBase.php
modules/contrib/coffre_fort/coffre_fort.tokens.inc
modules/contrib/coffre_fort/src/Plugin/CoffreFort/SecretProvider/VaultSecretProvider.php
modules/contrib/coffre_fort/src/ConfigurablePrivateDataInterface.php
modules/contrib/coffre_fort/src/Entity/CoffreFortEntity.php
modules/contrib/coffre_fort/src/Annotation/PrivateDataType.php
modules/contrib/coffre_fort/src/Annotation/UserSecretProvider.php
modules/contrib/coffre_fort/src/CacheContext/LockedCoffreFortCacheContext.php
modules/contrib/coffre_fort/src/PrivateDataBase.php
modules/contrib/coffre_fort/src/CoffreFortAccessControlHandler.php
modules/contrib/coffre_fort/src/PrivateDataInterface.php
modules/contrib/coffre_fort/src/PrivateDataManager.php
modules/contrib/coffre_fort/src/CoffreFortEncryption.php
modules/contrib/coffre_fort/src/PrivateDataPluginCollection.php
modules/contrib/coffre_fort/src/UserSecretProvicersManager.php
modules/contrib/coffre_fort/src/UserSecretProviderBase.php
modules/contrib/coffre_fort/src/UserSecretProviderInterface.php
modules/contrib/coffre_fort/src/UserSecretProvidersPluginCollection.php
modules/contrib/coffre_fort/src/CoffreFortEntityHtmlRouteProvider.php
modules/contrib/coffre_fort/tests/src/Functional/LoadTest.php
modules/contrib/coffre_fort/src/CoffreFortEntityInterface.php
modules/contrib/coffre_fort/src/CoffreFortEntityListBuilder.php
modules/contrib/coffre_fort/src/CoffreFortPrivateDataPluginCollection.php
modules/contrib/coffre_fort/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/coffre_fort/src/Form/CoffreFortEntityAddForm.php
modules/contrib/coffre_fort/src/Form/CoffreFortEntityDeleteForm.php
modules/contrib/coffre_fort/src/Form/CoffreFortEntityEditForm.php
modules/contrib/coffre_fort/src/Form/CoffreFortEntityFormBase.php
modules/contrib/coffre_fort/src/Form/CoffreFortEntityLockForm.php
modules/contrib/coffre_fort/src/Form/CoffreFortEntityUnlockForm.php
modules/contrib/coffre_fort/src/Form/CoffreFortSettingsForm.php
modules/contrib/coffre_fort/src/Form/PrivateDataAddForm.php
modules/contrib/coffre_fort/src/Form/PrivateDataDeleteForm.php
modules/contrib/coffre_fort/src/Form/PrivateDataEditForm.php
modules/contrib/coffre_fort/src/Form/PrivateDataFormBase.php
modules/contrib/coffre_fort/src/Plugin/CoffreFort/DataTypes/Number.php
modules/contrib/coffre_fort/src/Plugin/CoffreFort/DataTypes/SimpleString.php
modules/contrib/coffre_fort/src/Plugin/CoffreFort/DataTypes/Text.php
modules/contrib/coffre_fort/src/Plugin/CoffreFort/SecretProvider/OpenIdKeycloakSecretProvider.php
modules/contrib/coffre_fort/src/Plugin/CoffreFort/SecretProvider/PasswordSecretProvider.php

3 files with changes
====================

1) modules/contrib/coffre_fort/tests/src/Functional/LoadTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp()
+  protected function setUp(): void
   {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/coffre_fort/src/Plugin/CoffreFort/SecretProvider/PasswordSecretProvider.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\coffre_fort\Plugin\CoffreFort\SecretProvider;


+use Drupal\Core\State\State;
 use Drupal;
 use Drupal\coffre_fort\CoffreFortEncryption;
 use Drupal\coffre_fort\Entity\CoffreFortEntity;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger, TimeInterface $datetime, CoffreFortEncryption $encryption, Drupal\Core\State\State $state)
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger, TimeInterface $datetime, CoffreFortEncryption $encryption, State $state)
   {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $logger);
     $this->datatime = $datetime;
@@ @@
       $value = base64_encode($secret);
       $expire = $this->datatime->getCurrentTime() + 60 * 60 * 24; // Expire in 24h
       $response = new RedirectResponse($entity->toUrl('edit-form')->toString());
-      $response->headers->setCookie(new Cookie($name, $value, $expire));
+      $response->headers->setCookie(Cookie::create($name, $value, $expire));
       $form_state->setResponse($response);
     }
   }
@@ @@
     $value = base64_encode($secret);
     $expire = $this->datatime->getCurrentTime() + 60 * 60 * 24; // Expire in 24h
     $response = new RedirectResponse($entity->toUrl('edit-form')->toString());
-    $response->headers->setCookie(new Cookie($name, $value, $expire));
+    $response->headers->setCookie(Cookie::create($name, $value, $expire));
     $form_state->setResponse($response);
   }

@@ @@
     $name = 'DRUPAL:CFTOKEN:' . $entity->uuid();
     $url = new Url('entity.coffre_fort.collection');
     $response = new RedirectResponse($url->toString());
-    $response->headers->setCookie(new Cookie($name, NULL, 1));
+    $response->headers->setCookie(Cookie::create($name, NULL, 1));
     $form_state->setResponse($response);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * NewToStaticCallRector
 * ChangeMethodVisibilityRector


3) modules/contrib/coffre_fort/src/Entity/CoffreFortEntity.php:375

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public static function postLoad(Drupal\Core\Entity\EntityStorageInterface $storage, array &$entities)
+  public static function postLoad(EntityStorageInterface $storage, array &$entities)
   {
     foreach ($entities as $entity) {
       $entity->tryUnlockByProvider();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

