modules/contrib/acquia_lift/acquia_lift.install
modules/contrib/acquia_lift/modules/acquia_lift_publisher/acquia_lift_publisher.module
modules/contrib/acquia_lift/acquia_lift.module
modules/contrib/acquia_lift/src/Exception/MissingSettingsException.php
modules/contrib/acquia_lift/modules/acquia_lift_inspector/acquia_lift_inspector.module
modules/contrib/acquia_lift/modules/acquia_lift_publisher/src/ContentPublishingActions.php
modules/contrib/acquia_lift/modules/acquia_lift_inspector/tests/src/FunctionalJavascript/InspectorJsTest.php
modules/contrib/acquia_lift/src/Form/AdminSettingsForm.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/src/EventSubscriber/Cdf/EntityRenderHandler.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/acquia_lift_publisher.install
modules/contrib/acquia_lift/modules/acquia_lift_publisher/src/EventSubscriber/EnqueueEligibility/IsExcludedImageStyle.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/src/EventSubscriber/Publish/PublishOnlyRendered.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/src/Form/ContentPublishingForm.php
modules/contrib/acquia_lift/src/Service/Context/BaseContext.php
modules/contrib/acquia_lift/src/Service/Context/ContextInterface.php
modules/contrib/acquia_lift/src/Service/Context/PageContext.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/src/Form/ContentPublishingSettingsTrait.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Functional/ContentPublishingFormTest.php
modules/contrib/acquia_lift/src/Service/Context/PathContext.php
modules/contrib/acquia_lift/src/Service/Helper/HelpMessageHelper.php
modules/contrib/acquia_lift/src/Service/Helper/PathMatcher.php
modules/contrib/acquia_lift/src/Service/Helper/SettingsHelper.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Functional/Form/EntityViewModeConfigurationFormTest.php
modules/contrib/acquia_lift/tests/src/Functional/LiftLinkTest.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Kernel/EventSubscriber/Cdf/EntityRenderHandlerTest.php
modules/contrib/acquia_lift/tests/src/Functional/SettingsTest.php
modules/contrib/acquia_lift/tests/src/Unit/Service/Context/PageContextTest.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Kernel/EventSubscriber/EnqueueEligibility/IsExcludedImageStyleTest.php
modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Kernel/EventSubscriber/Publish/PublishOnlyRenderedTest.php
modules/contrib/acquia_lift/tests/src/Unit/Service/Context/PathContextTest.php
modules/contrib/acquia_lift/tests/src/Unit/Service/Helper/HelpMessageHelperTest.php
modules/contrib/acquia_lift/tests/src/Unit/Service/Helper/PathMatcherTest.php
modules/contrib/acquia_lift/tests/src/Unit/Service/Helper/SettingsHelperTest.php
modules/contrib/acquia_lift/tests/src/Unit/Traits/FixturesDataTrait.php
modules/contrib/acquia_lift/tests/src/Unit/Traits/SettingsDataTrait.php

12 files with changes
=====================

1) modules/contrib/acquia_lift/modules/acquia_lift_inspector/tests/src/FunctionalJavascript/InspectorJsTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Ensure an `article` node type exists.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Kernel/EventSubscriber/Publish/PublishOnlyRenderedTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_lift_publisher\Kernel\EventSubscriber\Publish;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Acquia\ContentHubClient\CDF\CDFObject;
 use Acquia\ContentHubClient\CDFAttribute;
 use Acquia\ContentHubClient\CDFDocument;
@@ @@
  */
 class PublishOnlyRenderedTest extends KernelTestBase {

+  use ProphecyTrait;
   use ContentTypeCreationTrait;
   use NodeCreationTrait;
   use RandomGeneratorTrait;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('acquia_contenthub_publisher', ['acquia_contenthub_publisher_export_tracking']);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Kernel/EventSubscriber/EnqueueEligibility/IsExcludedImageStyleTest.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('acquia_contenthub_publisher', ['acquia_contenthub_publisher_export_tracking']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Kernel/EventSubscriber/Cdf/EntityRenderHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_lift_publisher\Kernel\EventSubscriber\Cdf;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Acquia\ContentHubClient\CDFDocument;
 use Acquia\ContentHubClient\ContentHubClient;
 use Acquia\ContentHubClient\Settings;
@@ @@
  */
 class EntityRenderHandlerTest extends KernelTestBase {

+  use ProphecyTrait;
   use ContentTypeCreationTrait;
   use RandomGeneratorTrait;
   use UserCreationTrait;
@@ @@
    * @throws \ReflectionException
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('acquia_contenthub_publisher', ['acquia_contenthub_publisher_export_tracking']);
@@ @@
     $this->assertNotNull($cdf);

     // Assert that image url is correct
-    $this->assertEqual(
-      $cdf->getAttribute('preview_image')->getValue()['und'],
-      ImageStyle::load('acquia_lift_publisher_preview_image')->buildUrl($image->getFileUri()),
-      ''
-    );
+    $this->assertEquals($cdf->getAttribute('preview_image')->getValue()['und'], ImageStyle::load('acquia_lift_publisher_preview_image')->buildUrl($image->getFileUri()), '');

     // Ensure that a node with an empty image field can get rendered (LEB-4401).
     // Create another node with no image.
@@ @@

     $cdf = current($rendered_cdfs);
     // Check that title matches.
-    $this->assertEqual(
-      $cdf->getAttribute('label')->getValue()['en'],
-      'Title test with no image'
-    );
+    $this->assertEquals($cdf->getAttribute('label')->getValue()['en'], 'Title test with no image');
     // Check that no image preview is present in CDF.
     $this->assertNull(
       $cdf->getAttribute('preview_image'),
@@ @@
    */
   protected function assertCdfNotHasRenderedEntity(array $cdfs): void {
     $entities = $this->getRenderedEntities($cdfs);
-    $this->assertEqual(count($entities), 0, 'Cdf list does not contain rendered entity.');
+    $this->assertEquals(count($entities), 0, 'Cdf list does not contain rendered entity.');
   }

   /**
@@ @@
     $this->assertTrue($source_entities[0] === $entity_uuid, 'Source uuid and original uuid match.');
     $this->assertTrue($source_entities[1] === $entity_uuid, 'Source uuid and original uuid match.');

-    $this->assertEqual($cdf_languages, $original_languages, 'All the translations have been rendered.');
+    $this->assertEquals($cdf_languages, $original_languages, 'All the translations have been rendered.');

     // Check if the content are translation specific.
     foreach ($original_languages as $original_language) {
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Functional/Form/EntityViewModeConfigurationFormTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer acquia lift',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/acquia_lift/modules/acquia_lift_publisher/tests/src/Functional/ContentPublishingFormTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->createUser([], 'user1');
@@ @@
     $this->drupalLogin($user);
     $session = $this->getSession();
     $this->drupalGet(Url::fromRoute('acquia_lift_publisher.entity_config_form'));
-    $this->assertEqual($session->getStatusCode(), $expected, $message);
+    $this->assertEquals($session->getStatusCode(), $expected, $message);
   }

   /**
@@ @@
     $this->createImageField('image', 'article');
     $this->getSession()->reload();
     $session->fieldExists($preview_image);
+    $this->drupalGet($url);

-    $this->drupalPostForm(
-      $url,
-      [
-        $view_mode_field => TRUE,
-        $preview_image => 'image',
-        $render_role => 'authenticated',
-        $synchronization => FALSE,
-      ],
-      'Save configuration'
-    );
+    $this->submitForm([
+      $view_mode_field => TRUE,
+      $preview_image => 'image',
+      $render_role => 'authenticated',
+      $synchronization => FALSE,
+    ], 'Save configuration');

     $session->checkboxChecked($view_mode_field);
     $session->fieldValueEquals($preview_image, 'image');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/acquia_lift/tests/src/Unit/Service/Helper/SettingsHelperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_lift\Unit\Service\Helper;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Client;
+use Drupal\Core\Http\ClientFactory;
+use Prophecy\Argument;
+use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Exception;
 use Drupal\Tests\UnitTestCase;
 use Drupal\acquia_lift\Service\Helper\SettingsHelper;
@@ @@
  */
 class SettingsHelperTest extends UnitTestCase {

+  use ProphecyTrait;
   use SettingsDataTrait;

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }

@@ @@
    * @dataProvider providerTestPingUri
    */
   public function testPingUri($test_value, $expected) {
-    $response = $this->prophesize(\Psr\Http\Message\ResponseInterface::class);
+    $response = $this->prophesize(ResponseInterface::class);
     $response->getStatusCode()->willReturn($expected['statusCode']);
     $response->getReasonPhrase()->willReturn($expected['reasonPhrase']);
-    $client = $this->prophesize(\GuzzleHttp\Client::class);
+    $client = $this->prophesize(Client::class);
     $client->get($test_value[1], ['http_errors' => false])->willReturn($response->reveal());
-    $clientFactory = $this->prophesize(\Drupal\Core\Http\ClientFactory::class);
-    $clientFactory->fromOptions(\Prophecy\Argument::any())->willReturn($client->reveal());
-    $container = $this->prophesize(\Drupal\Core\DependencyInjection\ContainerBuilder::class);
+    $clientFactory = $this->prophesize(ClientFactory::class);
+    $clientFactory->fromOptions(Argument::any())->willReturn($client->reveal());
+    $container = $this->prophesize(ContainerBuilder::class);
     $container->get('http_client_factory')->willReturn($clientFactory->reveal());
     \Drupal::setContainer($container->reveal());
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/acquia_lift/tests/src/Unit/Service/Helper/PathMatcherTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->aliasManager = $this->createMock('Drupal\path_alias\AliasManagerInterface');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/acquia_lift/tests/src/Unit/Service/Context/PathContextTest.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->configFactory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
-    $this->settings = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->currentPathStack = $this->getMockBuilder('Drupal\Core\Path\CurrentPathStack')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->settings = $this->createMock('Drupal\Core\Config\ImmutableConfig');
+    $this->currentPathStack = $this->createMock('Drupal\Core\Path\CurrentPathStack');
     $this->requestStack = $this->createMock('Symfony\Component\HttpFoundation\RequestStack');
-    $this->pathMatcher = $this->getMockBuilder('Drupal\acquia_lift\Service\Helper\PathMatcher')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->pathMatcher = $this->createMock('Drupal\acquia_lift\Service\Helper\PathMatcher');
     $this->request = $this->createMock('Symfony\Component\HttpFoundation\Request');

     $this->configFactory->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/acquia_lift/tests/src/Unit/Service/Context/PageContextTest.php:96

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Get config factory mock
@@ @@
     $this->configFactory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');

     // Get settings mock
-    $this->settings = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->settings = $this->createMock('Drupal\Core\Config\ImmutableConfig');

     // Get entity manager mock
     $this->entityTypeManager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
@@ @@

     // Get route mocks
     $this->routeMatch = $this->createMock('Drupal\Core\Routing\RouteMatchInterface');
-    $this->route = $this->getMockBuilder('Symfony\Component\Routing\Route')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->route = $this->createMock('Symfony\Component\Routing\Route');

     // Get title resolver mock
     $this->titleResolver = $this->createMock('Drupal\Core\Controller\TitleResolverInterface');
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/acquia_lift/tests/src/Functional/SettingsTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $permissions = [
@@ @@
     // Check if Configure link is available on 'Extend' page.
     // Requires 'administer modules' permission.
     $this->drupalGet('admin/modules');
-    $this->assertRaw('admin/config/services/acquia-lift', '[testConfigurationLinks]: Configure link from Extend page to Acquia Lift Settings page exists.');
+    $this->assertSession()->responseContains('admin/config/services/acquia-lift');

     // Check if Configure link is available on 'Status Reports' page. NOTE: Link is only shown without a configured Acquia Lift credential.
     // Requires 'administer site configuration' permission.
     $this->drupalGet('admin/reports/status');
-    $this->assertRaw('admin/config/services/acquia-lift', '[testConfigurationLinks]: Configure link from Status Reports page to Acquia Lift Settings page exists.');
+    $this->assertSession()->responseContains('admin/config/services/acquia-lift');
   }

   public function testAdminSettingsForm() {
     // Check for setting page's presence.
     $this->drupalGet('admin/config/services/acquia-lift');
-    $this->assertRaw(t('Acquia Lift Settings'), '[testAdminSettingsForm]: Settings page displayed.');
+    $this->assertSession()->responseContains(t('Acquia Lift Settings'));

     // Get all the valid settings, and massage them into form $edit array.
     $credential_settings = $this->getValidCredentialSettings();
@@ @@
     $edit += $this->convertToPostFormSettings($advanced_settings, 'advanced');
     $edit_settings_count = count($edit);
     $expect_settings_count = 21;
+    $this->drupalGet('admin/config/services/acquia-lift');

     // Post the edits.
-    $this->drupalPostForm('admin/config/services/acquia-lift', $edit, new TranslatableMarkup('Save configuration'));
+    $this->submitForm($edit, new TranslatableMarkup('Save configuration'));

     // Assert error messages are set for required fields and unreachable URLs.
-    $this->assertText(t('The Acquia Lift module requires a valid Account ID, Site ID, and Assets URL to complete activation.'));
-    $this->assertText(t('Acquia Lift module could not reach the specified Assets URL.'));
-    $this->assertText(t('Acquia Lift module could not reach the specified Decision API URL.'));
+    $this->assertSession()->pageTextContains(t('The Acquia Lift module requires a valid Account ID, Site ID, and Assets URL to complete activation.'));
+    $this->assertSession()->pageTextContains(t('Acquia Lift module could not reach the specified Assets URL.'));
+    $this->assertSession()->pageTextContains(t('Acquia Lift module could not reach the specified Decision API URL.'));

     // Assert all other fields. Also count the asserted fields to make sure all are asserted.
     foreach ($edit as $name => $value) {
-      $this->assertFieldByName($name, $value, new FormattableMarkup('"@name" setting was saved into DB.', ['@name' => $name]));
+      $this->assertSession()->fieldValueEquals($name, $value);
     }
-    $this->assertEqual($expect_settings_count, $edit_settings_count, 'The exact numbers of settings that were asserted should be ' . $expect_settings_count . '.');
+    $this->assertEquals($expect_settings_count, $edit_settings_count, 'The exact numbers of settings that were asserted should be ' . $expect_settings_count . '.');

     // Assert metatags are loaded in the header.
     $this->drupalGet('node/90210');
@@ @@

     // Assert metatags are loaded in the header.
     $this->drupalGet('node/90210', ['query' => ['my_identity_parameter' => 'an_identity']]);
-    $this->assertRaw('an_identity', '[testMetatagsAndScriptTag]: identity metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:page_type', '[testMetatagsAndScriptTag]: page_type metatag is loaded on the node page.');
-    $this->assertRaw('node page', '[testMetatagsAndScriptTag]: page_type metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:account_id', '[testMetatagsAndScriptTag]: account_id metatag is loaded on the node page.');
-    $this->assertRaw('AccountId1', '[testMetatagsAndScriptTag]: account_id metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:bootstrapMode', '[testMetatagsAndScriptTag]: bootstrap mode metatag is loaded on the node page.');
-    $this->assertRaw('manual', '[testMetatagsAndScriptTag]: bootstrap mode metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:contentReplacementMode', '[testMetatagsAndScriptTag]: content replacement mode metatag is loaded on the node page.');
-    $this->assertRaw('customized', '[testMetatagsAndScriptTag]: content replacement mode metatag value is loaded on the node page.');
-    $this->assertNoRaw('acquia_lift:content_origins', 'acquia_lift:content_origins is not set when setting no present.');
+    $this->assertSession()->responseContains('an_identity');
+    $this->assertSession()->responseContains('acquia_lift:page_type');
+    $this->assertSession()->responseContains('node page');
+    $this->assertSession()->responseContains('acquia_lift:account_id');
+    $this->assertSession()->responseContains('AccountId1');
+    $this->assertSession()->responseContains('acquia_lift:bootstrapMode');
+    $this->assertSession()->responseContains('manual');
+    $this->assertSession()->responseContains('acquia_lift:contentReplacementMode');
+    $this->assertSession()->responseContains('customized');
+    $this->assertSession()->responseNotContains('acquia_lift:content_origins');
     // Assert Lift JavaScript tag is async-loaded on the page.
-    $this->assertRaw('AssetsUrl1', '[testMetatagsAndScriptTag]: With valid settings, Lift\'s JavaScript is loaded on the home page.');
-    $this->assertRaw('async', '[testMetatagsAndScriptTag]: With valid settings, Lift\'s JavaScript is async-loaded on the home page.');
+    $this->assertSession()->responseContains('AssetsUrl1');
+    $this->assertSession()->responseContains('async');

     // Update settings to include content_origins
     $this->drupalGet('admin/config/services/acquia-lift');
@@ @@
     $edit += $this->convertToPostFormSettings($udf_event_settings, 'udf_event_mappings');
     $edit += $this->convertToPostFormSettings($visibility_settings, 'visibility');
     $edit += $this->convertToPostFormSettings($advanced_settings, 'advanced');
+    $this->drupalGet('admin/config/services/acquia-lift');

     // Post the edits.
-    $this->drupalPostForm('admin/config/services/acquia-lift', $edit, new TranslatableMarkup('Save configuration'));
+    $this->submitForm($edit, new TranslatableMarkup('Save configuration'));

     $this->drupalGet('node/90210', ['query' => ['my_identity_parameter' => 'an_identity']]);
-    $this->assertRaw('an_identity', '[testMetatagsAndScriptTag]: identity metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:page_type', '[testMetatagsAndScriptTag]: page_type metatag is loaded on the node page.');
-    $this->assertRaw('node page', '[testMetatagsAndScriptTag]: page_type metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:account_id', '[testMetatagsAndScriptTag]: account_id metatag is loaded on the node page.');
-    $this->assertRaw('AccountId1', '[testMetatagsAndScriptTag]: account_id metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:bootstrapMode', '[testMetatagsAndScriptTag]: bootstrap mode metatag is loaded on the node page.');
-    $this->assertRaw('manual', '[testMetatagsAndScriptTag]: bootstrap mode metatag value is loaded on the node page.');
-    $this->assertRaw('acquia_lift:contentReplacementMode', '[testMetatagsAndScriptTag]: content replacement mode metatag is loaded on the node page.');
-    $this->assertRaw('customized', '[testMetatagsAndScriptTag]: content replacement mode metatag value is loaded on the node page.');
-    $this->assertRaw('<meta itemprop="acquia_lift:content_origins" content="2a14f4d4-650e-47c2-a55f-25f29949b38e,1b5bd833-b479-4d30-8ac2-331499acca9a,81fbe311-c638-4ced-9db6-5a30889c925e,5245d03d-32d5-4506-bc86-081022c7ae80"', 'acquia_lift:content_origins is set.');
+    $this->assertSession()->responseContains('an_identity');
+    $this->assertSession()->responseContains('acquia_lift:page_type');
+    $this->assertSession()->responseContains('node page');
+    $this->assertSession()->responseContains('acquia_lift:account_id');
+    $this->assertSession()->responseContains('AccountId1');
+    $this->assertSession()->responseContains('acquia_lift:bootstrapMode');
+    $this->assertSession()->responseContains('manual');
+    $this->assertSession()->responseContains('acquia_lift:contentReplacementMode');
+    $this->assertSession()->responseContains('customized');
+    $this->assertSession()->responseContains('<meta itemprop="acquia_lift:content_origins" content="2a14f4d4-650e-47c2-a55f-25f29949b38e,1b5bd833-b479-4d30-8ac2-331499acca9a,81fbe311-c638-4ced-9db6-5a30889c925e,5245d03d-32d5-4506-bc86-081022c7ae80"');
     // Assert Lift JavaScript tag is async-loaded on the page.
-    $this->assertRaw('AssetsUrl1', '[testMetatagsAndScriptTag]: With valid settings, Lift\'s JavaScript is loaded on the home page.');
-    $this->assertRaw('async', '[testMetatagsAndScriptTag]: With valid settings, Lift\'s JavaScript is async-loaded on the home page.');
+    $this->assertSession()->responseContains('AssetsUrl1');
+    $this->assertSession()->responseContains('async');
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/acquia_lift/tests/src/Functional/LiftLinkTest.php:30

    ---------- begin diff ----------
@@ @@
     /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();


@@ @@
     // Assert that the Acquia Lift link ID is present in the HTML.
     // This also verifies if the specific render cache is cleared.
     $this->drupalGet($node->toUrl());
-    $this->assertRaw('id="openLiftLink"');
+    $this->assertSession()->responseContains('id="openLiftLink"');

   }

@@ @@

     // Assert that the Acquia Lift link ID is not present in the HTML.
     $this->drupalGet($node->toUrl());
-    $this->assertNoRaw('id="openLiftLink"');
+    $this->assertSession()->responseNotContains('id="openLiftLink"');
     // These contexts should be set.
     $this->assertCacheContext('url.path');
     $this->assertCacheContext('user');
     // These tags should be set.
-    $this->assertCacheTag('config:acquia_lift.settings');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:acquia_lift.settings');

     // Set valid settings
     $this->setValidSettings();
@@ @@
     // Assert that the Acquia Lift link ID is present in the HTML.
     // This also verifies if the specific render cache is cleared.
     $this->drupalGet($node->toUrl());
-    $this->assertRaw('id="openLiftLink"');
+    $this->assertSession()->responseContains('id="openLiftLink"');

     // These tags should be set.
-    $this->assertCacheTag('config:acquia_lift.settings');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:acquia_lift.settings');
     // These contexts should be set.
     $this->assertCacheContext('url.path');
     $this->assertCacheContext('user');
@@ @@
     $node = $this->drupalCreateNode();
     $this->drupalGet($node->toUrl());
     // Assert that the Acquia Lift link ID is not present in the HTML.
-    $this->assertNoRaw('id="openLiftLink"');
+    $this->assertSession()->responseNotContains('id="openLiftLink"');

     // Set valid settings
     $this->setValidSettings();
     $this->drupalGet($node->toUrl());
     // Assert that the Acquia Lift link ID is not present in the HTML.
-    $this->assertNoRaw('id="openLiftLink"');
+    $this->assertSession()->responseNotContains('id="openLiftLink"');
   }

   public function testLinkNotInToolbarInAdminPages() {
@@ @@
     // Check if Acquia Lift Link is available on the node that we created
     $this->drupalGet('/admin');
     // Assert that the Acquia Lift link ID is not present in the HTML.
-    $this->assertNoRaw('id="openLiftLink"');
+    $this->assertSession()->responseNotContains('id="openLiftLink"');

     // Set valid settings
     $this->setValidSettings();
     $this->drupalGet('/admin');
     // Assert that the Acquia Lift link ID is not present in the HTML.
-    $this->assertNoRaw('id="openLiftLink"');
+    $this->assertSession()->responseNotContains('id="openLiftLink"');
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertCacheTagRector
 * AssertNoRawRector
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

