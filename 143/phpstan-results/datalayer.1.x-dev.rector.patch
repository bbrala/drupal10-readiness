diff --git a/datalayer.api.php b/datalayer.api.php
index 8208e84..0df0239 100644
--- a/datalayer.api.php
+++ b/datalayer.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Field\FieldItemInterface;
 /**
  * @file
  * Documentation for the Data Layer module.
@@ -88,7 +89,7 @@ function hook_datalayer_alter(array &$data_layer) {
  * @param string $field_type
  *   Type of field, such as 'string' or 'entity_refernce'.
  */
-function hook_datalayer_field_alter(array &$value, \Drupal\Core\Field\FieldItemInterface $field_item, $field_type) {
+function hook_datalayer_field_alter(array &$value, FieldItemInterface $field_item, $field_type) {
   // EXAMPLE:
   // Remove the filter format for a text with summary field.
   if ($field_type == 'text_with_summary') {
diff --git a/datalayer.module b/datalayer.module
index b84020f..a27161d 100644
--- a/datalayer.module
+++ b/datalayer.module
@@ -215,7 +215,7 @@ function datalayer_get_user_data() {
     if ($exp_user_urls && count($matched_roles)) {
       $path = Url::fromRoute("<current>")->toString();
       $path_matcher = \Drupal::service('path.matcher');
-      $alias_manager = \Drupal::service('path.alias_manager');
+      $alias_manager = \Drupal::service('path_alias.manager');
       $path_alias = $alias_manager->getAliasByPath($path);
       if ($path_matcher->matchPath($path, $exp_user_urls) ||
           $path_matcher->matchPath($path_alias, $exp_user_urls)) {
@@ -307,7 +307,7 @@ function _datalayer_get_entity_data($entity) {
       $depth = $datalayer_settings->get('ia_depth');
       // Retrieve an array which contains the path pieces.
       $current_path = \Drupal::service('path.current')->getPath();
-      $result = \Drupal::service('path.alias_manager')
+      $result = \Drupal::service('path_alias.manager')
         ->getAliasByPath($current_path);
       $path_args = explode('/', $result);
       $i = 0;
diff --git a/tests/src/Functional/DataLayerFunctionalTest.php b/tests/src/Functional/DataLayerFunctionalTest.php
index e7fc771..c4cdd3c 100644
--- a/tests/src/Functional/DataLayerFunctionalTest.php
+++ b/tests/src/Functional/DataLayerFunctionalTest.php
@@ -31,7 +31,7 @@ class DataLayerFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $admin_user = $this->drupalCreateUser([
       'access administration pages',
@@ -72,12 +72,12 @@ class DataLayerFunctionalTest extends BrowserTestBase {
     $assert = $this->assertSession();
     $this->drupalGet('admin/config/search/datalayer');
     $assert->pageTextContains('Include "data layer helper" library');
-    $this->assertNoFieldChecked('lib_helper');
+    $this->assertSession()->checkboxNotChecked('lib_helper');
     $assert->pageTextNotContains('Data Layer Helper Library is enabled but the library is not installed at /libraries/data-layer-helper/dist/data-layer-helper.js. See: data-layer-helper on GitHub.');
 
     // Update form field to ensure config value changes.
-    $this->drupalPostForm(NULL, ['lib_helper' => '1'], 'Save configuration');
-    $this->assertFieldChecked('lib_helper');
+    $this->submitForm(['lib_helper' => '1'], 'Save configuration');
+    $this->assertSession()->checkboxChecked('lib_helper');
     $assert->pageTextContains('Data Layer Helper Library is enabled but the library is not installed at /libraries/data-layer-helper/dist/data-layer-helper.js. See: data-layer-helper on GitHub.');
   }
 
diff --git a/tests/src/Kernel/DataLayerKernelTest.php b/tests/src/Kernel/DataLayerKernelTest.php
index 2b68da7..1b8a569 100644
--- a/tests/src/Kernel/DataLayerKernelTest.php
+++ b/tests/src/Kernel/DataLayerKernelTest.php
@@ -62,7 +62,7 @@ class DataLayerKernelTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
@@ -100,14 +100,11 @@ class DataLayerKernelTest extends KernelTestBase {
    * Test DataLayer Defaults function.
    */
   public function testDataLayerDefaults() {
-    $this->assertEqual(
-      [
-        'drupalLanguage' => Language::$defaultValues['id'],
-        'drupalCountry' => $this->config('system.date')->get('country.default'),
-        'siteName' => $this->config('system.site')->get('name'),
-      ],
-      _datalayer_defaults()
-    );
+    $this->assertEquals([
+      'drupalLanguage' => Language::$defaultValues['id'],
+      'drupalCountry' => $this->config('system.date')->get('country.default'),
+      'siteName' => $this->config('system.site')->get('name'),
+    ], _datalayer_defaults());
   }
 
   /**
@@ -115,10 +112,7 @@ class DataLayerKernelTest extends KernelTestBase {
    */
   public function testDataLayerAddWillAddData() {
     $this->setupEmptyDataLayer();
-    $this->assertEqual(
-      ['foo' => 'bar'],
-      datalayer_add(['foo' => 'bar'])
-    );
+    $this->assertEquals(['foo' => 'bar'], datalayer_add(['foo' => 'bar']));
   }
 
   /**
@@ -127,10 +121,7 @@ class DataLayerKernelTest extends KernelTestBase {
   public function testDataLayerAddDoesNotOverwriteByDefault() {
     $this->setupEmptyDataLayer();
     datalayer_add(['foo' => 'bar']);
-    $this->assertEqual(
-      ['foo' => 'bar'],
-      datalayer_add(['foo' => 'baz'])
-    );
+    $this->assertEquals(['foo' => 'bar'], datalayer_add(['foo' => 'baz']));
   }
 
   /**
@@ -139,10 +130,7 @@ class DataLayerKernelTest extends KernelTestBase {
   public function testDataLayerAddWillOverwriteWithFlag() {
     $this->setupEmptyDataLayer();
     datalayer_add(['foo' => 'bar']);
-    $this->assertEqual(
-      ['foo' => 'baz'],
-      datalayer_add(['foo' => 'baz'], TRUE)
-    );
+    $this->assertEquals(['foo' => 'baz'], datalayer_add(['foo' => 'baz'], TRUE));
   }
 
   /**
@@ -162,7 +150,7 @@ class DataLayerKernelTest extends KernelTestBase {
     $this->setupMockRouteMatch();
     $object = _datalayer_menu_get_any_object();
     $this->assertTrue(is_object($object));
-    $this->assertEqual($object->getEntityTypeId(), 'node');
+    $this->assertEquals($object->getEntityTypeId(), 'node');
   }
 
   /**
@@ -171,7 +159,7 @@ class DataLayerKernelTest extends KernelTestBase {
   public function testDataLayerGetEntityTermsReturnsEmptyArray() {
     $this->setupMockNode();
     $terms = _datalayer_get_entity_terms($this->node);
-    $this->assertEqual([], $terms);
+    $this->assertEquals([], $terms);
   }
 
   /**
@@ -180,7 +168,7 @@ class DataLayerKernelTest extends KernelTestBase {
   public function testDataLayerGetEntityTermsReturnsTermArray() {
     $this->setupMockNodeWithTerm();
     $terms = _datalayer_get_entity_terms($this->node);
-    $this->assertEqual(['tags' => [1 => 'someTag']], $terms);
+    $this->assertEquals(['tags' => [1 => 'someTag']], $terms);
   }
 
   /**
@@ -190,10 +178,7 @@ class DataLayerKernelTest extends KernelTestBase {
     $this->setupEmptyDataLayer();
     $this->setupMockNodeWithTerm();
     $entity_data = _datalayer_get_entity_data($this->node);
-    $this->assertEqual(
-      $this->getExpectedEntityDataArray(),
-      $entity_data
-    );
+    $this->assertEquals($this->getExpectedEntityDataArray(), $entity_data);
   }
 
   /**
