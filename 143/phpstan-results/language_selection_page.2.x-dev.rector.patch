diff --git a/src/EventSubscriber/LanguageSelectionPageSubscriber.php b/src/EventSubscriber/LanguageSelectionPageSubscriber.php
index b73c152..55a25b4 100644
--- a/src/EventSubscriber/LanguageSelectionPageSubscriber.php
+++ b/src/EventSubscriber/LanguageSelectionPageSubscriber.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\language_selection_page\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -14,7 +15,6 @@ use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationSelected;
 use Drupal\language_selection_page\Plugin\LanguageNegotiation\LanguageNegotiationLanguageSelectionPage;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -39,7 +39,7 @@ final class LanguageSelectionPageSubscriber implements EventSubscriberInterface
   /**
    * The event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent
+   * @var \Symfony\Component\HttpKernel\Event\ResponseEvent
    */
   private $event;
 
@@ -102,13 +102,13 @@ final class LanguageSelectionPageSubscriber implements EventSubscriberInterface
   /**
    * Event callback.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event object.
    *
    * @return bool
    *   Returns FALSE.
    */
-  public function redirectToLanguageSelectionPage(FilterResponseEvent $event) {
+  public function redirectToLanguageSelectionPage(ResponseEvent $event) {
     $this->event = $event;
     $config = $this->configFactory->get('language_selection_page.negotiation');
 
diff --git a/tests/src/Functional/LanguageSelectionPageConditionTest.php b/tests/src/Functional/LanguageSelectionPageConditionTest.php
index 20e49ca..2ce0715 100644
--- a/tests/src/Functional/LanguageSelectionPageConditionTest.php
+++ b/tests/src/Functional/LanguageSelectionPageConditionTest.php
@@ -52,23 +52,26 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('search_form_block', ['label' => 'Search']);
     $admin = $this->drupalCreateUser([], NULL, TRUE);
     $this->drupalLogin($admin);
     $this->drupalCreateContentType(['type' => 'page']);
+    $this->drupalGet('admin/config/regional/language/add');
     // Create FR.
-    $this->drupalPostForm('admin/config/regional/language/add', [
+    $this->submitForm([
       'predefined_langcode' => 'fr',
     ], 'Add language');
+    $this->drupalGet('admin/config/regional/language/detection/url');
     // Set prefixes to en and fr.
-    $this->drupalPostForm('admin/config/regional/language/detection/url', [
+    $this->submitForm([
       'prefix[en]' => 'en',
       'prefix[fr]' => 'fr',
     ], 'Save configuration');
+    $this->drupalGet('admin/config/regional/language/detection');
     // Set up URL and language selection page methods.
-    $this->drupalPostForm('admin/config/regional/language/detection', [
+    $this->submitForm([
       'language_interface[enabled][language-selection-page]' => 1,
       'language_interface[enabled][language-url]' => 1,
     ], 'Save settings');
@@ -108,46 +111,44 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
 
     // Add node to blacklisted paths.
     $blacklisted_paths = '/admin/*' . \PHP_EOL . '/node/' . $node->id();
-    $this->drupalPostForm(
-      'admin/config/regional/language/detection/language_selection_page',
-      [
-        'blacklisted_paths' => $blacklisted_paths,
-      ],
-      'Save configuration'
-    );
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm([
+      'blacklisted_paths' => $blacklisted_paths,
+    ], 'Save configuration');
 
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageNotLoaded();
 
     // Add node to blacklisted paths (in the middle).
     $blacklisted_paths = '/admin/*' . \PHP_EOL . '/node/' . $node->id() . \PHP_EOL . '/bar';
-    $this->drupalPostForm(
-      'admin/config/regional/language/detection/language_selection_page',
-      [
-        'blacklisted_paths' => $blacklisted_paths,
-      ],
-      'Save configuration'
-    );
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm([
+      'blacklisted_paths' => $blacklisted_paths,
+    ], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     // @todo fix this test
     $this->assertLanguageSelectionPageNotLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Add string that contains node, but not node itself.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar' . \PHP_EOL . '/bar'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar' . \PHP_EOL . '/bar'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Add string that starts with node, but not node itself.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Test front page.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*'], 'Save configuration');
     $this->drupalGet('<front>');
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('en/admin/config/regional/language/detection/language_selection_page');
 
-    $this->drupalPostForm('en/admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*' . \PHP_EOL . '<front>'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*' . \PHP_EOL . '<front>'], 'Save configuration');
     $this->drupalGet('<front>');
     $this->assertLanguageSelectionPageNotLoaded();
 
@@ -161,9 +162,10 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $node = $this->drupalCreateNode();
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/url');
 
     // Set prefixes to fr only.
-    $this->drupalPostForm('admin/config/regional/language/detection/url', [
+    $this->submitForm([
       'prefix[en]' => '',
       'prefix[fr]' => 'fr',
     ], 'Save configuration');
@@ -173,7 +175,8 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     // Look for "You should add a path prefix to English language if you want
     // to have it enabled in the Language Selection Page.".
     $this->assertSession()->pageTextContains('language if you want to have it enabled in the Language Selection Page');
-    $this->drupalPostForm('admin/config/regional/language/detection/url', [
+    $this->drupalGet('admin/config/regional/language/detection/url');
+    $this->submitForm([
       'prefix[en]' => 'en',
       'prefix[fr]' => 'fr',
     ], 'Save configuration');
@@ -187,8 +190,9 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
    * Test the "ignore language neutral" condition.
    */
   public function testIgnoreLanguageNeutral() {
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
     // Enable ignore language paths.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['ignore_neutral' => 1], 'Save configuration');
+    $this->submitForm(['ignore_neutral' => 1], 'Save configuration');
 
     // Create translatable node.
     $translatable_node1 = $this->drupalCreateNode(['langcode' => 'fr']);
@@ -212,9 +216,10 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $this->assertLanguageSelectionPageNotLoaded();
     // Turn on translatability of the content type.
     $this->drupalPostform('admin/structure/types/manage/page', ['language_configuration[content_translation]' => 1], 'Save content type');
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Disable ignore language paths.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['ignore_neutral' => 0], 'Save configuration');
+    $this->submitForm(['ignore_neutral' => 0], 'Save configuration');
     $this->drupalGet('node/' . $untranslatable_node1->id());
     $this->assertLanguageSelectionPageLoaded();
 
@@ -241,10 +246,11 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
       'language-user',
       'language-user-admin',
     ], array_keys($definitions));
+    $this->drupalGet('admin/config/regional/language/detection');
 
     // Configure the test negotiator to come before the language selection
     // page and disable the URL negotiator.
-    $this->drupalPostForm('admin/config/regional/language/detection', [
+    $this->submitForm([
       'language_interface[enabled][language-selection-page-test-negotiator]' => 1,
       'language_interface[weight][language-selection-page-test-negotiator]' => -10,
       'language_interface[enabled][language-selection-page]' => 1,
@@ -270,7 +276,8 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
    */
   public function testPageTitle() {
     $title = 'adJKFD#@H5864193177';
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['title' => $title], 'Save configuration');
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm(['title' => $title], 'Save configuration');
     $node = $this->drupalCreateNode();
 
     $this->drupalGet('node/' . $node->id());
@@ -287,8 +294,9 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $node = $this->drupalCreateNode();
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['path' => '/test'], 'Save configuration');
+    $this->submitForm(['path' => '/test'], 'Save configuration');
     // @todo uncomment and fix
     /*
     $this->drupalGet('node/' . $node->id());
@@ -316,13 +324,15 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $node = $this->drupalCreateNode();
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['type' => 'block'], 'Save configuration');
+    $this->submitForm(['type' => 'block'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageNotLoaded();
     $this->assertSession()->pageTextNotContains('Language Selection Page block');
+    $this->drupalGet('admin/structure/block/add/language-selection-page/stark');
 
-    $this->drupalPostForm('admin/structure/block/add/language-selection-page/stark', ['region' => 'content'], 'Save block');
+    $this->submitForm(['region' => 'content'], 'Save block');
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->pageTextContains('Language Selection Page block');
     $this->assertLanguageSelectionPageLoaded();
@@ -334,20 +344,23 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
       '/admin*',
       '/node/' . $node->id(),
     ]);
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => $blacklisted_paths], 'Save configuration');
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm(['blacklisted_paths' => $blacklisted_paths], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->pageTextNotContains('Language Selection Page block');
     $this->assertLanguageSelectionPageNotLoaded();
     $this->resetConfiguration();
+    $this->drupalGet('en/admin/config/regional/language/detection/language_selection_page');
 
     // Test template only.
-    $this->drupalPostForm('en/admin/config/regional/language/detection/language_selection_page', ['type' => 'standalone'], 'Save configuration');
+    $this->submitForm(['type' => 'standalone'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
     $this->assertSession()->responseNotContains('<h2>Search</h2>');
+    $this->drupalGet('en/admin/config/regional/language/detection/language_selection_page');
 
     // Test template in theme.
-    $this->drupalPostForm('en/admin/config/regional/language/detection/language_selection_page', ['type' => 'embedded'], 'Save configuration');
+    $this->submitForm(['type' => 'embedded'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
     $this->assertSession()->responseContains('<h2>Search</h2>');
