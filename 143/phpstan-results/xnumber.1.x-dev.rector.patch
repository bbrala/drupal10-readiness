diff --git a/src/Tests/XnumberFieldTest.php b/src/Tests/XnumberFieldTest.php
index 37d9f14..0fdd2fc 100644
--- a/src/Tests/XnumberFieldTest.php
+++ b/src/Tests/XnumberFieldTest.php
@@ -25,7 +25,7 @@ class XnumberFieldTest extends BrowserTestBase {
   /**
    * Set up the test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser([
       'view test entity',
@@ -76,7 +76,7 @@ class XnumberFieldTest extends BrowserTestBase {
       'indexes' => [],
       'foreign keys' => [],
     ];
-    $this->assertEqual($storage->getSchema(), $expected);
+    $this->assertEquals($storage->getSchema(), $expected);
     $id = $this->displaySubmitAssertForm($settings);
 
     // Try to set a value below the minimum value.
@@ -84,32 +84,32 @@ class XnumberFieldTest extends BrowserTestBase {
     $edit = [
       "{$field_name}[0][value]" => $min - 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('%name must be higher than or equal to %minimum.', ['%name' => $field_name, '%minimum' => $min]), 'Correctly failed to save integer value less than minimum allowed value.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('%name must be higher than or equal to %minimum.', ['%name' => $field_name, '%minimum' => $min]));
 
     // Try to set a decimal value.
     $this->drupalGet('entity_test/add');
     $edit = [
       "{$field_name}[0][value]" => $min + 0.5,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('%name is not a valid number.', ['%name' => $field_name]), 'Correctly failed to save decimal value to integer field.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('%name is not a valid number.', ['%name' => $field_name]));
 
     // Try to set a value above the maximum value.
     $this->drupalGet('entity_test/add');
     $edit = [
       "{$field_name}[0][value]" => $max + 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('%name must be lower than or equal to %maximum.', ['%name' => $field_name, '%maximum' => $max]), 'Correctly failed to save integer value greater than maximum allowed value.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('%name must be lower than or equal to %maximum.', ['%name' => $field_name, '%maximum' => $max]));
 
     // Try to set a wrong integer value.
     $this->drupalGet('entity_test/add');
     $edit = [
       "{$field_name}[0][value]" => '20-40',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('%name must be a number.', ['%name' => $field_name]), 'Correctly failed to save wrong integer value.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
 
     // Test for the content attribute when prefix and suffix are set to display
     // or not on a field display formatter (sic!) setting. Note that only prefix
@@ -146,10 +146,10 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => (string) $value,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       preg_match('|entity_test/manage/(\d+)|', $this->url, $match);
       $id = isset($match[1]) ? $match[1] : '';
-      $this->assertText(t('entity_test @id has been created.', ['@id' => $id]), 'Entity was created');
+      $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));
       $this->drupalGet('entity_test/' . $id);
       $this->{$method}('//div[@content="' . $value . '"]', $base_settings['prefix'] . $value . $base_settings['suffix'], 'The "content" attribute has ' . $not . ' been set to the value of the field, and the ' . $base_settings['prefix'] . ' and ' . $base_settings['suffix'] . ' set on field base settings are ' . $not . ' being displayed.');
     }
@@ -186,10 +186,10 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => (string) ($value + $wrong_step),
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       // If step == 1 then any int value might be added within min-max range.
       if ($step != 1) {
-        $this->assertRaw(t('%name is not a valid number.', ['%name' => $field_name]), 'Correctly failed to save integer value ' . $edit["{$field_name}[0][value]"] . ' added with the wrong step ' . $wrong_step . ' instead of ' . $step . '.');
+        $this->assertSession()->responseContains(t('%name is not a valid number.', ['%name' => $field_name]));
       }
     }
   }
@@ -232,8 +232,8 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => $wrong_entry,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
-      $this->assertRaw(t('%name must be a number.', ['%name' => $field_name]), 'Correctly failed to save decimal value with more than one decimal point.');
+      $this->submitForm($edit, t('Save'));
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }
 
     // Try to create entries with minus sign not in the first position.
@@ -250,8 +250,8 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => $wrong_entry,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
-      $this->assertRaw(t('%name must be a number.', ['%name' => $field_name]), 'Correctly failed to save decimal value with minus sign in the wrong position.');
+      $this->submitForm($edit, t('Save'));
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }
 
     // Edit the field settings with new explicit values.
@@ -290,8 +290,8 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => (string) ($value + $wrong_step),
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
-      $this->assertRaw(t('%name is not a valid number.', ['%name' => $field_name]), 'Correctly failed to save decimal value ' . $edit["{$field_name}[0][value]"] . ' added with the wrong step ' . $wrong_step . ' instead of ' . $step . '.');
+      $this->submitForm($edit, t('Save'));
+      $this->assertSession()->responseContains(t('%name is not a valid number.', ['%name' => $field_name]));
     }
   }
 
@@ -321,7 +321,7 @@ class XnumberFieldTest extends BrowserTestBase {
     // expected. Also, formatting/rounding algorithm is not persistant and
     // looks like as random.
     $this->drupalGet('entity_test/' . $id);
-    $this->assertRaw(round($value, 2));
+    $this->assertSession()->responseContains(round($value, 2));
 
     // Try to create entries with more than one decimal separator; assert fail.
     $wrong_entries = [
@@ -337,8 +337,8 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => $wrong_entry,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
-      $this->assertRaw(t('%name must be a number.', ['%name' => $field_name]), 'Correctly failed to save float value with more than one decimal point.');
+      $this->submitForm($edit, t('Save'));
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }
 
     // Try to create entries with minus sign not in the first position.
@@ -355,8 +355,8 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => $wrong_entry,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
-      $this->assertRaw(t('%name must be a number.', ['%name' => $field_name]), 'Correctly failed to save float value with minus sign in the wrong position.');
+      $this->submitForm($edit, t('Save'));
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }
 
     // Edit the field settings with the new explicit values.
@@ -391,8 +391,8 @@ class XnumberFieldTest extends BrowserTestBase {
       $edit = [
         "{$field_name}[0][value]" => (string) ($value + $wrong_step),
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
-      $this->assertRaw(t('%name is not a valid number.', ['%name' => $field_name]), 'Correctly failed to save float value ' . $edit["{$field_name}[0][value]"] . ' added with the wrong step ' . $wrong_step . ' instead of ' . $step . '.');
+      $this->submitForm($edit, t('Save'));
+      $this->assertSession()->responseContains(t('%name is not a valid number.', ['%name' => $field_name]));
     }
   }
 
@@ -494,13 +494,13 @@ class XnumberFieldTest extends BrowserTestBase {
       "fields[${float_field}][settings_edit_form][settings][thousand_separator]" => $thousand_separator,
     ];
     $this->drupalPostAjaxForm(NULL, $edit, "${float_field}_plugin_settings_update");
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
 
     // Check number_decimal and number_unformatted formatters behavior.
     $this->drupalGet('node/' . $node->id());
     $float_formatted = number_format($random_float, $scale, $decimal_separator, $thousand_separator);
-    $this->assertRaw("$prefix$float_formatted$suffix", 'Prefix and suffix added');
-    $this->assertRaw((string) $random_integer);
+    $this->assertSession()->responseContains("$prefix$float_formatted$suffix");
+    $this->assertSession()->responseContains((string) $random_integer);
 
     // Configure the number_decimal formatter.
     \Drupal::service('entity_display.repository')->getViewDisplay('node', $type, 'default')
@@ -518,13 +518,13 @@ class XnumberFieldTest extends BrowserTestBase {
       "fields[${integer_field}][settings_edit_form][settings][thousand_separator]" => $thousand_separator,
     ];
     $this->drupalPostAjaxForm(NULL, $edit, "${integer_field}_plugin_settings_update");
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
 
     // Check number_integer formatter behavior.
     $this->drupalGet('node/' . $node->id());
 
     $integer_formatted = number_format($random_integer, 0, '', $thousand_separator);
-    $this->assertRaw($integer_formatted, 'Random integer formatted');
+    $this->assertSession()->responseContains($integer_formatted);
   }
 
   /**
@@ -563,15 +563,16 @@ class XnumberFieldTest extends BrowserTestBase {
     $edit = [
       'settings[min]' => $minimum_value,
     ];
-    $this->drupalPostForm($field_configuration_url, $edit, t('Save settings'));
+    $this->drupalGet($field_configuration_url);
+    $this->submitForm($edit, t('Save settings'));
     // Check if there is error messages.
-    $this->assertNoRaw(t('%name is not a valid number.', ['%name' => t('Minimum')]), 'Saved ' . gettype($minimum_value) . '  value as minimal value on a ' . $field->getType() . ' field');
-    $this->assertNoRaw(t('%name must be a number.', ['%name' => t('Step')]), 'Step ' . $field->getSettings()['step'] . ' is numeric.');
+    $this->assertSession()->responseNotContains(t('%name is not a valid number.', ['%name' => t('Minimum')]));
+    $this->assertSession()->responseNotContains(t('%name must be a number.', ['%name' => t('Step')]));
     // Check if a success message is shown.
-    $this->assertRaw(t('Saved %label configuration.', ['%label' => $field->getLabel()]));
+    $this->assertSession()->responseContains(t('Saved %label configuration.', ['%label' => $field->getLabel()]));
     // Check if the minimum value was actually set.
     $this->drupalGet($field_configuration_url);
-    $this->assertFieldById('edit-settings-min', $minimum_value, 'Minimal ' . gettype($minimum_value) . '  value was set on a ' . $field->getType() . ' field.');
+    $this->assertSession()->fieldValueEquals('edit-settings-min', $minimum_value);
   }
 
   /**
@@ -744,18 +745,18 @@ class XnumberFieldTest extends BrowserTestBase {
     extract($settings);
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     $this->assertNumberFieldAttributes($settings);
 
     // Add the $value and submit the field.
     $edit = [
       "{$field_name}[0][value]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->url, $match);
     // Check $match[] for existance and let the test fail. No exceptions thrown.
     $id = isset($match[1]) ? $match[1] : '';
-    $this->assertText(t('entity_test @id has been created.', ['@id' => $id]), 'Entity was created');
+    $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));
     $this->assertNumberAfterFormSubmit($settings);
 
     return $id;
@@ -766,16 +767,16 @@ class XnumberFieldTest extends BrowserTestBase {
    */
   private function assertNumberFieldAttributes($settings) {
     extract($settings);
-    $this->assertRaw('placeholder="' . $placeholder . '"');
-    $this->assertRaw('min="' . $min . '"');
-    $this->assertRaw('max="' . $max . '"');
-    $this->assertRaw('value="' . $default_value . '"', 'Raw default value "' . $default_value . '" found');
-    $this->assertRaw('step="' . $step . '"');
+    $this->assertSession()->responseContains('placeholder="' . $placeholder . '"');
+    $this->assertSession()->responseContains('min="' . $min . '"');
+    $this->assertSession()->responseContains('max="' . $max . '"');
+    $this->assertSession()->responseContains('value="' . $default_value . '"');
+    $this->assertSession()->responseContains('step="' . $step . '"');
     if (!empty($prefix)) {
-      $this->assertText($prefix);
+      $this->assertSession()->pageTextContains($prefix);
     }
     if (!empty($siffix)) {
-      $this->assertText($siffix);
+      $this->assertSession()->pageTextContains($siffix);
     };
   }
 
@@ -785,10 +786,10 @@ class XnumberFieldTest extends BrowserTestBase {
   private function assertNumberAfterFormSubmit($settings) {
     extract($settings);
     // Check common errors and as a consiquence value="$value" is left in place.
-    $this->assertNoRaw(t('%name must be higher than or equal to %minimum.', ['%name' => $field_name, '%minimum' => $min]), 'Submitted value ' . $value . ' higher than or equal to minimum ' . $min);
-    $this->assertNoRaw(t('%name must be lower than or equal to %maximum.', ['%name' => $field_name, '%maximum' => $max]), 'Submitted value ' . $value . ' lower than or equal to maximum ' . $max);
-    $this->assertNoRaw(t('%name must be a number.', ['%name' => $field_name]), 'Submitted value ' . $value . ' is numeric.');
-    $this->assertNoRaw(t('%name is not a valid number.', ['%name' => $field_name]), 'Submitted value ' . $value . ' is valid number.');
+    $this->assertSession()->responseNotContains(t('%name must be higher than or equal to %minimum.', ['%name' => $field_name, '%minimum' => $min]));
+    $this->assertSession()->responseNotContains(t('%name must be lower than or equal to %maximum.', ['%name' => $field_name, '%maximum' => $max]));
+    $this->assertSession()->responseNotContains(t('%name must be a number.', ['%name' => $field_name]));
+    $this->assertSession()->responseNotContains(t('%name is not a valid number.', ['%name' => $field_name]));
   }
 
 }
diff --git a/xnumber.info.yml b/xnumber.info.yml
index 167fb72..a03bd2c 100644
--- a/xnumber.info.yml
+++ b/xnumber.info.yml
@@ -1,7 +1,7 @@
 name: 'Extended Number Field'
 type: module
 description: 'Adds extended xinteger, xdecimal, xfloat field types and xnumber form display widget.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.1 || ^10
 package: Field types
 dependencies:
   - drupal:field_ui
