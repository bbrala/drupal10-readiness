modules/contrib/permissions_by_term/modules/permissions_by_entity/permissions_by_entity.module
modules/contrib/permissions_by_term/modules/permissions_by_entity/tests/modules/pbt_entity_test/src/EventSubscriber/MockedDynamicPageCacheSubscriber.php
modules/contrib/permissions_by_term/src/Factory/NodeAccessRecordFactory.php
modules/contrib/permissions_by_term/tests/src/Kernel/TermHandlerTest.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/src/Event/EntityFieldValueAccessDeniedEvent.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/src/Event/PermissionsByEntityEvents.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/src/EventSubscriber/PermissionsByEntityKernelEventSubscriber.php
modules/contrib/permissions_by_term/src/Form/SettingsForm.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/src/EventSubscriber/RemoveEntityFromViewEventSubscriber.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/src/Service/AccessChecker.php
modules/contrib/permissions_by_term/src/Listener/KernelEventListener.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/src/Service/AccessCheckerInterface.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/src/Service/CheckedEntityCache.php
modules/contrib/permissions_by_term/modules/permissions_by_entity/tests/modules/pbt_entity_test/src/Entity/TestEntity.php
modules/contrib/permissions_by_term/src/Model/NidToTidsModel.php
modules/contrib/permissions_by_term/src/Model/NodeAccessRecordModel.php
modules/contrib/permissions_by_term/permissions_by_term.install
modules/contrib/permissions_by_term/src/Service/AccessCheck.php
modules/contrib/permissions_by_term/permissions_by_term.module
modules/contrib/permissions_by_term/src/Service/AccessStorage.php
modules/contrib/permissions_by_term/src/Cache/AccessResultCache.php
modules/contrib/permissions_by_term/src/Cache/CacheInvalidator.php
modules/contrib/permissions_by_term/src/Cache/KeyValueCache.php
modules/contrib/permissions_by_term/src/Commands/CreateFixtureNodesForTestingCommands.php
modules/contrib/permissions_by_term/src/Service/NodeAccess.php
modules/contrib/permissions_by_term/src/Commands/PermissionsByTermRebuildCommands.php
modules/contrib/permissions_by_term/src/Controller/NodeEntityBundleController.php
modules/contrib/permissions_by_term/src/Service/NodeEntityBundleInfo.php
modules/contrib/permissions_by_term/src/Controller/PermissionsByTermController.php
modules/contrib/permissions_by_term/src/Service/TermHandler.php
modules/contrib/permissions_by_term/src/Entity/Config/Settings.php
modules/contrib/permissions_by_term/src/Event/PermissionsByTermDeniedEvent.php
modules/contrib/permissions_by_term/tests/src/Behat/Context/permissions_by_term.behat.inc
modules/contrib/permissions_by_term/tests/src/Kernel/AccessCheckTest.php
modules/contrib/permissions_by_term/tests/src/Kernel/AccessStorageTest.php
modules/contrib/permissions_by_term/tests/src/Kernel/MultilingualTest.php
modules/contrib/permissions_by_term/tests/src/Kernel/NodeAccessRecordsTest.php
modules/contrib/permissions_by_term/tests/src/Kernel/NodeEntityBundleInfoTest.php
modules/contrib/permissions_by_term/tests/src/Kernel/PBTKernelTestBase.php
modules/contrib/permissions_by_term/tests/src/Kernel/PermissionModeTest.php

11 files with changes
=====================

1) modules/contrib/permissions_by_term/tests/src/Kernel/TermHandlerTest.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/permissions_by_term/src/Event/PermissionsByTermDeniedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permissions_by_term\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class PermissionsByTermDeniedEvent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/permissions_by_term/permissions_by_term.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\User;
 /**
  * @file
  * Allows access to terms in a vocabulary to be limited by user or role.
@@ @@

     $aAllowedUsers = $access_storage->getAllowedUserIds($termId, $langcode);
     if (!empty($aAllowedUsers)) {
-      $aAllowedUsers = \Drupal\user\Entity\User::loadMultiple($aAllowedUsers);
+      $aAllowedUsers = User::loadMultiple($aAllowedUsers);
       $sUserFormValue = $access_storage->getUserFormValue($aAllowedUsers);
     }
     else {
@@ @@
       }
     }

-    $viewFilePath = drupal_get_path('module', 'permissions_by_term') . '/src/View/node-details.html.twig';
+    $viewFilePath = \Drupal::service('extension.list.module')->getPath('permissions_by_term') . '/src/View/node-details.html.twig';
     /**
      * @var \Drupal\permissions_by_term\Service\NodeEntityBundleInfo $nodeEntityBundleInfo
      */
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


4) modules/contrib/permissions_by_term/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('test_entity');
     $this->installEntitySchema('user');
@@ @@
   public function testAnonymousCanViewPublishedNodesWithoutTermPermissions(): void {
     $this->assertTrue($this->nodes['node_published']->isPublished());
     $this->assertEquals(AccessResult::neutral(), permissions_by_entity_entity_access($this->nodes['node_published'], 'view', $this->anonymousUser));
-    $this->assertNotEqual(AccessResult::forbidden(), $this->nodes['node_published']->access('view', $this->anonymousUser, TRUE));
+    $this->assertNotEquals(AccessResult::forbidden(), $this->nodes['node_published']->access('view', $this->anonymousUser, TRUE));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/permissions_by_term/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installSchema('system', ['key_value_expire', 'sequences']);
@@ @@
     $dispatcher = $this->getPopulatedDispatcher();

     $this->expectException(AccessDeniedHttpException::class);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }

   /**
@@ @@
     $dispatcher = $this->getPopulatedDispatcher();

     $this->container->get('current_user')->setAccount($this->terms['term_user_a']['user']);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }

   /**
@@ @@

     // Execute first request for allowed user.
     $this->container->get('current_user')->setAccount($this->terms['term_user_a']['user']);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
-    $dispatcher->dispatch(KernelEvents::RESPONSE, $this->getCacheableResponseEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
+    $dispatcher->dispatch($this->getCacheableResponseEvent(), KernelEvents::RESPONSE);

     // Reset the cache to emulate a new request.
     $this->container->get('permissions_by_entity.checked_entity_cache')->clear();
@@ @@
     // Execute second request for disallowed user.
     $this->container->get('current_user')->setAccount($this->terms['term_user_b']['user']);
     $this->expectException(AccessDeniedHttpException::class);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/permissions_by_term/tests/src/Kernel/PBTKernelTestBase.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/permissions_by_term/tests/src/Kernel/NodeEntityBundleInfoTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->nodeEntityBundleInfo = $this->container->get('permissions_by_term.node_entity_bundle_info');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/permissions_by_term/tests/src/Kernel/MultilingualTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->nodeEntityBundleInfo = $this->container->get('permissions_by_term.node_entity_bundle_info');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/permissions_by_term/tests/src/Kernel/AccessStorageTest.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }

   private function mockFormState(string $langcode, array $accessOutput) {
-    $formStateStub = $this->getMockBuilder(FormStateInterface::class)
-      ->getMock();
+    $formStateStub = $this->createMock(FormStateInterface::class);

     $map = [
       [
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/permissions_by_term/src/Service/AccessCheck.php:234

    ---------- begin diff ----------
@@ @@

   private function dispatchDeniedEvent($nodeId): void {
     $accessDeniedEvent = new PermissionsByTermDeniedEvent($nodeId);
-    $this->eventDispatcher->dispatch(PermissionsByTermDeniedEvent::NAME, $accessDeniedEvent);
+    $this->eventDispatcher->dispatch($accessDeniedEvent, PermissionsByTermDeniedEvent::NAME);
   }

   public function isAnyTaxonomyTermFieldDefinedInNodeType(string $nodeType) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


11) modules/contrib/permissions_by_term/src/Listener/KernelEventListener.php:163

    ---------- begin diff ----------
@@ @@
       $node = $event->getRequest()->attributes->get('node');
       if (!$this->accessCheckService->canUserAccessByNode($node, false, $this->accessStorageService->getLangCode($node->id()))) {
         $accessDeniedEvent = new PermissionsByTermDeniedEvent($node->id());
-        $this->eventDispatcher->dispatch(PermissionsByTermDeniedEvent::NAME, $accessDeniedEvent);
+        $this->eventDispatcher->dispatch($accessDeniedEvent, PermissionsByTermDeniedEvent::NAME);

         if ($this->disabledNodeAccessRecords) {
           $this->pageCacheKillSwitch->trigger();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 11 files have been changed by Rector                                      

