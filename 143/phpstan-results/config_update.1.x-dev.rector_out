modules/contrib/config_update/config_update.module
modules/contrib/config_update/config_update_ui/tests/src/Functional/ConfigProfileOverridesTest.php
modules/contrib/config_update/config_update_ui/config_update_ui.drush.inc
modules/contrib/config_update/config_update_ui/config_update_ui.drush_testing.inc
modules/contrib/config_update/config_update_ui/config_update_ui.module
modules/contrib/config_update/config_update_ui/src/Commands/ConfigUpdateUiCommands.php
modules/contrib/config_update/config_update_ui/tests/src/Functional/ConfigUpdateTest.php
modules/contrib/config_update/config_update_ui/src/ConfigUpdateUiCliService.php
modules/contrib/config_update/config_update_ui/src/Controller/ConfigUpdateController.php
modules/contrib/config_update/config_update_ui/src/Form/ConfigDeleteConfirmForm.php
modules/contrib/config_update/config_update_ui/src/Form/ConfigImportConfirmForm.php
modules/contrib/config_update/config_update_ui/src/Form/ConfigRevertConfirmForm.php
modules/contrib/config_update/src/ConfigDeleteInterface.php
modules/contrib/config_update/src/ConfigDiffInterface.php
modules/contrib/config_update/src/ConfigDiffer.php
modules/contrib/config_update/config_update_ui/src/Logger/ConfigUpdateUiDrush8Logger.php
modules/contrib/config_update/src/ConfigListByProviderInterface.php
modules/contrib/config_update/src/ConfigListInterface.php
modules/contrib/config_update/src/ConfigLister.php
modules/contrib/config_update/src/ConfigListerWithProviders.php
modules/contrib/config_update/src/ConfigRevertEvent.php
modules/contrib/config_update/src/ConfigRevertInterface.php
modules/contrib/config_update/src/ConfigReverter.php
modules/contrib/config_update/tests/src/Unit/ConfigDifferTest.php
modules/contrib/config_update/tests/src/Unit/ConfigListerTest.php
modules/contrib/config_update/tests/src/Unit/ConfigReverterTest.php
modules/contrib/config_update/tests/src/Unit/ConfigUpdateUnitTestBase.php

9 files with changes
====================

1) modules/contrib/config_update/tests/src/Unit/ConfigUpdateUnitTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_update\Unit;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Tests\UnitTestCase;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Base class for unit testing in Config Update Manager.
@@ @@
     $definitions = [];
     $map = [];
     foreach ($this->entityDefinitionInformation as $info) {
-      $def = $this->getMockBuilder('Drupal\Core\Config\Entity\ConfigEntityTypeInterface')->getMock();
+      $def = $this->createMock('Drupal\Core\Config\Entity\ConfigEntityTypeInterface');
       $def
         ->expects($this->any())
         ->method('getConfigPrefix')
@@ @@

     // Add in a content entity definition, which shouldn't be recognized by the
     // config lister class.
-    $def = $this->getMockBuilder('Drupal\Core\Entity\ContentEntityTypeInterface')->getMock();
+    $def = $this->createMock('Drupal\Core\Entity\ContentEntityTypeInterface');
     $def
       ->expects($this->any())
       ->method('entityClassImplements')
@@ @@
       ->willReturn(FALSE);
     $definitions['content_entity'] = $def;

-    $manager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
     $manager
       ->method('getDefinitions')
       ->willReturn($definitions);
@@ @@
    */
   protected function getConfigStorageMock($type) {
     if ($type == 'active') {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\StorageInterface')->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\StorageInterface');

       // Various tests assume various values of configuration that need to be
       // read from active storage.
@@ @@
         ->will($this->returnValueMap($this->configStorageActiveInfo));
     }
     elseif ($type == 'extension') {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\ExtensionInstallStorage')->disableOriginalConstructor()->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\ExtensionInstallStorage');

       $value = [];
       foreach ($this->configStorageExtensionInfo[2][1] as $item) {
@@ @@

     }
     else {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\ExtensionInstallStorage')->disableOriginalConstructor()->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\ExtensionInstallStorage');

       $value = [];
       foreach ($this->configStorageOptionalInfo[2][1] as $item) {
@@ @@
    * Creates a mock module handler for the test.
    */
   protected function getModuleHandlerMock() {
-    $manager = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
     $manager->method('getModuleList')
       ->willReturn(['foo_module' => '', 'standard' => '']);

@@ @@
    * Creates a mock theme handler for the test.
    */
   protected function getThemeHandlerMock() {
-    $manager = $this->getMockBuilder('Drupal\Core\Extension\ThemeHandlerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Extension\ThemeHandlerInterface');
     $manager->method('listInfo')
       ->willReturn(['foo_theme' => '']);
     return $manager;
@@ @@
    * Creates a mock string translation class for the test.
    */
   protected function getTranslationMock() {
-    $translation = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationInterface')->getMock();
+    $translation = $this->createMock('Drupal\Core\StringTranslation\TranslationInterface');
     $translation
       ->method('translateString')
       ->will($this->returnCallback([$this, 'mockTranslate']));
@@ @@
    * Stores dispatched events in ConfigUpdateUnitTestBase::dispatchedEvents.
    */
   protected function getEventDispatcherMock() {
-    $event = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')->getMock();
+    $event = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');
     $event
       ->method('dispatch')
       ->will($this->returnCallback([$this, 'mockDispatch']));
@@ @@
    * Creates a mock config factory class for the test.
    */
   protected function getConfigFactoryMock() {
-    $config = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')->getMock();
+    $config = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
     $config
       ->method('getEditable')
       ->will($this->returnCallback([$this, 'mockGetEditable']));
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/config_update/tests/src/Unit/ConfigReverterTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->configReverter = new ConfigReverter(
       $this->getEntityManagerMock(),
       $this->getConfigStorageMock('active'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_update/tests/src/Unit/ConfigListerTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $lister = $this->getMockBuilder('Drupal\config_update\ConfigListerWithProviders')
       ->setConstructorArgs([
         $this->getEntityManagerMock(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/config_update/tests/src/Unit/ConfigDifferTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->configDiffer = new ConfigDiffer($this->getTranslationMock());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_update/src/ConfigReverter.php:112

    ---------- begin diff ----------
@@ @@

     // Trigger an event notifying of this change.
     $event = new ConfigRevertEvent($type, $name);
-    $this->dispatcher->dispatch(ConfigRevertInterface::IMPORT, $event);
+    $this->dispatcher->dispatch($event, ConfigRevertInterface::IMPORT);

     return TRUE;
   }
@@ @@

     // Trigger an event notifying of this change.
     $event = new ConfigRevertEvent($type, $name);
-    $this->dispatcher->dispatch(ConfigRevertInterface::REVERT, $event);
+    $this->dispatcher->dispatch($event, ConfigRevertInterface::REVERT);

     return TRUE;
   }
@@ @@

     // Trigger an event notifying of this change.
     $event = new ConfigRevertEvent($type, $name);
-    $this->dispatcher->dispatch(ConfigDeleteInterface::DELETE, $event);
+    $this->dispatcher->dispatch($event, ConfigDeleteInterface::DELETE);
     return TRUE;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


6) modules/contrib/config_update/src/ConfigRevertEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_update;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event context class for configuration revert/import events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/config_update/src/ConfigLister.php:197

    ---------- begin diff ----------
@@ @@
    *   List of config items provided by this extension.
    */
   protected function listProvidedItems($type, $name, $do_optional = FALSE) {
-    $pathname = drupal_get_filename($type, $name);
+    $pathname = \Drupal::service('extension.path.resolver')->getPathname($type, $name);
     $component = new Extension(\Drupal::root(), $type, $pathname);
     if ($do_optional) {
       $names = $this->extensionOptionalConfigStorage->getComponentNames([$component]);
    ----------- end diff -----------

Applied rules:
 * DrupalGetFilenameRector
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/config_update/config_update_ui/tests/src/Functional/ConfigUpdateTest.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create user and log in.
@@ @@
     // both the search page config type and user module.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $inactive = ['search.page.user_search' => 'Users'];
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], $inactive);
@@ @@
     // report to make sure we are importing the right config.
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->clickLink('Import from source');
-    $this->drupalPostForm(NULL, [], 'Import');
+    $this->submitForm([], 'Import');
     $session = $this->assertSession();
     $session->pageTextContains('has been imported');
     $this->assertNoReport();
@@ @@
     // Test importing again, this time using the Drush import command.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $inactive = ['search.page.user_search' => 'Users'];
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], $inactive);
@@ @@
     // Edit the node search page from the search UI and verify report.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'New label',
       'path'  => 'new_path',
     ], 'Save search page');
@@ @@
     $session->pageTextContains('Search page');
     $session->pageTextContains('node_search');
     $session->pageTextContains('Customizations will be lost. This action cannot be undone');
-    $this->drupalPostForm(NULL, [], 'Revert');
+    $this->submitForm([], 'Revert');
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], []);

@@ @@
     // Test reverting again, this time using Drush single revert command.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'New label',
       'path'  => 'new_path',
     ], 'Save search page');
@@ @@
     // Test reverting again, this time using Drush multiple revert command.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'New label',
       'path'  => 'new_path',
     ], 'Save search page');
@@ @@
     drush_config_update_ui_config_revert_multiple('type', 'search_page');
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], []);
+    $this->drupalGet('admin/config/search/pages');

     // Add a new search page from the search UI and verify report.
-    $this->drupalPostForm('admin/config/search/pages', [
+    $this->submitForm([
       'search_type' => 'node_search',
     ], 'Add search page');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'test',
       'id'    => 'test',
       'path'  => 'test',
@@ @@
     $session = $this->assertSession();
     $session->pageTextContains('Are you sure');
     $session->pageTextContains('cannot be undone');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $session = $this->assertSession();
     $session->pageTextContains('has been deleted');

@@ @@
     // And verify the report again.
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], []);
+    $this->drupalGet('admin/config/search/pages');

     // Change the search module config and verify the actions work for
     // simple config.
-    $this->drupalPostForm('admin/config/search/pages', [
+    $this->submitForm([
       'minimum_word_size' => 4,
     ], 'Save configuration');
     $changed = ['search.settings' => 'search.settings'];
@@ @@

     $this->drupalGet('admin/config/development/configuration/report/module/search');
     $this->clickLink('Revert to source');
-    $this->drupalPostForm(NULL, [], 'Revert');
+    $this->submitForm([], 'Revert');

     // Verify that the hash was retained in the revert.
     $this->drupalGet('admin/config/development/configuration/single/export/system.simple/search.settings');
@@ @@

     $this->drupalGet('admin/config/development/configuration/report/module/search');
     $this->assertReport('Search module', [], [], [], [], ['added']);
+    $this->drupalGet('admin/config/content/formats/manage/plain_text');

     // Edit the plain_text filter from the filter UI and verify report.
     // The filter_format config type uses a label key other than 'label'.
-    $this->drupalPostForm('admin/config/content/formats/manage/plain_text', [
+    $this->submitForm([
       'name' => 'New label',
     ], 'Save configuration');
     $changed = ['filter.format.plain_text' => 'New label'];
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/config_update/config_update_ui/tests/src/Functional/ConfigProfileOverridesTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create user and log in.
@@ @@
     // Revert and verify that it reverted to the profile version, not the
     // system module version.
     $this->drupalGet('admin/config/development/configuration/report/revert/system.simple/system.theme');
-    $this->drupalPostForm(NULL, [], 'Revert');
+    $this->submitForm([], 'Revert');
     $this->drupalGet('admin/config/development/configuration/single/export/system.simple/system.theme');
     $session = $this->assertSession();
     $session->pageTextContains('admin: seven');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/config_update/config_update_ui/config_update_ui.drush_
         testing.inc" file, due to:                                             
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

 [ERROR] Could not process                                                      
         "modules/contrib/config_update/config_update_ui/src/ConfigUpdateUiCliSe
         rvice.php" file, due to:                                               
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

 [ERROR] Could not process                                                      
         "modules/contrib/config_update/config_update_ui/src/Logger/ConfigUpdate
         UiDrush8Logger.php" file, due to:                                      
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

