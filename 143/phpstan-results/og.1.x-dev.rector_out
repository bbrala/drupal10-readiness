modules/contrib/og/og.api.php
modules/contrib/og/og.module
modules/contrib/og/src/Annotation/OgFields.php
modules/contrib/og/src/Event/GroupCreationEvent.php
modules/contrib/og/src/Annotation/OgGroupResolver.php
modules/contrib/og/src/Cache/Context/OgGroupContextCacheContext.php
modules/contrib/og/src/MembershipManager.php
modules/contrib/og/src/OgMembershipTypeInterface.php
modules/contrib/og/src/Plugin/Action/DeleteOgMembership.php
modules/contrib/og/src/OgMembershipTypeListBuilder.php
modules/contrib/og/src/Plugin/OgDeleteOrphans/Simple.php
modules/contrib/og/tests/modules/og_test/og_test.install
modules/contrib/og/tests/src/Kernel/Action/AddMultipleOgMembershipRolesActionTest.php
modules/contrib/og/tests/src/Kernel/Entity/GroupAudienceTest.php
modules/contrib/og/src/Cache/Context/OgMembershipStateCacheContext.php
modules/contrib/og/src/Event/GroupCreationEventInterface.php
modules/contrib/og/src/Event/OgAdminRoutesEvent.php
modules/contrib/og/src/Cache/Context/OgRoleCacheContext.php
modules/contrib/og/og.install
modules/contrib/og/tests/src/Kernel/Views/OgAdminMembersViewTest.php
modules/contrib/og/tests/src/Unit/OgContextTest.php
modules/contrib/og/tests/modules/og_test/og_test.module
modules/contrib/og/src/Event/OgAdminRoutesEventInterface.php
modules/contrib/og/src/Event/PermissionEvent.php
modules/contrib/og/tests/src/Kernel/Action/AddSingleOgMembershipRoleActionTest.php
modules/contrib/og/tests/modules/og_test/src/EventSubscriber/OgTestEventSubscriber.php
modules/contrib/og/src/OgMembershipViewsData.php
modules/contrib/og/src/OgResolvedGroupCollection.php
modules/contrib/og/src/Plugin/OgFields/AccessField.php
modules/contrib/og/src/ContextProvider/OgContext.php
modules/contrib/og/og.post_update.php
modules/contrib/og/tests/modules/og_test/src/Plugin/OgFields/EntityRestrictedField.php
modules/contrib/og/src/Plugin/OgFields/AudienceField.php
modules/contrib/og/tests/src/Functional/GroupSubscribeFormatterTest.php
modules/contrib/og/src/Plugin/Action/PendingOgMembership.php
modules/contrib/og/src/Plugin/Action/RemoveMultipleOgMembershipRoles.php
modules/contrib/og/src/Plugin/Action/RemoveSingleOgMembershipRole.php
modules/contrib/og/src/Plugin/OgGroupResolver/RequestQueryArgumentResolver.php
modules/contrib/og/og.views.inc
modules/contrib/og/src/OgResolvedGroupCollectionInterface.php
modules/contrib/og/src/Controller/OgAdminMembersController.php
modules/contrib/og/src/OgRoleInterface.php
modules/contrib/og/tests/src/Traits/OgMembershipCreationTrait.php
modules/contrib/og/tests/src/Kernel/Action/ApprovePendingOgMembershipActionTest.php
modules/contrib/og/og_ui/og_ui.module
modules/contrib/og/src/Plugin/Action/UnblockOgMembership.php
modules/contrib/og/src/OgRoleManager.php
modules/contrib/og/tests/src/Traits/OgRoleCacheContextTestTrait.php
modules/contrib/og/src/Event/PermissionEventInterface.php
modules/contrib/og/src/Plugin/Block/MemberCountBlock.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgCacheContextTestBase.php
modules/contrib/og/tests/src/Functional/GroupSubscribeTest.php
modules/contrib/og/src/EventSubscriber/OgEventSubscriber.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
modules/contrib/og/tests/src/Unit/OgLocalTaskTest.php
modules/contrib/og/og_ui/src/BundleFormAlter.php
modules/contrib/og/src/Controller/OgAdminRoutesController.php
modules/contrib/og/tests/src/Kernel/Action/BlockOgMembershipActionTest.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgGroupContextCacheContextTest.php
modules/contrib/og/src/Plugin/OgGroupResolver/RouteGroupContentResolver.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
modules/contrib/og/tests/src/Unit/OgResolvedGroupCollectionTest.php
modules/contrib/og/src/Controller/OgAutocompleteController.php
modules/contrib/og/tests/src/Kernel/Action/ChangeMultipleOgMembershipRolesActionTestBase.php
modules/contrib/og/tests/src/Kernel/Entity/GroupMembershipManagerTest.php
modules/contrib/og/src/Plugin/OgGroupResolver/RouteGroupResolver.php
modules/contrib/og/src/Plugin/Block/RecentGroupContentBlock.php
modules/contrib/og/src/OgRoleManagerInterface.php
modules/contrib/og/og_ui/src/Controller/OgUiController.php
modules/contrib/og/src/OgRouteGroupResolverBase.php
modules/contrib/og/src/Plugin/OgGroupResolver/UserGroupAccessResolver.php
modules/contrib/og/src/Controller/SubscriptionController.php
modules/contrib/og/src/Plugin/QueueWorker/DeleteOrphan.php
modules/contrib/og/tests/src/Functional/GroupTabTest.php
modules/contrib/og/og_ui/src/Form/AdminSettingsForm.php
modules/contrib/og/src/MembershipManagerInterface.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
modules/contrib/og/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraint.php
modules/contrib/og/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraintValidator.php
modules/contrib/og/tests/src/Kernel/Action/ChangeOgMembershipActionTestBase.php
modules/contrib/og/src/Og.php
modules/contrib/og/src/Permission.php
modules/contrib/og/src/Element/OgAutocomplete.php
modules/contrib/og/tests/src/Kernel/Action/DeleteOgMembershipActionTest.php
modules/contrib/og/og_ui/tests/src/Functional/BundleFormAlterTest.php
modules/contrib/og/tests/src/Kernel/Action/PendingOgMembershipActionTest.php
modules/contrib/og/tests/src/Kernel/Action/RemoveMultipleOgMembershipRolesActionTest.php
modules/contrib/og/tests/src/Kernel/Action/RemoveSingleOgMembershipRoleActionTest.php
modules/contrib/og/src/Entity/OgMembership.php
modules/contrib/og/tests/src/Kernel/Action/UnblockOgMembershipActionTest.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraint.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraintValidator.php
modules/contrib/og/src/PermissionInterface.php
modules/contrib/og/tests/src/Kernel/Cache/Context/OgRoleCacheContextTest.php
modules/contrib/og/src/PermissionManager.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgRoleConstraint.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgRoleConstraintValidator.php
modules/contrib/og/src/Plugin/views/argument_default/Group.php
modules/contrib/og/src/OgAccess.php
modules/contrib/og/src/Plugin/views/field/OgMembershipBulkForm.php
modules/contrib/og/src/Exception/OgRoleException.php
modules/contrib/og/src/Form/GroupSubscribeForm.php
modules/contrib/og/tests/src/Unit/OgRoleManagerTest.php
modules/contrib/og/src/PermissionManagerInterface.php
modules/contrib/og/src/Plugin/Action/AddMultipleOgMembershipRoles.php
modules/contrib/og/src/Plugin/Action/AddSingleOgMembershipRole.php
modules/contrib/og/src/Plugin/Condition/GroupType.php
modules/contrib/og/src/Access/GroupCheck.php
modules/contrib/og/src/Plugin/Action/ApprovePendingOgMembership.php
modules/contrib/og/src/Plugin/Action/BlockOgMembership.php
modules/contrib/og/src/Plugin/Action/ChangeMultipleOgMembershipRolesBase.php
modules/contrib/og/src/Routing/RouteSubscriber.php
modules/contrib/og/src/Access/OgMembershipAddAccessCheck.php
modules/contrib/og/src/Plugin/Derivative/OgActionLink.php
modules/contrib/og/src/Plugin/Action/ChangeOgMembershipStateBase.php
modules/contrib/og/src/Annotation/OgDeleteOrphans.php
modules/contrib/og/src/Plugin/Derivative/OgLocalTask.php
modules/contrib/og/src/Plugin/Action/ChangeSingleOgMembershipRoleBase.php
modules/contrib/og/src/Plugin/EntityReferenceSelection/OgRoleSelection.php
modules/contrib/og/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
modules/contrib/og/tests/src/Unit/CreateMembershipTest.php
modules/contrib/og/src/OgAccessInterface.php
modules/contrib/og/src/OgContextInterface.php
modules/contrib/og/src/OgDeleteOrphansBase.php
modules/contrib/og/tests/src/Unit/OgRoleTest.php
modules/contrib/og/src/Form/GroupUnsubscribeConfirmForm.php
modules/contrib/og/src/Plugin/EntityReferenceSelection/OgSelection.php
modules/contrib/og/tests/src/Unit/PermissionEventTest.php
modules/contrib/og/tests/src/Kernel/Entity/CacheInvalidationOnGroupChangeTest.php
modules/contrib/og/src/OgDeleteOrphansInterface.php
modules/contrib/og/tests/src/Functional/OgComplexWidgetTest.php
modules/contrib/og/src/Form/OgAddMultipleRolesForm.php
modules/contrib/og/src/OgDeleteOrphansPluginManager.php
modules/contrib/og/src/OgFieldBase.php
modules/contrib/og/tests/src/Unit/DefaultRoleEventTest.php
modules/contrib/og/src/OgFieldsInterface.php
modules/contrib/og/src/Plugin/EntityReferenceSelection/OgUserSelection.php
modules/contrib/og/src/OgFieldsPluginManager.php
modules/contrib/og/src/OgGroupAlwaysTrue.php
modules/contrib/og/src/OgGroupAudienceHelper.php
modules/contrib/og/tests/src/Kernel/Access/AccessByOgMembershipTest.php
modules/contrib/og/tests/src/Kernel/Entity/EntityCreateAccessTest.php
modules/contrib/og/src/Form/OgChangeMultipleRolesFormBase.php
modules/contrib/og/src/OgGroupAudienceHelperInterface.php
modules/contrib/og/src/OgGroupResolverBase.php
modules/contrib/og/src/OgGroupResolverInterface.php
modules/contrib/og/src/OgGroupResolverPluginManager.php
modules/contrib/og/src/Entity/OgMembershipType.php
modules/contrib/og/src/OgMembershipAccessControlHandler.php
modules/contrib/og/tests/src/Kernel/Entity/FieldCreateTest.php
modules/contrib/og/src/Entity/OgRole.php
modules/contrib/og/src/Form/OgMembershipDeleteForm.php
modules/contrib/og/src/Plugin/Field/FieldFormatter/GroupSubscribeFormatter.php
modules/contrib/og/tests/src/Kernel/Access/GroupContentOperationAccessAlterTest.php
modules/contrib/og/tests/src/Kernel/Entity/GetBundleByBundleTest.php
modules/contrib/og/src/Form/OgMembershipForm.php
modules/contrib/og/src/OgMembershipInterface.php
modules/contrib/og/src/Event/AccessEventBase.php
modules/contrib/og/tests/src/Kernel/Access/GroupLevelAccessTest.php
modules/contrib/og/tests/src/Unit/GroupCheckTest.php
modules/contrib/og/src/Event/AccessEventInterface.php
modules/contrib/og/src/Event/DefaultRoleEvent.php
modules/contrib/og/src/Form/OgMembershipTypeForm.php
modules/contrib/og/src/Plugin/Field/FieldType/OgGroupItem.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
modules/contrib/og/src/Plugin/Field/FieldType/OgStandardReferenceItem.php
modules/contrib/og/src/Plugin/Field/FieldWidget/OgAutocomplete.php
modules/contrib/og/src/Event/DefaultRoleEventInterface.php
modules/contrib/og/src/Form/OgRemoveMultipleRolesForm.php
modules/contrib/og/src/Event/GroupContentEntityOperationAccessEvent.php
modules/contrib/og/src/Plugin/Field/FieldWidget/OgComplex.php
modules/contrib/og/src/Event/GroupContentEntityOperationAccessEventInterface.php
modules/contrib/og/src/GroupContentOperationPermission.php
modules/contrib/og/tests/src/Kernel/Entity/GroupTypeTest.php
modules/contrib/og/src/GroupPermission.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
modules/contrib/og/src/GroupTypeManager.php
modules/contrib/og/tests/src/Kernel/Entity/OgMembershipRoleReferenceTest.php
modules/contrib/og/tests/src/Kernel/Access/OgAccessHookTest.php
modules/contrib/og/tests/src/Unit/GroupContentOperationPermissionTest.php
modules/contrib/og/tests/src/Kernel/Entity/OgMembershipTest.php
modules/contrib/og/tests/src/Kernel/Entity/GetGroupContentTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
modules/contrib/og/tests/src/Kernel/Access/OgGroupContentOperationAccessTest.php
modules/contrib/og/tests/src/Unit/GroupPermissionTest.php
modules/contrib/og/src/Plugin/OgDeleteOrphans/Batch.php
modules/contrib/og/src/Plugin/OgDeleteOrphans/Cron.php
modules/contrib/og/tests/src/Unit/GroupTypeManagerTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupContentResolverTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
modules/contrib/og/src/GroupTypeManagerInterface.php
modules/contrib/og/tests/src/Kernel/Entity/GetMembershipsTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
modules/contrib/og/tests/src/Kernel/Action/ActionTestBase.php
modules/contrib/og/tests/src/Unit/SubscriptionControllerTest.php
modules/contrib/og/tests/src/Kernel/Entity/GetUserGroupsTest.php
modules/contrib/og/tests/src/Unit/OgAccessEntityTest.php
modules/contrib/og/tests/src/Kernel/Entity/OgRoleTest.php
modules/contrib/og/tests/src/Unit/OgAccessEntityTestBase.php
modules/contrib/og/tests/src/Unit/OgAccessHookTest.php
modules/contrib/og/tests/src/Unit/OgAccessTest.php
modules/contrib/og/tests/src/Kernel/Entity/OgStandardReferenceItemTest.php
modules/contrib/og/tests/src/Unit/OgAccessTestBase.php
modules/contrib/og/tests/src/Kernel/Entity/ReferenceStringIdTest.php
modules/contrib/og/tests/src/Kernel/Entity/SelectionHandlerTest.php
modules/contrib/og/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
modules/contrib/og/tests/src/Unit/OgAdminRoutesControllerTest.php
modules/contrib/og/tests/src/Kernel/Field/AudienceFieldFormatterTest.php
modules/contrib/og/tests/src/Kernel/Field/GroupSubscribeFormatterTest.php
modules/contrib/og/tests/src/Kernel/Form/GroupSubscribeFormTest.php
modules/contrib/og/tests/src/Kernel/GroupManagerSubscriptionTest.php
modules/contrib/og/tests/src/Kernel/GroupTypeConditionTest.php
modules/contrib/og/tests/src/Kernel/OgDeleteOrphansTest.php
modules/contrib/og/tests/src/Kernel/OgRoleManagerTest.php
modules/contrib/og/tests/src/Kernel/PermissionEventTest.php
modules/contrib/og/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
modules/contrib/og/tests/src/Kernel/SelectionHandlerSettingsSchemaTest.php

36 files with changes
=====================

1) modules/contrib/og/src/Routing/RouteSubscriber.php:119

    ---------- begin diff ----------
@@ @@
    */
   protected function createRoutesFromEventSubscribers($og_admin_path, $entity_type_id, RouteCollection $collection) {
     $event = new OgAdminRoutesEvent();
-    $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);

     foreach ($event->getRoutes($entity_type_id) as $name => $route_info) {
       // Add the parent route.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/og/src/PermissionManager.php:34

    ---------- begin diff ----------
@@ @@
    */
   public function getDefaultPermissions($group_entity_type_id, $group_bundle_id, array $group_content_bundle_ids, $role_name = NULL) {
     $event = new PermissionEvent($group_entity_type_id, $group_bundle_id, $group_content_bundle_ids);
-    $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     return $event->getPermissions();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/og/src/OgRoleManager.php:87

    ---------- begin diff ----------
@@ @@
     $roles = $this->getRequiredDefaultRoles();

     $event = new DefaultRoleEvent();
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);

     // Use the array union operator '+=' to ensure the default roles cannot be
     // altered by event subscribers.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/og/src/OgAccess.php:322

    ---------- begin diff ----------
@@ @@
       $event->addCacheContexts(['user']);
     }

-    $this->dispatcher->dispatch(GroupContentEntityOperationAccessEvent::EVENT_NAME, $event);
+    $this->dispatcher->dispatch($event, GroupContentEntityOperationAccessEvent::EVENT_NAME);

     return $event->getAccessResult();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


5) modules/contrib/og/src/Event/DefaultRoleEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\Entity\OgRole;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when default roles are compiled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/og/src/Event/AccessEventBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
@@ @@
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Base class for OG access events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/og/src/Controller/OgAdminRoutesController.php:75

    ---------- begin diff ----------
@@ @@
     $content = [];

     $event = new OgAdminRoutesEvent();
-    $event = $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $event = $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);

     foreach ($event->getRoutes($entity_type_id) as $name => $info) {
       $route_name = "entity.$entity_type_id.og_admin_routes.$name";
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/og/src/GroupTypeManager.php:283

    ---------- begin diff ----------
@@ @@

     // Trigger an event upon the new group creation.
     $event = new GroupCreationEvent($entity_type_id, $bundle_id);
-    $this->eventDispatcher->dispatch(GroupCreationEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, GroupCreationEventInterface::EVENT_NAME);

     $this->ogRoleManager->createPerBundleRoles($entity_type_id, $bundle_id);
     $this->refreshGroupMap();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


9) modules/contrib/og/src/Event/PermissionEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\GroupContentOperationPermission;
 use Drupal\og\PermissionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when OG permissions are compiled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/og/src/Event/OgAdminRoutesEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\og\OgAccess;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when OG admin routes are being compiled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/og/src/Event/GroupCreationEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * The group creation event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/og/tests/src/Unit/SubscriptionControllerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ @@
  */
 class SubscriptionControllerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity for builder object.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\UserGroupAccessResolver;

@@ @@
  */
 class UserGroupAccessResolverTest extends OgGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\og\Plugin\OgGroupResolver\RouteGroupResolver;

@@ @@
  */
 class RouteGroupResolverTest extends OgRouteGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\RequestQueryArgumentResolver;
@@ @@
  */
 class RequestQueryArgumentResolverTest extends OgGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
  */
 abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * A list of link templates that belong to entity types used in the tests.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 abstract class OgGroupResolverTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The fully qualified class name of the plugin under test.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/og/tests/src/Unit/OgRoleManagerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class OgRoleManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity type ID of the test group.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/og/tests/src/Unit/OgResolvedGroupCollectionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\og\OgResolvedGroupCollection;
@@ @@
  */
 class OgResolvedGroupCollectionTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * An array of mocked test groups, keyed by entity type ID and entity ID.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/og/tests/src/Unit/OgLocalTaskTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\RouteProvider;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class OgLocalTaskTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The group type manager.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/og/tests/src/Unit/OgContextTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ @@
  */
 class OgContextTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * A mocked plugin manager.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/og/tests/src/Kernel/DefaultRoleEventIntegrationTest.php:67

    ---------- begin diff ----------
@@ @@

     // Query the event listener directly to see if the administrator role is
     // present.
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);
     $this->assertEquals([OgRoleInterface::ADMINISTRATOR], array_keys($event->getRoles()));

     // Check that the role was created with the correct values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/og/tests/src/Unit/OgAdminRoutesControllerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class OgAdminRoutesControllerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The access manager service.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/og/tests/src/Unit/OgAccessTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
  */
 class OgAccessTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked config handler.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/og/tests/src/Unit/OgAccessHookTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
  */
 class OgAccessHookTest extends OgAccessEntityTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/og/tests/src/Unit/OgAccessEntityTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
  */
 abstract class OgAccessEntityTestBase extends OgAccessTestBase {

+  use ProphecyTrait;
   /**
    * A test group content entity.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/og/tests/src/Unit/GroupTypeManagerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
  */
 class GroupTypeManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The config prophecy used in the test.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/og/tests/src/Unit/GroupCheckTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
  */
 class GroupCheckTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity type manager prophecy used in the test.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/og/tests/src/Unit/DefaultRoleEventTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class DefaultRoleEventTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The DefaultRoleEvent class, which is the system under test.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/og/tests/src/Unit/CreateMembershipTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
  */
 class CreateMembershipTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity type manager.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) modules/contrib/og/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Cache\Context;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class OgRoleCacheContextTest extends OgCacheContextTestBase {

+  use ProphecyTrait;
   use OgRoleCacheContextTestTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


32) modules/contrib/og/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Cache\Context;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\og\Cache\Context\OgMembershipStateCacheContext;
 use Drupal\og\MembershipManagerInterface;
@@ @@
  */
 class OgMembershipStateCacheContextTest extends OgContextCacheContextTestBase {

+  use ProphecyTrait;
   /**
    * The OG membership entity.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/og/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Cache\Context;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\og\OgContextInterface;

@@ @@
  */
 abstract class OgContextCacheContextTestBase extends OgCacheContextTestBase {

+  use ProphecyTrait;
   /**
    * The mocked OG context service.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/og/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Plugin\Block;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
  */
 class MemberCountBlockTest extends KernelTestBase {

+  use ProphecyTrait;
   use OgMembershipCreationTrait;
   use StringTranslationTrait;
   use UserCreationTrait;
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/og/tests/src/Kernel/PermissionEventTest.php:93

    ---------- begin diff ----------
@@ @@
     // Retrieve the permissions from the listeners.
     /** @var \Drupal\og\Event\PermissionEvent $permission_event */
     $event = new PermissionEvent($this->randomMachineName(), $this->randomMachineName(), $group_content_bundle_ids);
-    $permission_event = $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $permission_event = $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     $actual_permissions = array_keys($permission_event->getPermissions());

     // Sort the permission arrays so they can be compared.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/og/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php:101

    ---------- begin diff ----------
@@ @@
     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     Views::viewsData()->clear();
@@ @@

     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test__field_test_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');
+    $this->assertEquals($views_data['field_test_data']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');

     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');

     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);

     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_view');
@@ @@
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());

       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());

       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);
+      $this->assertEquals($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_test_data']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['field_test_data']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');

     }

@@ @@
     $this->executeView($view);
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);

       // Test the backwards relationship.
-      $this->assertEqual($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
     }
   }

@@ @@
     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     Views::viewsData()->clear();
@@ @@

     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['entity type'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['entity type'], 'entity_test');

     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');

     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);

     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_mul_view');
@@ @@
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());

       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());

       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_entity_test_mul__field_data_test_id, 1);
+      $this->assertEquals($row->entity_test_entity_test_mul__field_data_test_id, 1);

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_data_test']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['field_data_test']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');

     }

@@ @@
     $this->executeView($view);
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);

       // Test the backwards relationship.
-      $this->assertEqual($row->field_data_test_entity_test_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_data_test_entity_test_id, $this->entities[$index]->id());

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 36 files have been changed by Rector                                      

