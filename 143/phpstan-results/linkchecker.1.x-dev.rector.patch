diff --git a/linkchecker.install b/linkchecker.install
index 9a88dc0..ab9455e 100644
--- a/linkchecker.install
+++ b/linkchecker.install
@@ -55,7 +55,7 @@ function linkchecker_schema() {
  * Added new functionality to broken links view.
  */
 function linkchecker_update_8001() {
-  $config_path = drupal_get_path('module', 'linkchecker') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('linkchecker') . '/config/optional';
   $config_source = new FileStorage($config_path);
   \Drupal::service('config.installer')->installOptionalConfig($config_source);
 }
diff --git a/src/Plugin/QueueWorker/LinkCheck.php b/src/Plugin/QueueWorker/LinkCheck.php
index 18cb6e9..281cef3 100644
--- a/src/Plugin/QueueWorker/LinkCheck.php
+++ b/src/Plugin/QueueWorker/LinkCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkchecker\Plugin\QueueWorker;
 
+use function GuzzleHttp\Promise\settle;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -76,7 +77,7 @@ class LinkCheck extends QueueWorkerBase implements ContainerFactoryPluginInterfa
 
     // Force wait to complete of all requests
     // to prevent next items of queue to be run.
-    Promise\settle($promises)->wait();
+    settle($promises)->wait();
   }
 
 }
diff --git a/tests/src/Functional/LinkCheckerEditFormTest.php b/tests/src/Functional/LinkCheckerEditFormTest.php
index 96f2606..0deccb0 100644
--- a/tests/src/Functional/LinkCheckerEditFormTest.php
+++ b/tests/src/Functional/LinkCheckerEditFormTest.php
@@ -36,7 +36,7 @@ class LinkCheckerEditFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create Basic page and Article node types.
     $node_type = NodeType::create([
@@ -91,7 +91,7 @@ class LinkCheckerEditFormTest extends BrowserTestBase {
 
     // Now visit edit form for the linkchecker entity.
     $this->drupalGet($link->toUrl('edit-form')->toString());
-    $this->assertEqual($this->getSession()->getStatusCode(), 200);
+    $this->assertEquals($this->getSession()->getStatusCode(), 200);
   }
 
 }
diff --git a/tests/src/Functional/LinkCheckerInterfaceTest.php b/tests/src/Functional/LinkCheckerInterfaceTest.php
index 1279fb8..6489461 100644
--- a/tests/src/Functional/LinkCheckerInterfaceTest.php
+++ b/tests/src/Functional/LinkCheckerInterfaceTest.php
@@ -43,7 +43,7 @@ class LinkCheckerInterfaceTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $full_html_format = FilterFormat::create([
@@ -143,11 +143,12 @@ class LinkCheckerInterfaceTest extends BrowserTestBase {
     // Verify path input field appears on add "Basic page" form.
     $this->drupalGet('node/add/page');
     // Verify path input is present.
-    $this->assertFieldByName('path[0][alias]', '', 'Path input field present on add Basic page form.');
+    $this->assertSession()->fieldValueEquals('path[0][alias]', '');
+    $this->drupalGet('node/add/page');
 
     // Save node.
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
-    $this->assertText($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]), 'Node was created.');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextContains($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]));
 
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $this->assertNotEmpty($node);
@@ -156,7 +157,7 @@ class LinkCheckerInterfaceTest extends BrowserTestBase {
     $link = $this->getLinkCheckerLinkByUrl($url1);
 
     if ($link) {
-      $this->assertIdentical($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
+      $this->assertSame($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
     }
     else {
       $this->fail(new FormattableMarkup('URL %url not found.', ['%url' => $url1]));
@@ -181,11 +182,12 @@ class LinkCheckerInterfaceTest extends BrowserTestBase {
       'info[0][value]' => $random->name(8),
       'body[0][value]' => $body,
     ];
-    $this->drupalPostForm(Url::fromRoute('block_content.add_page')->toString(), $custom_block, 'Save');
+    $this->drupalGet(Url::fromRoute('block_content.add_page')->toString());
+    $this->submitForm($custom_block, 'Save');
 
     // Confirm that the custom block has been created, and then query the
     // created bid.
-    $this->assertText($this->t('@type @title has been created.', ['@type' => 'Basic block', '@title' => $custom_block['info[0][value]']]), 'Custom block successfully created.');
+    $this->assertSession()->pageTextContains($this->t('@type @title has been created.', ['@type' => 'Basic block', '@title' => $custom_block['info[0][value]']]));
     // Check that the block exists in the database.
     $blocks = \Drupal::entityQuery('block_content')->accessCheck()->condition('info', $custom_block['info[0][value]'])->execute();
     $block = BlockContent::load(reset($blocks));
@@ -195,7 +197,7 @@ class LinkCheckerInterfaceTest extends BrowserTestBase {
     $link = $this->getLinkCheckerLinkByUrl($url1);
 
     if ($link) {
-      $this->assertIdentical($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
+      $this->assertSame($link->get('url')->value, $url1, new FormattableMarkup('URL %url found.', ['%url' => $url1]));
     }
     else {
       $this->fail(new FormattableMarkup('URL %url not found.', ['%url' => $url1]));
diff --git a/tests/src/Functional/LinkCheckerLinkExtractionTest.php b/tests/src/Functional/LinkCheckerLinkExtractionTest.php
index 31b0c22..3985010 100644
--- a/tests/src/Functional/LinkCheckerLinkExtractionTest.php
+++ b/tests/src/Functional/LinkCheckerLinkExtractionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\linkchecker\Functional;
 
+use Drupal\Component\Utility\Random;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\linkchecker\Entity\LinkCheckerLink;
 use Drupal\linkchecker\LinkCheckerLinkInterface;
@@ -172,7 +173,7 @@ class LinkCheckerLinkExtractionTest extends LinkCheckerBaseTest {
 EOT;
 
     // Save folder names in variables for reuse.
-    $random = new \Drupal\Component\Utility\Random();
+    $random = new Random();
     $folder1 = $random->name(10);
     $folder2 = $random->name(5);
 
@@ -189,15 +190,16 @@ EOT;
     // Verify path input field appears on add "Basic page" form.
     $this->drupalGet('node/add/page');
     // Verify path input is present.
-    $this->assertFieldByName('path[0][alias]', '', 'Path input field present on add Basic page form.');
+    $this->assertSession()->fieldValueEquals('path[0][alias]', '');
+    $this->drupalGet('node/add/page');
 
     // Save node.
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
-    $this->assertText($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]), 'Node was created.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains($this->t('@type @title has been created.', ['@type' => 'Basic page', '@title' => $edit["title[0][value]"]]));
 
     $key = \Drupal::state()->get('system.cron_key');
     $this->drupalGet('cron/' . $key);
-    $this->assertResponse(204);
+    $this->assertSession()->statusCodeEquals(204);
 
     // Verify that the unsupported urls are skipped.
     $unsupported_urls = [
@@ -247,7 +249,7 @@ EOT;
       $link = $this->getLinkCheckerLinkByUrl($check_url);
 
       if ($link) {
-        $this->assertIdentical($link->get('url')->value, $check_url, new FormattableMarkup('Absolute URL %org_url matches expected result %check_url.', ['%org_url' => $org_url, '%check_url' => $check_url]));
+        $this->assertSame($link->get('url')->value, $check_url, new FormattableMarkup('Absolute URL %org_url matches expected result %check_url.', ['%org_url' => $org_url, '%check_url' => $check_url]));
       }
       else {
         $this->fail(new FormattableMarkup('URL %check_url not found.', ['%check_url' => $check_url]));
@@ -259,7 +261,7 @@ EOT;
     // - Verifies that the linkchecker filter blacklist works well.
     $urls_in_database = \Drupal::entityQuery('linkcheckerlink')->accessCheck()->count()->execute();
     $urls_expected_count = count($urls_fqdn);
-    $this->assertEqual($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));
+    $this->assertEquals($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));
 
     // Extract all URLs including relative path.
     // @FIXME
@@ -268,9 +270,10 @@ EOT;
 
     $node = $this->drupalGetNodeByTitle($edit["title[0][value]"]);
     $this->assertNotEmpty($node);
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, $this->t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, $this->t('Save'));
     //$this->assertRaw($this->t('@type %title has been updated.', ['@type' => 'Basic page', '%title' => $edit["title[0][value]"]]));
-    $this->assertText($this->t('@type @title has been updated.', ['@type' => 'Basic page', '@title' => $edit['title[0][value]']]));
+    $this->assertSession()->pageTextContains($this->t('@type @title has been updated.', ['@type' => 'Basic page', '@title' => $edit['title[0][value]']]));
 
     // @todo Path alias seems not saved!???
     //$this->assertIdentical($node->path, '/' . $edit[0]['path'], format_string('URL alias "@node-path" matches path "@edit-path".', array('@node-path' => $node->path, '@edit-path' => $edit[0]['path'])));
@@ -310,7 +313,7 @@ EOT;
     // Check if the number of links is correct.
     $urls_in_database = \Drupal::entityQuery('linkcheckerlink')->accessCheck()->count()->execute();
     $urls_expected_count = count($urls_fqdn + $urls_relative);
-    $this->assertEqual($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));
+    $this->assertEquals($urls_in_database, $urls_expected_count, new FormattableMarkup('Found @urls_in_database URLs in database matches expected result of @urls_expected_count.', ['@urls_in_database' => $urls_in_database, '@urls_expected_count' => $urls_expected_count]));
 
     // Verify if link check has been enabled for normal URLs.
     $urls = [
diff --git a/tests/src/Functional/LinkCheckerOverviewTest.php b/tests/src/Functional/LinkCheckerOverviewTest.php
index 5f7195c..070c71b 100644
--- a/tests/src/Functional/LinkCheckerOverviewTest.php
+++ b/tests/src/Functional/LinkCheckerOverviewTest.php
@@ -32,7 +32,7 @@ class LinkCheckerOverviewTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer linkchecker',
diff --git a/tests/src/FunctionalJavascript/LinkCheckerOverviewTest.php b/tests/src/FunctionalJavascript/LinkCheckerOverviewTest.php
index 19c286d..cee9055 100644
--- a/tests/src/FunctionalJavascript/LinkCheckerOverviewTest.php
+++ b/tests/src/FunctionalJavascript/LinkCheckerOverviewTest.php
@@ -32,7 +32,7 @@ class LinkCheckerOverviewTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer linkchecker',
diff --git a/tests/src/Kernel/LinkCheckerLinkAccessTest.php b/tests/src/Kernel/LinkCheckerLinkAccessTest.php
index 08a062a..36c5985 100644
--- a/tests/src/Kernel/LinkCheckerLinkAccessTest.php
+++ b/tests/src/Kernel/LinkCheckerLinkAccessTest.php
@@ -67,7 +67,7 @@ class LinkCheckerLinkAccessTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
diff --git a/tests/src/Kernel/LinkcheckerCleanUpTest.php b/tests/src/Kernel/LinkcheckerCleanUpTest.php
index 975d37b..543df7e 100644
--- a/tests/src/Kernel/LinkcheckerCleanUpTest.php
+++ b/tests/src/Kernel/LinkcheckerCleanUpTest.php
@@ -52,7 +52,7 @@ class LinkcheckerCleanUpTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installEntitySchema('node');
diff --git a/tests/src/Kernel/LinkcheckerHtmlLinkExtractorTest.php b/tests/src/Kernel/LinkcheckerHtmlLinkExtractorTest.php
index 73047d0..7d68d1c 100644
--- a/tests/src/Kernel/LinkcheckerHtmlLinkExtractorTest.php
+++ b/tests/src/Kernel/LinkcheckerHtmlLinkExtractorTest.php
@@ -47,7 +47,7 @@ class LinkcheckerHtmlLinkExtractorTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
diff --git a/tests/src/Kernel/LinkcheckerLinkCheckerServiceTest.php b/tests/src/Kernel/LinkcheckerLinkCheckerServiceTest.php
index af25bcf..26dd752 100644
--- a/tests/src/Kernel/LinkcheckerLinkCheckerServiceTest.php
+++ b/tests/src/Kernel/LinkcheckerLinkCheckerServiceTest.php
@@ -57,7 +57,7 @@ class LinkcheckerLinkCheckerServiceTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installEntitySchema('linkcheckerlink');
diff --git a/tests/src/Kernel/LinkcheckerLinkExtractorServiceTest.php b/tests/src/Kernel/LinkcheckerLinkExtractorServiceTest.php
index 0dff3fe..fdc3e82 100644
--- a/tests/src/Kernel/LinkcheckerLinkExtractorServiceTest.php
+++ b/tests/src/Kernel/LinkcheckerLinkExtractorServiceTest.php
@@ -85,7 +85,7 @@ class LinkcheckerLinkExtractorServiceTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
diff --git a/tests/src/Kernel/LinkcheckerLinkLinkExtractorTest.php b/tests/src/Kernel/LinkcheckerLinkLinkExtractorTest.php
index 90aa696..20fd72b 100644
--- a/tests/src/Kernel/LinkcheckerLinkLinkExtractorTest.php
+++ b/tests/src/Kernel/LinkcheckerLinkLinkExtractorTest.php
@@ -51,7 +51,7 @@ class LinkcheckerLinkLinkExtractorTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
diff --git a/tests/src/Kernel/LinkcheckerRedirectTest.php b/tests/src/Kernel/LinkcheckerRedirectTest.php
index f9c820f..e49eac7 100644
--- a/tests/src/Kernel/LinkcheckerRedirectTest.php
+++ b/tests/src/Kernel/LinkcheckerRedirectTest.php
@@ -50,7 +50,7 @@ class LinkcheckerRedirectTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('linkchecker', 'linkchecker_index');
diff --git a/tests/src/Kernel/LinkcheckerRepair301Test.php b/tests/src/Kernel/LinkcheckerRepair301Test.php
index b61d19a..eb92ae7 100644
--- a/tests/src/Kernel/LinkcheckerRepair301Test.php
+++ b/tests/src/Kernel/LinkcheckerRepair301Test.php
@@ -80,7 +80,7 @@ class LinkcheckerRepair301Test extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
diff --git a/tests/src/Kernel/LinkcheckerUnpublish404Test.php b/tests/src/Kernel/LinkcheckerUnpublish404Test.php
index 342e95b..83e374e 100644
--- a/tests/src/Kernel/LinkcheckerUnpublish404Test.php
+++ b/tests/src/Kernel/LinkcheckerUnpublish404Test.php
@@ -59,7 +59,7 @@ class LinkcheckerUnpublish404Test extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
diff --git a/tests/src/Kernel/QueueLinksTest.php b/tests/src/Kernel/QueueLinksTest.php
index 38fba43..4ca2ebe 100644
--- a/tests/src/Kernel/QueueLinksTest.php
+++ b/tests/src/Kernel/QueueLinksTest.php
@@ -54,7 +54,7 @@ class QueueLinksTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
diff --git a/tests/src/Unit/LinkCheckerResponseCodesTest.php b/tests/src/Unit/LinkCheckerResponseCodesTest.php
index cdd1516..d4d32c3 100644
--- a/tests/src/Unit/LinkCheckerResponseCodesTest.php
+++ b/tests/src/Unit/LinkCheckerResponseCodesTest.php
@@ -24,7 +24,7 @@ class LinkCheckerResponseCodesTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->linkCheckerResponseCodes = new LinkCheckerResponseCodes();
