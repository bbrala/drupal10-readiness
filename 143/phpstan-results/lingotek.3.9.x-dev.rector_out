modules/contrib/lingotek/lingotek.api.php
modules/contrib/lingotek/lingotek.post_update.php
modules/contrib/lingotek/src/Controller/LingotekSetupController.php
modules/contrib/lingotek/src/Exception/LingotekDocumentLockedException.php
modules/contrib/lingotek/src/Form/LingotekJobManagementConfigForm.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabAccountForm.php
modules/contrib/lingotek/src/LingotekContentTranslationServiceInterface.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationConfigurationService.php
modules/contrib/lingotek/src/Plugin/Action/CheckTranslationStatusLingotekAction.php
modules/contrib/lingotek/src/Plugin/Field/FieldType/LingotekTranslationSourceField.php
modules/contrib/lingotek/src/Annotation/RelatedEntitiesDetector.php
modules/contrib/lingotek/lingotek.batch.inc
modules/contrib/lingotek/src/Exception/LingotekDocumentNotFoundException.php
modules/contrib/lingotek/src/Exception/LingotekDocumentTargetAlreadyCompletedException.php
modules/contrib/lingotek/src/Exception/LingotekException.php
modules/contrib/lingotek/src/Exception/LingotekPaymentRequiredException.php
modules/contrib/lingotek/src/Exception/LingotekProcessedWordsLimitException.php
modules/contrib/lingotek/src/Form/LingotekAccountDisconnectForm.php
modules/contrib/lingotek/src/Remote/LingotekHttp.php
modules/contrib/lingotek/tests/modules/lingotek_cohesion_test/lingotek_cohesion_test.install
modules/contrib/lingotek/src/Breadcrumb/TranslationJobBreadcrumbBuilder.php
modules/contrib/lingotek/tests/modules/lingotek_test/lingotek_test.module
modules/contrib/lingotek/src/LingotekDefaultFilterProvider.php
modules/contrib/lingotek/src/LingotekFilterManager.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFakeConfigFactory.php
modules/contrib/lingotek/src/Form/LingotekJobManagementContentEntitiesForm.php
modules/contrib/lingotek/tests/src/Functional/Controller/LingotekSupportedLocalesControllerTest.php
modules/contrib/lingotek/src/Form/LingotekConfigFormBase.php
modules/contrib/lingotek/src/Form/LingotekConfigManagementForm.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabConfigurationFormTest.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationHandler.php
modules/contrib/lingotek/src/LingotekFilterManagerInterface.php
modules/contrib/lingotek/src/LingotekFilterProviderInterface.php
modules/contrib/lingotek/src/LingotekIntelligenceMetadataInterface.php
modules/contrib/lingotek/src/Controller/LingotekSupportedLocalesController.php
modules/contrib/lingotek/lingotek.drush.inc
modules/contrib/lingotek/src/LingotekIntelligenceService.php
modules/contrib/lingotek/src/Cli/Commands/Drush8/Drush8IoWrapper.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabConfigurationForm.php
modules/contrib/lingotek/src/Cli/Commands/Drush9/LingotekCommands.php
modules/contrib/lingotek/src/Controller/LingotekWorkbenchRedirectController.php
modules/contrib/lingotek/lingotek.install
modules/contrib/lingotek/src/Element/LingotekJobId.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabContentForm.php
modules/contrib/lingotek/src/Form/LingotekLanguageContentSettingsForm.php
modules/contrib/lingotek/src/Cli/LingotekCliService.php
modules/contrib/lingotek/src/LingotekIntelligenceServiceConfig.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationSettingsForm.php
modules/contrib/lingotek/src/Element/LingotekSourceStatus.php
modules/contrib/lingotek/src/Remote/LingotekHttpInterface.php
modules/contrib/lingotek/src/Routing/LingotekRouteSubscriber.php
modules/contrib/lingotek/tests/modules/lingotek_cohesion_test/lingotek_cohesion_test.module
modules/contrib/lingotek/tests/modules/lingotek_cohesion_test/src/Entity/TestCohesionLayout.php
modules/contrib/lingotek/src/Form/LingotekLanguageForm.php
modules/contrib/lingotek/lingotek.module
modules/contrib/lingotek/src/LingotekInterface.php
modules/contrib/lingotek/src/Tests/Kernel/FieldFormatters/LingotekSourceStatusFormatterTest.php
modules/contrib/lingotek/src/LingotekInterfaceTranslationService.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Controller/FakeAuthorizationController.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFakeConfigWrapper.php
modules/contrib/lingotek/tests/modules/lingotek_form_test/src/Controller/LingotekTranslationStatusController.php
modules/contrib/lingotek/src/Plugin/Action/CheckUploadToLingotekAction.php
modules/contrib/lingotek/src/Controller/LingotekBatchController.php
modules/contrib/lingotek/src/Moderation/LingotekModerationConfigurationServiceInterface.php
modules/contrib/lingotek/src/Plugin/Field/LingotekContentMetadataFieldItemList.php
modules/contrib/lingotek/src/Form/LingotekManagementForm.php
modules/contrib/lingotek/src/Moderation/LingotekModerationFactory.php
modules/contrib/lingotek/src/Moderation/LingotekModerationFactoryInterface.php
modules/contrib/lingotek/src/Moderation/LingotekModerationHandlerInterface.php
modules/contrib/lingotek/src/Moderation/LingotekModerationServiceInterface.php
modules/contrib/lingotek/src/Moderation/LingotekModerationSettingsFormInterface.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationCheckTrait.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationConfigurationService.php
modules/contrib/lingotek/src/Element/LingotekTargetStatus.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationHandler.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationSettingsForm.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationCheckTrait.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationConfigurationService.php
modules/contrib/lingotek/src/Element/LingotekTargetStatuses.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationHandler.php
modules/contrib/lingotek/src/Plugin/Action/DeleteAllTranslationsAction.php
modules/contrib/lingotek/tests/modules/lingotek_interface_translation_test/src/Controller/InterfaceTranslationTestController.php
modules/contrib/lingotek/src/Tests/Kernel/LingotekConfigImportTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationEditedToPendingTest.php
modules/contrib/lingotek/tests/src/Functional/Controller/LingotekWorkbenchRedirectControllerTest.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationSettingsForm.php
modules/contrib/lingotek/src/Plugin/Action/DeleteTranslationLingotekAction.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Controller/FakeWorkbenchController.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Controller/HostsSetterController.php
modules/contrib/lingotek/src/Views/LingotekContentMetadataViewsData.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFake.php
modules/contrib/lingotek/src/Controller/LingotekConfigTranslationController.php
modules/contrib/lingotek/src/Plugin/Action/CancelLingotekAction.php
modules/contrib/lingotek/src/Plugin/Action/Derivative/ContentEntityLingotekActionDeriver.php
modules/contrib/lingotek/src/Plugin/Menu/JobConfigLocalTask.php
modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekSourceStatusFormatterTest.php
modules/contrib/lingotek/tests/fixtures/update/9402-set-preference-enable-download-interim.php
modules/contrib/lingotek/src/Plugin/Action/CancelTranslationLingotekAction.php
modules/contrib/lingotek/src/Plugin/Action/DisassociateFromLingotekAction.php
modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekTranslationStatusFormatterTest.php
modules/contrib/lingotek/src/Plugin/Action/DownloadAllTranslationsFromLingotekAction.php
modules/contrib/lingotek/tests/fixtures/update/profile-target-save-to-vault-post-update.php
modules/contrib/lingotek/src/Plugin/Menu/JobContentLocalTask.php
modules/contrib/lingotek/tests/modules/frozenintime/src/FrozenTime.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekTestServiceProvider.php
modules/contrib/lingotek/tests/modules/frozenintime/src/FrozenintimeServiceProvider.php
modules/contrib/lingotek/src/Plugin/QueueWorker/LingotekDownloaderQueueWorker.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkDebugTest.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Plugin/Block/CurrentThemeBlock.php
modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekTranslationStatusesFormatterTest.php
modules/contrib/lingotek/src/Plugin/Action/DownloadTranslationLingotekAction.php
modules/contrib/lingotek/src/Plugin/Action/CheckStatusAllTranslationsLingotekAction.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Plugin/Block/TestRichTextBlock.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/EditorDetectorBase.php
modules/contrib/lingotek/tests/modules/lingotek_test_config_object/src/Form/SettingsForm.php
modules/contrib/lingotek/tests/src/Functional/Form/IntelligenceMetadataFormTestTrait.php
modules/contrib/lingotek/src/Plugin/Action/LingotekContentEntityActionBase.php
modules/contrib/lingotek/tests/src/Functional/Form/LanguageFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkDisabledTargetOverrideTranslationTest.php
modules/contrib/lingotek/src/Plugin/Action/LingotekContentEntityConfigurableActionBase.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkDisabledTargetOverrideTranslationTest.php
modules/contrib/lingotek/tests/modules/lingotek_visitable_metadata/lingotek_visitable_metadata.module
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabContentFormTest.php
modules/contrib/lingotek/src/Plugin/Action/RequestAllTranslationsLingotekAction.php
modules/contrib/lingotek/tests/modules/lingotek_visitable_metadata_statuses/lingotek_visitable_metadata_statuses.module
modules/contrib/lingotek/tests/src/Functional/Actions/LingotekActionsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationPreSaveHookTest.php
modules/contrib/lingotek/src/Plugin/Action/RequestTranslationLingotekAction.php
modules/contrib/lingotek/src/Form/LingotekManagementFormBase.php
modules/contrib/lingotek/src/Element/LingotekTargetTrait.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkTranslationTest.php
modules/contrib/lingotek/src/Plugin/Action/Subscriber/LingotekActionsManagementSubscriber.php
modules/contrib/lingotek/tests/src/Functional/LingotekContactMessageBodyTranslationTest.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/EntityEmbedDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/EntityReferenceDetectorBase.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkLocaleTranslationTest.php
modules/contrib/lingotek/src/Entity/LingotekConfigMetadata.php
modules/contrib/lingotek/tests/src/Functional/ChineseBulkTranslationTest.php
modules/contrib/lingotek/src/Entity/LingotekContentMetadata.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkProfileTest.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/FieldLinkDetector.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentEntityGetProfileHookTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekAccountDisconnectFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedParagraphsTranslationTest.php
modules/contrib/lingotek/src/Plugin/Action/UploadToLingotekAction.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFakeBC.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithParagraphsManageTranslationTabTest.php
modules/contrib/lingotek/src/Entity/LingotekProfile.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekAccountFormTest.php
modules/contrib/lingotek/src/Plugin/Derivative/ContentTranslationLocalTasks.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekConfigBulkFormTest.php
modules/contrib/lingotek/src/Plugin/Derivative/ContentTranslationMenuLinks.php
modules/contrib/lingotek/tests/src/Functional/Controller/LingotekNotificationControllerTest.php
modules/contrib/lingotek/src/Plugin/Field/FieldFormatter/LingotekSourceStatusFormatter.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/HtmlLinkDetector.php
modules/contrib/lingotek/src/Controller/LingotekContentTranslationController.php
modules/contrib/lingotek/src/Controller/LingotekControllerBase.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentModerationSettingsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithPathTranslationTest.php
modules/contrib/lingotek/src/EventSubscriber/AcquiaContentHubExcludeLingotekContentMetadataFromSerializationSubscriber.php
modules/contrib/lingotek/src/Controller/LingotekDashboardController.php
modules/contrib/lingotek/src/Plugin/Field/FieldFormatter/LingotekTranslationStatusFormatter.php
modules/contrib/lingotek/src/EventSubscriber/DepCalcExcludeLingotekContentMetadataSubscriber.php
modules/contrib/lingotek/src/EventSubscriber/LingotekConfigSubscriber.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabIntegrationsForm.php
modules/contrib/lingotek/src/Plugin/Field/FieldFormatter/LingotekTranslationStatusesFormatter.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabLoggingForm.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/LinkItDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedCohesionEntityReferenceRevisionsDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedEntityReferenceRevisionsDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedEntityReferencesDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedErViewmodeEntitiesDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetector.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabPreferencesForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekUserSettingsBulkTranslationTest.php
modules/contrib/lingotek/src/Plugin/Field/FieldType/LanguageKeyValueItem.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkTranslationTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeParagraphsTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabProfilesEditForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentModerationTest.php
modules/contrib/lingotek/src/LingotekInterfaceTranslationServiceInterface.php
modules/contrib/lingotek/src/EventSubscriber/LingotekFieldDeletedConfigSubscriber.php
modules/contrib/lingotek/src/Exception/LingotekApiException.php
modules/contrib/lingotek/src/Exception/LingotekContentEntityFieldTooLongStorageException.php
modules/contrib/lingotek/src/Exception/LingotekContentEntityStorageException.php
modules/contrib/lingotek/src/LingotekJobManagementService.php
modules/contrib/lingotek/src/Exception/LingotekDocumentAlreadyCompletedException.php
modules/contrib/lingotek/src/Exception/LingotekDocumentArchivedException.php
modules/contrib/lingotek/tests/src/Unit/LingotekUnitTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabUtilitiesForm.php
modules/contrib/lingotek/src/RelatedEntities/RelatedEntitiesDetectorInterface.php
modules/contrib/lingotek/src/RelatedEntities/RelatedEntitiesDetectorManager.php
modules/contrib/lingotek/src/Remote/LingotekApi.php
modules/contrib/lingotek/src/Helpers/LingotekManagementFormHelperTrait.php
modules/contrib/lingotek/src/LanguageLocaleMapper.php
modules/contrib/lingotek/src/LanguageLocaleMapperInterface.php
modules/contrib/lingotek/src/Lingotek.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithPathautoTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekUtilitiesDisassociateAllDocumentsTest.php
modules/contrib/lingotek/src/LingotekLocale.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeTranslatableParagraphsAsymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeTranslatableParagraphsTranslationTest.php
modules/contrib/lingotek/src/Controller/LingotekEntityController.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsContentSingleFormTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntegrationFormTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntelligenceMetadataFormTest.php
modules/contrib/lingotek/src/LingotekMultipleContentConfigurationServiceInterface.php
modules/contrib/lingotek/src/LingotekProfileInterface.php
modules/contrib/lingotek/src/LingotekProfileListBuilder.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTablefieldTranslationTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabParagraphsIntegrationFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTranslatableParagraphsManageTranslationTabTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTranslatedAuthorTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabUtilitiesFormTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormWithLotsOfContentTest.php
modules/contrib/lingotek/src/LingotekProfileUsage.php
modules/contrib/lingotek/src/LingotekConfigMetadataInterface.php
modules/contrib/lingotek/tests/src/Functional/LingotekViewsFunctionalTests.php
modules/contrib/lingotek/src/LingotekConfigTranslationService.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWorkbenchModerationTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekWebformBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekAccountTest.php
modules/contrib/lingotek/src/LingotekProfileUsageInterface.php
modules/contrib/lingotek/src/LingotekSetupTrait.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationCheckTrait.php
modules/contrib/lingotek/src/Controller/LingotekInterfaceTranslationController.php
modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationCustomMenuLinkTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekBulkDeleteTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationSettingsTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSourceActionsTest.php
modules/contrib/lingotek/src/Remote/LingotekApiInterface.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSupportedLocalesControllerTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekTargetActionsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTranslationDocumentUploadHookTest.php
modules/contrib/lingotek/src/Form/LingotekContentTranslationForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekChangeAccountDefaultsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSaveTargetDataTest.php
modules/contrib/lingotek/tests/src/Unit/Breadcrumb/TranslationJobBreadcrumbBuilderTest.php
modules/contrib/lingotek/src/Controller/LingotekJobManagementController.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigBulkProfileTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTranslationPreSaveHookTest.php
modules/contrib/lingotek/src/Form/LingotekDisassociateAllConfirmForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkCancelTest.php
modules/contrib/lingotek/src/Controller/LingotekManagementController.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkCancelTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedTranslatableParagraphsAsymmetricTranslationTest.php
modules/contrib/lingotek/src/Controller/LingotekNotificationController.php
modules/contrib/lingotek/src/Form/LingotekElementInfoAlterForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkDebugTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedTranslatableParagraphsEditedTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedTranslatableParagraphsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNotificationCallbackQueueWorkerTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkLocaleTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekManagementRelatedEntitiesForm.php
modules/contrib/lingotek/tests/src/Unit/Cli/LingotekCliServiceTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkDebugTest.php
modules/contrib/lingotek/src/Form/LingotekMediaBulkForm.php
modules/contrib/lingotek/src/Form/LingotekFieldConfigEditForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkDisabledTargetOverrideTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigDependenciesTest.php
modules/contrib/lingotek/src/Form/LingotekMetadataEditForm.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekConnectTest.php
modules/contrib/lingotek/tests/src/Functional/Render/Element/RenderElementTypesTest.php
modules/contrib/lingotek/src/Form/LingotekIntelligenceMetadataForm.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekLanguageContentSettingsFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityBulkProfileTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekMediaBulkFormTest.php
modules/contrib/lingotek/src/Form/LingotekParagraphsBulkForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityStatusDownloadTargetTest.php
modules/contrib/lingotek/src/Form/LingotekProfileAddForm.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekMetadataEditFormTest.php
modules/contrib/lingotek/src/Form/LingotekProfileDeleteForm.php
modules/contrib/lingotek/src/Form/LingotekInterfaceTranslationClearMetadataForm.php
modules/contrib/lingotek/src/Form/LingotekProfileEditForm.php
modules/contrib/lingotek/src/Form/LingotekProfileFormBase.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityTranslationEditedToPendingTest.php
modules/contrib/lingotek/src/Controller/LingotekSettingsController.php
modules/contrib/lingotek/src/Form/LingotekInterfaceTranslationForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationDocumentUploadHookTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNotificationCallbackTest.php
modules/contrib/lingotek/src/Form/LingotekJobAssignToMultipleConfigForm.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationPreSaveHookTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigOverridesTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsAccountForm.php
modules/contrib/lingotek/src/Form/LingotekSettingsCommunityForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigStatusDownloadTargetTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsConnectForm.php
modules/contrib/lingotek/src/Form/LingotekJobAssignToMultipleEntitiesForm.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekPostUpdateRemoveAccountSandboxHostTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekProfileTargetSaveToVaultPostUpdateTest.php
modules/contrib/lingotek/tests/src/Unit/Controller/LingotekDashboardControllerTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigSubscriberTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsContentSingleForm.php
modules/contrib/lingotek/src/Form/LingotekJobClearMultipleConfigForm.php
modules/contrib/lingotek/src/Form/LingotekJobClearMultipleEntitiesForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationDocumentUploadHookTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade8221RemoveContentCloudSettingsTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade9000AppendTypeToTitleBooleanConversionTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade9401AddUploadedAndUpdatedFieldTest.php
modules/contrib/lingotek/tests/src/Unit/Controller/LingotekSupportedLocalesControllerTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade9402ClearDownloadInterimPreferenceTest.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsCancelTest.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsLocaleTranslationTest.php
modules/contrib/lingotek/src/LingotekConfigTranslationServiceInterface.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/EventSubscriber/LingotekConfigSubscriberUnitTest.php
modules/contrib/lingotek/src/LingotekConfigurationService.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeExistingBulkViewsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekViewsTestTrait.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekFunctionalJavascriptTestBase.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyExistingBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekManagementFormTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsDefaultsForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyNotificationCallbackTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsEditDefaultsForm.php
modules/contrib/lingotek/src/LingotekConfigurationServiceInterface.php
modules/contrib/lingotek/src/LingotekContentTranslationHandler.php
modules/contrib/lingotek/src/LingotekContentTranslationHandlerInterface.php
modules/contrib/lingotek/src/LingotekContentTranslationService.php
modules/contrib/lingotek/tests/src/Unit/Moderation/LingotekModerationFactoryTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/EntityEmbedDetectorTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/FieldLinkDetectorTest.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsConnectFormTest.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabAccountFormTest.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabUtilitiesFormTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/HtmlLinkDetectorTest.php
modules/contrib/lingotek/tests/src/Unit/LingotekFilterManagerUnitTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/LinkItDetectorTest.php
modules/contrib/lingotek/tests/src/Unit/LingotekQueueWorkerTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedCohesionEntityReferenceRevisionsDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteExistingBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeExistingBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeParagraphsSettingsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeNotificationCallbackTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeParagraphsTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedEntityReferenceRevisionsDetectorTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedEntityReferencesDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermLongTitleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldOptionsTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedErViewmodeEntitiesDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekGetSourceDataTest.php

52 files with changes
=====================

1) modules/contrib/lingotek/src/Tests/Kernel/LingotekConfigImportTest.php:69

    ---------- begin diff ----------
@@ @@
     \Drupal::service('content_translation.manager')->setEnabled($entity_type_id, $entity_type_id, TRUE);

     // Verify the configuration to create does not exist yet.
-    $this->assertIdentical($storage->exists($config_name), FALSE, $config_name . ' not found.');
+    $this->assertSame($storage->exists($config_name), FALSE, $config_name . ' not found.');

     // Create new config entity for content language translation.
     $data = [
@@ @@
       ],
     ];
     $sync->write($config_name, $data);
-    $this->assertIdentical($sync->exists($config_name), TRUE, $config_name . ' found.');
+    $this->assertSame($sync->exists($config_name), TRUE, $config_name . ' found.');

     // Import.
     $this->configImporter()->import();
@@ @@

     // Verify the values appeared.
     $config = $this->config($config_name);
-    $this->assertIdentical($config->get('translate.entity.entity_test_mul.entity_test_mul.field.field_test_text'), TRUE);
+    $this->assertSame($config->get('translate.entity.entity_test_mul.entity_test_mul.field.field_test_text'), TRUE);

     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
-    $this->assertIdentical($lingotek_config->isEnabled($entity_type_id), TRUE);
+    $this->assertSame($lingotek_config->isEnabled($entity_type_id), TRUE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFake.php:358

    ---------- begin diff ----------
@@ @@
     \Drupal::state()->set('lingotek.downloaded_locale', $locale);
     $type = \Drupal::state()->get('lingotek.uploaded_content_type', 'node');
     $typeWithLocale = $type . '.' . $locale;
-    $path = drupal_get_path('module', 'lingotek') . '/tests/modules/lingotek_test/document_responses/' . $typeWithLocale . '.json';
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek') . '/tests/modules/lingotek_test/document_responses/' . $typeWithLocale . '.json';

     if (!file_exists($path)) {
-      $path = drupal_get_path('module', 'lingotek') . '/tests/modules/lingotek_test/document_responses/' . $type . '.json';
+      $path = \Drupal::service('extension.list.module')->getPath('lingotek') . '/tests/modules/lingotek_test/document_responses/' . $type . '.json';
     }

     $input = file_get_contents($path);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/lingotek/tests/src/Functional/Controller/LingotekNotificationControllerTest.php:80

    ---------- begin diff ----------
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@

     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     // Simulate again the notification of content successfully uploaded.
     $request = $this->client->get($url, [
@@ @@

     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
   }

   /**
@@ @@
     $this->assertStringContainsString('max-age=0', $cache_control_header[0]);

     $response = (string) $request->getBody();
-    $this->assertIdentical($response, 'It works, but nothing to look here.');
+    $this->assertSame($response, 'It works, but nothing to look here.');

     // Simulate again the notification of content successfully uploaded.
     $request = $this->client->get($url, [
@@ @@
     $this->assertStringContainsString('max-age=0', $cache_control_header[0]);

     $response = (string) $request->getBody();
-    $this->assertIdentical($response, 'It works, but nothing to look here.');
+    $this->assertSame($response, 'It works, but nothing to look here.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lingotek/tests/src/Functional/ChineseBulkTranslationTest.php:86

    ---------- begin diff ----------
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('zh_CN');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText("Locale 'zh_CN' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'zh_CN' was added as a translation target for node Llamas are cool.");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText('The zh_CN translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The zh_CN translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText('The translation of node Llamas are cool into zh_CN has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into zh_CN has been downloaded.');

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');

     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText("Translation to zh_CN requested successfully");
+    $this->assertSession()->pageTextContains("Translation to zh_CN requested successfully");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to zh_CN checked successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to zh_CN checked successfully");

     // Download the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText('Translation to zh_CN downloaded successfully');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to zh_CN downloaded successfully');
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText("Translation to zh_CN requested successfully");
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to zh_CN requested successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to zh_CN status checked successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to zh_CN status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText('Translation to zh_CN downloaded successfully');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to zh_CN downloaded successfully');
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lingotek/src/Controller/LingotekBatchController.php:40

    ---------- begin diff ----------
@@ @@
       'operations' => $this->getUploadOperations($entity_type, [$entity_id]),
       'error_message' => t('An error happened.'),
       'finished' => 'lingotek_operation_content_upload_finished',
-      'file' => drupal_get_path('module', 'lingotek') . '/lingotek.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('lingotek') . '/lingotek.batch.inc',
     ];
     $redirect_url = \Drupal::urlGenerator()->generate("entity.$entity_type.content_translation_overview",
       [$entity_type => $entity_id], UrlGeneratorInterface::ABSOLUTE_URL);
@@ @@
       'title' => $this->t('Downloading translations from Lingotek'),
       'operations' => $this->getDownloadOperations($entity_type, [$entity_id], $locales),
       'finished' => 'lingotek_operation_content_download_finished',
-      'file' => drupal_get_path('module', 'lingotek') . '/lingotek.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('lingotek') . '/lingotek.batch.inc',
     ];
     $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
     $redirect_url = \Drupal::urlGenerator()->generate("entity.$entity_type.content_translation_overview",
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationDocumentUploadHookTest.php:45

    ---------- begin diff ----------
@@ @@
     // Check that [token] is encoded via hook_lingotek_config_entity_document_upload().
     // @see lingotek_test_lingotek_config_entity_document_upload()
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual($data['settings.label'], 'Title with [***SITE:NAME***]');
+    $this->assertEquals($data['settings.label'], 'Title with [***SITE:NAME***]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/lingotek/tests/src/Functional/LingotekConfigSubscriberTest.php:60

    ---------- begin diff ----------
@@ @@

     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
-    $this->assertText('Title block uploaded successfully');
+    $this->assertSession()->pageTextContains('Title block uploaded successfully');

     $this->clickLink('ES');
     $this->clickLink('ES');
     $this->clickLink('ES');

-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');

     // Navigate to the Extend page.
     $this->drupalGet('/admin/modules');
@@ @@

     // Post the form uninstalling the lingotek module.
     $edit = ['uninstall[block]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Uninstall');
+    $this->submitForm($edit, 'Uninstall');

     // We get an advice and we can confirm.
-    $this->assertText('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
+    $this->assertSession()->pageTextContains('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
     $this->assertSession()->responseContains('Block');
     $this->assertSession()->responseContains('The listed configuration will be deleted.');
     $this->assertSession()->responseContains('Lingotek Config Metadata');
     $this->assertSession()->responseContains('block.block_1');

-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->submitForm([], 'Uninstall');

     $this->assertSession()->responseContains('The selected modules have been uninstalled.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lingotek/tests/src/Functional/LingotekConfigStatusDownloadTargetTest.php:60

    ---------- begin diff ----------
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX requested successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX requested successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX checked successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX checked successfully');

     // Edit the object
     $config = \Drupal::service('config.factory')->getEditable('system.site');
@@ @@
        'table[system.site_information_settings]' => TRUE,
        $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the status is edited for Spanish.
     $source_edited = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'source-edited') and contains(@title, 'Re-upload (content has changed since last upload)')]");
-    $this->assertEqual(count($source_edited), 1, 'Edited source is shown.');
+    $this->assertEquals(count($source_edited), 1, 'Edited source is shown.');
     $this->assertTargetStatus('ES', 'edited');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/lingotek/tests/src/Functional/LingotekConfigOverridesTest.php:13

    ---------- begin diff ----------
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_community', $defaults['community'], 'Default community could be overridden by settings.php');
+    $this->assertSame('test_community', $defaults['community'], 'Default community could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['community'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['community'], 'Default community could be overridden by settings.php');
+    $this->assertSame('def', $defaults['community'], 'Default community could be overridden by settings.php');
   }

   public function testDefaultProjectOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_project', $defaults['project'], 'Default project could be overridden by settings.php');
+    $this->assertSame('test_project', $defaults['project'], 'Default project could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['project'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['project'], 'Default project could be overridden by settings.php');
+    $this->assertSame('def', $defaults['project'], 'Default project could be overridden by settings.php');
   }

   public function testDefaultWorkflowOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_workflow', $defaults['workflow'], 'Default workflow could be overridden by settings.php');
+    $this->assertSame('test_workflow', $defaults['workflow'], 'Default workflow could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['workflow'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['workflow'], 'Default workflow could be overridden by settings.php');
+    $this->assertSame('def', $defaults['workflow'], 'Default workflow could be overridden by settings.php');
   }

   public function testDefaultVaultOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_vault', $defaults['vault'], 'Default vault could be overridden by settings.php');
+    $this->assertSame('test_vault', $defaults['vault'], 'Default vault could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['vault'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['vault'], 'Default vault could be overridden by settings.php');
+    $this->assertSame('def', $defaults['vault'], 'Default vault could be overridden by settings.php');
   }

   public function testDefaultFilterOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('drupal_default', $defaults['filter'], 'Default filter could be overridden by settings.php');
+    $this->assertSame('drupal_default', $defaults['filter'], 'Default filter could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('project_default', $defaults['filter'], 'Default filter could be overridden by settings.php');
+    $this->assertSame('project_default', $defaults['filter'], 'Default filter could be overridden by settings.php');
   }

   public function testDefaultSubfilterOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('drupal_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');
+    $this->assertSame('drupal_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('project_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');
+    $this->assertSame('project_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationPreSaveHookTest.php:63

    ---------- begin diff ----------
@@ @@
     // Only the proper translatable typed properties are being uploaded.
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_1']));
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_2']));
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');

     // Translate the config using Lingotek.
     $this->clickLink('ES');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationDocumentUploadHookTest.php:60

    ---------- begin diff ----------
@@ @@
     // Only the proper translatable typed properties are being uploaded.
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_1']));
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_2']));
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityTranslationEditedToPendingTest.php:60

    ---------- begin diff ----------
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX requested successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX requested successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX status checked successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX status checked successfully');

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', ['label' => 'Body EDITED'], t('Save settings'));
+    $this->submitForm(['label' => 'Body EDITED'], t('Save settings'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityStatusDownloadTargetTest.php:57

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', ['label' => 'Body EDITED'], t('Save settings'));
+    $this->submitForm(['label' => 'Body EDITED'], t('Save settings'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityBulkProfileTest.php:61

    ---------- begin diff ----------
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there is one node with the Manual Profile
     // Check that there are two nodes with the Automatic Profile
     $manual_profile = $this->xpath("//td[contains(text(), 'Manual')]");
-    $this->assertEqual(count($manual_profile), 1, 'Manual Profile set');
+    $this->assertEquals(count($manual_profile), 1, 'Manual Profile set');

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Disabled Profile
     $disabled_profile = $this->xpath("//td[contains(text(), 'Disabled')]");
-    $this->assertEqual(count($disabled_profile), 1, 'Disabled Profile set');
+    $this->assertEquals(count($disabled_profile), 1, 'Disabled Profile set');

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/lingotek/tests/src/Functional/LingotekConfigDependenciesTest.php:57

    ---------- begin diff ----------
@@ @@

     // Upload article content type for translation.
     $this->clickLink('EN');
-    $this->assertText('article uploaded successfully');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($content_type));
+    $this->assertSession()->pageTextContains('article uploaded successfully');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($content_type));

     $field = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');
     // Go to config translation.
@@ @@

     // Upload article body field type for translation.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));

     // Copy all configuration to staging.
     $this->copyConfig($this->container->get('config.storage'), $this->container->get('config.storage.sync'));
@@ @@
     // Article is back.
     $type = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
     $this->assertNotNull($type, 'Article is back');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($type));
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($type));

     // The Field is back.
     $field = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');
     $this->assertNotNull($field, 'Article Body is back');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/lingotek/tests/src/Functional/LingotekConfigBulkProfileTest.php:44

    ---------- begin diff ----------
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there is one node with the Manual Profile
     // Check that there are two nodes with the Automatic Profile
     $manual_profile = $this->xpath("//td[contains(text(), 'Manual')]");
-    $this->assertEqual(count($manual_profile), 1, 'Manual Profile set');
+    $this->assertEquals(count($manual_profile), 1, 'Manual Profile set');

     $this->clickLink('EN', 1);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Disabled Profile
     $disabled_profile = $this->xpath("//td[contains(text(), 'Disabled')]");
-    $this->assertEqual(count($disabled_profile), 1, 'Disabled Profile set');
+    $this->assertEquals(count($disabled_profile), 1, 'Disabled Profile set');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     // that hold a list of languages.
     $this->rebuildContainer();

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'request_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download:es',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'request_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'cancel',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_CANCELLED);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_UNTRACKED);
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     drupal_static_reset();
     \Drupal::entityTypeManager()->clearCachedDefinitions();
@@ @@
       ->getMappers();
     $mapper = $mappers['system.site_information_settings'];

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $this->drupalGet('admin/config/system/site-information/translate');

@@ @@
     $edit = [
       'site_name' => 'llamas are cool',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     // that hold a list of languages.
     $this->rebuildContainer();

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/lingotek/tests/src/Functional/LingotekChangeAccountDefaultsTest.php:18

    ---------- begin diff ----------
@@ @@

     // Click on the Community link.
     $this->clickLink(t('Edit defaults'), 0);
-    $this->drupalPostForm(NULL, ['community' => 'test_community2'], t('Save configuration'));
+    $this->submitForm(['community' => 'test_community2'], t('Save configuration'));

     $this->assertTableValue('community', 'Test community 2 (test_community2)');
     $this->assertTableValue('workflow', 'Test workflow (test_workflow)');
@@ @@

     // Click on the Project link.
     $this->clickLink(t('Edit defaults'), 1);
-    $this->drupalPostForm(NULL, ['project' => 'test_project2', 'vault' => 'test_vault2'], t('Save configuration'));
+    $this->submitForm(['project' => 'test_project2', 'vault' => 'test_vault2'], t('Save configuration'));

     $this->assertTableValue('community', 'Test community 2 (test_community2)');
     $this->assertTableValue('workflow', 'Test workflow (test_workflow)');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/lingotek/tests/src/Functional/LingotekBulkDeleteTest.php:86

    ---------- begin diff ----------
@@ @@

     // Ensure the delete operation is there.
     $delete_option = $this->xpath('//*[@id="edit-operation"]/option[text()="Delete content"]');
-    $this->assertIdentical(1, count($delete_option), 'Delete operation must be available');
+    $this->assertSame(1, count($delete_option), 'Delete operation must be available');

     // Three nodes must be there.
     $assert_session->linkExists('Llamas are cool 2');
@@ @@
       'table[3]' => FALSE,
       $this->getBulkOperationFormName() => 'delete_nodes',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Ensure the confirmation page is shown.
-    $this->assertText(t('Are you sure you want to delete these content items?'));
-    $this->assertText('Llamas are cool');
-    $this->assertText('Llamas are cool 2');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete these content items?'));
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool 2');
+    $this->submitForm([], t('Delete'));

     // Only one node remains and we are back to the manage page.
-    $this->assertText('Deleted 2 content items.');
+    $this->assertSession()->pageTextContains('Deleted 2 content items.');
     $assert_session->linkNotExists('Llamas are cool 2');
     $assert_session->linkNotExists('Llamas are cool');
     $assert_session->linkExists('Llamas should stay');
-    $this->assertUrl('admin/lingotek/manage/node');
+    $this->assertSession()->addressEquals('admin/lingotek/manage/node');
   }

   /**
@@ @@
       "taxonomy_term[$bundle][fields][name]" => 1,
       "taxonomy_term[$bundle][fields][description]" => 1,
     ];
+    $this->drupalGet('admin/lingotek/settings', []);

-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     $this->goToContentBulkManagementForm('taxonomy_term');

     // Ensure the delete operation is not there.
     $delete_option = $this->xpath('//*[@id="edit-operation"]/option[text()="Delete content"]');
-    $this->assertIdentical(0, count($delete_option), 'Delete operation should not be available');
+    $this->assertSame(0, count($delete_option), 'Delete operation should not be available');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/lingotek/tests/src/Functional/LingotekAccountTest.php:36

    ---------- begin diff ----------
@@ @@
     $this->clickLink('Connect Lingotek Account');
     // Our fake backend generates a token, returns to the site, completes the
     // handshake and return some fake data.
-    $this->assertText('Your account settings have been saved.');
+    $this->assertSession()->pageTextContains('Your account settings have been saved.');
     // Then we can select the defaults for the different fields.
-    $this->drupalPostForm(NULL, ['community' => 'test_community'], 'Next');
-    $this->assertText('The configuration options have been saved.');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm(['community' => 'test_community'], 'Next');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->submitForm([
       'project' => 'test_project',
       'vault' => 'test_vault',
       'workflow' => 'test_workflow',
     ], 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
     // We are done with the defaults, we should be redirected to the dashboard.
-    $this->assertText('Dashboard');
-    $this->assertUrl('admin/lingotek');
+    $this->assertSession()->pageTextContains('Dashboard');
+    $this->assertSession()->addressEquals('admin/lingotek');
   }

   /**
@@ @@

     // Try to navigate to the Dashboard page, and assert we are redirected.
     $this->drupalGet('admin/lingotek');
-    $this->assertUrl('admin/lingotek/setup/account');
+    $this->assertSession()->addressEquals('admin/lingotek/setup/account');
     $assert_session->linkExists('Connect Lingotek Account');
   }

@@ @@
     // This will simulate a "cancel" click, so we need to ensure we are back
     // at the same page. We cannot test that we will be redirected, as it's done
     // via js. There is no way on the server to know the hash part of the url.
-    $this->assertUrl('/admin/lingotek/setup/account');
+    $this->assertSession()->addressEquals('/admin/lingotek/setup/account');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabUtilitiesFormTest.php:35

    ---------- begin diff ----------
@@ @@

     // Activate the settings tab.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], 'Refresh', [], 'lingoteksettings-tab-utilities-form');
+    $this->submitForm([], 'Refresh', 'lingoteksettings-tab-utilities-form');
     $assert_session->responseContains('Project, workflow, vault, and filter information have been refreshed.');

     $config = \Drupal::configFactory()->getEditable('lingotek.settings');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabParagraphsIntegrationFormTest.php:112

    ---------- begin diff ----------
@@ @@
    */
   public function testTabShownIfThereAreSettings() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertText('Integrations Settings');
-    $this->assertText('Paragraphs');
-    $this->assertText('Enable paragraphs to be managed individually instead of embedded in their parent entity.');
+    $this->assertSession()->pageTextContains('Integrations Settings');
+    $this->assertSession()->pageTextContains('Paragraphs');
+    $this->assertSession()->pageTextContains('Enable paragraphs to be managed individually instead of embedded in their parent entity.');
   }

   /**
@@ @@
     // Activate the settings tab.
     $this->drupalGet('admin/lingotek/settings');
     $edit = ['contrib[paragraphs][enable_bulk_management]' => 1];
-    $this->drupalPostForm(NULL, $edit, 'Save settings', [], 'lingoteksettings-integrations-form');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save settings', 'lingoteksettings-integrations-form');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Now the tab is active.
     $this->goToContentBulkManagementForm();
@@ @@
     $assert_session->linkExists('Paragraph');

     $this->clickLink('Paragraph');
-    $this->assertText('Manage Translations');
-    $this->assertText('No content available');
+    $this->assertSession()->pageTextContains('Manage Translations');
+    $this->assertSession()->pageTextContains('No content available');
   }

   /**
@@ @@
     // Disable the settings tab.
     $this->drupalGet('admin/lingotek/settings');
     $edit = ['contrib[paragraphs][enable_bulk_management]' => FALSE];
-    $this->drupalPostForm(NULL, $edit, 'Save settings', [], 'lingoteksettings-integrations-form');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save settings', 'lingoteksettings-integrations-form');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Now the tab is not shown.
     $this->goToContentBulkManagementForm();
@@ @@

     $this->drupalGet('admin/lingotek/settings');

-    $this->assertNoFieldByName('paragraph[image_text][profiles]', NULL, 'The profile is not selectable for paragraphs by default.');
+    $this->assertSession()->fieldNotExists('paragraph[image_text][profiles]');

     $edit = ['contrib[paragraphs][enable_bulk_management]' => 1];
-    $this->drupalPostForm(NULL, $edit, 'Save settings', [], 'lingoteksettings-integrations-form');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save settings', 'lingoteksettings-integrations-form');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

-    $this->assertFieldByName('paragraph[image_text][profiles]', NULL, 'The profile can be assigned to a paragraph if they are managed individually.');
-    $this->assertFieldByName('paragraph[image_text][profiles]', Lingotek::PROFILE_DISABLED, 'The default profile is disabled for paragraphs if they are managed individually.');
+    $this->assertSession()->fieldExists('paragraph[image_text][profiles]');
+    $this->assertSession()->fieldValueEquals('paragraph[image_text][profiles]', Lingotek::PROFILE_DISABLED);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntelligenceMetadataFormTest.php:18

    ---------- begin diff ----------
@@ @@
   public function testIntelligenceMetadataIsSaved() {
     $this->drupalGet('admin/lingotek/settings');

-    $this->assertRaw('<summary role="button" aria-controls="edit-intelligence-metadata" aria-expanded="false" aria-pressed="false">Lingotek Intelligence Metadata</summary>',
-      'Lingotek Intelligence Metadata tab is present.');
+    $this->assertSession()->responseContains('<summary role="button" aria-controls="edit-intelligence-metadata" aria-expanded="false" aria-pressed="false">Lingotek Intelligence Metadata</summary>');

     // Assert defaults are correct.
     $this->assertIntelligenceFieldDefaults();
@@ @@
     ];
     $this->submitForm($edit, 'Save Lingotek Intelligence Metadata', 'lingotekintelligence-metadata-form');

-    $this->assertText('Lingotek Intelligence Metadata saved correctly.');
+    $this->assertSession()->pageTextContains('Lingotek Intelligence Metadata saved correctly.');

     // The values shown are correct.
-    $this->assertNoFieldChecked('edit-intelligence-metadata-use-contact-email-for-author');
-    $this->assertFieldByName('intelligence_metadata[default_author_email]', 'test@example.com');
-    $this->assertFieldByName('intelligence_metadata[business_unit]', 'Test Business Unit');
-    $this->assertFieldByName('intelligence_metadata[business_division]', 'Test Business Division');
-    $this->assertFieldByName('intelligence_metadata[campaign_id]', 'Campaign ID');
-    $this->assertFieldByName('intelligence_metadata[campaign_rating]', 5);
-    $this->assertFieldByName('intelligence_metadata[channel]', 'Channel Test');
-    $this->assertFieldByName('intelligence_metadata[contact_name]', 'Test Contact Name');
-    $this->assertFieldByName('intelligence_metadata[contact_email]', 'contact@example.com');
-    $this->assertFieldByName('intelligence_metadata[content_description]', 'Content description');
-    $this->assertFieldByName('intelligence_metadata[external_style_id]', 'my-style-id');
-    $this->assertFieldByName('intelligence_metadata[purchase_order]', 'PO32');
-    $this->assertFieldByName('intelligence_metadata[region]', 'region2');
+    $this->assertSession()->checkboxNotChecked('edit-intelligence-metadata-use-contact-email-for-author');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[default_author_email]', 'test@example.com');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[business_unit]', 'Test Business Unit');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[business_division]', 'Test Business Division');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[campaign_id]', 'Campaign ID');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[campaign_rating]', 5);
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[channel]', 'Channel Test');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[contact_name]', 'Test Contact Name');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[contact_email]', 'contact@example.com');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[content_description]', 'Content description');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[external_style_id]', 'my-style-id');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[purchase_order]', 'PO32');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[region]', 'region2');

     /** @var \Drupal\lingotek\LingotekIntelligenceMetadataInterface $intelligence */
     $intelligence = \Drupal::service('lingotek.intelligence');
@@ @@
     $this->assertTrue($intelligence->getBaseDomainPermission());
     $this->assertTrue($intelligence->getReferenceUrlPermission());

-    $this->assertIdentical($intelligence->getDefaultAuthorEmail(), 'test@example.com');
-    $this->assertIdentical($intelligence->getBusinessUnit(), 'Test Business Unit');
-    $this->assertIdentical($intelligence->getBusinessDivision(), 'Test Business Division');
-    $this->assertIdentical($intelligence->getCampaignId(), 'Campaign ID');
-    $this->assertIdentical($intelligence->getCampaignRating(), 5);
-    $this->assertIdentical($intelligence->getChannel(), 'Channel Test');
-    $this->assertIdentical($intelligence->getContactName(), 'Test Contact Name');
-    $this->assertIdentical($intelligence->getContactEmail(), 'contact@example.com');
-    $this->assertIdentical($intelligence->getContentDescription(), 'Content description');
-    $this->assertIdentical($intelligence->getExternalStyleId(), 'my-style-id');
-    $this->assertIdentical($intelligence->getPurchaseOrder(), 'PO32');
-    $this->assertIdentical($intelligence->getRegion(), 'region2');
+    $this->assertSame($intelligence->getDefaultAuthorEmail(), 'test@example.com');
+    $this->assertSame($intelligence->getBusinessUnit(), 'Test Business Unit');
+    $this->assertSame($intelligence->getBusinessDivision(), 'Test Business Division');
+    $this->assertSame($intelligence->getCampaignId(), 'Campaign ID');
+    $this->assertSame($intelligence->getCampaignRating(), 5);
+    $this->assertSame($intelligence->getChannel(), 'Channel Test');
+    $this->assertSame($intelligence->getContactName(), 'Test Contact Name');
+    $this->assertSame($intelligence->getContactEmail(), 'contact@example.com');
+    $this->assertSame($intelligence->getContentDescription(), 'Content description');
+    $this->assertSame($intelligence->getExternalStyleId(), 'my-style-id');
+    $this->assertSame($intelligence->getPurchaseOrder(), 'PO32');
+    $this->assertSame($intelligence->getRegion(), 'region2');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertNoFieldCheckedRector
 * AssertRawRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntegrationFormTest.php:25

    ---------- begin diff ----------
@@ @@
    */
   public function testTabNotShownIfThereAreNoSettings() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertNoText('Integrations Settings');
+    $this->assertSession()->pageTextNotContains('Integrations Settings');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabContentFormTest.php:60

    ---------- begin diff ----------
@@ @@
    */
   public function testNoUntranslatableEntitiesAreShown() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertText('There are no translatable content entities specified');
+    $this->assertSession()->pageTextContains('There are no translatable content entities specified');
   }

   /**
@@ @@

     // Check the form contains the article type and only its text-based fields.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertNoText('There are no translatable content types specified');
-    $this->assertNoField('node[article][fields][langcode]');
-    $this->assertField('node[article][enabled]');
-    $this->assertField('node[article][profiles]');
-    $this->assertField('node[article][fields][title]');
-    $this->assertField('node[article][fields][body]');
+    $this->assertSession()->pageTextNotContains('There are no translatable content types specified');
+    $this->assertSession()->fieldNotExists('node[article][fields][langcode]');
+    $this->assertSession()->fieldExists('node[article][enabled]');
+    $this->assertSession()->fieldExists('node[article][profiles]');
+    $this->assertSession()->fieldExists('node[article][fields][title]');
+    $this->assertSession()->fieldExists('node[article][fields][body]');

     // Check the title and body fields.
     $edit = [
@@ @@
       'user[user][fields][user_picture]' => 1,
       'user[user][fields][user_picture:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['body']);
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['field_image']);
     // As the schema here is sequence:ignore, there is no boolean casting.
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '1');
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '1');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);
   }

   /**
@@ @@
       'user[user][fields][user_picture:properties][alt]' => FALSE,
       'user[user][fields][user_picture:properties][title]' => 'title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['body']);
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['field_image']);
     // As the schema here is sequence:ignore, there is no boolean casting.
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '0');
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '1');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '1');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);

     // Uncheck a couple of fields: body and image from node.
     $edit = [
@@ @@
       'user[user][fields][user_picture:properties][alt]' => FALSE,
       'user[user][fields][user_picture:properties][title]' => 'title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     // As the schema here is sequence:ignore, there is no boolean casting.
     // This should probably just be deleted.
     $this->assertFalse(array_key_exists('alt', $config_data['translate']['entity']['node']['article']['field']['field_image:properties']));
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);

     // Uncheck user for translation.
     $edit = [
@@ @@
       'node[article][fields][field_image:properties][title]' => 'title',
       'user[user][enabled]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

-    $this->assertNoFieldChecked('edit-user-user-enabled');
-    $this->assertFieldByName('user[user][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-user-user-fields-user-picture');
-    $this->assertFieldChecked('edit-user-user-fields-user-pictureproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-user-user-enabled');
+    $this->assertSession()->fieldValueEquals('user[user][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-user-user-fields-user-picture');
+    $this->assertSession()->checkboxChecked('edit-user-user-fields-user-pictureproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     // As the schema here is sequence:ignore, there is no boolean casting.
     // This should probably just be deleted.
     $this->assertFalse(array_key_exists('alt', $config_data['translate']['entity']['node']['article']['field']['field_image:properties']));
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);

     $this->assertFalse($config_data['translate']['entity']['user']['user']['enabled']);
     $this->assertTrue($config_data['translate']['entity']['user']['user']['field']['user_picture']);
-    $this->assertEqual($config_data['translate']['entity']['user']['user']['field']['user_picture:properties']['title'], '1');
+    $this->assertEquals($config_data['translate']['entity']['user']['user']['field']['user_picture:properties']['title'], '1');
   }

   public function testICanDisableFields() {
@@ @@
       'node[article][fields][field_image]' => 1,
       'node[article][fields][field_image:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
     // Assert that body translation is enabled.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');

     // Submit again unchecking body and image including subfields.
     $edit = [
@@ @@
       'node[article][fields][field_image]' => FALSE,
       'node[article][fields][field_image:properties][alt]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Those checkboxes should not be checked anymore.
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');

   }

@@ @@
       'node[article][fields][field_image]' => 1,
       'node[article][fields][field_image:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
     // Assert that body translation is enabled.
-    $this->assertFieldChecked('edit-node-article-fields-title', 'The title field is enabled after enabled for Lingotek translation');
-    $this->assertFieldChecked('edit-node-article-fields-body', 'The body field is enabled after enabled for Lingotek translation');
-    $this->assertFieldChecked('edit-node-article-fields-field-image', 'The image field is enabled after enabled for Lingotek translation');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title', 'The title field is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body', 'The body field is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image', 'The image field is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is enabled after enabled for Lingotek translation');

     // Go to the content language settings, and disable the body field.
     // It should result that the field is disabled in Lingotek too.
@@ @@
       'settings[node][article][fields][body]' => FALSE,
       'settings[node][article][fields][field_image]' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm($edit, t('Save configuration'));

     // Get the form and check the fields are not available, because they cannot be translated.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldChecked('edit-node-article-fields-title', 'The title field is enabled after other fields were disabled for content translation');
-    $this->assertNoFieldById('edit-node-article-fields-body', 'The body field is not present after disabled for content translation');
-    $this->assertNoFieldById('edit-node-article-fields-field-image', 'The image field is not present after disabled for content translation');
-    $this->assertNoFieldById('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is not present after image was disabled for content translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title', 'The title field is enabled after other fields were disabled for content translation');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-body', 'The body field is not present after disabled for content translation');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-field-image', 'The image field is not present after disabled for content translation');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is not present after image was disabled for content translation');

     // But also check that the fields are not enabled.
     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
@@ @@
     // Get the form and check the field is not available, even if the storage
     // is translatable.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertNoFieldById('edit-node-article-fields-field-image', '', 'The image field is not present after marked as not translatable.');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-field-image', '');

     // Make the field translatable again.
     $field->setTranslatable(TRUE)->save();
@@ @@

     // If the field is translatable, the field is available again.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldById('edit-node-article-fields-field-image', '', 'The image field is present after marked as translatable.');
+    $this->assertSession()->fieldValueEquals('edit-node-article-fields-field-image', '');
   }

   public function testAddContentTypeAndConfigureLingotekToTranslate() {
@@ @@
     // Check the form contains the article type and only its text-based fields.
     $this->drupalGet('admin/structure/types');
     $this->clickLink('Add content type');
-    $this->assertNoFieldChecked('language_configuration[language_alterable]');
-    $this->assertNoFieldChecked('language_configuration[content_translation]');
-    $this->assertNoFieldChecked('language_configuration[content_translation_for_lingotek]');
+    $this->assertSession()->checkboxNotChecked('language_configuration[language_alterable]');
+    $this->assertSession()->checkboxNotChecked('language_configuration[content_translation]');
+    $this->assertSession()->checkboxNotChecked('language_configuration[content_translation_for_lingotek]');

     $edit = [
       'name' => 'Test',
@@ @@
       'language_configuration[content_translation]' => TRUE,
       'language_configuration[content_translation_for_lingotek]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save and manage fields');
-    $this->assertText('The content type Test has been added.');
+    $this->submitForm($edit, 'Save and manage fields');
+    $this->assertSession()->pageTextContains('The content type Test has been added.');

     // It should result that the field is enabled in Lingotek settings.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldChecked('edit-node-test-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-test-enabled');

     // We automatically enabled sensible defaults fields according to their type.
-    $this->assertFieldChecked('edit-node-test-fields-title');
-    $this->assertFieldChecked('edit-node-test-fields-body');
-    $this->assertNoFieldChecked('edit-node-test-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-test-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-test-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-test-fields-uid');
   }

   /**
@@ @@
       'language_configuration[content_translation]' => FALSE,
       'language_configuration[content_translation_for_lingotek]' => FALSE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     // Check the form contains the article type and only its text-based fields.
     $this->drupalGet('admin/structure/types/manage/article');

     $this->drupalGet('admin/lingotek/settings');
-    $this->assertText('There are no translatable content entities specified');
+    $this->assertSession()->pageTextContains('There are no translatable content entities specified');

     // It should result that the field is enabled in Lingotek.
     $edit = [
@@ @@
       'language_configuration[content_translation]' => TRUE,
       'language_configuration[content_translation_for_lingotek]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
     $this->applyEntityUpdates();

     // Check the form contains the article type and only its text-based fields.
@@ @@
     $this->drupalGet('admin/structure/types/manage/article');

     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');

     // We automatically enabled sensible defaults fields according to their type.
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-uid');
   }

   /**
@@ @@
     $this->drupalGet('admin/lingotek/settings');

     // Check the form contains the fields but they are disabled.
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');

     // Check body field.
     $edit = [
@@ @@
       'node[article][profiles]' => 'automatic',
       'node[article][fields][body]' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
-    $this->assertFieldChecked('edit-node-article-fields-body');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 0);
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
     // There are no properties to show.
-    $this->assertNoRaw('Lingotek translation');
+    $this->assertSession()->responseNotContains('Lingotek translation');

     $edit = [
       'translatable_for_lingotek' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertNoFieldChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertNoFieldChecked("edit-node-article-fields-body");
+    $this->assertSession()->checkboxNotChecked("edit-node-article-fields-body");

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 0);
@@ @@
     $edit = [
       'translatable_for_lingotek' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');

     $this->drupalGet('/admin/lingotek/settings');
-    $this->assertFieldChecked("edit-node-article-fields-body");
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-body");
   }

   /**
@@ @@
     $this->drupalGet('admin/lingotek/settings');

     // Check the form contains the fields but they are disabled.
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');

     // Check image and alt subfield.
     $edit = [
@@ @@
       'node[article][fields][field_image]' => 1,
       'node[article][fields][field_image:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     // Submit again unchecking image including subfields.
     $edit = [
@@ @@
       'node[article][fields][field_image]' => FALSE,
       'node[article][fields][field_image:properties][alt]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Those checkboxes should not be checked anymore.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 1);
     $this->clickLink('Edit');

-    $this->assertNoFieldChecked('edit-translatable-for-lingotek');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-title');

     $edit = [
       'translatable_for_lingotek' => 1,
@@ @@
       'third_party_settings[content_translation][translation_sync][alt]' => 'alt',
       'translatable_for_lingotek_properties_alt' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-title');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $edit = [
       'node[article][fields][field_image]' => 1,
@@ @@
       'node[article][fields][field_image:properties][alt]' => FALSE,
       'node[article][fields][field_image:properties][title]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 1);
@@ @@
       'translatable_for_lingotek_properties_title' => 1,
       'translatable_for_lingotek_properties_file' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-title');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

     $edit = [
       'node[article][fields][field_image]' => 1,
@@ @@
       'node[article][fields][field_image:properties][alt]' => FALSE,
       'node[article][fields][field_image:properties][title]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 1);
@@ @@
       'translatable_for_lingotek_properties_title' => 1,
       'translatable_for_lingotek_properties_file' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-title');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');

     $edit = [
       'node[article][fields][field_image]' => 1,
@@ @@
       'node[article][fields][field_image:properties][title]' => FALSE,
       'node[article][fields][field_image:properties][file]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
   }

   public function testContentTypesAreNotDisabledIfThereAreLotsOfContentTypes() {
@@ @@

     // Check the form contains the fields, and have the proper values,
     // but they are disabled.
-    $this->assertFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');

     $edit = ['node[article][profiles]' => 'manual'];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check the form contains the fields, and have the proper values,
     // but they are disabled.
-    $this->assertFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'manual');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'manual');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByIdRector
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertNoFieldByIdRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabConfigurationFormTest.php:16

    ---------- begin diff ----------
@@ @@
   public function testConfigurationForm() {
     $this->drupalGet('admin/lingotek/settings');
     // Nothing is selected.
-    $this->assertNoFieldChecked('edit-table-configurable-language-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-table-configurable-language-enabled');
     // Check the configurable language and set the manual profile.
     $edit = [
       'table[configurable_language][enabled]' => 1,
       'table[configurable_language][profile]' => 'manual',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-configuration-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-configuration-form');

     // The values shown are correct.
-    $this->assertFieldChecked('edit-table-configurable-language-enabled');
-    $this->assertFieldByName('table[configurable_language][profile]', 'manual');
+    $this->assertSession()->checkboxChecked('edit-table-configurable-language-enabled');
+    $this->assertSession()->fieldValueEquals('table[configurable_language][profile]', 'manual');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation */
     $config_translation = \Drupal::service('lingotek.config_translation');
@@ @@
     $lingotek_config = \Drupal::service('lingotek.configuration');

     $this->assertTrue($config_translation->isEnabled('configurable_language'));
-    $this->assertEqual('manual', $lingotek_config->getConfigEntityDefaultProfileId('configurable_language'));
-    $this->assertEqual(['configurable_language'], $config_translation->getEnabledConfigTypes());
+    $this->assertEquals('manual', $lingotek_config->getConfigEntityDefaultProfileId('configurable_language'));
+    $this->assertEquals(['configurable_language'], $config_translation->getEnabledConfigTypes());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekFunctionalJavascriptTestBase.php:40

    ---------- begin diff ----------
@@ @@
   protected function connectToLingotek() {
     $this->drupalGet('admin/lingotek/setup/account');
     $this->clickLink('Connect Lingotek Account');
-    $this->drupalPostForm(NULL, ['community' => 'test_community'], 'Next');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm(['community' => 'test_community'], 'Next');
+    $this->submitForm([
       'project' => 'test_project',
       'vault' => 'test_vault',
     ], 'Save configuration');
@@ @@
         }
       }
     }
-    $this->drupalPostForm(NULL, [], 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm([], 'Save', 'lingoteksettings-tab-content-form');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsTranslationTest.php:73

    ---------- begin diff ----------
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('it', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // But the disabled language won't be requested.
-    $this->assertText('Cannot request language Italian (it). That language is not enabled for Lingotek translation.');
+    $this->assertSession()->pageTextContains('Cannot request language Italian (it). That language is not enabled for Lingotek translation.');
   }

   /**
@@ @@
    */
   protected function assertSelectionIsKept(string $key) {
     // No valid selection, so permission denied message.
-    $this->assertText('You are not authorized to access this page.');
+    $this->assertSession()->pageTextContains('You are not authorized to access this page.');
   }

   /**
@@ @@
       $status_target = $this->xpath("//a[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
       // If not found, maybe it didn't have a link.
       if (count($status_target) === 1) {
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
       else {
         $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
         if (count($status_target) === 1) {
-          $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+          $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
         }
         else {
           $status_target = $this->xpath("//span[contains(@class,'language-icon')]");
-          $this->assertEqual(count($status_target), 0, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+          $this->assertEquals(count($status_target), 0, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
         }
       }
     }
@@ @@
       $status_target = $this->xpath("//a[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
       // If not found, maybe it didn't have a link.
       if (count($status_target) === 1) {
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
       else {
         $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade8221RemoveContentCloudSettingsTest.php:40

    ---------- begin diff ----------
@@ @@
    */
   public function testUpgrade() {
     $this->assertFalse($this->lingotekConfiguration->getPreference('enable_content_cloud'));
-    $this->assertEqual($this->lingotekConfiguration->getPreference('content_cloud_import_format'), 'article');
-    $this->assertEqual($this->lingotekConfiguration->getPreference('content_cloud_import_status'), 0);
+    $this->assertEquals($this->lingotekConfiguration->getPreference('content_cloud_import_format'), 'article');
+    $this->assertEquals($this->lingotekConfiguration->getPreference('content_cloud_import_status'), 0);

     $this->runUpdates();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/lingotek/tests/src/Functional/Render/Element/RenderElementTypesTest.php:179

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('/lingotek_form_test/lingotek_translation_statuses/node/1');
     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-untracked' and @title='Spanish - Translation exists, but it is not being tracked by Lingotek' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setDocumentId($entity, 'test-document-id');

@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/ca_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-ready' and @title='Catalan - Ready for Download' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/check_target/test-document-id/de_DE?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-pending' and @title='German - In-progress' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_INTERMEDIATE);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_CURRENT);
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/ca_ES' and @target='_blank' and @class='language-icon target-edited' and @title='Catalan - Not current' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/de_DE' and @target='_blank' and @class='language-icon target-current' and @title='German - Current' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/es_ES' and @target='_blank' and @class='language-icon target-intermediate' and @title='Spanish - In-progress (interim translation downloaded)' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_ERROR);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_statuses/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-error' and @title='Spanish - Error' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DISABLED);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_statuses/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-disabled' and @title='Spanish - Disabled' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DELETED);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_ARCHIVED);
@@ @@
     $this->drupalGet('/lingotek_form_test/lingotek_translation_status/node/1');
     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-untracked' and @title='Spanish - Translation exists, but it is not being tracked by Lingotek' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setDocumentId($entity, 'test-document-id');

@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/ca_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-ready' and @title='Catalan - Ready for Download' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/check_target/test-document-id/de_DE?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-pending' and @title='German - In-progress' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_INTERMEDIATE);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_CURRENT);
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/ca_ES' and @target='_blank' and @class='language-icon target-edited' and @title='Catalan - Not current' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/de_DE' and @target='_blank' and @class='language-icon target-current' and @title='German - Current' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/es_ES' and @target='_blank' and @class='language-icon target-intermediate' and @title='Spanish - In-progress (interim translation downloaded)' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_ERROR);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_status/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-error' and @title='Spanish - Error' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DISABLED);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_status/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-disabled' and @title='Spanish - Disabled' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DELETED);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_ARCHIVED);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationTest.php:91

    ---------- begin diff ----------
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Request Review'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Request Review'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Request Review'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Request Review'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Request Review (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Request Review (this translation)'));

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Request Review (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Request Review (this translation)'));

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
     $edit['title[0][value]'] = 'Llamas are cool!';
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Create New Draft (this translation)'));
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));

-    $this->assertText('Article Llamas are cool! has been updated.');
-    $this->assertText('Llamas are cool! was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool! has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool! was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
     $currentStatus = $this->getSession()->getPage()->find('css', 'div[id="edit-current"]');
-    $this->assertEqual($currentStatus->getText(), 'Status Draft');
+    $this->assertEquals($currentStatus->getText(), 'Status Draft');
+    $this->drupalGet('/node/1/edit');

-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Create New Draft (this translation)'));
-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool was updated and sent to Lingotek successfully.');
     $currentStatus = $this->getSession()->getPage()->find('css', 'div[id="edit-current"]');
-    $this->assertEqual($currentStatus->getText(), 'Status Draft');
+    $this->assertEquals($currentStatus->getText(), 'Status Draft');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Create New Draft (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
       'node[article][moderation][upload_status]' => 'needs_review',
       'node[article][moderation][download_transition]' => 'needs_review_published',
     ];
-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->drupalGet('admin/lingotek/settings', []);
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'published'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'published'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // The status is draft.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Draft', 'Workbench current status is draft');
+    $this->assertEquals($value, 'Draft', 'Workbench current status is draft');

     // Moderate to Needs review, so it's uploaded.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     // The status is needs review.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Needs Review', 'Workbench current status is Needs Review');
+    $this->assertEquals($value, 'Needs Review', 'Workbench current status is Needs Review');

     $this->goToContentBulkManagementForm();
     // Request translation.
@@ @@

     // Let's see the current status is modified.
     $this->clickLink('Llamas are cool');
-    $this->assertNoFieldByName('new_state', 'The transition to a new workbench status happened (so no moderation form is shown).');
+    $this->assertSession()->fieldValueNotEquals('new_state', 'The transition to a new workbench status happened (so no moderation form is shown).');
   }

   public function testDownloadWhenContentModerationWasSetupAfterLingotek() {
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // The status is draft.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Draft', 'Workbench current status is draft');
+    $this->assertEquals($value, 'Draft', 'Workbench current status is draft');

     // Moderate to Needs review, so it's uploaded.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     // Moderate back to draft, so the transition won't happen on download.
     $edit = ['new_state' => 'draft'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     $this->goToContentBulkManagementForm();
     // Request translation.
@@ @@
     $this->clickLink('Llamas are cool');
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Draft', 'The transition to a new workbench status didn\'t happen because the source wasn\'t the expected.');
+    $this->assertEquals($value, 'Draft', 'The transition to a new workbench status didn\'t happen because the source wasn\'t the expected.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndPublishNodeForm($edit, 'page');

-    $this->assertText('Page Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Page Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
    */
   protected function enableModerationThroughUI($content_type_id, array $allowed_states, $default_state) {
     $this->drupalGet('admin/structure/types/manage/' . $content_type_id . '/moderation');
-    $this->assertFieldByName('enable_moderation_state');
-    $this->assertNoFieldChecked('edit-enable-moderation-state');
+    $this->assertSession()->fieldExists('enable_moderation_state');
+    $this->assertSession()->checkboxNotChecked('edit-enable-moderation-state');

     $edit['enable_moderation_state'] = 1;

@@ @@

     $edit['default_moderation_state'] = $default_state;

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoFieldCheckedRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationSettingsTest.php:74

    ---------- begin diff ----------
@@ @@

     // We don't have any fields for configuring workbench moderation until it's
     // enabled.
-    $this->assertNoField('node[article][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertNoField('node[article][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[article][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[article][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');

-    $this->assertNoField('node[page][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertNoField('node[page][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');

     // We show a message and link for enabling it.
-    $this->assertText('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
+    $this->assertSession()->pageTextContains('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
     $assert_session->linkByHrefExists('/admin/structure/types/manage/article/moderation');
     $assert_session->linkByHrefExists('/admin/structure/types/manage/page/moderation');

@@ @@

     // Assert the fields for setting up the integration exist and they have
     // sensible defaults.
-    $this->assertField('node[article][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded exists.');
-    $this->assertField('node[article][moderation][download_transition]',
-      'The field for setting the transition that must happen after download exists.');
+    $this->assertSession()->fieldExists('node[article][moderation][upload_status]', 'The field for setting the state when a content should be uploaded exists.');
+    $this->assertSession()->fieldExists('node[article][moderation][download_transition]', 'The field for setting the transition that must happen after download exists.');
     $assert_session->optionExists('edit-node-article-moderation-upload-status', 'published');
     $assert_session->optionExists('edit-node-article-moderation-download-transition', 'published_published');

     // The content types without moderation enabled should show a link instead
     // for configuring them.
-    $this->assertNoField('node[page][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertNoField('node[page][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertText('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->pageTextContains('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
     $assert_session->linkByHrefNotExists('/admin/structure/types/manage/article/moderation');
     $assert_session->linkByHrefExists('/admin/structure/types/manage/page/moderation');

@@ @@
     $assert_session->optionExists('edit-node-article-moderation-upload-status', 'draft');
     $assert_session->optionExists('edit-node-article-moderation-download-transition', 'draft_needs_review');

-    $this->assertNoField("taxonomy_term[$vocabulary_id][moderation][upload_status]",
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
-    $this->assertNoField("taxonomy_term[$vocabulary_id][moderation][download_transition]",
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("taxonomy_term[$vocabulary_id][moderation][upload_status]", 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("taxonomy_term[$vocabulary_id][moderation][download_transition]", 'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');

     $assert_session->linkByHrefExists("/admin/structure/taxonomy/manage/$vocabulary_id/moderation");
     // Users cannot be moderated.
-    $this->assertNoField("user[user][moderation][upload_status]",
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
-    $this->assertNoField("user[user][moderation][download_transition]",
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("user[user][moderation][upload_status]", 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("user[user][moderation][download_transition]", 'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');
     $assert_session->linkByHrefNotExists("/admin/structure/user/manage/user/moderation");

     $header = $this->xpath("//details[@id='edit-entity-node']//th[text()='Workbench Moderation']");
-    $this->assertEqual(count($header), 1, 'There is a Workbench Moderation column for content.');
+    $this->assertEquals(count($header), 1, 'There is a Workbench Moderation column for content.');
     $header = $this->xpath("//details[@id='edit-entity-taxonomy-term']//th[text()='Workbench Moderation']");
-    $this->assertEqual(count($header), 1, 'There is a Workbench Moderation column for terms.');
+    $this->assertEquals(count($header), 1, 'There is a Workbench Moderation column for terms.');
     $header = $this->xpath("//details[@id='edit-entity-user']//th[text()='Workbench Moderation']");
-    $this->assertEqual(count($header), 0, 'There is no Workbench Moderation column for users.');
+    $this->assertEquals(count($header), 0, 'There is no Workbench Moderation column for users.');
   }

   /**
@@ @@
    */
   protected function enableModerationThroughUI($content_type_id, array $allowed_states, $default_state) {
     $this->drupalGet('admin/structure/types/manage/' . $content_type_id . '/moderation');
-    $this->assertFieldByName('enable_moderation_state');
-    $this->assertNoFieldChecked('edit-enable-moderation-state');
+    $this->assertSession()->fieldExists('enable_moderation_state');
+    $this->assertSession()->checkboxNotChecked('edit-enable-moderation-state');

     $edit['enable_moderation_state'] = 1;

@@ @@

     $edit['default_moderation_state'] = $default_state;

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


32) modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationCustomMenuLinkTest.php:67

    ---------- begin diff ----------
@@ @@
     $edit['link[0][uri]'] = '<front>';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/admin/structure/menu/manage/main/add', $edit, t('Save'));
+    $this->drupalGet('/admin/structure/menu/manage/main/add');
+    $this->submitForm($edit, t('Save'));

-    $this->assertText('The menu link has been saved.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('The menu link has been saved.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/lingotek/tests/src/Functional/LingotekWebformBulkTranslationTest.php:96

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText(t('Test uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Test uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual('Test', $data['title']);
-    $this->assertEqual(6, count($data['elements']));
-    $this->assertEqual('First name', $data['elements']['first_name']['#title']);
-    $this->assertEqual('Last name', $data['elements']['last_name']['#title']);
-    $this->assertEqual('Sex', $data['elements']['sex']['#title']);
-    $this->assertEqual('Martial status', $data['elements']['martial_status']['#title']);
-    $this->assertEqual('Employment status', $data['elements']['employment_status']['#title']);
-    $this->assertEqual('Age', $data['elements']['age']['#title']);
+    $this->assertEquals('Test', $data['title']);
+    $this->assertEquals(6, count($data['elements']));
+    $this->assertEquals('First name', $data['elements']['first_name']['#title']);
+    $this->assertEquals('Last name', $data['elements']['last_name']['#title']);
+    $this->assertEquals('Sex', $data['elements']['sex']['#title']);
+    $this->assertEquals('Martial status', $data['elements']['martial_status']['#title']);
+    $this->assertEquals('Employment status', $data['elements']['employment_status']['#title']);
+    $this->assertEquals('Age', $data['elements']['age']['#title']);

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/webform/test?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('Test status checked successfully');
+    $this->assertSession()->pageTextContains('Test status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/lingotek/tests/src/Functional/LingotekUtilitiesDisassociateAllDocumentsTest.php:126

    ---------- begin diff ----------
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('taxonomy_term');

@@ @@

   public function testDisassociateAllDocuments() {
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');

     $node = Node::load(1);
     $term = Term::load(1);
@@ @@

     // Ensure we have disassociated the node.
     $this->assertNull($content_translation_service->getDocumentId($node), 'The node has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));

     // Ensure we have disassociated the term.
     $this->assertNull($content_translation_service->getDocumentId($term), 'The term has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));

     // Ensure we are disassociated the article type.
     $article_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
     $this->assertNull($config_translation_service->getDocumentId($article_type), 'The article node type has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));

     // Ensure we are disassociated the config system.site.
     $mappers = \Drupal::service('plugin.manager.config_translation.mapper')->getMappers();
     $mapper = $mappers['system.site_information_settings'];
     $this->assertNull($config_translation_service->getConfigDocumentId($mapper), 'The system.site config mapper has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));

     // Ensure the UIs show the right statuses.
     $this->goToContentBulkManagementForm('node');
@@ @@

     // Disassociate.
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');

     $node = Node::load(1);
     $term = Term::load(1);
@@ @@

     // Ensure we have disassociated the node.
     $this->assertNull($content_translation_service->getDocumentId($node), 'The node has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));

     // Ensure we have disassociated the term.
     $this->assertNull($content_translation_service->getDocumentId($term), 'The term has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));

     // Ensure we are disassociated the article type.
     $article_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
     $this->assertNull($config_translation_service->getDocumentId($article_type), 'The article node type has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));

     // Ensure we are disassociated the config system.site.
     $mappers = \Drupal::service('plugin.manager.config_translation.mapper')->getMappers();
     $mapper = $mappers['system.site_information_settings'];
     $this->assertNull($config_translation_service->getConfigDocumentId($mapper), 'The system.site config mapper has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));

     // Ensure the UIs show the right statuses.
     $this->goToContentBulkManagementForm('node');
@@ @@

     // Let's try to disassociate then.
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->drupalGet('admin/lingotek/settings');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');

     // We create manually the given data for setting up an incorrect status.
     $metadata = LingotekContentMetadata::create();
@@ @@

     // Let's try to disassociate then.
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->drupalGet('admin/lingotek/settings');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');
   }

   protected function createAndCancelANode() {
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->goToContentBulkManagementForm('taxonomy_term');
     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('taxonomy_term'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   protected function createAndCancelANodeType() {
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   protected function createAndCancelAConfig() {
@@ @@
       'table[system.site_maintenance_mode]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/lingotek/tests/src/Functional/LingotekUserSettingsBulkTranslationTest.php:47

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 3);
-    $this->assertText(t('Account settings uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Account settings uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
     $this->verbose(var_export(\Drupal::state()->get('lingotek.uploaded_content'), TRUE));

     // There is a link for checking status.
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 3);
-    $this->assertText('Account settings status checked successfully');
+    $this->assertSession()->pageTextContains('Account settings status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/entity.user.admin_form/entity.user.admin_form?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => 'download:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
     // Add a language so we can check that it's not marked as for requesting if
     // it was already requested.
     ConfigurableLanguage::createFromLangcode('ko')->setThirdPartySetting('lingotek', 'locale', 'ko_KR')->save();
+    $this->drupalGet('/admin/config/people/accounts');

     // Edit the object
-    $this->drupalPostForm('/admin/config/people/accounts', ['anonymous' => 'Unknown user'], t('Save configuration'));
+    $this->submitForm(['anonymous' => 'Unknown user'], t('Save configuration'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@

     // Request korean, with outdated content available.
     $this->clickLink('KO');
-    $this->assertText("Translation to ko_KR requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ko_KR requested successfully");

     // Reupload the content.
     $this->clickLink('EN', 3);
-    $this->assertText('Account settings has been updated.');
+    $this->assertSession()->pageTextContains('Account settings has been updated.');

     // Korean should be marked as requested, so we can check target.
     $status = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-pending')  and contains(text(), 'KO')]");
-    $this->assertEqual(count($status), 1, 'Korean is requested, so we can still check the progress status of the translation');
+    $this->assertEquals(count($status), 1, 'Korean is requested, so we can still check the progress status of the translation');

     // Recheck status.
     $this->clickLink('EN', 3);
-    $this->assertText('Account settings status checked successfully');
+    $this->assertSession()->pageTextContains('Account settings status checked successfully');

     // Check the translation after having been edited.
     // Check status of the Spanish translation.
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:es',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/entity.user.admin_form/entity.user.admin_form?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check status of all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   /**
@@ @@
     // There is a link for requesting the Catalan translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('CA');
-    $this->assertText("Translation to ca_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ca_ES requested successfully");
   }

   /**
@@ @@
    * Test that when a config is uploaded in a different locale that locale is used.
    * ToDo: Add a test for this.
    */
-  public function testAddingConfigInDifferentLocale() {
-    $this->pass('Test not implemented yet.');
+  public function testAddingConfigInDifferentLocale()
+  {
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/lingotek/tests/src/Unit/LingotekQueueWorkerTest.php:29

    ---------- begin diff ----------
@@ @@
   protected function setUp(): void {
     parent::setUp();
     $this->lingotekDownloaderQueueWorker = new LingotekDownloaderQueueWorker([], 'lingotek_downloader_queue_worker', []);
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManager::class)->disableOriginalConstructor()
-      ->getMock();
-    $node_storage = $this->getMockBuilder(NodeStorage::class)->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManager::class);
+    $node_storage = $this->createMock(NodeStorage::class);
     $node_storage->expects($this->any())
       ->method('load')
       ->with('random')
@@ @@
       ->method('getStorage')
       ->with('random')
       ->willReturn($node_storage);
-    $logger_factory = $this->getMockBuilder(LoggerChannelFactory::class)->disableOriginalConstructor()
-      ->getMock();
+    $logger_factory = $this->createMock(LoggerChannelFactory::class);
     $logger_factory->expects($this->any())
       ->method('get')
-      ->willReturn($this->getMockBuilder(LoggerInterface::class)->disableOriginalConstructor()->getMock());
+      ->willReturn($this->createMock(LoggerInterface::class));
     $container = new ContainerBuilder();
     $container->set('entity_type.manager', $entity_type_manager);
     $container->set('logger.factory', $logger_factory);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


37) modules/contrib/lingotek/tests/src/Unit/LingotekFilterManagerUnitTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\Config|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\Config|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $config;

@@ @@
    * {@inheritdoc}
    */
   protected function setUp(): void {
-    $this->config = $this->getMockBuilder(Config::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->config = $this->createMock(Config::class);
     $configFactory = $this->createMock(ConfigFactoryInterface::class);
     $configFactory->expects($this->any())
       ->method('get')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


38) modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabUtilitiesFormTest.php:23

    ---------- begin diff ----------
@@ @@
     /**
      * The Lingotek service
      *
-     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotek;

@@ @@
     /**
      * The config factory.
      *
-     * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $configFactory;

     /**
-     * @var \Drupal\Core\State\StateInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\State\StateInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $state;

     /**
-     * @var \Drupal\Core\Routing\RouteBuilderInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Routing\RouteBuilderInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $routeBuilder;

@@ @@
     /**
      * The url generator.
      *
-     * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $urlGenerator;

@@ @@
     /**
      * The link generator.
      *
-     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $linkGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


39) modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabAccountFormTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekFilterManager;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $linkGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


40) modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsConnectFormTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekFilterManager;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $linkGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


41) modules/contrib/lingotek/tests/src/Unit/Form/LingotekManagementFormTest.php:40

    ---------- begin diff ----------
@@ @@
     /**
      * The connection object on which to run queries.
      *
-     * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $connection;

@@ @@
     /**
      * The language-locale mapper.
      *
-     * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $languageLocaleMapper;

@@ @@
     /**
      * The entity manager.
      *
-     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeManager;

@@ @@
     /**
      * The entity field manager.
      *
-     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityFieldManager;

@@ @@
     /**
      * The entity type bundle info.
      *
-     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeBundleInfo;

@@ @@
     /**
      * The language manager.
      *
-     * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $languageManager;

@@ @@
     /**
      * The Lingotek configuration service.
      *
-     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotekConfiguration;

@@ @@
     /**
      * The Lingotek service
      *
-     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotek;

@@ @@
     /**
      * The content translation manager.
      *
-     * @var \Drupal\content_translation\ContentTranslationManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\content_translation\ContentTranslationManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $contentTranslationManager;

@@ @@
     /**
      * The Lingotek content translation service.
      *
-     * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $contentTranslationService;

@@ @@
     /**
      * The tempstore factory.
      *
-     * @var \Drupal\Core\TempStore\PrivateTempStoreFactory|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\TempStore\PrivateTempStoreFactory|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $tempStoreFactory;

@@ @@
     /**
      * The module handler.
      *
-     * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $moduleHandler;

@@ @@
     /**
      * The state key value store.
      *
-     * @var \Drupal\Core\State\StateInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\State\StateInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $state;

@@ @@
     /**
      * The link generator.
      *
-     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $linkGenerator;

@@ @@
     protected function setUp(): void {
       parent::setUp();

-      $this->connection = $this->getMockBuilder(Connection::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->connection = $this->createMock(Connection::class);
       $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
       $this->entityFieldManager = $this->createMock(EntityFieldManagerInterface::class);
       $this->entityTypeBundleInfo = $this->createMock(EntityTypeBundleInfoInterface::class);
@@ @@
       $this->languageLocaleMapper = $this->createMock(LanguageLocaleMapperInterface::class);
       $this->contentTranslationManager = $this->createMock(ContentTranslationManagerInterface::class);
       $this->contentTranslationService = $this->createMock(LingotekContentTranslationServiceInterface::class);
-      $this->tempStoreFactory = $this->getMockBuilder(PrivateTempStoreFactory::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->tempStoreFactory = $this->createMock(PrivateTempStoreFactory::class);
       $this->state = $this->createMock(StateInterface::class);
       $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
       $this->linkGenerator = $this->createMock(LinkGeneratorInterface::class);
@@ @@
      * @covers ::buildForm
      */
     public function testQueryExcludesUndefinedLanguageContent() {
-      $select = $this->getMockBuilder(PagerSelectExtender::class)->disableOriginalConstructor()->getMock();
+      $select = $this->createMock(PagerSelectExtender::class);
       $select->expects(($this->any()))
         ->method('extend')
         ->with('\Drupal\Core\Database\Query\PagerSelectExtender')
@@ @@
         ->method('select')
         ->willReturn($select);

-      $tempStore = $this->getMockBuilder(PrivateTempStoreFactory::class)->disableOriginalConstructor()->getMock();
+      $tempStore = $this->createMock(PrivateTempStoreFactory::class);
       $this->tempStoreFactory->expects($this->at(0))
         ->method('get')
         ->with('lingotek.management.filter.node')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


42) modules/contrib/lingotek/tests/src/Unit/EventSubscriber/LingotekConfigSubscriberUnitTest.php:24

    ---------- begin diff ----------
@@ @@
     /**
      * The Lingotek content translation service.
      *
-     * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $translationService;

@@ @@
     /**
      * The mapper manager.
      *
-     * @var \Drupal\config_translation\ConfigMapperManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\config_translation\ConfigMapperManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $mapperManager;

@@ @@
     /**
      * A array of configuration mapper instances.
      *
-     * @var \Drupal\config_translation\ConfigMapperInterface[]|\PHPUnit_Framework_MockObject_MockObject[]
+     * @var \Drupal\config_translation\ConfigMapperInterface[]|\PHPUnit\Framework\MockObject\MockObject[]
      */
     protected $mappers;

@@ @@
     /**
      * A configuration mapper instance.
      *
-     * @var \Drupal\config_translation\ConfigMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\config_translation\ConfigMapperInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $mapper;

@@ @@
     /**
      * The Lingotek configuration service.
      *
-     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotekConfiguration;

@@ @@
     /**
      * Entity manager.
      *
-     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeManager;

@@ @@
     /**
      * The entity field manager.
      *
-     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityFieldManager;

@@ @@
     /**
      * The entity type bundle info.
      *
-     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeBundleInfo;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


43) modules/contrib/lingotek/tests/src/Unit/Controller/LingotekSupportedLocalesControllerTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;

@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageLocaleMapper;

@@ @@
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekConfiguration;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $formBuilder;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   /**
    * The mocked entity storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityStorage;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


44) modules/contrib/lingotek/tests/src/Unit/Controller/LingotekDashboardControllerTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;

@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageLocaleMapper;

@@ @@
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekConfiguration;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $formBuilder;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   /**
    * The mocked entity storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityStorage;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


45) modules/contrib/lingotek/tests/src/Unit/Cli/LingotekCliServiceTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translationService;

@@ @@
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageLocaleMapper;

@@ @@
   /**
    * The output.
    *
-   * @var \Symfony\Component\Console\Output\OutputInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\Console\Output\OutputInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $output;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $this->entityTypeManager = $this->getMockBuilder(EntityTypeManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityTypeManager = $this->createMock(EntityTypeManager::class);
     $this->languageLocaleMapper = $this->createMock(LanguageLocaleMapperInterface::class);
     $this->translationService = $this->createMock(LingotekContentTranslationServiceInterface::class);
     $this->output = $this->createMock(OutputInterface::class);
@@ @@
   }

   public function testCheckTranslationsStatuses() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testCheckTranslationsStatusesAll() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testCheckTranslationsStatusesSome() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testCheckTranslationsStatusesUnexistingLanguage() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testDownloadTranslationsAll() {
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityStorage->expects($this->once())
@@ @@
   }

   public function testDownloadTranslationsSome() {
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityStorage->expects($this->once())
@@ @@
   }

   public function testDownloadTranslationsUnexistingLanguage() {
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityStorage->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


46) modules/contrib/lingotek/tests/src/Unit/Breadcrumb/TranslationJobBreadcrumbBuilderTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $requestStack;

@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Access\AccessManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $accessManager;

@@ @@
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Controller\TitleResolverInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $titleResolver;

@@ @@
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $currentUser;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $cache_contexts_manager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock(CacheContextsManager::class);
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
     $container = new Container();
     $container->set('cache_contexts_manager', $cache_contexts_manager);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


47) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekTargetActionsTest.php:55

    ---------- begin diff ----------
@@ @@
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['body[0][value]'] = 'Llamas are very cool';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translationService = \Drupal::service('lingotek.content_translation');
@@ @@
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['body[0][value]'] = 'Llamas are very cool';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translationService = \Drupal::service('lingotek.content_translation');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


48) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSourceActionsTest.php:51

    ---------- begin diff ----------
@@ @@
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['body[0][value]'] = 'Llamas are very cool';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translationService = \Drupal::service('lingotek.content_translation');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


49) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormWithLotsOfContentTest.php:78

    ---------- begin diff ----------
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertNoFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-title');

     $this->assertSession()->fieldDisabled('edit-node-article-readonly-enabled');
     $this->assertSession()->fieldDisabled('edit-node-article-readonly-fields-title');
@@ @@
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertSession()->waitForElementVisible('css', '#drupal-modal');

-    $this->assertNoFieldChecked('node[article][enabled]');
-    $this->assertNoFieldChecked('node[article][fields][title]');
-    $this->assertNoFieldChecked('node[article][fields][body]');
-    $this->assertNoFieldChecked('node[article][fields][field_image]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][file]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][alt]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][title]');
+    $this->assertSession()->checkboxNotChecked('node[article][enabled]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][title]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][body]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][file]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][alt]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][title]');

     $fieldEnabled = $page->find('css', 'input[name="node[article][enabled]"]');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('node[article][enabled]');
-    $this->assertFieldChecked('node[article][fields][title]');
-    $this->assertFieldChecked('node[article][fields][body]');
-    $this->assertFieldChecked('node[article][fields][field_image]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][file]');
-    $this->assertFieldChecked('node[article][fields][field_image:properties][alt]');
-    $this->assertFieldChecked('node[article][fields][field_image:properties][title]');
+    $this->assertSession()->checkboxChecked('node[article][enabled]');
+    $this->assertSession()->checkboxChecked('node[article][fields][title]');
+    $this->assertSession()->checkboxChecked('node[article][fields][body]');
+    $this->assertSession()->checkboxChecked('node[article][fields][field_image]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][file]');
+    $this->assertSession()->checkboxChecked('node[article][fields][field_image:properties][alt]');
+    $this->assertSession()->checkboxChecked('node[article][fields][field_image:properties][title]');

     $button_pane_buttons = $this->getSession()->getPage()->findAll('css', '.ui-dialog-buttonpane button');
     $this->assertCount(1, $button_pane_buttons);
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-title');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-body');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-field-imageproperties-title');

     $this->assertSession()->fieldDisabled('edit-node-article-readonly-enabled');
     $this->assertSession()->fieldDisabled('edit-node-article-readonly-fields-title');
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


50) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormTest.php:63

    ---------- begin diff ----------
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-text');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

-    $this->drupalPostForm(NULL, [], 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm([], 'Save', 'lingoteksettings-tab-content-form');

     $this->assertSession()
       ->elementTextContains('css', '.messages.messages--status', 'The configuration options have been saved.');

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testWhenDisabledAndEnabledBackNodeArticleFieldsAreKept() {
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
     // We marked body and field_text and kept the others as they were.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testFieldPropertiesDisabledIfFieldDisabled() {
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $imageCheckbox = $page->find('css', '#edit-node-article-fields-field-image');
     $imageCheckbox->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


51) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsContentSingleFormTest.php:58

    ---------- begin diff ----------
@@ @@

     $page = $this->getSession()->getPage();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

-    $this->drupalPostForm(NULL, [], 'Save', [], 'lingoteksettings-content-single-form');
+    $this->submitForm([], 'Save', 'lingoteksettings-content-single-form');

     $this->assertSession()
       ->elementTextContains('css', '.messages.messages--status', 'The configuration options have been saved.');

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testWhenDisabledAndEnabledBackNodeArticleFieldsAreKept() {
@@ @@

     $page = $this->getSession()->getPage();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
     // We marked body and kept the others as they were.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testFieldPropertiesDisabledIfFieldDisabled() {
@@ @@

     $page = $this->getSession()->getPage();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $imageCheckbox = $page->find('css', '#edit-node-article-fields-field-image');
     $imageCheckbox->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


52) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeParagraphsTranslationTest.php:99

    ---------- begin diff ----------
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that only the configured fields have been uploaded, including metatags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     $edit['field_paragraphs_demo[2][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the third time';
     $edit['moderation_state[0][state]'] = 'published';

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that only the configured fields have been uploaded, including metatags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
-    $this->assertEqual($data['field_paragraphs_demo'][2]['field_text_demo'][0]['value'], 'Llamas are very cool for the third time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['field_paragraphs_demo'][2]['field_text_demo'][0]['value'], 'Llamas are very cool for the third time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the first time EDITED';
     $edit['field_paragraphs_demo[2][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the third time EDITED';
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));

     $assert_session->pageTextContains('Llamas are cool EDITED');
     $assert_session->pageTextContains('Llamas are very cool for the first time EDITED');
@@ @@
     $this->drupalGet('node/1/edit');
     $assert_session->fieldValueEquals('field_paragraphs_demo[0][subform][field_text_demo][0][value]', 'Llamas are very cool');

-    $this->drupalPostForm(NULL, NULL, 'Remove');
+    $this->submitForm(NULL, 'Remove');
     $assert_session->waitForElementVisible('css', 'field_paragraphs_demo_0_confirm_remove', 1000);
-    $this->drupalPostForm(NULL, NULL, 'Confirm removal');
+    $this->submitForm(NULL, 'Confirm removal');
     $assert_session->waitForElementRemoved('css', 'field_paragraphs_demo_0_confirm_remove', 1000);

-    $this->drupalPostForm(NULL, NULL, 'Save (this translation)');
+    $this->submitForm(NULL, 'Save (this translation)');
     $assert_session->waitForElementVisible('css', $messages_locator);
     $assert_session->pageTextContains('Paragraphed article Llamas are cool has been updated.');
   }
@@ @@
     $edit = [];
     $edit['settings[node][paragraphed_content_demo][fields][field_paragraphs_demo]'] = 1;
     $edit['settings[paragraph][image_text][fields][field_text_demo]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process
         "/var/lib/drupalci/workspace/drupal-checkouts/drupalxx/vendor/rector/re
         ctor/vendor/symplify/easy-parallel/src/ValueObject/ParallelProcess.php"
         file, due to:
         "Child process timed out after 120 seconds". On line: 103

 [ERROR] Could not process some files, due to:
         "Reached system errors count limit of 50, exiting...".

modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormWithContentModerationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekIntelligenceMetadataTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormWithGroupModuleTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeStatusDownloadTargetTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTabsThemeTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslatableParagraphsAsymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslatableParagraphsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationAppendTypeTitleOptionTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermTranslationDownloadStatusTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekParagraphsBulkFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationDownloadStatusTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekProfileFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationFlowNotCurrentToPendingTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTestBase.php
modules/contrib/lingotek/tests/src/Unit/Remote/LingotekApiUnitTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekInterfaceTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeCohesionRepeaterTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekToolbarIntegrationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabAccountFormTest.php
modules/contrib/lingotek/tests/src/Unit/Remote/LingotekHttpUnitTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeCohesionTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeContentModerationTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekDashboardTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekInterfaceTranslationTestTrait.php
modules/contrib/lingotek/tests/src/Functional/LingotekJobManagementTests.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingBricksTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingContactFormTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekLocaleTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWhenFieldIsRemovedTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekManageLingotekTranslationsPermissionTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingTagsTranslationTest.php
