diff --git a/cmrf_call_report/src/Controller/CMRFCallreportController.php b/cmrf_call_report/src/Controller/CMRFCallreportController.php
index c61b042..b73e4dc 100644
--- a/cmrf_call_report/src/Controller/CMRFCallreportController.php
+++ b/cmrf_call_report/src/Controller/CMRFCallreportController.php
@@ -48,7 +48,7 @@ class CMRFCallreportController extends ControllerBase {
       $scheduled_date = '';
       if (!empty($call->scheduled_date)) {
         $scheduled_date = new \DateTime($call->scheduled_date);
-        $scheduled_date = format_date($scheduled_date->getTimestamp());
+        $scheduled_date = \Drupal::service('date.formatter')->format($scheduled_date->getTimestamp());
       }
       $caching_until = '';
       if (!empty($call->cached_until)) {
diff --git a/cmrf_example/tests/src/Functional/LoadTest.php b/cmrf_example/tests/src/Functional/LoadTest.php
index c559a65..c118742 100644
--- a/cmrf_example/tests/src/Functional/LoadTest.php
+++ b/cmrf_example/tests/src/Functional/LoadTest.php
@@ -30,7 +30,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $entity=CMRFProfile::load('default');
     //this test will fail until you set up those properties correctly.
diff --git a/cmrf_views/src/Plugin/views/field/File.php b/cmrf_views/src/Plugin/views/field/File.php
index 013b850..e018fcd 100644
--- a/cmrf_views/src/Plugin/views/field/File.php
+++ b/cmrf_views/src/Plugin/views/field/File.php
@@ -1,5 +1,6 @@
 <?php namespace Drupal\cmrf_views\Plugin\views\field;
 
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\cmrf_core\Core;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Form\FormStateInterface;
@@ -211,7 +212,7 @@ class File extends FieldPluginBase {
           $file_uri_path  = $uri_path . '/' . $attachment['id'] . '.' . $file['extension'];
           $file_real_path = $real_path . '/' . $attachment['id'] . '.' . $file['extension'];
           if (!file_exists($file_real_path)) {
-            system_retrieve_file($attachment['url'], $file_uri_path, FALSE, FILE_EXISTS_REPLACE);
+            system_retrieve_file($attachment['url'], $file_uri_path, FALSE, FileSystemInterface::EXISTS_REPLACE);
           }
           if (file_exists($file_real_path)) {
             // Load the image style.
diff --git a/cmrf_views/src/Plugin/views/field/JSON.php b/cmrf_views/src/Plugin/views/field/JSON.php
index 1af4534..2c7584b 100644
--- a/cmrf_views/src/Plugin/views/field/JSON.php
+++ b/cmrf_views/src/Plugin/views/field/JSON.php
@@ -4,6 +4,7 @@
 namespace Drupal\cmrf_views\Plugin\views\field;
 
 
+use Drupal\views\Plugin\views\field\Standard;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ -18,7 +19,7 @@ use Drupal\views\ViewExecutable;
  *
  * @ViewsField("cmrf_views_json")
  */
-class JSON extends \Drupal\views\Plugin\views\field\Standard implements MultiItemsFieldHandlerInterface {
+class JSON extends Standard implements MultiItemsFieldHandlerInterface {
 
   /**
    * Does the field supports multiple field values.
@@ -68,7 +69,7 @@ class JSON extends \Drupal\views\Plugin\views\field\Standard implements MultiIte
       // Render an item list from the JSON structure as default markup.
       '#item_list' => $this->render_item_item_list($item),
     ];
-    return render($render);
+    return \Drupal::service('renderer')->render($render);
   }
 
   public function render_item_item_list($item) {
diff --git a/cmrf_views/src/Plugin/views/field/OptionList.php b/cmrf_views/src/Plugin/views/field/OptionList.php
index cbe7010..57f67a4 100644
--- a/cmrf_views/src/Plugin/views/field/OptionList.php
+++ b/cmrf_views/src/Plugin/views/field/OptionList.php
@@ -1,5 +1,6 @@
 <?php namespace Drupal\cmrf_views\Plugin\views\field;
 
+use Drupal\views\Plugin\views\field\Standard;
 use Drupal\views\ResultRow;
 
 /**
@@ -9,7 +10,7 @@ use Drupal\views\ResultRow;
  *
  * @ViewsField("cmrf_views_optionlist")
  */
-class OptionList extends \Drupal\views\Plugin\views\field\Standard {
+class OptionList extends Standard {
 
   public function getValue(ResultRow $values, $field = NULL) {
     $alias = isset($field) ? $this->aliases[$field] : $this->field_alias;
diff --git a/cmrf_webform/cmrf_webform.module b/cmrf_webform/cmrf_webform.module
index 6884998..4a60892 100644
--- a/cmrf_webform/cmrf_webform.module
+++ b/cmrf_webform/cmrf_webform.module
@@ -92,7 +92,7 @@ function cmrf_webform_webform_delete(WebformInterface $entity) {
 /**
  * Implements hook_form_alter.
  */
-function cmrf_webform_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function cmrf_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject();
   if ($webform instanceof EntityFormInterface) {
     $service = \Drupal::service('cmrf_webform.defaults_manager');
diff --git a/tests/src/Functional/InstantiationTests.php b/tests/src/Functional/InstantiationTests.php
index f9754dd..9178c5f 100644
--- a/tests/src/Functional/InstantiationTests.php
+++ b/tests/src/Functional/InstantiationTests.php
@@ -25,7 +25,7 @@ class InstantiationTests extends KernelTestBase {
   protected $profile = 'minimal';
   public static $modules = ['cmrf_core'];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['cmrf_core']);
   }
@@ -36,7 +36,7 @@ class InstantiationTests extends KernelTestBase {
     $prop=new \ReflectionProperty('\Drupal\cmrf_core\Core','callfactory');
     $prop->setAccessible(true);
     $factory=$prop->getValue($core);
-    $this->assertNotEqual($factory,null);
+    $this->assertNotEquals($factory, null);
     $prop=new \ReflectionProperty('\CMRF\PersistenceLayer\SQLPersistingCallFactory','table_name');
     $prop->setAccessible(true);
     $table=$prop->getValue($factory);
