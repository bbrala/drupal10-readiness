diff --git a/src/Event/StripeWebformWebhookEvent.php b/src/Event/StripeWebformWebhookEvent.php
index 411350a..0ef9667 100644
--- a/src/Event/StripeWebformWebhookEvent.php
+++ b/src/Event/StripeWebformWebhookEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\stripe_webform\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webform\WebformSubmissionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when a webhook related to a webform submission is received
diff --git a/src/EventSubscriber/StripeWebformEventSubscriber.php b/src/EventSubscriber/StripeWebformEventSubscriber.php
index e6cad37..2972e83 100644
--- a/src/EventSubscriber/StripeWebformEventSubscriber.php
+++ b/src/EventSubscriber/StripeWebformEventSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\stripe_webform\EventSubscriber;
 
+use Stripe\Customer;
+use Stripe\Error\Base;
 use Drupal\stripe_webform\Event\StripeWebformWebhookEvent;
 use Drupal\stripe\Event\StripeEvents;
 use Drupal\stripe\Event\StripeWebhookEvent;
@@ -69,12 +71,12 @@ class StripeWebformEventSubscriber implements EventSubscriberInterface {
     elseif (!empty($stripe_event['data']['object']['customer'])) {
       $customer = $stripe_event['data']['object']['customer'];
       try {
-        $customer = \Stripe\Customer::retrieve($customer);
+        $customer = Customer::retrieve($customer);
 
         if (isset($customer['metadata']['webform_submission_id'])) {
           $metadata = $customer['metadata'];
         }
-      } catch (\Stripe\Error\Base $e) {
+      } catch (Base $e) {
         $this->logger->error('Stripe API Error: ' . $e->getMessage());
       }
     }
@@ -87,7 +89,7 @@ class StripeWebformEventSubscriber implements EventSubscriberInterface {
       if ($webform_submission) {
         $webhook_event = new StripeWebformWebhookEvent($stripe_event['type'], $webform_submission, $stripe_event);
         $this->event_dispatcher
-          ->dispatch(StripeWebformWebhookEvent::EVENT_NAME, $webhook_event);
+          ->dispatch($webhook_event, StripeWebformWebhookEvent::EVENT_NAME);
       }
     }
 
diff --git a/src/Plugin/WebformHandler/StripeWebformHandler.php b/src/Plugin/WebformHandler/StripeWebformHandler.php
index a806c97..5146de4 100644
--- a/src/Plugin/WebformHandler/StripeWebformHandler.php
+++ b/src/Plugin/WebformHandler/StripeWebformHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\stripe_webform\Plugin\WebformHandler;
 
+use Stripe\StripeClient;
+use Stripe\Exception\ExceptionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -192,7 +194,7 @@ class StripeWebformHandler extends WebformHandlerBase {
     $data = $this->tokenManager->replace($this->configuration, $webform_submission);
 
     try {
-      $stripe = new \Stripe\StripeClient($apikeySecret);
+      $stripe = new StripeClient($apikeySecret);
 
       $metadata = [
         'uuid' => $uuid,
@@ -258,7 +260,7 @@ class StripeWebformHandler extends WebformHandlerBase {
         }
       }
     }
-    catch (\Stripe\Exception\ExceptionInterface $e) {
+    catch (ExceptionInterface $e) {
       $this->messenger()->addError($this->t('Stripe error: %error', ['%error' => $e->getMessage()]), 'error');
     }
  }
diff --git a/stripe_webform.info.yml b/stripe_webform.info.yml
index e669606..7272caf 100644
--- a/stripe_webform.info.yml
+++ b/stripe_webform.info.yml
@@ -1,7 +1,7 @@
 name: 'Stripe webform'
 type: module
 description: 'Provides a stripe webform element and default handlers'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 package: Stripe
 dependencies:
   - stripe:stripe (>=2.0.0)
diff --git a/stripe_webform.module b/stripe_webform.module
index e35b948..3f87294 100644
--- a/stripe_webform.module
+++ b/stripe_webform.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Provides a Stripe webform element and handler.
@@ -20,7 +21,7 @@ function stripe_webform_theme() {
  *
  * Adds a warning about using wizard webforms.
  */
-function stripe_webform_form_webform_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function stripe_webform_form_webform_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject()->getEntity();
 
   if ($webform->hasWizardPages()) {
@@ -34,7 +35,7 @@ function stripe_webform_form_webform_edit_form_alter(&$form, \Drupal\Core\Form\F
  * Disables AJAX on webforms, as it doesn't work nicely with the current stripe
  * implementation.
  */
-function stripe_webform_form_webform_settings_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function stripe_webform_form_webform_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject()->getEntity();
 
   $elements = $webform->getElementsInitializedAndFlattened();
