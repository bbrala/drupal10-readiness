modules/contrib/islandora/islandora.install
modules/contrib/islandora/modules/islandora_advanced_search/src/AdvancedSearchQuery.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Utilities.php
modules/contrib/islandora/modules/islandora_breadcrumbs/src/IslandoraBreadcrumbBuilder.php
modules/contrib/islandora/modules/islandora_core_feature/islandora_core_feature.install
modules/contrib/islandora/modules/islandora_iiif/src/Form/IslandoraIIIFConfigForm.php
modules/contrib/islandora/modules/islandora_video/islandora_video.module
modules/contrib/islandora/src/Commands/IslandoraCommands.php
modules/contrib/islandora/src/EventSubscriber/AdminViewsRouteSubscriber.php
modules/contrib/islandora/src/Plugin/Action/EmitFileEvent.php
modules/contrib/islandora/src/Plugin/ContextReaction/DeleteReaction.php
modules/contrib/islandora/tests/src/Functional/AddChildTest.php
modules/contrib/islandora/tests/src/Functional/IslandoraFunctionalTestBase.php
modules/contrib/islandora/modules/islandora_video/src/Plugin/Action/GenerateVideoDerivative.php
modules/contrib/islandora/src/Plugin/ContextReaction/DerivativeFileReaction.php
modules/contrib/islandora/islandora.module
modules/contrib/islandora/src/EventSubscriber/JwtEventSubscriber.php
modules/contrib/islandora/modules/islandora_video/src/Plugin/Field/FieldFormatter/IslandoraFileVideoFormatter.php
modules/contrib/islandora/modules/islandora_breadcrumbs/tests/src/Functional/BreadcrumbsTest.php
modules/contrib/islandora/modules/islandora_audio/islandora_audio.module
modules/contrib/islandora/modules/islandora_iiif/src/Plugin/views/style/IIIFManifest.php
modules/contrib/islandora/modules/islandora_iiif/islandora_iiif.module
modules/contrib/islandora/modules/islandora_audio/src/Plugin/Action/GenerateAudioDerivative.php
modules/contrib/islandora/src/Plugin/Action/EmitMediaEvent.php
modules/contrib/islandora/src/Plugin/ContextReaction/DerivativeReaction.php
modules/contrib/islandora/src/Plugin/ContextReaction/FormDisplayAlterReaction.php
modules/contrib/islandora/src/Plugin/Action/EmitNodeEvent.php
modules/contrib/islandora/src/Plugin/Action/EmitTermEvent.php
modules/contrib/islandora/src/Plugin/Condition/ContentEntityType.php
modules/contrib/islandora/modules/islandora_audio/src/Plugin/Field/FieldFormatter/IslandoraFileAudioFormatter.php
modules/contrib/islandora/modules/islandora_audio/tests/src/Functional/GenerateAudioDerivativeTest.php
modules/contrib/islandora/src/Plugin/ContextReaction/IndexReaction.php
modules/contrib/islandora/src/Plugin/ContextReaction/JsonldSelfReferenceReaction.php
modules/contrib/islandora/src/ContextProvider/FileContextProvider.php
modules/contrib/islandora/src/EventSubscriber/LinkHeaderSubscriber.php
modules/contrib/islandora/modules/islandora_video/tests/src/Functional/GenerateVideoDerivativeTest.php
modules/contrib/islandora/src/ContextProvider/FileRouteContextProvider.php
modules/contrib/islandora/src/Plugin/Condition/EntityBundle.php
modules/contrib/islandora/src/ContextProvider/MediaContextProvider.php
modules/contrib/islandora/src/ContextProvider/MediaRouteContextProvider.php
modules/contrib/islandora/tests/src/Functional/AddMediaTest.php
modules/contrib/islandora/src/Plugin/Condition/FileUsesFilesystem.php
modules/contrib/islandora/tests/src/Functional/AddMediaToNodeTest.php
modules/contrib/islandora/src/Plugin/ContextReaction/JsonldTypeAlterReaction.php
modules/contrib/islandora/src/ContextProvider/NodeContextProvider.php
modules/contrib/islandora/islandora.tokens.inc
modules/contrib/islandora/src/ContextProvider/TermContextProvider.php
modules/contrib/islandora/src/ContextProvider/TermRouteContextProvider.php
modules/contrib/islandora/src/Plugin/Condition/MediaHasMimetype.php
modules/contrib/islandora/src/ContextReaction/DisplayAlterReaction.php
modules/contrib/islandora/modules/islandora_advanced_search/src/AdvancedSearchQueryTerm.php
modules/contrib/islandora/modules/islandora_breadcrumbs/islandora_breadcrumbs.install
modules/contrib/islandora/modules/islandora_breadcrumbs/src/Form/IslandoraBreadcrumbsSettingsForm.php
modules/contrib/islandora/src/ContextReaction/NormalizerAlterReaction.php
modules/contrib/islandora/src/Plugin/Condition/MediaHasTerm.php
modules/contrib/islandora/src/Plugin/Condition/MediaIsIslandoraMedia.php
modules/contrib/islandora/islandora.views.inc
modules/contrib/islandora/src/Plugin/ContextReaction/ViewModeAlterReaction.php
modules/contrib/islandora/src/Controller/ManageMediaController.php
modules/contrib/islandora/modules/islandora_advanced_search/islandora_advanced_search.module
modules/contrib/islandora/src/EventSubscriber/MediaLinkHeaderSubscriber.php
modules/contrib/islandora/src/Plugin/Condition/MediaSourceHasMimetype.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Controller/AjaxBlocksController.php
modules/contrib/islandora/src/Plugin/EntityReferenceSelection/ExternalUriSelection.php
modules/contrib/islandora/src/Controller/ManageMembersController.php
modules/contrib/islandora/tests/src/Functional/ContentEntityTypeTest.php
modules/contrib/islandora/src/Plugin/Condition/MediaUsesFilesystem.php
modules/contrib/islandora/src/Plugin/Field/FieldFormatter/IslandoraFileMediaFormatterBase.php
modules/contrib/islandora/tests/src/Functional/IslandoraImageFormatterTest.php
modules/contrib/islandora/src/EventSubscriber/NodeLinkHeaderSubscriber.php
modules/contrib/islandora/src/Plugin/Condition/NodeHadNamespace.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Form/AdvancedSearchForm.php
modules/contrib/islandora/tests/src/Functional/DeleteMediaTest.php
modules/contrib/islandora/src/Controller/MediaSourceController.php
modules/contrib/islandora/src/Plugin/Condition/NodeHasAncestor.php
modules/contrib/islandora/tests/src/Functional/IslandoraSettingsFormTest.php
modules/contrib/islandora/src/Plugin/Field/FieldFormatter/IslandoraImageFormatter.php
modules/contrib/islandora/src/EventSubscriber/StompHeaderEventSubscriber.php
modules/contrib/islandora/tests/src/Functional/DerivativeReactionTest.php
modules/contrib/islandora/src/Flysystem/Adapter/FedoraAdapter.php
modules/contrib/islandora/modules/islandora_image/islandora_image.module
modules/contrib/islandora/modules/islandora_image/src/Plugin/Action/GenerateImageDerivative.php
modules/contrib/islandora/src/Plugin/Condition/NodeHasParent.php
modules/contrib/islandora/src/Plugin/Field/FieldType/MediaTrackItem.php
modules/contrib/islandora/tests/src/Functional/JsonldSelfReferenceReactionTest.php
modules/contrib/islandora/src/Controller/RdfMappingsReportController.php
modules/contrib/islandora/modules/islandora_image/src/Plugin/Action/GenerateImageDerivativeFile.php
modules/contrib/islandora/tests/src/Functional/EmitNodeEventTest.php
modules/contrib/islandora/modules/islandora_image/tests/src/Functional/GenerateImageDerivativeTest.php
modules/contrib/islandora/src/Plugin/Condition/NodeHasTerm.php
modules/contrib/islandora/src/Plugin/Field/FieldWidget/MediaTrackWidget.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Form/SettingsForm.php
modules/contrib/islandora/tests/src/Functional/EntityBundleTest.php
modules/contrib/islandora/tests/src/Functional/FormDisplayAlterReactionTest.php
modules/contrib/islandora/src/Plugin/Condition/NodeIsIslandoraObject.php
modules/contrib/islandora/src/Plugin/Condition/NodeIsPublished.php
modules/contrib/islandora/tests/src/Functional/GenerateDerivativeTestBase.php
modules/contrib/islandora/modules/islandora_advanced_search/src/GetConfigTrait.php
modules/contrib/islandora/src/Plugin/views/field/IntegerWeightSelector.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/Block/AdvancedSearchBlock.php
modules/contrib/islandora/src/Plugin/Condition/NodeReferencedByNode.php
modules/contrib/islandora/tests/src/Functional/JsonldTypeAlterReactionTest.php
modules/contrib/islandora/modules/islandora_text_extraction/islandora_text_extraction.module
modules/contrib/islandora/src/Flysystem/Fedora.php
modules/contrib/islandora/tests/src/Functional/IndexingTest.php
modules/contrib/islandora/src/Plugin/Condition/ParentNodeHasTerm.php
modules/contrib/islandora/modules/islandora_text_extraction/src/Controller/MediaSourceController.php
modules/contrib/islandora/src/Plugin/views/filter/NodeHasMediaUse.php
modules/contrib/islandora/tests/src/Functional/LinkHeaderTest.php
modules/contrib/islandora/src/Form/AddChildrenForm.php
modules/contrib/islandora/src/PresetReaction/PresetReaction.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/Block/AdvancedSearchBlockDeriver.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/Block/SearchApiDisplayBlockDeriver.php
modules/contrib/islandora/src/StompFactory.php
modules/contrib/islandora/modules/islandora_text_extraction/src/Plugin/Action/GenerateOCRDerivative.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/Block/SearchResultsPagerBlock.php
modules/contrib/islandora/modules/islandora_text_extraction/src/Plugin/Action/GenerateOCRDerivativeFile.php
modules/contrib/islandora/src/Event/StompHeaderEvent.php
modules/contrib/islandora/src/Form/AddMediaForm.php
modules/contrib/islandora/src/Event/StompHeaderEventException.php
modules/contrib/islandora/src/Event/StompHeaderEventInterface.php
modules/contrib/islandora/tests/src/Functional/MediaSourceUpdateTest.php
modules/contrib/islandora/modules/islandora_text_extraction/src/Plugin/Field/FieldFormatter/OcrTextFormatter.php
modules/contrib/islandora/src/EventGenerator/EmitEvent.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/Block/SearchResultsPagerBlockDeriver.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/Block/ViewAndDisplayIdentifiersTrait.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/Field/FieldFormatter/EntityReferenceCountFormatter.php
modules/contrib/islandora/modules/islandora_text_extraction/src/SearchReindexer.php
modules/contrib/islandora/modules/islandora_text_extraction/tests/src/Functional/LoadTest.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/facets/widget/IncludeExcludeLinksWidget.php
modules/contrib/islandora/tests/src/Functional/NodeHasTermTest.php
modules/contrib/islandora/src/Form/ConfirmDeleteMediaAndFile.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/facets_summary/processor/ResetRemovePage.php
modules/contrib/islandora/tests/src/Functional/ViewModeAlterReactionTest.php
modules/contrib/islandora/src/EventGenerator/EventGenerator.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/facets_summary/processor/ShowActiveExcludedFacets.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/facets_summary/processor/ShowActiveFacets.php
modules/contrib/islandora/tests/src/FunctionalJavascript/IntegerWeightTest.php
modules/contrib/islandora/src/EventGenerator/EventGeneratorInterface.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/facets_summary/processor/ShowFacetsTrait.php
modules/contrib/islandora/src/Form/IslandoraSettingsForm.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/facets_summary/processor/ShowMissingFacets.php
modules/contrib/islandora/modules/islandora_advanced_search/src/Plugin/facets_summary/processor/ShowSearchQueryProcessor.php
modules/contrib/islandora/tests/src/Kernel/EventGeneratorTest.php
modules/contrib/islandora/src/IslandoraContextManager.php
modules/contrib/islandora/src/IslandoraServiceProvider.php
modules/contrib/islandora/src/IslandoraUtils.php
modules/contrib/islandora/tests/src/Kernel/FedoraAdapterTest.php
modules/contrib/islandora/src/MediaSource/MediaSourceService.php
modules/contrib/islandora/src/Plugin/Action/AbstractGenerateDerivative.php
modules/contrib/islandora/src/Plugin/Action/AbstractGenerateDerivativeBase.php
modules/contrib/islandora/src/Plugin/Action/AbstractGenerateDerivativeMediaFile.php
modules/contrib/islandora/src/Plugin/Action/DeleteMediaAndFile.php
modules/contrib/islandora/tests/src/Kernel/FedoraPluginTest.php
modules/contrib/islandora/tests/src/Kernel/IslandoraKernelTestBase.php
modules/contrib/islandora/tests/src/Kernel/JwtEventSubscriberTest.php

36 files with changes
=====================

1) modules/contrib/islandora/modules/islandora_breadcrumbs/tests/src/Functional/BreadcrumbsTest.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create some nodes.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/islandora/modules/islandora_audio/tests/src/Functional/GenerateAudioDerivativeTest.php:67

    ---------- begin diff ----------
@@ @@
       'field_media_of[0][target_id]' => 'Test Node',
       'field_tags[0][target_id]' => 'Preservation Master',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));

     $expected = [
       'source_uri' => 'test_file.txt',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/islandora/modules/islandora_video/tests/src/Functional/GenerateVideoDerivativeTest.php:64

    ---------- begin diff ----------
@@ @@
       'field_media_of[0][target_id]' => 'Test Node',
       'field_tags[0][target_id]' => 'Preservation Master',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));

     $expected = [
       'source_uri' => 'test_file.txt',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/islandora/modules/islandora_advanced_search/islandora_advanced_search.module:47

    ---------- begin diff ----------
@@ @@
 function islandora_advanced_search_library_info_alter(&$libraries, $extension) {
   if ($extension == 'facets') {
     // Override facets module javascript with customizations.
-    $path = '/' . drupal_get_path('module', 'islandora_advanced_search') . '/js/facets';
+    $path = '/' . \Drupal::service('extension.list.module')->getPath('islandora_advanced_search') . '/js/facets';
     $libraries['soft-limit']['js'] = [
       "$path/soft-limit.js" => [],
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


5) modules/contrib/islandora/tests/src/Functional/IndexingTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create an action that dsm's "Goodbye, Cruel World!".
@@ @@

     // Add the Goodbye World reaction.
     $this->addPresetReaction('test', 'delete', 'goodbye_world');
+    $this->drupalGet("$url/delete");

     // Delete the node.
-    $this->drupalPostForm("$url/delete", [], $this->t('Delete'));
+    $this->submitForm([], $this->t('Delete'));
     $this->assertSession()->statusCodeEquals(200);

     // Confirm Goodbye, Cruel World! is printed to the screen.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/islandora/tests/src/Functional/GenerateDerivativeTestBase.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->createUserAndLogin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/islandora/tests/src/Functional/DerivativeReactionTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->node = $this->container->get('entity_type.manager')->getStorage('node')->create([
@@ @@
       'files[field_media_file_0]' => __DIR__ . '/../../fixtures/test_file.txt',
       'field_media_of[0][target_id]' => 'Test Node',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));

     // field_media_of is set and there's a file, so derivatives should fire.
     $this->assertSession()->pageTextContains("Hello World!");
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/islandora/tests/src/Functional/DeleteMediaTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a test user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/islandora/tests/src/Functional/ContentEntityTypeTest.php:51

    ---------- begin diff ----------
@@ @@
       'name[0][value]' => 'Test Media',
       'files[field_media_file_0]' => __DIR__ . '/../../fixtures/test_file.txt',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));
     $this->assertSession()->pageTextNotContains("Hello World!");
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/islandora/tests/src/Functional/AddMediaToNodeTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->node = $this->container->get('entity_type.manager')->getStorage('node')->create([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/islandora/tests/src/Functional/AddChildTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->parent =
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/islandora/modules/islandora_text_extraction/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/islandora/modules/islandora_text_extraction/src/Controller/MediaSourceController.php:97

    ---------- begin diff ----------
@@ @@
       if (!$this->fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
         throw new HttpException(500, "The destination directory does not exist, could not be created, or is not writable");
       }
-      $file = file_save_data($contents, $content_location, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($contents, $content_location, FileSystemInterface::EXISTS_REPLACE);
       if ($media->hasField($destination_field)) {
         $media->{$destination_field}->setValue([
           'target_id' => $file->id(),
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/islandora/modules/islandora_image/tests/src/Functional/GenerateImageDerivativeTest.php:69

    ---------- begin diff ----------
@@ @@
       'field_media_of[0][target_id]' => 'Test Node',
       'field_tags[0][target_id]' => 'Preservation Master',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));

     $expected = [
       'source_uri' => 'test_file.txt',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/islandora/src/EventGenerator/EmitEvent.php:158

    ---------- begin diff ----------
@@ @@
       $data = $this->generateData($entity);

       $event = $this->eventDispatcher->dispatch(
-        StompHeaderEvent::EVENT_NAME,
-        new StompHeaderEvent($entity, $user, $data, $this->getConfiguration())
+        new StompHeaderEvent($entity, $user, $data, $this->getConfiguration()),
+        StompHeaderEvent::EVENT_NAME
       );

       $message = new Message(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/islandora/src/Event/StompHeaderEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\islandora\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;

 use Symfony\Component\HttpFoundation\ParameterBag;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event used to build headers for STOMP.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/islandora/src/Flysystem/Fedora.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\islandora\Flysystem;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
 use Islandora\Chullo\FedoraApi;
 use Psr\Http\Message\RequestInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Drupal plugin for the Fedora Flysystem adapter.
@@ @@
    */
   public function __construct(
     IFedoraApi $fedora,
-    MimeTypeGuesserInterface $mime_type_guesser,
+    MimeTypesInterface $mime_type_guesser,
     LanguageManagerInterface $language_manager
   ) {
     $this->fedora = $fedora;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


18) modules/contrib/islandora/src/Flysystem/Adapter/FedoraAdapter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\islandora\Flysystem\Adapter;

+use Symfony\Component\Mime\MimeTypesInterface;
+use GuzzleHttp\Psr7\Header;
+use function GuzzleHttp\Psr7\parse_header;
 use Islandora\Chullo\IFedoraApi;
 use League\Flysystem\AdapterInterface;
 use League\Flysystem\Adapter\Polyfill\NotSupportingVisibilityTrait;
@@ @@
 use League\Flysystem\Config;
 use GuzzleHttp\Psr7\Response;
 use GuzzleHttp\Psr7\StreamWrapper;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Fedora adapter for Flysystem.
@@ @@
    * @param \Symfony\Component\HttpFoundation\File\Mimetype\MimeTypeGuesserInterface $mime_type_guesser
    *   Mimetype guesser.
    */
-  public function __construct(IFedoraApi $fedora, MimeTypeGuesserInterface $mime_type_guesser) {
+  public function __construct(IFedoraApi $fedora, MimeTypesInterface $mime_type_guesser) {
     $this->fedora = $fedora;
     $this->mimeTypeGuesser = $mime_type_guesser;
   }
@@ @@
     // directory.
     $type = 'dir';
     // phpcs:disable
-    if (class_exists(\GuzzleHttp\Psr7\Header::class)) {
-      $links = \GuzzleHttp\Psr7\Header::parse($response->getHeader('Link'));
+    if (class_exists(Header::class)) {
+      $links = Header::parse($response->getHeader('Link'));
     }
     else {
-      $links = \GuzzleHttp\Psr7\parse_header($response->getHeader('Link'));
+      $links = parse_header($response->getHeader('Link'));
     }
     // phpcs:enable
     foreach ($links as $link) {
@@ @@
     if ($response->getStatusCode() == 410) {
       $return = FALSE;
       // phpcs:disable
-      if (class_exists(\GuzzleHttp\Psr7\Header::class)) {
-        $link_headers = \GuzzleHttp\Psr7\Header::parse($response->getHeader('Link'));
+      if (class_exists(Header::class)) {
+        $link_headers = Header::parse($response->getHeader('Link'));
       }
       else {
-        $link_headers = \GuzzleHttp\Psr7\parse_header($response->getHeader('Link'));
+        $link_headers = parse_header($response->getHeader('Link'));
       }
       // phpcs:enable
       if ($link_headers) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


19) modules/contrib/islandora/src/EventSubscriber/NodeLinkHeaderSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\islandora\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\node\NodeInterface;
 use Drupal\islandora\IslandoraUtils;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 /**
@@ @@
   /**
    * Adds node-specific link headers to appropriate responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   Event containing the response.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();

     $node = $this->getObject($response, 'node');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/islandora/src/EventSubscriber/MediaLinkHeaderSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\islandora\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Url;
 use Drupal\media\MediaInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;

 /**
  * Subscribes to MediaLinkHeader Event.
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();

     $media = $this->getObject($response, 'media');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/islandora/src/EventSubscriber/LinkHeaderSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\islandora\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Adds resource-specific link headers to appropriate responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   Event containing the response.
    */
-  abstract public function onResponse(FilterResponseEvent $event);
+  abstract public function onResponse(ResponseEvent $event);

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


22) modules/contrib/islandora/tests/src/Kernel/JwtEventSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\islandora\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\jwt\Authentication\Event\JwtAuthGenerateEvent;
 use Drupal\jwt\Authentication\Event\JwtAuthValidEvent;
 use Drupal\jwt\Authentication\Event\JwtAuthValidateEvent;
@@ @@
  */
 class JwtEventSubscriberTest extends IslandoraKernelTestBase {

+  use ProphecyTrait;
   use UserCreationTrait;

   /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->user = $this->createUser();
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/islandora/tests/src/Kernel/IslandoraKernelTestBase.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Bootstrap minimal Drupal environment to run the tests.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/islandora/tests/src/Kernel/FedoraPluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\islandora\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\islandora\Flysystem\Fedora;
 use League\Flysystem\AdapterInterface;
 use Islandora\Chullo\IFedoraApi;
 use Psr\Http\Message\ResponseInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Tests the Fedora plugin for Flysystem.
@@ @@
  */
 class FedoraPluginTest extends IslandoraKernelTestBase {

+  use ProphecyTrait;
   /**
    * Mocks up a plugin.
    */
@@ @@
     $prophecy->getBaseUri()->willReturn("");
     $api = $prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)->reveal();
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)->reveal();

     $language_manager = $this->container->get('language_manager');
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/islandora/tests/src/Kernel/FedoraAdapterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\islandora\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use GuzzleHttp\Psr7\Utils;
+use Symfony\Component\Mime\MimeTypesInterface;
+use function GuzzleHttp\Psr7\stream_for;
 use Drupal\islandora\Flysystem\Adapter\FedoraAdapter;
 use GuzzleHttp\Psr7\Response;
 use Islandora\Chullo\IFedoraApi;
 use League\Flysystem\Config;
 use Prophecy\Argument;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Tests the Fedora adapter for Flysystem.
@@ @@
  */
 class FedoraAdapterTest extends IslandoraKernelTestBase {

+  use ProphecyTrait;
   /**
    * Shared functionality for an adapter.
    */
@@ @@
     $prophecy->getHeader('Content-Type')->willReturn(['text/plain']);
     $prophecy->getHeader('Content-Length')->willReturn([strlen("DERP")]);
     // phpcs:disable
-    if (class_exists(\GuzzleHttp\Psr7\Utils::class)) {
-      $prophecy->getBody()->willReturn(\GuzzleHttp\Psr7\Utils::streamFor("DERP"));
+    if (class_exists(Utils::class)) {
+      $prophecy->getBody()->willReturn(Utils::streamFor("DERP"));
     } else {
-      $prophecy->getBody()->willReturn(\GuzzleHttp\Psr7\stream_for("DERP"));
+      $prophecy->getBody()->willReturn(stream_for("DERP"));
     }
     // phpcs:enable
     return $prophecy;
@@ @@
     $prophecy->getResource('', ['Connection' => 'close'])->willReturn($response);
     $api = $prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@
     $prophecy->getResource('', ['Connection' => 'close'])->willReturn($response);
     $api = $prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@
     $prophecy->getResourceHeaders('', ['Connection' => 'close'])->willReturn($response);
     $api = $prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@
     $fedora_prophecy->getResourceHeaders('', ['Connection' => 'close'])->willReturn($prophecy->reveal());
     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     return new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     $adapter = new FedoraAdapter($api, $mime_guesser);
@@ @@

     $api = $fedora_prophecy->reveal();

-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();

     $adapter = new FedoraAdapter($api, $mime_guesser);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/islandora/tests/src/Kernel/EventGeneratorTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a test user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/islandora/tests/src/FunctionalJavascript/IntegerWeightTest.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/islandora/tests/src/Functional/ViewModeAlterReactionTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Node to be referenced via member of.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/islandora/tests/src/Functional/NodeHasTermTest.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/islandora/tests/src/Functional/MediaSourceUpdateTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Make a user with appropriate permissions.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/islandora/tests/src/Functional/LinkHeaderTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $account = $this->createUserAndLogin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/islandora/tests/src/Functional/JsonldTypeAlterReactionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\islandora\Functional;

+use function GuzzleHttp\json_decode;
 /**
  * Tests Jsonld Alter Reaction.
  *
@@ @@
       'administer node fields',
     ]);
     $this->drupalLogin($account);
+    $this->drupalGet('admin/structure/types/manage/test_type/fields/add-field');

     // Add the typed predicate we will select in the reaction config.
     // Taken from FieldUiTestTrait->fieldUIAddNewField.
-    $this->drupalPostForm('admin/structure/types/manage/test_type/fields/add-field', [
+    $this->submitForm([
       'new_storage_type' => 'string',
       'label' => 'Typed Predicate',
       'field_name' => 'type_predicate',
     ], $this->t('Save and continue'));
-    $this->drupalPostForm(NULL, [], $this->t('Save field settings'));
-    $this->drupalPostForm(NULL, [], $this->t('Save settings'));
-    $this->assertRaw('field_type_predicate', 'Redirected to "Manage fields" page.');
+    $this->submitForm([], $this->t('Save field settings'));
+    $this->submitForm([], $this->t('Save settings'));
+    $this->assertSession()->responseContains('field_type_predicate');

     // Add the test node.
     $this->postNodeAddForm('test_type', [
@@ @@

     $contents = $this->drupalGet($url . '?_format=jsonld');
     $this->assertSession()->statusCodeEquals(200);
-    $json = \GuzzleHttp\json_decode($contents, TRUE);
+    $json = json_decode($contents, TRUE);
     $this->assertArrayHasKey('@type',
       $json['@graph'][0], 'Missing @type');
     $this->assertEquals(
@@ @@

     // Check for the new @type from the field_type_predicate value.
     $new_contents = $this->drupalGet($url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertTrue(
       in_array('http://schema.org/Organization', $json['@graph'][0]['@type']),
       'Missing altered @type value of http://schema.org/Organization'
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/islandora/tests/src/Functional/JsonldSelfReferenceReactionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\islandora\Functional;

+use function GuzzleHttp\json_decode;
 /**
  * Class MappingUriPredicateReactionTest.
  *
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $types = ['schema:Thing'];
@@ @@

     $contents = $this->drupalGet($url . '?_format=jsonld');
     $this->assertSession()->statusCodeEquals(200);
-    $json = \GuzzleHttp\json_decode($contents, TRUE);
+    $json = json_decode($contents, TRUE);
     $this->assertArrayHasKey('http://purl.org/dc/terms/title',
       $json['@graph'][0], 'Missing dcterms:title key');
     $this->assertEquals(
@@ @@
     drupal_flush_all_caches();

     $new_contents = $this->drupalGet($url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertEquals(
       'Test Node',
       $json['@graph'][0]['http://purl.org/dc/terms/title'][0]['@value'],
@@ @@
     $this->assertSession()
       ->pageTextContains("The context $context_name has been saved");
     $new_contents = $this->drupalGet($url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertEquals(
       'Test Node',
       $json['@graph'][0]['http://purl.org/dc/terms/title'][0]['@value'],
@@ @@

     $contents = $this->drupalGet($media_url . '?_format=jsonld');
     $this->assertSession()->statusCodeEquals(200);
-    $json = \GuzzleHttp\json_decode($contents, TRUE);
+    $json = json_decode($contents, TRUE);
     $this->assertEquals(
       "$media_url?_format=jsonld",
       $json['@graph'][0]['@id'],
@@ @@
     drupal_flush_all_caches();

     $new_contents = $this->drupalGet($media_url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertEquals(
       "$media_url?_format=jsonld",
       $json['@graph'][0]['http://www.iana.org/assignments/relation/describedby'][0]['@id'],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/islandora/tests/src/Functional/IslandoraSettingsFormTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a test user.
@@ @@
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains("JWT Expiry");
     $this->assertSession()->fieldValueEquals('edit-jwt-expiry', '+2 hour');
+    $this->drupalGet('/admin/config/islandora/core');
     // Blank is not allowed.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => ""], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => ""], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('"" is not a valid time or interval expression.');
+    $this->drupalGet('/admin/config/islandora/core');
     // Negative is not allowed.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "-2 hours"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "-2 hours"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('Time or interval expression cannot be negative');
+    $this->drupalGet('/admin/config/islandora/core');
     // Must include an integer value.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "last hour"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "last hour"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('No numeric interval specified, for example "1 day"');
+    $this->drupalGet('/admin/config/islandora/core');
     // Must have an accepted interval.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "1 fortnight"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "1 fortnight"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('No time interval found, please include one of');
+    $this->drupalGet('/admin/config/islandora/core');
     // Test a valid setting.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "2 weeks"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "2 weeks"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('The configuration options have been saved.');

   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/islandora/tests/src/Functional/IslandoraImageFormatterTest.php:91

    ---------- begin diff ----------
@@ @@
         ':title' => 'Some Title',
       ]
     );
-    $this->assertEqual(count($elements), 1, 'Image linked to content formatter displaying points to Node and not Media.');
+    $this->assertEquals(count($elements), 1, 'Image linked to content formatter displaying points to Node and not Media.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/islandora/tests/src/Functional/IslandoraFunctionalTestBase.php:87

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Delete the node rest config that's bootstrapped with Drupal.
@@ @@
    * Creates a test context.
    */
   protected function createContext($label, $name) {
-    $this->drupalPostForm('admin/structure/context/add', [
+    $this->drupalGet('admin/structure/context/add');
+    $this->submitForm([
       'label' => $label,
       'name' => $name,
-    ],
-      $this->t('Save'));
+    ], $this->t('Save'));
     $this->assertSession()->statusCodeEquals(200);
   }

@@ @@
    * Create a new node by posting its add form.
    */
   protected function postNodeAddForm($bundle_id, $values, $button_text) {
-    $this->drupalPostForm("node/add/$bundle_id", $values, $this->t('@text', ['@text' => $button_text]));
+    $this->drupalGet("node/add/$bundle_id");
+    $this->submitForm($values, $this->t('@text', ['@text' => $button_text]));
     $this->assertSession()->statusCodeEquals(200);
   }

@@ @@
    * Create a new node by posting its add form.
    */
   protected function postTermAddForm($taxomony_id, $values, $button_text) {
-    $this->drupalPostForm("admin/structure/taxonomy/manage/$taxomony_id/add", $values, $this->t('@text', ['@text' => $button_text]));
+    $this->drupalGet("admin/structure/taxonomy/manage/$taxomony_id/add");
+    $this->submitForm($values, $this->t('@text', ['@text' => $button_text]));
     $this->assertSession()->statusCodeEquals(200);
   }

@@ @@
    * Edits a node by posting its edit form.
    */
   protected function postEntityEditForm($entity_url, $values, $button_text) {
-    $this->drupalPostForm("$entity_url/edit", $values, $this->t('@text', ['@text' => $button_text]));
+    $this->drupalGet("$entity_url/edit");
+    $this->submitForm($values, $this->t('@text', ['@text' => $button_text]));
     $this->assertSession()->statusCodeEquals(200);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 36 files have been changed by Rector                                      

