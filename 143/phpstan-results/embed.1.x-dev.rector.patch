diff --git a/src/Entity/EmbedButton.php b/src/Entity/EmbedButton.php
index 26aa9bd..0808d13 100644
--- a/src/Entity/EmbedButton.php
+++ b/src/Entity/EmbedButton.php
@@ -130,13 +130,13 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
       if (!is_file($uri) && !UrlHelper::isExternal($uri)) {
         static::convertEncodedDataToImage($this->icon);
       }
-      $uri = file_create_url($uri);
+      $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     }
     else {
       $uri = $this->getTypePlugin()->getDefaultIconUrl();
     }
 
-    return file_url_transform_relative($uri);
+    return \Drupal::service('file_url_generator')->transformRelative($uri);
   }
 
   /**
diff --git a/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php b/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
index e275664..e8cdf78 100644
--- a/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
+++ b/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
@@ -28,26 +28,26 @@ class EmbedButtonEditorAccessCheckTest extends EmbedTestBase {
     // The anonymous user should have access to the plain_text format, but it
     // hasn't been configured to use an editor yet.
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);
 
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.plain_text');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ -56,38 +56,38 @@ class EmbedButtonEditorAccessCheckTest extends EmbedTestBase {
     ]);
     $editor->save();
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.plain_text');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // Test route with an empty request.
     $this->getRoute('embed_test', 'embed_test_default', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Test route with an invalid text format.
     $this->getRoute('invalid_editor', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.invalid_editor');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.invalid_editor');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
 
     // Test route with an invalid embed button.
     $this->getRoute('embed_test', 'invalid_button');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.invalid_button');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.invalid_button');
   }
 
   /**
diff --git a/tests/src/Functional/EmbedTestBase.php b/tests/src/Functional/EmbedTestBase.php
index 8999e12..312a828 100644
--- a/tests/src/Functional/EmbedTestBase.php
+++ b/tests/src/Functional/EmbedTestBase.php
@@ -50,7 +50,7 @@ abstract class EmbedTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Filtered HTML text format and enable entity_embed filter.
diff --git a/tests/src/Functional/PreviewTest.php b/tests/src/Functional/PreviewTest.php
index c64ae5d..5dec823 100644
--- a/tests/src/Functional/PreviewTest.php
+++ b/tests/src/Functional/PreviewTest.php
@@ -22,31 +22,31 @@ class PreviewTest extends EmbedTestBase {
   public function testPreviewRoute() {
     // Ensure the default filter can be previewed by the anonymous user.
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);
 
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     $this->getRoute('embed_test');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(static::SUCCESS);
 
     // Test preview route with an empty request.
     $this->getRoute('embed_test', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test preview route with an invalid text format.
     $this->getRoute('invalid_format');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
   /**
diff --git a/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php b/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
index 93ef79d..b52f6d4 100644
--- a/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
+++ b/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
@@ -48,7 +48,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Filtered HTML text format and enable entity_embed filter.
@@ -115,7 +115,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $this->assertNotEmpty($assert_session->waitForText("Machine name: $button_id"));
     $page->selectFieldOption('type_id', 'embed_test_default');
     $assert_session->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     // Ensure that the newly created button is listed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($button_label);
@@ -126,7 +126,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $edit = [
       'label' => $new_button_label,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     // Ensure that name and label has been changed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($new_button_label);
@@ -134,7 +134,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
 
     // Delete embed button.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id . '/delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     // Ensure that the deleted embed button no longer exists.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
     $assert_session->pageTextContains('The requested page could not be found.');
@@ -160,15 +160,15 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $this->assertSame('fixed-wing', $aircraft_type->getValue());
 
     $edit['type_settings[aircraft_type]'] = 'invalid';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Cannot select invalid aircraft type.');
 
     $edit['type_settings[aircraft_type]'] = 'helicopters';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Helicopters are just rotorcraft.');
 
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
-    $this->assertFieldByName('type_settings[aircraft_type]', 'rotorcraft');
+    $this->assertSession()->fieldValueEquals('type_settings[aircraft_type]', 'rotorcraft');
   }
 
   public function testCKEditorButtonConflict() {
@@ -193,7 +193,7 @@ class EmbedButtonAdminTest extends WebDriverTestBase {
     $edit = [
       'type_id' => 'embed_test_default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
   }
 
 }
diff --git a/tests/src/Kernel/IconTest.php b/tests/src/Kernel/IconTest.php
index ca34d46..7ea660d 100644
--- a/tests/src/Kernel/IconTest.php
+++ b/tests/src/Kernel/IconTest.php
@@ -26,7 +26,7 @@ class IconTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installEntitySchema('embed_button');
@@ -84,7 +84,7 @@ class IconTest extends KernelTestBase {
    *   The assertion message.
    */
   protected function assertIconUrl($uri, EmbedButtonInterface $button, string $message = '') {
-    $this->assertSame(file_url_transform_relative(file_create_url($uri)), $button->getIconUrl(), $message);
+    $this->assertSame(\Drupal::service('file_url_generator')->generateString($uri), $button->getIconUrl(), $message);
   }
 
 }
diff --git a/tests/src/Unit/DomHelperTraitTest.php b/tests/src/Unit/DomHelperTraitTest.php
index 95eda71..df89317 100644
--- a/tests/src/Unit/DomHelperTraitTest.php
+++ b/tests/src/Unit/DomHelperTraitTest.php
@@ -32,7 +32,7 @@ class DomHelperTraitTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->document = Html::load('<outer><test foo="bar" namespace:foo="bar"><test bar="foo"></test></test></outer>');
     $this->node = $this->document->getElementsByTagName('body')->item(0)->firstChild->firstChild;
   }
