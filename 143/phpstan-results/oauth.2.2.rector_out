modules/contrib/oauth/oauth.install
modules/contrib/oauth/oauth.module
modules/contrib/oauth/src/Access/CustomAccessCheck.php
modules/contrib/oauth/src/Authentication/Provider/OAuthDrupalProvider.php
modules/contrib/oauth/src/Controller/OAuthController.php
modules/contrib/oauth/src/Form/OAuthAddConsumerForm.php
modules/contrib/oauth/src/Form/OAuthDeleteConsumerForm.php
modules/contrib/oauth/src/Form/OAuthSettingsForm.php
modules/contrib/oauth/src/PageCache/DisallowOauthRequests.php
modules/contrib/oauth/src/Tests/OAuthTest.php

3 files with changes
====================

1) modules/contrib/oauth/src/Tests/OAuthTest.php:35

    ---------- begin diff ----------
@@ @@

     // Check that OAuth menu tab is visible at user profile.
     $this->drupalGet('user/' . $account->id() . '/oauth/consumer');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->drupalGet('oauth/consumer/add/' . $account->id());

     // Generate a set of consumer keys.
-    $this->drupalPostForm('oauth/consumer/add/' . $account->id(), array(), 'Add');
-    $this->assertText(t('Added a new consumer.'));
+    $this->submitForm(array(), 'Add');
+    $this->assertSession()->pageTextContains(t('Added a new consumer.'));

     // Delete the set of consumer keys.
     $user_data = \Drupal::service('user.data')->get('oauth', $account->id());
-    $this->drupalPostForm('oauth/consumer/delete/' . $account->id() . '/' . key($user_data), array(), 'Delete');
-    $this->assertText(t('OAuth consumer deleted.'));
+    $this->drupalGet('oauth/consumer/delete/' . $account->id() . '/' . key($user_data));
+    $this->submitForm(array(), 'Delete');
+    $this->assertSession()->pageTextContains(t('OAuth consumer deleted.'));

     $this->drupalLogout();

@@ @@
     $this->drupalLogin($admin_account);

     $this->drupalGet('user/' . $account->id() . '/oauth/consumer');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->drupalGet('oauth/consumer/add/' . $account->id());

     // Generate a set of consumer keys.
-    $this->drupalPostForm('oauth/consumer/add/' . $account->id(), array(), 'Add');
-    $this->assertText(t('Added a new consumer.'));
+    $this->submitForm(array(), 'Add');
+    $this->assertSession()->pageTextContains(t('Added a new consumer.'));

     // Delete the set of consumer keys.
     $user_data = \Drupal::service('user.data')->get('oauth', $account->id());
+    $this->drupalGet('oauth/consumer/delete/' . $account->id() . '/' . key($user_data));

-    $this->drupalPostForm('oauth/consumer/delete/' . $account->id() . '/' . key($user_data), array(), 'Delete');
-    $this->assertText(t('OAuth consumer deleted.'));
+    $this->submitForm(array(), 'Delete');
+    $this->assertSession()->pageTextContains(t('OAuth consumer deleted.'));

     $this->drupalLogout();
   }
@@ @@
     );
     $account = $this->drupalCreateUser($permissions);
     $this->drupalLogin($account);
+    $this->drupalGet('oauth/consumer/add/' . $account->id());

     // Generate a set of consumer keys.
-    $this->drupalPostForm('oauth/consumer/add/' . $account->id(), array(), 'Add');
+    $this->submitForm(array(), 'Add');
     // Get the consumer we just generated for the new user.
     $user_data = \Drupal::service('user.data')->get('oauth', $account->id());
     // Now send an authenticated request to read the entity through REST.
@@ @@
       )
     );
     $this->verbose('GET request to: ' . $endpoint . '<hr />' . $out);
-    $this->assertResponse('200', 'HTTP response code is 200 for successfully authenticated request.');
+    $this->assertSession()->statusCodeEquals('200', 'HTTP response code is 200 for successfully authenticated request.');
     $this->curlClose();
   }

@@ @@

     // Initiate user session.
     $this->drupalLogin($account);
+    $this->drupalGet('oauth/consumer/add/' . $account->id());

     // Generate a set of consumer keys.
-    $this->drupalPostForm('oauth/consumer/add/' . $account->id(), array(), 'Add');
+    $this->submitForm(array(), 'Add');

     // Delete the user.
     $uid = $account->id();
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/oauth/src/Form/OAuthAddConsumerForm.php:88

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    $consumer_key = user_password(32);
-    $consumer_secret  = user_password(32);
+    $consumer_key = \Drupal::service('password_generator')->generate(32);
+    $consumer_secret  = \Drupal::service('password_generator')->generate(32);
     $key_hash = sha1($consumer_key);
     $uid = $form_state->getValue('uid');
     $consumer = array(
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/oauth/src/Authentication/Provider/OAuthDrupalProvider.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth\Authentication\Provider;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\user\Entity\User;
 use Drupal\user\UserDataInterface;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use \OauthProvider;
 use \OauthException;
 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function handleException(GetResponseForExceptionEvent $event) {
+  public function handleException(ExceptionEvent $event) {
     return FALSE;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

