modules/contrib/encrypt/drush/encrypt.drush.inc
modules/contrib/encrypt/src/EncryptionMethodInterface.php
modules/contrib/encrypt/tests/src/Functional/EncryptTest.php
modules/contrib/encrypt/src/EncryptionMethodManager.php
modules/contrib/encrypt/src/EncryptionMethodPluginCollection.php
modules/contrib/encrypt/encrypt.install
modules/contrib/encrypt/src/EncryptionProfileInterface.php
modules/contrib/encrypt/src/EncryptionProfileManager.php
modules/contrib/encrypt/encrypt.post_update.php
modules/contrib/encrypt/src/Annotation/EncryptionMethod.php
modules/contrib/encrypt/src/EncryptionProfileManagerInterface.php
modules/contrib/encrypt/src/Entity/EncryptionProfile.php
modules/contrib/encrypt/src/Commands/EncryptCommands.php
modules/contrib/encrypt/src/Controller/EncryptionProfileListBuilder.php
modules/contrib/encrypt/src/Exception/EncryptException.php
modules/contrib/encrypt/src/Exception/EncryptionMethodCanNotDecryptException.php
modules/contrib/encrypt/src/Form/EncryptSettingsForm.php
modules/contrib/encrypt/src/Form/EncryptionProfileDeleteForm.php
modules/contrib/encrypt/src/EncryptService.php
modules/contrib/encrypt/src/Form/EncryptionProfileForm.php
modules/contrib/encrypt/src/EncryptServiceInterface.php
modules/contrib/encrypt/tests/src/Functional/EncryptTestBase.php
modules/contrib/encrypt/tests/src/Kernel/AsymmetricalEncryptionMethod.php
modules/contrib/encrypt/tests/src/Unit/EncryptServiceTest.php
modules/contrib/encrypt/src/Form/EncryptionProfileTestForm.php
modules/contrib/encrypt/src/Plugin/EncryptionMethod/EncryptionMethodBase.php
modules/contrib/encrypt/src/Plugin/EncryptionMethodPluginFormInterface.php
modules/contrib/encrypt/tests/modules/encrypt_test/src/Exception/AsymmetricalEncryptionMethodCanNotDecryptException.php
modules/contrib/encrypt/tests/modules/encrypt_test/src/Plugin/EncryptionMethod/AsymmetricalEncryptionMethod.php
modules/contrib/encrypt/tests/modules/encrypt_test/src/Plugin/EncryptionMethod/ConfigTestEncryptionMethod.php
modules/contrib/encrypt/tests/modules/encrypt_test/src/Plugin/EncryptionMethod/TestEncryptionMethod.php
modules/contrib/encrypt/tests/src/Unit/Entity/EncryptionProfileTest.php

5 files with changes
====================

1) modules/contrib/encrypt/tests/src/Unit/Entity/EncryptionProfileTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * A mocked Key entity.
    *
-   * @var \Drupal\key\Entity\Key|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\key\Entity\Key|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $key;

@@ @@
   /**
    * A mocked EncryptionMethod.
    *
-   * @var \Drupal\encrypt\EncryptionMethodInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\encrypt\EncryptionMethodInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $encryptionMethod;

@@ @@
   /**
    * A mocked KeyRepository.
    *
-   * @var \Drupal\key\KeyRepository|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\key\KeyRepository|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $keyRepository;

@@ @@
   /**
    * A mocked plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultLazyPluginCollection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Plugin\DefaultLazyPluginCollection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginCollection;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $container = new ContainerBuilder();
@@ @@
     \Drupal::setContainer($container);

     // Mock a Key entity.
-    $this->key = $this->getMockBuilder('\Drupal\key\Entity\Key')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->key = $this->createMock('\Drupal\key\Entity\Key');

     // Set up expectations for key.
-    $key_type = $this->getMockBuilder('\Drupal\key\Plugin\KeyType\EncryptionKeyType')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $key_type = $this->createMock('\Drupal\key\Plugin\KeyType\EncryptionKeyType');
     $key_type->expects($this->any())
       ->method('getPluginId')
       ->will($this->returnValue('encryption'));
@@ @@
       ->will($this->returnValue("key_value"));

     // Mock an EncryptionMethod.
-    $this->encryptionMethod = $this->getMockBuilder('\Drupal\encrypt\EncryptionMethodInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptionMethod = $this->createMock('\Drupal\encrypt\EncryptionMethodInterface');

     // Set up expectations for encryption method.
     $this->encryptionMethod->expects($this->any())
@@ @@
       ->will($this->returnValue([]));

     // Mock a KeyRepository.
-    $this->keyRepository = $this->getMockBuilder('\Drupal\key\KeyRepository')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->keyRepository = $this->createMock('\Drupal\key\KeyRepository');

     // Mock a plugin collection.
-    $this->pluginCollection = $this->getMockBuilder('\Drupal\Core\Plugin\DefaultLazyPluginCollection')
-      ->disableOriginalConstructor()
-      ->setMethods(['get', 'set', 'addInstanceID'])
-      ->getMock();
+    $this->pluginCollection = $this->createMock('\Drupal\Core\Plugin\DefaultLazyPluginCollection');
   }

   /**
@@ @@
    */
   public function testValidate($enc_method_id, $enc_key, $enc_method_def, $expected_errors) {
     // Set up a mock for the EncryptionProfile class to mock some methods.
-    $encryption_profile = $this->getMockBuilder('\Drupal\encrypt\Entity\EncryptionProfile')
-      ->setMethods([
-        'getEncryptionMethod',
-        'getEncryptionMethodId',
-        'getEncryptionKey',
-        'getEncryptionKeyId',
-      ]
-      )
-      ->disableOriginalConstructor()
-      ->getMock();
+    $encryption_profile = $this->createMock('\Drupal\encrypt\Entity\EncryptionProfile');

     // Set expectations for the EncryptionMethod.
     $this->encryptionMethod->expects($this->any())
@@ @@
    */
   public function testGetEncryptionMethod() {
     // Set up a mock for the EncryptionProfile class to mock some methods.
-    $encryption_profile = $this->getMockBuilder('\Drupal\encrypt\Entity\EncryptionProfile')
-      ->setMethods([
-        'getPluginCollection',
-        'getEncryptionMethodId',
-      ]
-      )
-      ->disableOriginalConstructor()
-      ->getMock();
+    $encryption_profile = $this->createMock('\Drupal\encrypt\Entity\EncryptionProfile');

     // Set up expectations for plugin collection.
     $this->pluginCollection->expects($this->atLeastOnce())
@@ @@
    */
   public function testSetEncryptionMethod() {
     // Set up a mock for the EncryptionProfile class to mock some methods.
-    $encryption_profile = $this->getMockBuilder('\Drupal\encrypt\Entity\EncryptionProfile')
-      ->setMethods(['getPluginCollection'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $encryption_profile = $this->createMock('\Drupal\encrypt\Entity\EncryptionProfile');

     $this->pluginCollection->expects($this->once())
       ->method('addInstanceID');
@@ @@
    */
   public function testGetEncryptionKey() {
     // Set up a mock for the EncryptionProfile class to mock some methods.
-    $encryption_profile = $this->getMockBuilder('\Drupal\encrypt\Entity\EncryptionProfile')
-      ->setMethods([
-        'getKeyRepository',
-        'getEncryptionKeyId',
-      ]
-      )
-      ->disableOriginalConstructor()
-      ->getMock();
+    $encryption_profile = $this->createMock('\Drupal\encrypt\Entity\EncryptionProfile');

     $this->keyRepository->expects($this->any())
       ->method('getKey')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/encrypt/tests/src/Unit/EncryptServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\encrypt\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\encrypt\EncryptionMethodInterface;
 use Drupal\encrypt\EncryptionMethodManager;
 use Drupal\encrypt\EncryptionProfileInterface;
@@ @@
  */
 class EncryptServiceTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Default configuration.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up a mock EncryptionProfile entity.
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/encrypt/tests/src/Kernel/AsymmetricalEncryptionMethod.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a 128bit testkey.
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/encrypt/tests/src/Functional/EncryptTestBase.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/encrypt/tests/src/Functional/EncryptTest.php:17

    ---------- begin diff ----------
@@ @@

     // Check if the plugin exists.
     // Encryption method option is present.
-    $this->assertOption('edit-encryption-method', 'test_encryption_method');
+    $this->assertSession()->optionExists('edit-encryption-method', 'test_encryption_method');
     // Encryption method text is present.
-    $this->assertText('Test Encryption method');
+    $this->assertSession()->pageTextContains('Test Encryption method');

     $edit = [
       'encryption_method' => 'test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $edit = [
       'id' => 'test_encryption_profile',
@@ @@
       'encryption_method' => 'test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $encryption_profile = \Drupal::service('entity_type.manager')->getStorage('encryption_profile')->load('test_encryption_profile');
     $this->assertNotEmpty($encryption_profile, 'Encryption profile was successfully saved.');
@@ @@

     // Check if the plugin exists.
     // Encryption method option is present.
-    $this->assertOption('edit-encryption-method', 'test_encryption_method');
+    $this->assertSession()->optionExists('edit-encryption-method', 'test_encryption_method');
     // Encryption method text is present.
-    $this->assertText('Test Encryption method');
+    $this->assertSession()->pageTextContains('Test Encryption method');

     $edit = [
       'encryption_method' => 'test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Create an encryption profile.
     $edit = [
@@ @@
       'encryption_method' => 'test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Test the encryption profile edit form.
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_encryption_profile');
     // The warning about editing an encryption profile is visible.
-    $this->assertText('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
+    $this->assertSession()->pageTextContains('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
     // The encryption method field is not visible.
-    $this->assertNoFieldByName('encryption_method', NULL);
+    $this->assertSession()->fieldNotExists('encryption_method');
     // The encryption key field is not visible.
-    $this->assertNoFieldByName('encryption_key', NULL);
+    $this->assertSession()->fieldNotExists('encryption_key');

-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');

     // The warning about editing an encryption profile is no longer visible.
-    $this->assertNoText('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
+    $this->assertSession()->pageTextNotContains('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
     // The encryption method field is now visible.
-    $this->assertFieldByName('encryption_method', NULL);
+    $this->assertSession()->fieldExists('encryption_method');
     // The encryption key field is now visible.
-    $this->assertFieldByName('encryption_key', NULL);
+    $this->assertSession()->fieldExists('encryption_key');

     // Check that the 128 bit key exists so display changes don't give false
     // positives on the key deletion assertions below.
     $this->drupalGet('admin/config/system/encryption/profiles');
-    $this->assertText('Key 128 bit');
+    $this->assertSession()->pageTextContains('Key 128 bit');

     // Now delete the testkey.
     $this->drupalGet('admin/config/system/keys');
@@ @@
     $this->clickLink('Delete');
     // Warning is shown that linked dependency will also be deleted when
     // deleting the key.
-    $this->assertText('Encryption Profile');
+    $this->assertSession()->pageTextContains('Encryption Profile');
     // The encryption profile linked dependency is listed as the linked
     // dependency.
-    $this->assertText('Test encryption profile');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->assertSession()->pageTextContains('Test encryption profile');
+    $this->submitForm([], 'Delete');

     // Check that the 128 bit key no longer exists.
     $this->drupalGet('admin/config/system/encryption/profiles');
-    $this->assertNoText('Key 128 bit');
+    $this->assertSession()->pageTextNotContains('Key 128 bit');

     // Test "check_profile_status" setting.
     $this->config('encrypt.settings')
@@ @@
       ->set('check_profile_status', FALSE)
       ->save();
     $this->drupalGet('admin/config/system/encryption/profiles');
-    $this->assertNoText('The key linked to this encryption profile does not exist.');
+    $this->assertSession()->pageTextNotContains('The key linked to this encryption profile does not exist.');
   }

   /**
@@ @@

     // Check if the plugin exists.
     // Config encryption method option is present.
-    $this->assertOption('edit-encryption-method', 'config_test_encryption_method');
+    $this->assertSession()->optionExists('edit-encryption-method', 'config_test_encryption_method');
     // Config encryption method text is present.
-    $this->assertText('Config Test Encryption method');
+    $this->assertSession()->pageTextContains('Config Test Encryption method');

     // Check encryption method without config.
     $edit = [
@@ @@
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
       'encryption_method' => 'test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Saved the Test encryption profile.');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('Saved the Test encryption profile.');
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_encryption_profile');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     // Test encryption method has no config form.
-    $this->assertNoFieldByName('encryption_method_configuration[mode]', NULL);
+    $this->assertSession()->fieldNotExists('encryption_method_configuration[mode]');

     // Check encryption method with config.
     $this->drupalGet('admin/config/system/encryption/profiles/add');
@@ @@
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
       'encryption_method' => 'config_test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Saved the Test 2 encryption profile.');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('Saved the Test 2 encryption profile.');
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_encryption_profile_2');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     // Config test encryption method has config form.
-    $this->assertFieldByName('encryption_method_configuration[mode]', NULL);
+    $this->assertSession()->fieldExists('encryption_method_configuration[mode]');
     // Config form shows element.
-    $this->assertOptionByText('encryption_method_configuration[mode]', 'CBC');
+    $this->assertSession()->optionExists('encryption_method_configuration[mode]', 'CBC');

     // Save encryption profile with configured encryption method.
     $this->drupalGet('admin/config/system/encryption/profiles/add');
@@ @@
       'encryption_method' => 'config_test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check if encryption method configuration was succesfully saved.
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_config_encryption_profile');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     $edit = [
       'encryption_method_configuration[mode]' => 'CBC',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     /** @var \Drupal\encrypt\EncryptionProfileInterface $encryption_profile */
     $encryption_profile = \Drupal::service('entity_type.manager')->getStorage('encryption_profile')->load('test_config_encryption_profile');
     $this->assertNotEmpty($encryption_profile, 'Encryption profile was successfully saved');
@@ @@
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_config_encryption_profile');

     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');

     // Select encryption method without config.
     $edit = [
@@ @@
       'encryption_method' => 'test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_config_encryption_profile');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     // Test encryption method has no config form.
-    $this->assertNoFieldByName('encryption_method_configuration[mode]', NULL);
+    $this->assertSession()->fieldNotExists('encryption_method_configuration[mode]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertOptionByTextRector
 * AssertOptionRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

