modules/contrib/easy_email/easy_email.install
modules/contrib/easy_email/modules/easy_email_override/src/EmailOverrideHtmlRouteProvider.php
modules/contrib/easy_email/src/Entity/EasyEmail.php
modules/contrib/easy_email/src/Service/EmailUserEvaluator.php
modules/contrib/easy_email/modules/easy_email_override/src/EmailOverrideListBuilder.php
modules/contrib/easy_email/easy_email.module
modules/contrib/easy_email/modules/easy_email_override/src/Entity/EmailOverride.php
modules/contrib/easy_email/modules/easy_email_override/src/Entity/EmailOverrideInterface.php
modules/contrib/easy_email/modules/easy_email_override/src/Form/EmailOverrideDeleteForm.php
modules/contrib/easy_email/modules/easy_email_override/src/Form/EmailOverrideForm.php
modules/contrib/easy_email/src/Service/EmailUserEvaluatorInterface.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailSendTest.php
modules/contrib/easy_email/modules/easy_email_override/src/Plugin/Email/Email.php
modules/contrib/easy_email/modules/easy_email_override/src/Plugin/Email/EmailInterface.php
modules/contrib/easy_email/modules/easy_email_override/src/Service/DeclaredEmailManager.php
modules/contrib/easy_email/modules/easy_email_override/src/Service/DeclaredEmailManagerInterface.php
modules/contrib/easy_email/modules/easy_email_override/src/Service/MailManager.php
modules/contrib/easy_email/src/Controller/EasyEmailController.php
modules/contrib/easy_email/src/Entity/EasyEmailInterface.php
modules/contrib/easy_email/src/Entity/EasyEmailType.php
modules/contrib/easy_email/src/EasyEmailAccessControlHandler.php
modules/contrib/easy_email/easy_email.page.inc
modules/contrib/easy_email/src/Entity/EasyEmailTypeInterface.php
modules/contrib/easy_email/src/EasyEmailHtmlRouteProvider.php
modules/contrib/easy_email/src/Entity/EasyEmailViewsData.php
modules/contrib/easy_email/src/Event/EasyEmailEvent.php
modules/contrib/easy_email/modules/easy_email_override/easy_email_override.module
modules/contrib/easy_email/src/Event/EasyEmailEvents.php
modules/contrib/easy_email/src/Form/EasyEmailDeleteForm.php
modules/contrib/easy_email/src/Form/EasyEmailForm.php
modules/contrib/easy_email/src/EasyEmailListBuilder.php
modules/contrib/easy_email/src/EasyEmailStorage.php
modules/contrib/easy_email/src/EasyEmailStorageInterface.php
modules/contrib/easy_email/src/EasyEmailTranslationHandler.php
modules/contrib/easy_email/src/EasyEmailTypeHtmlRouteProvider.php
modules/contrib/easy_email/src/EasyEmailTypeListBuilder.php
modules/contrib/easy_email/src/Form/EasyEmailRevisionDeleteForm.php
modules/contrib/easy_email/src/Form/EasyEmailRevisionRevertForm.php
modules/contrib/easy_email/src/Form/EasyEmailRevisionRevertTranslationForm.php
modules/contrib/easy_email/src/Form/EasyEmailTypeDeleteForm.php
modules/contrib/easy_email/src/Form/EasyEmailTypeForm.php
modules/contrib/easy_email/src/Service/EmailAttachmentEvaluator.php
modules/contrib/easy_email/src/Service/EmailAttachmentEvaluatorInterface.php
modules/contrib/easy_email/src/Service/EmailHandler.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailTemplateCreateTest.php
modules/contrib/easy_email/src/Service/EmailHandlerInterface.php
modules/contrib/easy_email/src/Service/EmailTokenEvaluator.php
modules/contrib/easy_email/src/Service/EmailTokenEvaluatorInterface.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailTemplatePreviewTest.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailTestBase.php

7 files with changes
====================

1) modules/contrib/easy_email/src/EasyEmailStorage.php:133

    ---------- begin diff ----------
@@ @@

     $event_class = $this->entityType->getHandlerClass('event');
     if ($event_class) {
-      $this->eventDispatcher->dispatch($this->getEventName($hook), new $event_class($entity));
+      $this->eventDispatcher->dispatch(new $event_class($entity), $this->getEventName($hook));
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/easy_email/src/Service/EmailTokenEvaluator.php:37

    ---------- begin diff ----------
@@ @@
    * @inheritDoc
    */
   public function evaluateTokens(EasyEmailInterface $email) {
-    $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_PRETOKENEVAL, new EasyEmailEvent($email));
+    $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_PRETOKENEVAL);

     if ($email->hasField('key')) {
       $email->setKey($this->replaceTokens($email, $email->getKey()));
@@ @@
       $email->setAttachmentPaths($this->replaceTokens($email, $email->getAttachmentPaths()));
     }

-    $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_TOKENEVAL, new EasyEmailEvent($email));
+    $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_TOKENEVAL);
   }

   public function containsUnsafeTokens(EasyEmailInterface $email) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/easy_email/src/Service/EmailHandler.php:197

    ---------- begin diff ----------
@@ @@

     foreach ($emails_to_send as $email_info) {
       if (!empty($email_info['to'])) {
-        $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_PRESEND, new EasyEmailEvent($email));
+        $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_PRESEND);
         $message = $this->mailManager->mail('easy_email', $email_info['email']->bundle(), $email_info['to'], $default_langcode, $email_info['params'], $reply, TRUE);
       }
       if(!empty($message['result'])){
-        $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_SENT, new EasyEmailEvent($email));
+        $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_SENT);
         $email_info['email']->setSentTime($this->time->getCurrentTime())
           ->save();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/easy_email/src/Service/EmailAttachmentEvaluator.php:45

    ---------- begin diff ----------
@@ @@
    * @inheritDoc
    */
   public function evaluateAttachments(EasyEmailInterface $email, $save_attachments_to = FALSE) {
-    $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_PREATTACHMENTEVAL, new EasyEmailEvent($email));
+    $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_PREATTACHMENTEVAL);
     $files = $email->getEvaluatedAttachments();

     // If save attachments has been enabled, check for any programmatically added files and save them.
@@ @@

     $email->setEvaluatedAttachments($files);

-    $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_ATTACHMENTEVAL, new EasyEmailEvent($email));
+    $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_ATTACHMENTEVAL);
   }

   /**
@@ @@
    */
   protected function saveAttachment(EasyEmailInterface $email, $source, $dest_directory) {
     \Drupal::service('file_system')->prepareDirectory($dest_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
-    $file_entity = file_save_data(file_get_contents($source), $dest_directory . '/' . $this->fileSystem->basename($source));
+    $file_entity = \Drupal::service('file.repository')->writeData(file_get_contents($source), $dest_directory . '/' . $this->fileSystem->basename($source));
     $email->addAttachment($file_entity->id());
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


5) modules/contrib/easy_email/src/Event/EasyEmailEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\easy_email\Entity\EasyEmailInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the Entity Email event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/easy_email/tests/src/Functional/EasyEmailTestBase.php:51

    ---------- begin diff ----------
@@ @@
    */
   protected $defaultTheme = 'stark';

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Redirect all emails to the test_mail_collector.
@@ @@
       'format' => 'html',
       'name' => 'HTML',
     ];
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
     filter_formats_reset();
     $this->htmlFormat = FilterFormat::load($edit['format']);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/easy_email/src/Service/EmailUserEvaluator.php:44

    ---------- begin diff ----------
@@ @@
    * @inheritDoc
    */
   public function evaluateUsers(EasyEmailInterface $email) {
-    $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_PREUSEREVAL, new EasyEmailEvent($email));
+    $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_PREUSEREVAL);

     if ($email->hasField('recipient_uid')) {
       $recipients = $email->getRecipientAddresses();
@@ @@
       }
     }

-    $this->eventDispatcher->dispatch(EasyEmailEvents::EMAIL_USEREVAL, new EasyEmailEvent($email));
+    $this->eventDispatcher->dispatch(new EasyEmailEvent($email), EasyEmailEvents::EMAIL_USEREVAL);
   }


 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 7 files have been changed by Rector                                       

