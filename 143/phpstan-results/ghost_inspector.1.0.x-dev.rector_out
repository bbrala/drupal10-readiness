modules/contrib/ghost_inspector/ghost_inspector.install
modules/contrib/ghost_inspector/ghost_inspector.module
modules/contrib/ghost_inspector/src/Controller/DefaultController.php
modules/contrib/ghost_inspector/src/Entity/GhostInspectorEntity.php
modules/contrib/ghost_inspector/src/Entity/GhostInspectorEntityInterface.php
modules/contrib/ghost_inspector/src/Form/GhostInspectorEntityDeleteForm.php
modules/contrib/ghost_inspector/src/Form/GhostInspectorEntityForm.php
modules/contrib/ghost_inspector/src/GhostInspectorEntityHtmlRouteProvider.php
modules/contrib/ghost_inspector/src/GhostInspectorEntityListBuilder.php
modules/contrib/ghost_inspector/src/GhostInspectorEntityViewBuilder.php
modules/contrib/ghost_inspector/src/GhostInspectorService.php

1 file with changes
===================

1) modules/contrib/ghost_inspector/ghost_inspector.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Session\UserSession;
+use Drupal\Core\Render\Markup;
 /**
  * @file
  * Ghost Inspector module functions.
@@ @@
 function ghost_inspector_cron() {
   // Retrieve the account switcher service. Ideally you should inject the account_switcher service into your class.
   $accountSwitcher = Drupal::service('account_switcher');
-  $accountSwitcher->switchTo(new \Drupal\Core\Session\UserSession(['uid' => 1]));
+  $accountSwitcher->switchTo(new UserSession(['uid' => 1]));

   // Pull all new suite test results.
   $ghost_inspector_entity = \Drupal::entityTypeManager()->getStorage('ghost_inspector')->loadMultiple();
@@ @@
         $video_markup .= '</video>';
         $video_markup .= '<a href="' . $variables['output'] . '" target="_blank">Alternative link to view video.</a>';

-        $variables['output'] = Drupal\Core\Render\Markup::create($video_markup);
+        $variables['output'] = Markup::create($video_markup);
         break;
     }
   }
@@ @@
   $saveComments = $paragraphsComments;
   //Get paragraphs comments ids from Drupal.
   foreach ( $paragraphsComments as $element ) {
-    $p = \Drupal\paragraphs\Entity\Paragraph::load( $element['target_id'] );
+    $p = Paragraph::load( $element['target_id'] );
     $oldCommments[] = $p->field_id->getValue()[0]['value'];
   }
   $resultNewComments = array_diff($newComments, $oldCommments);
@@ @@
   // Remove paragraph.
   if (count($paragraphsComments) > 0 ) {
     foreach ($paragraphsComments as $key => $element) {
-      $p = \Drupal\paragraphs\Entity\Paragraph::load($element['target_id']);
+      $p = Paragraph::load($element['target_id']);
       if (isset($p->field_id)) {
         $field_id = $p->field_id->getValue();
         if (in_array($field_id[0]['value'], $resultRemovedComments)) {
@@ @@
     ->execute();

   if (!empty($nids)) {
-    $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+    $nodes = Node::loadMultiple($nids);
     foreach ($nodes as $node) {

       $date_execution_finished = new DateTime(getDatetime($node->field_date_execution_finished->getValue(), 'date'));
@@ @@
   if (strpos($body, '[test-results-table]') !== false) {
     $element = views_embed_view('ghost_inspector_suite_dashboard', 'block_5', $field_id);
     $test_results_table = \Drupal::service('renderer')->renderRoot($element);
-    $body = str_replace("[test-results-table]", render($test_results_table), $body);
+    $body = str_replace("[test-results-table]", \Drupal::service('renderer')->render($test_results_table), $body);
   }

   return $body;
@@ @@
     $nids = \Drupal::entityQuery('node')->condition('type', 'ghost_inspector')->execute();

     if (count($nids) > 0) {
-      $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+      $nodes = Node::loadMultiple($nids);

       $suite_name_options = [];
       $year_options = [];
@@ @@
       ->execute();

     if (count($nids) > 0) {
-      $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+      $nodes = Node::loadMultiple($nids);

       // Distinct List of nodes - Node will be the last run per suite.
       $last_results = [];
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [OK] 1 file has been changed by Rector                                         

