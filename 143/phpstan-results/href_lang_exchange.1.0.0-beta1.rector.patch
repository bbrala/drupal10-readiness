diff --git a/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php b/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php
index bc6d0f5..29753b2 100644
--- a/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php
+++ b/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php
@@ -76,9 +76,9 @@ class BasicTokenAuth implements AuthenticationProviderInterface {
    * {@inheritdoc}
    */
   public function handleException(ExceptionEvent $event) {
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     if ($exception instanceof AccessDeniedHttpException) {
-      $event->setException(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
+      $event->setThrowable(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
       return TRUE;
     }
     return FALSE;
diff --git a/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php b/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php
index abdf580..2de87b1 100644
--- a/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php
+++ b/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php
@@ -133,7 +133,7 @@ class SiteEntityController extends ControllerBase implements ContainerInjectionI
         ]));
       }
       else {
-        $link = $site_entity->link($date);
+        $link = $site_entity->toLink($date)->toString();
       }
 
       $row = [];
diff --git a/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php b/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php
index 985a8c6..eab746e 100644
--- a/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php
+++ b/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php
@@ -74,7 +74,7 @@ class SiteEntityRevisionDeleteForm extends ConfirmFormBase {
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }
 
@@ -113,7 +113,7 @@ class SiteEntityRevisionDeleteForm extends ConfirmFormBase {
       '%revision' => $this->revision->getRevisionId(),
     ]);
     $this->messenger()->addMessage(t('Revision from %revision-date of Site entity %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label(),
     ]));
     $form_state->setRedirect(
diff --git a/tests/src/Unit/Connection/ConnectionTest.php b/tests/src/Unit/Connection/ConnectionTest.php
index 0cda351..c52fbb7 100644
--- a/tests/src/Unit/Connection/ConnectionTest.php
+++ b/tests/src/Unit/Connection/ConnectionTest.php
@@ -29,18 +29,16 @@ class ConnectionTest extends UnitTestCase {
   /**
    * The mock container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\DependencyInjection\ContainerBuilder|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $container;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
-    $this->container = $this->getMockBuilder('Symfony\Component\DependencyInjection\ContainerBuilder')
-      ->setMethods(['get'])
-      ->getMock();
+    $this->container = $this->createMock('Symfony\Component\DependencyInjection\ContainerBuilder');
   }
 
   /**
@@ -49,21 +47,11 @@ class ConnectionTest extends UnitTestCase {
    */
   public function testConstruct($case) {
 
-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');
 
     $connection = new Connection($client, $queue, $logger, $authorization, $siteManagement);
     $group = new EntityConditionGroup($case['conjunction'], $case['members']);
@@ -76,7 +64,7 @@ class ConnectionTest extends UnitTestCase {
    * @covers ::__construct
    */
   public function testConstructException() {
-    $this->setExpectedException(\InvalidArgumentException::class);
+    $this->expectException(\InvalidArgumentException::class);
     new EntityConditionGroup('NOT_ALLOWED', []);
   }
 
@@ -87,35 +75,22 @@ class ConnectionTest extends UnitTestCase {
   public function testGetMaster($case) {
 
     if (!($case['value'] instanceof SiteInterface)) {
-      $this->setExpectedException(\Exception::class, 'No master is defined.');
+        $this->expectExceptionMessage('No master is defined.');
+        $this->expectException(\Exception::class);
     }
 
-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-
-    $storage = $this->getMockBuilder('Drupal\href_lang_exchange_href\SiteEntityStorageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');
+
+    $storage = $this->createMock('Drupal\href_lang_exchange_href\SiteEntityStorageInterface');
     $storage->expects($this->once())
       ->method('getMaster')
       ->will($this->returnValue($case['value']));
 
-    $typeManager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $typeManager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
     $typeManager->expects($this->once())
       ->method('getStorage')
       ->with('site_entity')
@@ -147,9 +122,7 @@ class ConnectionTest extends UnitTestCase {
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
@@ -179,18 +152,10 @@ class ConnectionTest extends UnitTestCase {
     $filter = $case['filter'];
     $response = $case['response'];
 
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');
 
     // Create a mock and queue two responses.
     $mock = new MockHandler([
@@ -203,7 +168,8 @@ class ConnectionTest extends UnitTestCase {
     $connection = new Connection($client, $queue, $logger, $authorization, $siteManagement);
 
     if (!is_string($url) || !is_string($filter)) {
-      $this->setExpectedException(\Exception::class, '$url or $filter is not a string');
+        $this->expectExceptionMessage('$url or $filter is not a string');
+        $this->expectException(\Exception::class);
     }
 
     $item = $connection->getHrefLangItem($url, $filter);
@@ -300,17 +266,11 @@ class ConnectionTest extends UnitTestCase {
     $entity = '';
     $gid = '';
 
-    $language = $this->getMockBuilder('\Drupal\Core\Language\LanguageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock('\Drupal\Core\Language\LanguageInterface');
 
-    $entity = $this->getMockBuilder('Drupal\node\Entity\Node')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock('Drupal\node\Entity\Node');
 
-    $url = $this->getMockBuilder('\Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('\Drupal\Core\Url');
     $entity->expects($this->any())
       ->method('getTitle')
       ->will($this->returnValue($this->getRandomGenerator()->word(10)));
@@ -322,17 +282,13 @@ class ConnectionTest extends UnitTestCase {
       ->method('language')
       ->will($this->returnValue($language));
 
-    $immutable_config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $immutable_config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
 
     $immutable_config->expects($this->once())
       ->method('get')->with('country.default')
       ->will($this->returnValue('DE'));
 
-    $config_factory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_factory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
 
     $config_factory->expects($this->once())
       ->method('get')->with('system.date')
@@ -340,21 +296,11 @@ class ConnectionTest extends UnitTestCase {
 
     $this->setMockContainerService('config.factory', $config_factory);
 
-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');
 
     $connection = new Connection($client, $queue, $logger, $authorization, $siteManagement);
     $hreflang = $connection->createHrefLangItemFromEntity($entity, $gid);
@@ -377,9 +323,7 @@ class ConnectionTest extends UnitTestCase {
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
diff --git a/tests/src/Unit/Connection/SendValidatorTest.php b/tests/src/Unit/Connection/SendValidatorTest.php
index 68d3d98..fb444b9 100644
--- a/tests/src/Unit/Connection/SendValidatorTest.php
+++ b/tests/src/Unit/Connection/SendValidatorTest.php
@@ -39,21 +39,15 @@ class SendValidatorTest extends UnitTestCase {
    *   The provider array.
    */
   public function isItJsonApiRequestProvider() {
-    $default_entity = $this->getMockBuilder(HrefLangItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_entity = $this->createMock(HrefLangItemInterface::class);
 
-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);
 
     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));
 
-    $default_request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_request_stack = $this->createMock(RequestStack::class);
 
     $basic = new Request();
     $basic->setMethod('POST');
@@ -63,18 +57,14 @@ class SendValidatorTest extends UnitTestCase {
       ->method('getCurrentRequest')
       ->will($this->returnValue($basic));
 
-    $default_route_matcher = $this->getMockBuilder(RouteMatchInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_route_matcher = $this->createMock(RouteMatchInterface::class);
 
     $default_resource_manager = $this->createResourceManager(Connection::RESOURCE_ADDRESS);
 
     $default_elements = [
       [
         [
-          'entity' => $this->getMockBuilder(EntityInterface::class)
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'entity' => $this->createMock(EntityInterface::class),
           'connection' => $default_connection,
           'request_stack' => $default_request_stack,
           'route_matcher' => $default_route_matcher,
@@ -268,9 +258,7 @@ class SendValidatorTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function createConnection($checkSelfMaster) {
-    $mock = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(ConnectionInterface::class);
 
     $mock->expects($this->once())
       ->method('checkSelfMaster')
@@ -283,9 +271,7 @@ class SendValidatorTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function createResourceManager($getResourceAddress) {
-    $mock = $this->getMockBuilder(ResourceInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(ResourceInterface::class);
 
     $mock->expects($this->any())
       ->method('getResourceAddress')
@@ -298,9 +284,7 @@ class SendValidatorTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function createRequestStack($request) {
-    $mock = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(RequestStack::class);
 
     $mock->expects($this->any())
       ->method('getCurrentRequest')
@@ -326,21 +310,15 @@ class SendValidatorTest extends UnitTestCase {
    *   The provider array.
    */
   public function isItFormEditProvider() {
-    $default_entity = $this->getMockBuilder(HrefLangItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_entity = $this->createMock(HrefLangItemInterface::class);
 
-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);
 
     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));
 
-    $default_request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_request_stack = $this->createMock(RequestStack::class);
 
     $basic = new Request();
     $basic->setMethod('POST');
@@ -357,9 +335,7 @@ class SendValidatorTest extends UnitTestCase {
     $default_elements = [
       [
         [
-          'entity' => $this->getMockBuilder(EntityInterface::class)
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'entity' => $this->createMock(EntityInterface::class),
           'connection' => $default_connection,
           'request_stack' => $default_request_stack,
           'route_matcher' => $default_route_matcher,
@@ -553,9 +529,7 @@ class SendValidatorTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function createRouteMatch($match) {
-    $mock = $this->getMockBuilder(RouteMatchInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(RouteMatchInterface::class);
 
     $mock->expects($this->any())
       ->method('getRouteName')
@@ -581,21 +555,15 @@ class SendValidatorTest extends UnitTestCase {
    *   The provider array.
    */
   public function isItFormAddProvider() {
-    $default_entity = $this->getMockBuilder(HrefLangItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_entity = $this->createMock(HrefLangItemInterface::class);
 
-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);
 
     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));
 
-    $default_request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_request_stack = $this->createMock(RequestStack::class);
 
     $basic = new Request();
     $basic->setMethod('POST');
@@ -612,9 +580,7 @@ class SendValidatorTest extends UnitTestCase {
     $default_elements = [
       [
         [
-          'entity' => $this->getMockBuilder(EntityInterface::class)
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'entity' => $this->createMock(EntityInterface::class),
           'connection' => $default_connection,
           'request_stack' => $default_request_stack,
           'route_matcher' => $default_route_matcher,
diff --git a/tests/src/Unit/Controller/JSONAPIEntityAutocompleteControllerTest.php b/tests/src/Unit/Controller/JSONAPIEntityAutocompleteControllerTest.php
index fd8c169..0f985d9 100644
--- a/tests/src/Unit/Controller/JSONAPIEntityAutocompleteControllerTest.php
+++ b/tests/src/Unit/Controller/JSONAPIEntityAutocompleteControllerTest.php
@@ -42,29 +42,21 @@ class JSONAPIEntityAutocompleteControllerTest extends UnitTestCase {
    *   The provider array.
    */
   public function handleAutocompleteProvider() {
-    $default_serializer = $this->getMockBuilder(SerializerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_serializer = $this->createMock(SerializerInterface::class);
 
-    $default_module_handler = $this->getMockBuilder(ModuleHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_module_handler = $this->createMock(ModuleHandler::class);
 
     $default_module_handler->expects($this->any())
       ->method('alter')
       ->will($this->returnValue([]));
 
-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);
 
     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));
 
-    $default_storage = $this->getMockBuilder(HrefLangItemStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_storage = $this->createMock(HrefLangItemStorageInterface::class);
 
     $default_storage->expects($this->any())
       ->method('loadMultiple')
@@ -74,9 +66,7 @@ class JSONAPIEntityAutocompleteControllerTest extends UnitTestCase {
       ->method('loadAllByGid')
       ->will($this->returnValue([]));
 
-    $default_query = $this->getMockBuilder(QueryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_query = $this->createMock(QueryInterface::class);
 
     $default_query->expects($this->any())
       ->method('condition')
@@ -159,29 +149,21 @@ class JSONAPIEntityAutocompleteControllerTest extends UnitTestCase {
    *   The provider array.
    */
   public function handleSearchFacetProvider() {
-    $default_serializer = $this->getMockBuilder(SerializerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_serializer = $this->createMock(SerializerInterface::class);
 
-    $default_module_handler = $this->getMockBuilder(ModuleHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_module_handler = $this->createMock(ModuleHandler::class);
 
     $default_module_handler->expects($this->any())
       ->method('alter')
       ->will($this->returnValue([]));
 
-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);
 
     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));
 
-    $default_query = $this->getMockBuilder(QueryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_query = $this->createMock(QueryInterface::class);
 
     $default_query->expects($this->any())
       ->method('condition')
@@ -296,9 +278,7 @@ class JSONAPIEntityAutocompleteControllerTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function createStorage($loadAllLanguages, $getQuery = [], $loadMultiple = [], $loadAllByGid = []) {
-    $default_storage = $this->getMockBuilder(HrefLangItemStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_storage = $this->createMock(HrefLangItemStorageInterface::class);
 
     $default_storage->expects($this->any())
       ->method('loadMultiple')
diff --git a/tests/src/Unit/EventSubscriber/LazyHrefItemSubscriberTest.php b/tests/src/Unit/EventSubscriber/LazyHrefItemSubscriberTest.php
index 44fb351..55d6ad3 100644
--- a/tests/src/Unit/EventSubscriber/LazyHrefItemSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/LazyHrefItemSubscriberTest.php
@@ -51,9 +51,7 @@ class LazyHrefItemSubscriberTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function createEntityTypeManagerInterface($value) {
-    $lazy_store = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_store = $this->createMock(EntityTypeManagerInterface::class);
 
     return $lazy_store;
   }
@@ -62,9 +60,7 @@ class LazyHrefItemSubscriberTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function createLoggerInterface($value) {
-    $lazy_store = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_store = $this->createMock(LoggerInterface::class);
     return $lazy_store;
   }
 
@@ -82,9 +78,7 @@ class LazyHrefItemSubscriberTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function lazyHrefTerminateProvider() {
-    $lazy_element = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_element = $this->createMock(Connection::class);
 
     $lazy_element->expects($this->exactly(4))
       ->method('getHrefLangItem')
@@ -139,9 +133,7 @@ class LazyHrefItemSubscriberTest extends UnitTestCase {
    *
    */
   public function createLazyStore($value) {
-    $lazy_store = $this->getMockBuilder(LazyStoreInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_store = $this->createMock(LazyStoreInterface::class);
 
     $lazy_store->expects($this->any())
       ->method('getStore')
diff --git a/tests/src/Unit/Form/HrefLangItemFormTest.php b/tests/src/Unit/Form/HrefLangItemFormTest.php
index fe0b636..73866ca 100644
--- a/tests/src/Unit/Form/HrefLangItemFormTest.php
+++ b/tests/src/Unit/Form/HrefLangItemFormTest.php
@@ -42,7 +42,7 @@ class HrefLangItemFormTest extends UnitTestCase {
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger service.
    */
-  public function __construct(EntityRepositoryInterface $entity_repository, HrefLangItemValidatorInterface $validator, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, MessengerInterface $messenger = NULL) {
+  public function __construct(EntityRepositoryInterface $entity_repository, HrefLangItemValidatorInterface $validator, $entity_type_bundle_info = NULL, TimeInterface $time = NULL, MessengerInterface $messenger = NULL) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
     $this->messenger = $messenger;
     $this->validator = $validator;
diff --git a/tests/src/Unit/Service/HrefLangItemValidatorTest.php b/tests/src/Unit/Service/HrefLangItemValidatorTest.php
index 665ec80..33fd5db 100644
--- a/tests/src/Unit/Service/HrefLangItemValidatorTest.php
+++ b/tests/src/Unit/Service/HrefLangItemValidatorTest.php
@@ -24,15 +24,9 @@ class HrefLangItemValidatorTest extends UnitTestCase {
    */
   public function testConstruct($case) {
 
-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
 
     // $connection = new Connection($client, $queue, $logger);
     $this->assertEquals(TRUE, TRUE);
@@ -58,7 +52,7 @@ class HrefLangItemValidatorTest extends UnitTestCase {
    * @covers ::__construct
    */
   public function testConstructException() {
-    $this->setExpectedException(\InvalidArgumentException::class);
+    $this->expectException(\InvalidArgumentException::class);
     new EntityConditionGroup('NOT_ALLOWED', []);
   }
 
@@ -68,50 +62,32 @@ class HrefLangItemValidatorTest extends UnitTestCase {
    */
   public function testValidateByUniquePath($case) {
 
-    $connection = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\ConnectionInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock('Drupal\href_lang_exchange\Connection\ConnectionInterface');
 
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
 
-    $url = $this->getMockBuilder('\Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $entity = $this->getMockBuilder('Drupal\Core\Entity\EntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('\Drupal\Core\Url');
+    $entity = $this->createMock('Drupal\Core\Entity\EntityInterface');
 
     $entity->expects($this->any())
       ->method('toUrl')
       ->will($this->returnValue($url));
 
-    $form_state = $this->getMockBuilder('Drupal\Core\Form\FormStateInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $form_state = $this->createMock('Drupal\Core\Form\FormStateInterface');
 
-    $configa = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configa = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $configa->expects($this->any())
       ->method('get')->with('country.default')
       ->will($this->returnValue('AF'));
 
-    $config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $config->expects($this->any())
       ->method('get')->with('system.date')
       ->will($this->returnValue($configa));
 
-    $site_interface = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $site_interface = $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface');
 
-    $translation = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translation = $this->createMock('Drupal\Core\StringTranslation\TranslationInterface');
 
     $form = [];
     $mock = $this->createMock('Symfony\Component\DependencyInjection\ContainerBuilder');
@@ -147,9 +123,7 @@ class HrefLangItemValidatorTest extends UnitTestCase {
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
@@ -161,43 +135,27 @@ class HrefLangItemValidatorTest extends UnitTestCase {
    */
   public function testValidateByUniqueTypes($case) {
 
-    $connection = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\ConnectionInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock('Drupal\href_lang_exchange\Connection\ConnectionInterface');
 
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
 
-    $entity = $this->getMockBuilder('Drupal\Core\Entity\EntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock('Drupal\Core\Entity\EntityInterface');
 
-    $form_state = $this->getMockBuilder('Drupal\Core\Form\FormStateInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $form_state = $this->createMock('Drupal\Core\Form\FormStateInterface');
 
-    $configa = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configa = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $configa->expects($this->any())
       ->method('get')->with('country.default')
       ->will($this->returnValue('AF'));
 
-    $config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $config->expects($this->any())
       ->method('get')->with('system.date')
       ->will($this->returnValue($configa));
 
-    $site_interface = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $site_interface = $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface');
 
-    $translation = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translation = $this->createMock('Drupal\Core\StringTranslation\TranslationInterface');
 
     $form = [];
     $mock = $this->createMock('Symfony\Component\DependencyInjection\ContainerBuilder');
@@ -233,9 +191,7 @@ class HrefLangItemValidatorTest extends UnitTestCase {
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
diff --git a/tests/src/Unit/Service/NormalLazyStoreTest.php b/tests/src/Unit/Service/NormalLazyStoreTest.php
index f3a3fe2..71b5877 100644
--- a/tests/src/Unit/Service/NormalLazyStoreTest.php
+++ b/tests/src/Unit/Service/NormalLazyStoreTest.php
@@ -27,7 +27,7 @@ class NormalLazyStoreTest extends UnitTestCase {
    * @covers ::__construct
    */
   public function testConstructException() {
-    $this->setExpectedException(\InvalidArgumentException::class);
+    $this->expectException(\InvalidArgumentException::class);
     new EntityConditionGroup('NOT_ALLOWED', []);
   }
 
