modules/contrib/raven/raven.api.php
modules/contrib/raven/src/EventSubscriber/CspSubscriber.php
modules/contrib/raven/raven.install
modules/contrib/raven/src/EventSubscriber/RequestSubscriber.php
modules/contrib/raven/raven.module
modules/contrib/raven/raven.post_update.php
modules/contrib/raven/src/Commands/RavenCommands.php
modules/contrib/raven/src/Exception/RateLimitException.php
modules/contrib/raven/src/Form/RavenConfigForm.php
modules/contrib/raven/src/Config/SecKitOverrides.php
modules/contrib/raven/src/Controller/TunnelController.php
modules/contrib/raven/src/Http/HttpClientMiddleware.php
modules/contrib/raven/src/Integration/RemoveExceptionFrameVarsIntegration.php
modules/contrib/raven/src/Integration/SanitizeIntegration.php
modules/contrib/raven/src/Logger/Raven.php
modules/contrib/raven/src/Plugin/CspReportingHandler/Raven.php
modules/contrib/raven/src/Twig/TwigTracingExtension.php
modules/contrib/raven/tests/modules/raven_test.module
modules/contrib/raven/tests/src/Functional/CspTest.php
modules/contrib/raven/tests/src/Functional/DrushTest.php
modules/contrib/raven/tests/src/Functional/RavenTest.php
modules/contrib/raven/tests/src/Functional/SecKitTest.php
modules/contrib/raven/tests/src/FunctionalJavascript/RavenTest.php
modules/contrib/raven/tests/src/Unit/ProxyConfigTest.php

4 files with changes
====================

1) modules/contrib/raven/src/Commands/RavenCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\raven\Commands;

+use function Sentry\captureMessage;
 use Consolidation\AnnotatedCommand\CommandData;
 use Drupal\raven\EventSubscriber\RequestSubscriber;
 use Drupal\raven\Logger\Raven;
@@ @@

     $start = microtime(TRUE);

-    $id = \Sentry\captureMessage($message, $severity);
+    $id = captureMessage($message, $severity);

     if ($parent = SentrySdk::getCurrentHub()->getSpan()) {
       $span = new SpanContext();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/raven/raven.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use function Sentry\captureEvent;
 /**
  * @file
  * Raven Drupal module.
@@ @@
     ];
     $formatted_message = strtr($message, $message_placeholders);
     $event->setMessage($message, $message_placeholders, $formatted_message);
-    \Sentry\captureEvent($event);
+    captureEvent($event);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/raven/src/Logger/Raven.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\raven\Logger;

+use function Sentry\init;
+use function Sentry\configureScope;
+use function Sentry\captureEvent;
+use function Sentry\captureException;
+use function Sentry\addBreadcrumb;
 use Drupal\Component\ClassFinder\ClassFinder;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ @@
         SentrySdk::init()->bindClient(ClientBuilder::create($options)->setLogger(Drush::logger())->getClient());
       }
       else {
-        \Sentry\init($options);
+        init($options);
       }
     }
     catch (\InvalidArgumentException $e) {
@@ @@
       return NULL;
     }
     // Set default user context.
-    \Sentry\configureScope(function (Scope $scope) use ($config): void {
+    configureScope(function (Scope $scope) use ($config): void {
       $user = ['id' => $this->currentUser ? $this->currentUser->id() : 0];
       if ($this->requestStack && ($request = $this->requestStack->getCurrentRequest())) {
         $user['ip_address'] = $request->getClientIp();
@@ @@
       $start = microtime(TRUE);
       $rateLimit = $config->get('rate_limit');
       if (!$rateLimit || $counter < $rateLimit) {
-        \Sentry\captureEvent($event, EventHint::fromArray($eventHint));
+        captureEvent($event, EventHint::fromArray($eventHint));
       }
       elseif ($counter == $rateLimit) {
-        \Sentry\captureException(new RateLimitException('Log event discarded due to rate limit exceeded; future log events will not be captured by Sentry.'));
+        captureException(new RateLimitException('Log event discarded due to rate limit exceeded; future log events will not be captured by Sentry.'));
       }
       $counter++;
       if ($parent = SentrySdk::getCurrentHub()->getSpan()) {
@@ @@
     }
     $this->moduleHandler->alter('raven_breadcrumb', $breadcrumb);
     if (!empty($breadcrumb['process'])) {
-      \Sentry\addBreadcrumb(Breadcrumb::fromArray($breadcrumb['breadcrumb']));
+      addBreadcrumb(Breadcrumb::fromArray($breadcrumb['breadcrumb']));
     }
   }

@@ @@
    */
   public function onConsoleError(ConsoleErrorEvent $event): void {
     if ($this->getClient()) {
-      \Sentry\captureException($event->getError());
+      captureException($event->getError());
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/raven/src/EventSubscriber/RequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\raven\EventSubscriber;

+use function Sentry\startTransaction;
 use Consolidation\AnnotatedCommand\CommandData;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Database;
@@ @@
     $transactionContext->setName('drush ' . $commandData->input()->getArgument('command'));
     $transactionContext->setOp('drush.command');
     $transactionContext->setStartTimestamp($this->time->getRequestMicroTime());
-    $this->transaction = \Sentry\startTransaction($transactionContext);
+    $this->transaction = startTransaction($transactionContext);
     SentrySdk::getCurrentHub()->setSpan($this->transaction);
     if ($config->get('database_tracing')) {
       foreach (Database::getAllConnectionInfo() as $key => $info) {
@@ @@
       'http.url' => $request->getUri(),
     ]);
     $transactionContext->setStartTimestamp($this->time->getRequestMicroTime());
-    $this->transaction = \Sentry\startTransaction($transactionContext);
+    $this->transaction = startTransaction($transactionContext);
     SentrySdk::getCurrentHub()->setSpan($this->transaction);
     if ($config->get('database_tracing')) {
       foreach (Database::getAllConnectionInfo() as $key => $info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

