modules/contrib/xmlsitemap/src/Commands/XmlSitemapCommands.php
modules/contrib/xmlsitemap/src/XmlSitemapListBuilder.php
modules/contrib/xmlsitemap/tests/src/Kernel/MetatagNoIndexTest.php
modules/contrib/xmlsitemap/xmlsitemap_custom/xmlsitemap_custom.install
modules/contrib/xmlsitemap/xmlsitemap_custom/xmlsitemap_custom.module
modules/contrib/xmlsitemap/xmlsitemap_engines/src/Form/XmlSitemapEnginesSettingsForm.php
modules/contrib/xmlsitemap/src/Controller/XmlSitemapController.php
modules/contrib/xmlsitemap/src/XmlSitemapStorage.php
modules/contrib/xmlsitemap/xmlsitemap_engines/tests/modules/xmlsitemap_engines_test/src/Controller/XmlSitemapEnginesTestController.php
modules/contrib/xmlsitemap/tests/src/Kernel/XmlSitemapWriterTest.php
modules/contrib/xmlsitemap/xmlsitemap_engines/tests/modules/xmlsitemap_engines_test/xmlsitemap_engines_test.module
modules/contrib/xmlsitemap/xmlsitemap_engines/tests/src/Functional/XmlSitemapEnginesFunctionalTest.php
modules/contrib/xmlsitemap/xmlsitemap.api.php
modules/contrib/xmlsitemap/src/XmlSitemapWriter.php
modules/contrib/xmlsitemap/xmlsitemap.drush.inc
modules/contrib/xmlsitemap/src/Entity/XmlSitemap.php
modules/contrib/xmlsitemap/xmlsitemap.install
modules/contrib/xmlsitemap/src/Form/XmlSitemapDeleteForm.php
modules/contrib/xmlsitemap/src/Form/XmlSitemapEntitiesSettingsForm.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapEntityFunctionalTest.php
modules/contrib/xmlsitemap/xmlsitemap_engines/xmlsitemap_engines.api.php
modules/contrib/xmlsitemap/xmlsitemap_engines/xmlsitemap_engines.module
modules/contrib/xmlsitemap/src/Form/XmlSitemapForm.php
modules/contrib/xmlsitemap/xmlsitemap_engines/xmlsitemap_engines.post_update.php
modules/contrib/xmlsitemap/xmlsitemap.module
modules/contrib/xmlsitemap/src/Form/XmlSitemapLinkBundleSettingsForm.php
modules/contrib/xmlsitemap/src/Form/XmlSitemapRebuildForm.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapFunctionalTest.php
modules/contrib/xmlsitemap/src/Form/XmlSitemapSettingsForm.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapListBuilderTest.php
modules/contrib/xmlsitemap/src/XmlSitemapException.php
modules/contrib/xmlsitemap/src/XmlSitemapGenerationException.php
modules/contrib/xmlsitemap/src/XmlSitemapGenerator.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMenuFunctionalTest.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMultilingualNodeTest.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMultilingualTest.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMultilingualTestBase.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapNodeFunctionalTest.php
modules/contrib/xmlsitemap/src/XmlSitemapGeneratorInterface.php
modules/contrib/xmlsitemap/src/XmlSitemapInterface.php
modules/contrib/xmlsitemap/src/XmlSitemapLinkStorage.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapRebuildTest.php
modules/contrib/xmlsitemap/src/XmlSitemapLinkStorageInterface.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapRobotsTxtIntegrationTest.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapTestBase.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapUnitTest.php
modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapUserFunctionalTest.php
modules/contrib/xmlsitemap/tests/src/Kernel/ConfigReadOnlyTest.php
modules/contrib/xmlsitemap/tests/src/Kernel/DirectoryTest.php
modules/contrib/xmlsitemap/tests/src/Kernel/KernelTestBase.php
modules/contrib/xmlsitemap/xmlsitemap.post_update.php
modules/contrib/xmlsitemap/xmlsitemap.views.inc
modules/contrib/xmlsitemap/xmlsitemap_custom/src/Controller/XmlSitemapCustomListController.php
modules/contrib/xmlsitemap/xmlsitemap_custom/src/Form/XmlSitemapCustomAddForm.php
modules/contrib/xmlsitemap/xmlsitemap_custom/src/Form/XmlSitemapCustomDeleteForm.php
modules/contrib/xmlsitemap/xmlsitemap_custom/src/Form/XmlSitemapCustomEditForm.php
modules/contrib/xmlsitemap/xmlsitemap_custom/tests/src/Functional/XmlSitemapCustomFunctionalTest.php

22 files with changes
=====================

1) modules/contrib/xmlsitemap/xmlsitemap_engines/tests/src/Functional/XmlSitemapEnginesFunctionalTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->admin_user = $this->drupalCreateUser(['access content', 'administer xmlsitemap']);
     $this->config = $this->container->get('config.factory')->getEditable('xmlsitemap_engines.settings');
@@ @@
    */
   public function testPing() {
     $edit = ['engines[simpletest]' => TRUE];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));

     $this->submitEngines();
@@ @@
   public function testCustomURL() {
     // @codingStandardsIgnoreEnd
     $edit = ['custom_urls' => 'an-invalid-url'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('Invalid URL an-invalid-url.');
     $this->assertSession()->pageTextNotContains('The configuration options have been saved.');

     $url = Url::fromUri('base://ping', ['absolute' => TRUE])->toString();
     $edit = ['custom_urls' => $url];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));

     $edit = ['custom_urls' => $this->submit_url];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));

     $this->submitEngines();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/xmlsitemap/src/XmlSitemapLinkStorage.php:107

    ---------- begin diff ----------
@@ @@
         }
         else {
           // Attempt to transform this to a relative URL.
-          $loc = file_url_transform_relative($url->toString());
+          $loc = \Drupal::service('file_url_generator')->transformRelative($url->toString());
           // If it could not be transformed into a relative path, disregard it
           // since we cannot store external URLs in the sitemap.
           if (UrlHelper::isExternal($loc)) {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/xmlsitemap/src/Form/XmlSitemapSettingsForm.php:196

    ---------- begin diff ----------
@@ @@
       '#size' => 30,
       '#maxlength' => 255,
       '#description' => $this->t('Subdirectory where the sitemap data will be stored. This folder <strong>must not be shared</strong> with any other Drupal site or install using XML Sitemap.'),
-      '#field_prefix' => file_build_uri(''),
+      '#field_prefix' => \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . '')),
       '#required' => TRUE,
     ];
     $base_url_override = Settings::get('xmlsitemap_base_url', FALSE);
    ----------- end diff -----------

Applied rules:
 * FileBuildUriRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/xmlsitemap/src/Controller/XmlSitemapController.php:158

    ---------- begin diff ----------
@@ @@
    */
   public function renderSitemapXsl() {
     // Read the XSL content from the file.
-    $module_path = drupal_get_path('module', 'xmlsitemap');
+    $module_path = \Drupal::service('extension.list.module')->getPath('xmlsitemap');
     $xsl_content = file_get_contents($module_path . '/xsl/xmlsitemap.xsl');

     // Make sure the strings in the XSL content are translated properly.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/xmlsitemap/tests/src/Kernel/KernelTestBase.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public static function setUpBeforeClass() {
+  public static function setUpBeforeClass(): void {
     parent::setUpBeforeClass();

     // This is required to not fail the @covers for global functions.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/xmlsitemap/tests/src/Kernel/DirectoryTest.php:30

    ---------- begin diff ----------
@@ @@

     // Test that only the xmlsitemap directory was deleted.
     $result = xmlsitemap_clear_directory(NULL, TRUE);
-    $this->assertDirectoryNotExists('public://xmlsitemap/test');
+    $this->assertDirectoryDoesNotExist('public://xmlsitemap/test');
     $this->assertDirectoryExists('public://not-xmlsitemap');
     $this->assertFileExists('public://file.txt');
     $this->assertTrue($result);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapUserFunctionalTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Allow anonymous user to view user profiles.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapUnitTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->admin_user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapTestBase.php:95

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     // Capture any (remaining) watchdog errors.
     $this->assertNoWatchdogErrors();

@@ @@
    */
   protected function verbose($verbose_message, $message = 'Verbose message') {
     if ($id = parent::verbose($verbose_message)) {
-      $url = file_create_url($this->originalFileDirectory . '/simpletest/verbose/' . get_class($this) . '-' . $id . '.html');
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($this->originalFileDirectory . '/simpletest/verbose/' . get_class($this) . '-' . $id . '.html');
       $message_url = Url::fromUri($url, ['attributes' => ['target' => '_blank']]);
       $this->error(\Drupal::linkGenerator()->generate($message, $message_url), 'User notice');
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a vocabulary.
@@ @@
       'xmlsitemap[status]' => 'default',
       'xmlsitemap[priority]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $term = taxonomy_term_load_multiple_by_name($term_name, 'tags')[1];
     $link = $this->linkStorage->load('taxonomy_term', $term->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapRebuildTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->admin_user = $this->drupalCreateUser([
@@ @@
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains("This action rebuilds your site's XML Sitemap and regenerates the cached files, and may be a lengthy process. If you just installed XML Sitemap, this can be helpful to import all your site's content into the sitemap. Otherwise, this should only be used in emergencies.");

-    $this->drupalPostForm(NULL, [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');
     $this->assertSession()->pageTextContains('The sitemap links were rebuilt.');
   }

@@ @@

     $dummy_user = $this->drupalCreateUser([]);
     $this->drupalLogin($this->admin_user);
-    $this->drupalPostForm('admin/config/search/xmlsitemap/rebuild', [], t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/rebuild');
+    $this->submitForm([], t('Save configuration'));
     $this->assertSession()->pageTextContains('The sitemap links were rebuilt.');
     $this->assertSitemapLinkValues('user', $dummy_user->id(), [
       'status' => 1,
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapNodeFunctionalTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
     $edit[$body_key] = $this->randomMachineName(16);
     $edit['tags[target_id]'] = 'tag1, tag2, tag3';
     $edit['status[value]'] = TRUE;
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));

     $tags = Term::loadMultiple();
     foreach ($tags as $tag) {
@@ @@
       'priority' => 0.2,
       'changefreq' => XMLSITEMAP_FREQUENCY_HOURLY,
     ]);
+    $this->drupalGet('node/add/page');

-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $tags = Term::loadMultiple();
     foreach ($tags as $tag) {
@@ @@
       'title[0][value]' => 'Test node title',
       'body[0][value]' => 'Test node body',
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('Basic page Test node title has been updated.');
     $this->assertSitemapLinkValues('node', $node->id(), [
       'access' => 1,
@@ @@
       'xmlsitemap[priority]' => 0.9,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_ALWAYS,
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('Basic page Test node title has been updated.');
     $this->assertSitemapLinkValues('node', $node->id(), [
       'access' => 1,
@@ @@
       'xmlsitemap[status]' => 'default',
       'xmlsitemap[priority]' => 'default',
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('Basic page Test node title has been updated.');
     $this->assertSitemapLinkValues('node', $node->id(), [
       'access' => 1,
@@ @@
       'xmlsitemap[status]' => 0,
       'xmlsitemap[priority]' => '0.0',
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings/node/page', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/settings/node/page');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $node = $this->drupalCreateNode();
     $this->assertSitemapLinkValues('node', $node->id(), ['status' => 0, 'priority' => 0.0]);
@@ @@
     // Delete all pages in order to allow content type deletion.
     $node->delete();
     $node_old->delete();
+    $this->drupalGet('admin/structure/types/manage/page/delete');

-    $this->drupalPostForm('admin/structure/types/manage/page/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->assertSession()->pageTextContains('The content type Basic page has been deleted.');
     $this->assertEmpty($this->linkStorage->loadMultiple(['type' => 'node', 'subtype' => 'page']), 'Nodes with deleted node type removed from {xmlsitemap}.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMultilingualTestBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Set up an administrative user account and testing keys.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Call parent::setUp() allowing test cases to pass further modules.
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMultilingualTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->admin_user);
@@ @@
     $edit = [
       'site_default_language' => 'en',
     ];
-    $this->drupalPostForm('admin/config/regional/language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/language');
+    $this->submitForm($edit, t('Save configuration'));

     // Enable URL language detection and selection.
     $edit = ['language_interface[enabled][language-url]' => '1'];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, t('Save settings'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMultilingualNodeTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->admin_user = $this->drupalCreateUser([
@@ @@
     $edit = [
       'language_configuration[language_alterable]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, 'Save content type');
     $this->assertSession()->responseContains((string) new FormattableMarkup('The content type %content_type has been updated.', [
       '%content_type' => 'Basic page',
     ]));
@@ @@
   public function testNodeLanguageData() {
     $this->drupalLogin($this->admin_user);
     $node = $this->drupalCreateNode([]);
+    $this->drupalGet('node/' . $node->id() . '/edit');

-    $this->drupalPostForm('node/' . $node->id() . '/edit', [
+    $this->submitForm([
       'langcode[0][value]' => 'en',
     ], t('Save'));
     $link = $this->assertSitemapLink('node', $node->id(), ['status' => 0, 'access' => 1]);
     $this->assertSame('en', $link['language']);
+    $this->drupalGet('node/' . $node->id() . '/edit');

-    $this->drupalPostForm('node/' . $node->id() . '/edit', ['langcode[0][value]' => 'fr'], t('Save'));
+    $this->submitForm(['langcode[0][value]' => 'fr'], t('Save'));
     $link = $this->assertSitemapLink('node', $node->id(), ['status' => 0, 'access' => 1]);
     $this->assertSame('fr', $link['language']);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapMenuFunctionalTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeBundleInfo = $this->container->get('entity_type.bundle.info');
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $bundles = $this->entityTypeBundleInfo->getAllBundleInfo();
     foreach ($bundles['menu_link_content'] as $bundle_id => $bundle) {
       xmlsitemap_link_bundle_delete('menu_link_content', $bundle_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapListBuilderTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
     $edit = [
       'site_default_language' => 'en',
     ];
-    $this->drupalPostForm('admin/config/regional/language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/language');
+    $this->submitForm($edit, t('Save configuration'));

     // Enable URL language detection and selection.
     $edit = ['language_interface[enabled][language-url]' => '1'];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, t('Save settings'));
   }

   /**
@@ @@
       'label' => 'English',
       'context[language]' => 'en',
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/add');
+    $this->submitForm($edit, t('Save'));
     $context = ['language' => 'en'];
     $id = xmlsitemap_sitemap_get_context_hash($context);
     $this->assertSession()->pageTextContains('Saved the English sitemap.');
@@ @@
       'label' => 'French',
       'context[language]' => 'fr',
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/add', $edit, 'Save');
+    $this->drupalGet('admin/config/search/xmlsitemap/add');
+    $this->submitForm($edit, 'Save');
     $context = ['language' => 'fr'];
     $id = xmlsitemap_sitemap_get_context_hash($context);
     $this->assertSession()->pageTextContains('Saved the French sitemap.');
     $this->assertSession()->pageTextContains($id);
+    $this->drupalGet('admin/config/search/xmlsitemap/add');

-    $this->drupalPostForm('admin/config/search/xmlsitemap/add', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('There is another sitemap saved with the same context.');

     $sitemaps = XmlSitemap::loadMultiple();
     foreach ($sitemaps as $sitemap) {
       $label = $sitemap->label();
-      $this->drupalPostForm("admin/config/search/xmlsitemap/{$sitemap->id()}/delete", [], t('Delete'));
+      $this->drupalGet("admin/config/search/xmlsitemap/{$sitemap->id()}/delete");
+      $this->submitForm([], t('Delete'));
       $this->assertSession()->responseContains((string) new FormattableMarkup('Sitemap %label has been deleted.', ['%label' => $label]));
     }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapFunctionalTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->admin_user = $this->drupalCreateUser([
@@ @@
     // @codingStandardsIgnoreEnd
     $this->drupalLogin($this->admin_user);
     $edit = ['xmlsitemap_base_url' => ''];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');

     $edit = ['xmlsitemap_base_url' => 'invalid'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('Invalid base URL.');

     $edit = ['xmlsitemap_base_url' => 'http://example.com/ '];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('Invalid base URL.');

     $edit = ['xmlsitemap_base_url' => 'http://example.com/'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');

     $this->regenerateSitemap();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/xmlsitemap/tests/src/Functional/XmlSitemapEntityFunctionalTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->admin_user = $this->drupalCreateUser(['administer entity_test content', 'administer xmlsitemap']);
@@ @@
       'entity_types[entity_test_mul]' => 1,
       'settings[entity_test_mul][types][entity_test_mul]' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $entity = EntityTestMul::create();
     $entity->save();
@@ @@
       'xmlsitemap[priority]' => 0.3,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_WEEKLY,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $entity = EntityTestMul::create();
     $entity->save();
     $this->assertSitemapLinkValues('entity_test_mul', $entity->id(), [
@@ @@
       'xmlsitemap[priority]' => 0.6,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_YEARLY,
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings/entity_test_mul/entity_test_mul', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/settings/entity_test_mul/entity_test_mul');
+    $this->submitForm($edit, t('Save configuration'));
     $entity = EntityTestMul::create();
     $entity->save();
     $this->assertSitemapLinkValues('entity_test_mul', $entity->id(), [
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/xmlsitemap/xmlsitemap_custom/tests/src/Functional/XmlSitemapCustomFunctionalTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->aliasStorage = $this->entityTypeManager->getStorage('path_alias');
@@ @@

     // Test an invalid path.
     $edit['loc'] = '/invalid-testing-path';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);

     // Test a path not accessible to anonymous user.
     $edit['loc'] = '/admin/people';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);

@@ @@
     // Test that the current page, which should not give a false positive for
     // $menu_item['access'] since the result has been cached already.
     $edit['loc'] = '/admin/config/search/xmlsitemap/custom/add';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);
   }
@@ @@
   public function testCustomFileLinks() {
     // Test an invalid file.
     $edit['loc'] = '/' . $this->randomMachineName();
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);

     // Test an inaccessible file.
     $edit['loc'] = '/.htaccess';
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);

     // Test a valid file.
     $edit['loc'] = '/core/misc/drupal.js';
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link for @link was saved.', ['@link' => $edit['loc']]));
     $links = $this->linkStorage->loadMultiple(['type' => 'custom', 'loc' => $edit['loc']]);
     $this->assertEquals(1, count($links), t('Custom link saved in the database.'));
@@ @@

     // Test a duplicate url.
     $edit['loc'] = '/core/misc/drupal.js';
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('There is already an existing link in the sitemap with the path @link.', ['@link' => $edit['loc']]));
     $links = $this->linkStorage->loadMultiple(['type' => 'custom', 'loc' => $edit['loc']]);
     $this->assertEquals(1, count($links), t('Custom link saved in the database.'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/xmlsitemap/xmlsitemap.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Query\Sql\Query;
 /**
  * @file
  * @defgroup xmlsitemap XML Sitemap
@@ @@
   }

   if ($sitemap != NULL && !empty($sitemap->id)) {
-    return file_build_uri($directory . '/' . $sitemap->id);
+    return \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . ($directory . '/' . $sitemap->id)));
   }
   else {
-    return file_build_uri($directory);
+    return \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . $directory));
   }
 }

@@ @@
       $subquery->condition('type', $entity_type_id);
       // If the storage for this entity type is against a SQL backend, perform
       // a direct subquery condition to avoid needing to load all the IDs.
-      if ($query instanceof \Drupal\Core\Entity\Query\Sql\Query) {
+      if ($query instanceof Query) {
         $query->condition($info['entity keys']['id'], $subquery, 'NOT IN');
       }
       else {
@@ @@
     'operations' => [],
     'finished' => 'xmlsitemap_rebuild_batch_finished',
     'title' => t('Rebuilding Sitemap'),
-    'file' => drupal_get_path('module', 'xmlsitemap') . '/xmlsitemap.generate.inc',
+    'file' => \Drupal::service('extension.list.module')->getPath('xmlsitemap') . '/xmlsitemap.generate.inc',
   ];

   // Set the rebuild flag in case something fails during the rebuild.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileBuildUriRector
 * ArgumentRemoverRector


22) modules/contrib/xmlsitemap/xmlsitemap.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\xmlsitemap\XmlSitemapInterface;
+use Drupal\Component\Utility\Html;
 /**
  * @file
  * Hooks provided by the XML Sitemap module.
@@ @@
  * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
  *   The sitemap that is currently being generated.
  */
-function hook_xmlsitemap_element_alter(array &$element, array $link, \Drupal\xmlsitemap\XmlSitemapInterface $sitemap) {
+function hook_xmlsitemap_element_alter(array &$element, array $link, XmlSitemapInterface $sitemap) {
   if ($link['subtype'] === 'video') {
     $video = video_load($link['id']);
     $element['video:video'] = [
-      'video:title' => \Drupal\Component\Utility\Html::escape($video->title),
-      'video:description' => \Drupal\Component\Utility\Html::escape($video->description),
+      'video:title' => Html::escape($video->title),
+      'video:description' => Html::escape($video->description),
       'video:live' => 'no',
     ];
   }
@@ @@
  * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
  *   The sitemap that is currently being generated.
  */
-function hook_xmlsitemap_root_attributes_alter(array &$attributes, \Drupal\xmlsitemap\XmlSitemapInterface $sitemap) {
+function hook_xmlsitemap_root_attributes_alter(array &$attributes, XmlSitemapInterface $sitemap) {
   $attributes['xmlns:video'] = 'https://www.google.com/schemas/sitemap-video/1.1';
 }

@@ @@
  * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
  *   The XML Sitemap object that was deleted.
  */
-function hook_xmlsitemap_sitemap_delete(\Drupal\xmlsitemap\XmlSitemapInterface $sitemap) {
+function hook_xmlsitemap_sitemap_delete(XmlSitemapInterface $sitemap) {
   \Drupal::database()->query("DELETE FROM {mytable} WHERE smid = '%s'", $sitemap->smid);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 22 files have been changed by Rector                                      

