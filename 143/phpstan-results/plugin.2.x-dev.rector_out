modules/contrib/plugin/plugin.api.php
modules/contrib/plugin/plugin.install
modules/contrib/plugin/plugin.module
modules/contrib/plugin/src/Event/PluginEvents.php
modules/contrib/plugin/src/Plugin/Plugin/PluginSelector/PluginSelectorInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginContextDefinitionTrait.php
modules/contrib/plugin/src/PluginManager/PluginManagerDecorator.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/Plugin/PluginTestHelper/MockConfigurablePlugin.php
modules/contrib/plugin/src/Event/ResolveDefaultPlugin.php
modules/contrib/plugin/src/Plugin/Plugin/PluginSelector/PluginSelectorManager.php
modules/contrib/plugin/tests/src/Functional/PluginSelectorTest.php
modules/contrib/plugin/src/Annotation/PluginSelector.php
modules/contrib/plugin/src/ParamConverter/PluginDefinitionConverter.php
modules/contrib/plugin/src/Commands/PluginCommands.php
modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/PluginSelectorBaseTestBase.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/SearchPluginDefinitionDecoratorTest.php
modules/contrib/plugin/src/PluginDefinition/PluginDefinition.php
modules/contrib/plugin/src/PluginOperationsProviderInterface.php
modules/contrib/plugin/src/PluginOperationsProviderProviderInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginDefinitionDecoratorInterface.php
modules/contrib/plugin/src/PluginType/ConfigurablePluginTypeInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginDefinitionInterface.php
modules/contrib/plugin/src/PluginType/DefaultPluginTypeOperationsProvider.php
modules/contrib/plugin/src/ParamConverter/PluginInstanceConverter.php
modules/contrib/plugin/src/PluginDefinition/PluginDefinitionValidator.php
modules/contrib/plugin/src/Controller/ListBase.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/Plugin/PluginTestHelper/MockManager.php
modules/contrib/plugin/src/Plugin/Plugin/PluginSelector/PluginSelectorManagerInterface.php
modules/contrib/plugin/src/ParamConverter/PluginTypeBasedConverterTrait.php
modules/contrib/plugin/src/Plugin/Plugin/PluginSelector/Radios.php
modules/contrib/plugin/src/PluginType/PluginType.php
modules/contrib/plugin/src/Controller/ListPluginTypes.php
modules/contrib/plugin/src/PluginDefinition/PluginDeriverDefinitionInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginDeriverDefinitionTrait.php
modules/contrib/plugin/src/PluginDefinition/PluginDescriptionDefinitionInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginHierarchyDefinitionInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginLabelDefinitionInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginLabelDefinitionTrait.php
modules/contrib/plugin/src/PluginDefinition/PluginOperationsProviderDefinitionInterface.php
modules/contrib/plugin/src/PluginDefinition/SearchPluginDefinitionDecorator.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/Plugin/PluginTestHelper/MockPlugin.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/Plugin/PluginTestHelper/MockPluginInterface.php
modules/contrib/plugin/tests/modules/plugin_test_mvpbf/src/Entity/MultiValuePluginBaseField.php
modules/contrib/plugin/src/PluginDefinition/TourTipPluginDefinitionDecorator.php
modules/contrib/plugin/src/PluginDiscovery/LimitedPluginDiscoveryDecorator.php
modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/PluginSelectorManagerTest.php
modules/contrib/plugin/src/Controller/ListPlugins.php
modules/contrib/plugin/src/ParamConverter/PluginTypeConverter.php
modules/contrib/plugin/src/PluginDiscovery/LimitedPluginDiscoveryInterface.php
modules/contrib/plugin/src/PluginDiscovery/PluginDiscoveryDecorator.php
modules/contrib/plugin/tests/modules/plugin_test_svpbf/src/Entity/SingleValuePluginBaseField.php
modules/contrib/plugin/src/Plugin/DataType/PluginConfiguration.php
modules/contrib/plugin/tests/src/Functional/ParamConverter/PluginDefinitionConverterTest.php
modules/contrib/plugin/src/PluginDiscovery/TypedDefinitionEnsuringPluginDiscoveryDecorator.php
modules/contrib/plugin/src/PluginType/PluginTypeInterface.php
modules/contrib/plugin/src/PluginType/PluginTypeManager.php
modules/contrib/plugin/src/Plugin/Plugin/PluginSelector/SelectList.php
modules/contrib/plugin/src/PluginDiscovery/TypedDiscoveryInterface.php
modules/contrib/plugin/src/PluginHierarchyTrait.php
modules/contrib/plugin/src/Plugin/DataType/PluginId.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/TourTipPluginDefinitionDecoratorTest.php
modules/contrib/plugin/src/DefaultPluginResolver/DefaultPluginResolverInterface.php
modules/contrib/plugin/src/Plugin/DataType/PluginInstance.php
modules/contrib/plugin/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php
modules/contrib/plugin/src/Plugin/PluginOperationsProviderPluginManagerTrait.php
modules/contrib/plugin/src/Plugin/Field/FieldFormatter/BuiltBlock.php
modules/contrib/plugin/src/Plugin/views/filter/PluginId.php
modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/RadiosTest.php
modules/contrib/plugin/tests/src/Unit/PluginDiscovery/LimitedPluginDiscoveryDecoratorTest.php
modules/contrib/plugin/src/Plugin/Field/FieldFormatter/PluginLabel.php
modules/contrib/plugin/tests/src/Functional/ParamConverter/PluginInstanceConverterTest.php
modules/contrib/plugin/tests/src/Functional/ParamConverter/PluginTypeConverterTest.php
modules/contrib/plugin/src/Plugin/Field/FieldType/PluginCollectionItem.php
modules/contrib/plugin/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php
modules/contrib/plugin/src/PluginType/PluginTypeManagerInterface.php
modules/contrib/plugin/src/PluginType/PluginTypeOperationsProviderInterface.php
modules/contrib/plugin/src/ViewsData.php
modules/contrib/plugin/src/Plugin/Field/FieldType/PluginCollectionItemBase.php
modules/contrib/plugin/tests/src/Functional/ViewsFilterPluginIdConfigurableFieldTest.php
modules/contrib/plugin/tests/src/Unit/PluginDiscovery/PluginDiscoveryDecoratorTest.php
modules/contrib/plugin/tests/src/Functional/ViewsFilterPluginIdMultiValueBaseFieldTest.php
modules/contrib/plugin/tests/src/Functional/ViewsFilterPluginIdSingleValueBaseFieldTest.php
modules/contrib/plugin/tests/src/Kernel/Plugin/Field/FieldType/PluginCollectionItemBaseTest.php
modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/SelectListTest.php
modules/contrib/plugin/src/Plugin/Field/FieldType/PluginCollectionItemDeriver.php
modules/contrib/plugin/tests/src/Unit/PluginDiscovery/TypedDefinitionEnsuringPluginDiscoveryDecoratorTest.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/AdvancedPluginSelectorBasePluginSelectorForm.php
modules/contrib/plugin/src/PluginDefinition/ArchiverPluginDefinitionDecorator.php
modules/contrib/plugin/src/Plugin/Field/FieldType/PluginCollectionItemInterface.php
modules/contrib/plugin/src/Plugin/Field/FieldType/PluginCollectionItemList.php
modules/contrib/plugin/src/PluginDefinition/ArrayPluginDefinitionDecorator.php
modules/contrib/plugin/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php
modules/contrib/plugin/src/Plugin/Field/FieldWidget/PluginSelector.php
modules/contrib/plugin/tests/src/Unit/PluginHierarchyTraitTest.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/Controller/PluginDefinitionParamConverter.php
modules/contrib/plugin/tests/src/Unit/PluginManager/PluginManagerDecoratorTest.php
modules/contrib/plugin/tests/src/Unit/Plugin/PluginOperationsProviderPluginManagerTraitTest.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/Controller/PluginInstanceParamConverter.php
modules/contrib/plugin/tests/modules/plugin_test_helper/src/Controller/PluginTypeParamConverter.php
modules/contrib/plugin/tests/src/Kernel/PluginType/PluginTypeManagerTest.php
modules/contrib/plugin/src/Plugin/Field/FieldWidget/PluginSelectorDeriver.php
modules/contrib/plugin/tests/src/Unit/Plugin/views/filter/PluginIdTest.php
modules/contrib/plugin/src/Plugin/Plugin/PluginSelector/AdvancedPluginSelectorBase.php
modules/contrib/plugin/src/PluginDefinition/ArrayPluginDefinitionInterface.php
modules/contrib/plugin/src/PluginDefinition/BlockPluginDefinitionDecorator.php
modules/contrib/plugin/src/PluginDefinition/DisplayVariantPluginDefinitionDecorator.php
modules/contrib/plugin/src/PluginDefinition/FilterPluginDefinitionDecorator.php
modules/contrib/plugin/src/PluginDefinition/LinkPluginDefinitionDecorator.php
modules/contrib/plugin/src/PluginDefinition/MergeablePluginDefinitionTrait.php
modules/contrib/plugin/src/PluginDefinition/PluginCategoryDefinitionInterface.php
modules/contrib/plugin/src/PluginDefinition/PluginCategoryDefinitionTrait.php
modules/contrib/plugin/src/PluginDefinition/PluginConfigDependenciesDefinitionInterface.php
modules/contrib/plugin/tests/src/Unit/Controller/ListPluginTypesTest.php
modules/contrib/plugin/src/PluginDefinition/PluginConfigDependenciesDefinitionTrait.php
modules/contrib/plugin/src/PluginDefinition/PluginContextDefinitionInterface.php
modules/contrib/plugin/tests/src/Unit/PluginType/DefaultPluginTypeOperationsProviderTest.php
modules/contrib/plugin/tests/src/Unit/PluginType/PluginTypeManagerTest.php
modules/contrib/plugin/tests/src/Unit/Controller/ListPluginsTest.php
modules/contrib/plugin/src/Plugin/Plugin/PluginSelector/PluginSelectorBase.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/ArchiverPluginDefinitionDecoratorTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/ArrayPluginDefinitionDecoratorTest.php
modules/contrib/plugin/tests/src/Unit/DefaultPluginResolver/EventBasedDefaultPluginResolverTest.php
modules/contrib/plugin/tests/src/Unit/Event/PluginEventsTest.php
modules/contrib/plugin/tests/src/Unit/Event/ResolveDefaultPluginTest.php
modules/contrib/plugin/tests/src/Unit/PluginType/PluginTypeTest.php
modules/contrib/plugin/tests/src/Unit/OperationsProviderTestTrait.php
modules/contrib/plugin/tests/src/Unit/ParamConverter/PluginDefinitionConverterTest.php
modules/contrib/plugin/tests/src/Unit/TranslationMock.php
modules/contrib/plugin/tests/src/Unit/ParamConverter/PluginInstanceConverterTest.php
modules/contrib/plugin/tests/src/Unit/ParamConverter/PluginTypeConverterTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/BlockPluginDefinitionDecoratorTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/DisplayVariantPluginDefinitionDecoratorTest.php
modules/contrib/plugin/tests/src/Unit/Plugin/Field/FieldFormatter/PluginLabelTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/FilterPluginDefinitionDecoratorTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/LinkPluginDefinitionDecoratorTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/MergeablePluginDefinitionTraitTest.php
modules/contrib/plugin/tests/src/Unit/Plugin/Field/FieldType/PluginCollectionItemDeriverTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/PluginCategoryDefinitionTraitTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/PluginConfigDependenciesDefinitionTraitTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/PluginContextDefinitionTraitTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/PluginDefinitionTest.php
modules/contrib/plugin/tests/src/Unit/Plugin/Field/FieldWidget/PluginSelectorDeriverTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/PluginDefinitionValidatorTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/PluginDeriverDefinitionTraitTest.php
modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/AdvancedPluginSelectorBaseTest.php
modules/contrib/plugin/tests/src/Unit/PluginDefinition/PluginLabelDefinitionTraitTest.php
modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/PluginSelectorBaseTest.php

31 files with changes
=====================

1) modules/contrib/plugin/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php:32

    ---------- begin diff ----------
@@ @@
    */
   public function createDefaultPluginInstance(PluginTypeInterface $plugin_type) {
     $event = new ResolveDefaultPlugin($plugin_type);
-    $this->eventDispatcher->dispatch(PluginEvents::RESOLVE_DEFAULT_PLUGIN, $event);
+    $this->eventDispatcher->dispatch($event, PluginEvents::RESOLVE_DEFAULT_PLUGIN);

     return $event->getDefaultPluginInstance();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/plugin/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php:45

    ---------- begin diff ----------
@@ @@
     // Test the presence of default elements without available plugins.
     $path = $this->buildFormPath(['none'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertText(t('There are no available options.'));
+    $this->assertSession()->pageTextContains(t('There are no available options.'));

     // Test the presence of default elements with one available plugin.
     $path = $this->buildFormPath(['plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));

     // Test the presence of default elements with multiple available plugins.
     $path = $this->buildFormPath(['plugin_test_helper_plugin', 'plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));

     // Choose a plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));

     // Change the plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));

     // Submit the form.
     $foo = $this->randomString();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
       $name_prefix . '[plugin_form][foo]' => $foo,

@@ @@
     $state = \Drupal::state();
     /** @var \Drupal\Component\Plugin\PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
     $selected_plugin = $state->get('plugin_test_helper_advanced_plugin_selector_base');
-    $this->assertEqual($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
-    $this->assertEqual($selected_plugin->getConfiguration(), [
+    $this->assertEquals($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
+    $this->assertEquals($selected_plugin->getConfiguration(), [
       'foo' => $foo,
     ]);
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/plugin/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php:45

    ---------- begin diff ----------
@@ @@
     // Test the presence of default elements without available plugins.
     $path = $this->buildFormPath(['none'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertText(t('There are no available options.'));
+    $this->assertSession()->pageTextContains(t('There are no available options.'));

     // Test that the selector can be configured to show even if there is but a
     // single plugin available to choose from.
@@ @@
     // Test the presence of default elements with one available plugin.
     $path = $this->buildFormPath(['plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));

     // Test the presence of default elements with multiple available plugins.
     $path = $this->buildFormPath(['plugin_test_helper_plugin', 'plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));

     // Choose a plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));

     // Change the plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));

     // Submit the form.
     $foo = $this->randomString();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
       $name_prefix . '[plugin_form][foo]' => $foo,

@@ @@
     $state = \Drupal::state();
     /** @var \Drupal\Component\Plugin\PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
     $selected_plugin = $state->get('plugin_test_helper_advanced_plugin_selector_base');
-    $this->assertEqual($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
-    $this->assertEqual($selected_plugin->getConfiguration(), [
+    $this->assertEquals($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
+    $this->assertEquals($selected_plugin->getConfiguration(), [
       'foo' => $foo,
     ]);
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/plugin/src/Event/ResolveDefaultPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\plugin\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\plugin\PluginType\PluginTypeInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Provides an event that is dispatched when the a default plugin instance is
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/plugin/tests/src/Unit/PluginType/PluginTypeTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $container;

@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginManager;
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/plugin/tests/src/Unit/PluginType/PluginTypeManagerTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $container;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * The typed configuration manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\TypedConfigManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $typedConfigurationManager;

@@ @@
   public function testHasPluginType($expected, $plugin_type_id, $module_name, $module_exists) {
     $modules = [];
     if ($module_exists) {
-      $extension = $this->getMockBuilder(Extension::class)->disableOriginalConstructor()->getMock();
+      $extension = $this->createMock(Extension::class);
       $extension->expects($this->atLeastOnce())
         ->method('getName')
         ->willReturn($module_name);
@@ @@
   public function testGetPluginType($expected_success, $plugin_type_id, $module_name, $module_exists) {
     $modules = [];
     if ($module_exists) {
-      $extension = $this->getMockBuilder(Extension::class)->disableOriginalConstructor()->getMock();
+      $extension = $this->createMock(Extension::class);
       $extension->expects($this->atLeastOnce())
         ->method('getName')
         ->willReturn($module_name);
@@ @@
    */
   public function testGetPluginTypes() {
     $modules = array_map(function(array $plugin_type_definition) {
-      $extension = $this->getMockBuilder(Extension::class)->disableOriginalConstructor()->getMock();
+      $extension = $this->createMock(Extension::class);
       $extension->expects($this->atLeastOnce())
         ->method('getName')
         ->willReturn($plugin_type_definition['provider']);
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/plugin/tests/src/Unit/PluginManager/PluginManagerDecoratorTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $decoratedDiscovery;

@@ @@
   /**
    * The decorated plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\FactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\FactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $decoratedFactory;
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/plugin/tests/src/Unit/PluginDiscovery/TypedDefinitionEnsuringPluginDiscoveryDecoratorTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The original plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginManager;

@@ @@
   /**
    * The type of the plugin definitions to decorate.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\PluginType\PluginTypeInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginType;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/plugin/tests/src/Unit/PluginDiscovery/PluginDiscoveryDecoratorTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $decoratedDiscovery;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/plugin/tests/src/Unit/PluginDiscovery/LimitedPluginDiscoveryDecoratorTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The original plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/plugin/tests/src/Unit/PluginDefinition/MergeablePluginDefinitionTraitTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The class under test.
    *
-   * @var \Drupal\plugin\PluginDefinition\MergeablePluginDefinitionTrait|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\PluginDefinition\MergeablePluginDefinitionTrait|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $sut;
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/plugin/tests/src/Unit/Plugin/views/filter/PluginIdTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\plugin\Unit\Plugin\views\filter;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
  */
 class PluginIdTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The plugin type.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/plugin/tests/src/Unit/Plugin/PluginOperationsProviderPluginManagerTraitTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $classResolver;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/SelectListTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The response policy.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicyInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\PageCache\ResponsePolicyInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $responsePolicy;

@@ @@
   /**
    * The string translator.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $stringTranslation;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $this->responsePolicy = $this->getMockBuilder(KillSwitch::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->responsePolicy = $this->createMock(KillSwitch::class);

     $this->stringTranslation = $this->getStringTranslationStub();
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/RadiosTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The response policy.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicyInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\PageCache\ResponsePolicyInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $responsePolicy;

@@ @@
   /**
    * The string translator.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $stringTranslation;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $this->responsePolicy = $this->getMockBuilder(KillSwitch::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->responsePolicy = $this->createMock(KillSwitch::class);

     $this->stringTranslation = $this->getStringTranslationStub();
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/PluginSelectorManagerTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   public $cache;

@@ @@
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;

@@ @@
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\FactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\FactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/PluginSelectorBaseTestBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The default plugin resolver.
    *
-   * @var \Drupal\plugin\DefaultPluginResolver\DefaultPluginResolverInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\DefaultPluginResolver\DefaultPluginResolverInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $defaultPluginResolver;

@@ @@
   /**
    * The plugin manager through which to select plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\PluginManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $selectablePluginManager;

@@ @@
   /**
    * The plugin type of which to select plugins.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\PluginType\PluginTypeInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $selectablePluginType;

@@ @@
   /**
    * The selected plugin.
    *
-   * @var \Drupal\Component\Plugin\PluginInspectionInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\PluginInspectionInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $selectedPlugin;

@@ @@
   /**
    * The class under test.
    *
-   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorBase|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorBase|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $sut;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/PluginSelectorBaseTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The class under test.
    *
-   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorBase|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorBase|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $sut;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/plugin/tests/src/Unit/Plugin/Plugin/PluginSelector/AdvancedPluginSelectorBaseTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The class under test.
    *
-   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\AdvancedPluginSelectorBase|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\AdvancedPluginSelectorBase|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $sut;

@@ @@
   /**
    * The string translator.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $stringTranslation;

@@ @@
       '#type' => $this->randomMachineName(),
     ];

-    /** @var \Drupal\plugin\Plugin\Plugin\PluginSelector\AdvancedPluginSelectorBase|\PHPUnit_Framework_MockObject_MockObject $plugin_selector */
+    /** @var \Drupal\plugin\Plugin\Plugin\PluginSelector\AdvancedPluginSelectorBase|\PHPUnit\Framework\MockObject\MockObject $plugin_selector */
     $plugin_selector = $this->getMockBuilder(AdvancedPluginSelectorBase::class)
       ->setMethods(['buildPluginForm', 'buildSelector'])
       ->setConstructorArgs([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/plugin/tests/src/Unit/Plugin/Field/FieldWidget/PluginSelectorDeriverTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin selector manager.
    *
-   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\Plugin\Plugin\PluginSelector\PluginSelectorManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginSelectorManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/plugin/tests/src/Unit/Plugin/Field/FieldType/PluginCollectionItemDeriverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\plugin\Unit\Plugin\Field\FieldType;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ @@
  */
 class PluginCollectionItemDeriverTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The service container.
    *
@@ @@
   /**
    * The plugin type manager.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginTypeManager;
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/plugin/tests/src/Unit/Plugin/Field/FieldFormatter/PluginLabelTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The field definition.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Field\FieldDefinitionInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $fieldDefinition;

@@ @@
       ->method('getContainedPluginInstance')
       ->willReturn($plugin_instance_b);

-    /** @var \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface[]|\PHPUnit_Framework_MockObject_MockObject[] $items */
+    /** @var \Drupal\plugin\Plugin\Field\FieldType\PluginCollectionItemInterface[]|\PHPUnit\Framework\MockObject\MockObject[] $items */
     $items = [$item_a, $item_b];

     $plugin_type = $this->createMock(PluginTypeInterface::class);
@@ @@
     }

     $iterator = new \ArrayIterator($items);
-    $item_list = $this->getMockBuilder(PluginCollectionItemList::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['getEntity', 'getIterator'])
-      ->getMock();
+    $item_list = $this->createMock(PluginCollectionItemList::class);
     $item_list->expects($this->atLeastOnce())
       ->method('getIterator')
       ->willReturn($iterator);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/plugin/tests/src/Unit/ParamConverter/PluginTypeConverterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\plugin\Unit\ParamConverter;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\plugin\ParamConverter\PluginTypeConverter;
 use Drupal\plugin\PluginType\PluginTypeInterface;
 use Drupal\plugin\PluginType\PluginTypeManagerInterface;
@@ @@
  */
 class PluginTypeConverterTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The plugin manager.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/plugin/tests/src/Unit/ParamConverter/PluginInstanceConverterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\plugin\Unit\ParamConverter;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\plugin\ParamConverter\PluginInstanceConverter;
@@ @@
  */
 class PluginInstanceConverterTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The plugin manager.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/plugin/tests/src/Unit/ParamConverter/PluginDefinitionConverterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\plugin\Unit\ParamConverter;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Definition\PluginDefinitionInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginManagerInterface;
@@ @@
  */
 class PluginDefinitionConverterTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The plugin manager.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/plugin/tests/src/Unit/OperationsProviderTestTrait.php:0

    ---------- begin diff ----------
@@ @@
 <?php

 namespace Drupal\Tests\plugin\Unit;
+use PHPUnit\Framework\Assert;
 use Drupal\Core\Url;

 /**
@@ @@
    */
   protected function assertOperationsLinks(array $operations_links) {
     foreach ($operations_links as $link) {
-      \PHPUnit\Framework\Assert::assertArrayHasKey('title', $link);
-      \PHPUnit\Framework\Assert::assertNotEmpty($link['title']);
+      Assert::assertArrayHasKey('title', $link);
+      Assert::assertNotEmpty($link['title']);

-      \PHPUnit\Framework\Assert::assertArrayHasKey('url', $link);
-      \PHPUnit\Framework\Assert::assertInstanceOf(Url::class, $link['url']);
+      Assert::assertArrayHasKey('url', $link);
+      Assert::assertInstanceOf(Url::class, $link['url']);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


27) modules/contrib/plugin/tests/src/Unit/Event/ResolveDefaultPluginTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin type.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\PluginType\PluginTypeInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginType;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/plugin/tests/src/Unit/DefaultPluginResolver/EventBasedDefaultPluginResolverTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/plugin/tests/src/Unit/Controller/ListPluginsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\plugin\Unit\Controller;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ @@
  */
 class ListPluginsTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The service container.
    *
@@ @@
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $classResolver;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $currentUser;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/plugin/tests/src/Unit/Controller/ListPluginTypesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\plugin\Unit\Controller;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ @@
  */
 class ListPluginTypesTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The service container.
    *
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $currentUser;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * The plugin type manager.
    *
-   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\plugin\PluginType\PluginTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pluginTypeManager;
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) modules/contrib/plugin/tests/src/Functional/PluginSelectorTest.php:35

    ---------- begin diff ----------
@@ @@
     $selectable_plugin_type_id = 'block';
     $field_type = 'plugin:' . $selectable_plugin_type_id;
     $default_selected_plugin_id = 'user_login_block';
-    $this->drupalPostForm('admin/config/people/accounts/fields/add-field', [
+    $this->drupalGet('admin/config/people/accounts/fields/add-field');
+    $this->submitForm([
       'label' => $this->randomString(),
       'field_name' => $field_name,
       'new_storage_type' => $field_type,
     ], t('Save and continue'));
-    $this->drupalPostForm(NULL, [], t('Save field settings'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([], t('Save field settings'));
+    $this->submitForm([
       sprintf('default_value_input[field_%s][0][plugin_selector][container][select][container][plugin_id]', $field_name) => $default_selected_plugin_id,
     ], t('Choose'));
-    $this->drupalPostForm(NULL, [], t('Save settings'));
+    $this->submitForm([], t('Save settings'));
     \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
     // Get all plugin fields.
     $field_storage_id = 'user.field_' . $field_name;
@@ @@
     /** @var \Drupal\field\FieldConfigInterface $field */
     $field = FieldConfig::load($field_id);
     $this->assertNotNull($field);
-    $this->assertEqual($field->getDefaultValueLiteral()[0]['plugin_id'], $default_selected_plugin_id);
+    $this->assertEquals($field->getDefaultValueLiteral()[0]['plugin_id'], $default_selected_plugin_id);
     $this->assertTrue(is_array($field->getDefaultValueLiteral()[0]['plugin_configuration']));

     // Test the widget when creating an entity.
     $entity_selected_plugin_id = 'system_breadcrumb_block';
-    $this->drupalPostForm('user/' . $user->id() . '/edit', [
+    $this->drupalGet('user/' . $user->id() . '/edit');
+    $this->submitForm([
       sprintf('field_%s[0][plugin_selector][container][select][container][plugin_id]', $field_name) => $entity_selected_plugin_id,
     ], t('Choose'));
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));

     // Test whether the widget displays field values.
     /** @var \Drupal\Core\Entity\ContentEntityInterface $user */
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 31 files have been changed by Rector                                      

