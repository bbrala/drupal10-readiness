diff --git a/modules/template_entities_content_starter/template_entities_content_starter.module b/modules/template_entities_content_starter/template_entities_content_starter.module
index 37eaf23..bf47c99 100644
--- a/modules/template_entities_content_starter/template_entities_content_starter.module
+++ b/modules/template_entities_content_starter/template_entities_content_starter.module
@@ -1,9 +1,10 @@
 <?php
 
+use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 /**
  * Implements hook_menu_local_tasks_alter().
  */
-function template_entities_content_starter_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
+function template_entities_content_starter_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
   // Avoid duplicate "default" content overview tabs.
   if (isset($data['tabs'][1]['content_moderation.content'])
     && isset($data['tabs'][1]['template_entities_content_starter.content'])) {
diff --git a/src/Controller/TemplateController.php b/src/Controller/TemplateController.php
index c7a70c3..732a858 100644
--- a/src/Controller/TemplateController.php
+++ b/src/Controller/TemplateController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities\Controller;
 
+use Drupal\Component\Utility\UrlHelper;
 use Drupal;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
@@ -94,7 +95,7 @@ class TemplateController extends ControllerBase {
       $query['destination'] = $destination;
       // Get any query parameters from the destination.
       // @todo - added to pass parent query param for add child to books but needs more needs attention.
-      $query += Drupal\Component\Utility\UrlHelper::parse($destination)['query'];
+      $query += UrlHelper::parse($destination)['query'];
     }
     elseif ($destination = $template->getDestinationAfterNewFromTemplate()) {
       $query['destination'] = $destination;
diff --git a/src/Plugin/TemplatePlugin/TemplatePluginBase.php b/src/Plugin/TemplatePlugin/TemplatePluginBase.php
index b1dd7c5..b8230d0 100644
--- a/src/Plugin/TemplatePlugin/TemplatePluginBase.php
+++ b/src/Plugin/TemplatePlugin/TemplatePluginBase.php
@@ -159,7 +159,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
    *   The member method to call.
    */
   protected function processTranslations(EntityInterface $entity, string $method) {
-    if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface
+    if ($entity instanceof ContentEntityInterface
       && $this->contentTranslationManager
       && $this->contentTranslationManager->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
 
diff --git a/src/TemplateManager.php b/src/TemplateManager.php
index 3d52542..32365d2 100644
--- a/src/TemplateManager.php
+++ b/src/TemplateManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities;
 
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ -219,7 +220,7 @@ class TemplateManager implements TemplateManagerInterface {
    */
   public function alterQuery(AlterableInterface $query) {
     // Allow any template type plugin to alter any query.
-    if ($query instanceof \Drupal\Core\Database\Query\SelectInterface) {
+    if ($query instanceof SelectInterface) {
 
       // If it's an entity query, only call plugins for these template types.
       if ($query->hasTag('entity_query')) {
@@ -283,7 +284,7 @@ class TemplateManager implements TemplateManagerInterface {
   /**
    * @inheritDoc
    */
-  public function alterNewEntityForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, EntityInterface $entity) {
+  public function alterNewEntityForm(&$form, FormStateInterface $form_state, EntityInterface $entity) {
     if (isset($entity->template) && $entity->template instanceof Template) {
       $template = $entity->template;
       $template->getTemplatePlugin()->alterNewEntityForm($form, $form_state, $entity);
diff --git a/src/TemplateManagerInterface.php b/src/TemplateManagerInterface.php
index ba1c3e1..3e0f797 100644
--- a/src/TemplateManagerInterface.php
+++ b/src/TemplateManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities;
 
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -109,5 +110,5 @@ interface TemplateManagerInterface {
    *
    * @return mixed
    */
-  public function alterNewEntityForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, EntityInterface $entity);
+  public function alterNewEntityForm(&$form, FormStateInterface $form_state, EntityInterface $entity);
 }
diff --git a/template_entities.module b/template_entities.module
index 2e3dc56..3a57c63 100644
--- a/template_entities.module
+++ b/template_entities.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Contains template_entities.module.
@@ -100,7 +102,7 @@ function template_entities_entity_type_alter(array &$entity_types) {
 /**
  * Implements hook_entity_insert().
  */
-function template_entities_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function template_entities_entity_insert(EntityInterface $entity) {
   // Give all template plugins a chance to alter queries.
   /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
@@ -111,7 +113,7 @@ function template_entities_entity_insert(Drupal\Core\Entity\EntityInterface $ent
 /**
  * Implements hook_entity_presave().
  */
-function template_entities_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function template_entities_entity_presave(EntityInterface $entity) {
   // Give all template plugins a chance to alter queries.
   /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
@@ -121,7 +123,7 @@ function template_entities_entity_presave(Drupal\Core\Entity\EntityInterface $en
 /**
  * Implements hook_form_alter().
  */
-function template_entities_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function template_entities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Give all template plugins a chance to alter the new entity form.
   /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
diff --git a/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php b/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php
index 79ae487..ec180b5 100644
--- a/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php
+++ b/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php
@@ -88,7 +88,7 @@ class TemplateEntityVisibilityTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
 
diff --git a/tests/src/Functional/TemplateEntitiesUninstallTest.php b/tests/src/Functional/TemplateEntitiesUninstallTest.php
index fab6d4b..023c5dd 100644
--- a/tests/src/Functional/TemplateEntitiesUninstallTest.php
+++ b/tests/src/Functional/TemplateEntitiesUninstallTest.php
@@ -39,8 +39,9 @@ class TemplateEntitiesUninstallTest extends BrowserTestBase {
     $this->drupalGet('/admin/modules/uninstall');
     $session = $this->assertSession();
     $session->pageTextContains('Template entities');
-    $this->drupalPostForm('admin/modules/uninstall', ['uninstall[template_entities]' => TRUE], 'Uninstall');
-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->drupalGet('admin/modules/uninstall');
+    $this->submitForm(['uninstall[template_entities]' => TRUE], 'Uninstall');
+    $this->submitForm([], 'Uninstall');
     $session->pageTextContains('The selected modules have been uninstalled.');
     $session->pageTextNotContains('Template entities');
   }
@@ -72,9 +73,11 @@ class TemplateEntitiesUninstallTest extends BrowserTestBase {
     $session->linkExists('Remove templates');
     $this->clickLink('Remove templates');
     $session->pageTextContains('Are you sure you want to delete all templates?');
-    $this->drupalPostForm('/admin/modules/uninstall/entity/template', [], 'Delete all templates');
-    $this->drupalPostForm('admin/modules/uninstall', ['uninstall[template_entities]' => TRUE], 'Uninstall');
-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->drupalGet('/admin/modules/uninstall/entity/template');
+    $this->submitForm([], 'Delete all templates');
+    $this->drupalGet('admin/modules/uninstall');
+    $this->submitForm(['uninstall[template_entities]' => TRUE], 'Uninstall');
+    $this->submitForm([], 'Uninstall');
     $session->pageTextContains('The selected modules have been uninstalled.');
     $session->pageTextNotContains('Template entities');
   }
diff --git a/tests/src/Kernel/TemplateEntitiesIntegrationTest.php b/tests/src/Kernel/TemplateEntitiesIntegrationTest.php
index b72aeb0..5f059bc 100644
--- a/tests/src/Kernel/TemplateEntitiesIntegrationTest.php
+++ b/tests/src/Kernel/TemplateEntitiesIntegrationTest.php
@@ -80,7 +80,7 @@ class TemplateEntitiesIntegrationTest extends KernelTestBase {
       'type' => $template_type_id,
     ]);
 
-    $this->assertEqual($template->getSourceEntity()
+    $this->assertEquals($template->getSourceEntity()
       ->id(), $this->nodes[0]->id(), 'Source entity of template is expected.');
 
     $nid = $this->nodes[0]->id();
@@ -90,12 +90,12 @@ class TemplateEntitiesIntegrationTest extends KernelTestBase {
     $this->assertEntityQuery($expected_nodes, 'node');
 
     $loaded_node = Node::load($nid);
-    $this->assertEqual($this->nodes[0]->id(), $loaded_node->id(), 'Node load is not subject to entity query decoration.');
+    $this->assertEquals($this->nodes[0]->id(), $loaded_node->id(), 'Node load is not subject to entity query decoration.');
 
     /** @var \Drupal\Core\Entity\EntityListBuilder $node_list_builder */
     $node_list_builder = $this->entityTypeManager->getHandler('node', 'list_builder');
     $node_list = $node_list_builder->load();
-    $this->assertEqual(array_keys($node_list), array_keys($expected_nodes), 'List builder nodes');
+    $this->assertEquals(array_keys($node_list), array_keys($expected_nodes), 'List builder nodes');
   }
 
   /**
diff --git a/tests/src/Kernel/TemplateEntitiesTaxonomyIntegrationTest.php b/tests/src/Kernel/TemplateEntitiesTaxonomyIntegrationTest.php
index eed120b..761cbaf 100644
--- a/tests/src/Kernel/TemplateEntitiesTaxonomyIntegrationTest.php
+++ b/tests/src/Kernel/TemplateEntitiesTaxonomyIntegrationTest.php
@@ -89,7 +89,7 @@ class TemplateEntitiesTaxonomyIntegrationTest extends KernelTestBase {
       'type' => $template_type_id,
     ]);
 
-    $this->assertEqual($template->getSourceEntity()
+    $this->assertEquals($template->getSourceEntity()
       ->id(), $this->terms[1]->id(), 'Source entity of template is expected.');
 
     $tid = $this->terms[1]->id();
@@ -103,12 +103,12 @@ class TemplateEntitiesTaxonomyIntegrationTest extends KernelTestBase {
     $this->assertEntityQuery($expected_terms, 'taxonomy_term');
 
     $loaded_term = Term::load($tid);
-    $this->assertEqual($this->terms[1]->id(), $loaded_term->id(), 'Term load is not subject to entity query decoration.');
+    $this->assertEquals($this->terms[1]->id(), $loaded_term->id(), 'Term load is not subject to entity query decoration.');
 
     /** @var \Drupal\Core\Entity\EntityListBuilder $node_list_builder */
     $term_list_builder = $this->entityTypeManager->getHandler('taxonomy_term', 'list_builder');
     $term_list = $term_list_builder->load();
-    $this->assertEqual(array_keys($term_list), array_keys($expected_terms), 'List builder terms');
+    $this->assertEquals(array_keys($term_list), array_keys($expected_terms), 'List builder terms');
 
     /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
     $term_storage = $this->entityTypeManager->getStorage('taxonomy_term');
@@ -123,7 +123,7 @@ class TemplateEntitiesTaxonomyIntegrationTest extends KernelTestBase {
     $expected_terms = array_keys($expected_terms);
     sort($term_tree_ids);
     sort($expected_terms);
-    $this->assertEqual($term_tree_ids, $expected_terms, 'Term tree terms');
+    $this->assertEquals($term_tree_ids, $expected_terms, 'Term tree terms');
   }
 
   /**
diff --git a/tests/src/Kernel/ViewsBasicTest.php b/tests/src/Kernel/ViewsBasicTest.php
index 21fa5eb..3fa04d9 100644
--- a/tests/src/Kernel/ViewsBasicTest.php
+++ b/tests/src/Kernel/ViewsBasicTest.php
@@ -35,7 +35,7 @@ class ViewsBasicTest extends ViewsKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     $entity_test_info = \Drupal::entityTypeManager()->getDefinition('entity_test');
