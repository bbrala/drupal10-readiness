modules/contrib/entity_reference_preview/entity_reference_preview.install
modules/contrib/entity_reference_preview/src/Plugin/Block/PreviewDetectorBlock.php
modules/contrib/entity_reference_preview/tests/src/Unit/Plugin/PreviewDetector/RenderedEntityPreviewDetectorTest.php
modules/contrib/entity_reference_preview/entity_reference_preview.module
modules/contrib/entity_reference_preview/src/Plugin/Field/FieldFormatter/EntityReferenceEntityPreviewFormatter.php
modules/contrib/entity_reference_preview/src/Annotation/PreviewDetector.php
modules/contrib/entity_reference_preview/src/Cache/StatusPreviewCacheContext.php
modules/contrib/entity_reference_preview/src/Cache/WithIndicatorCacheContext.php
modules/contrib/entity_reference_preview/src/Cache/WithoutIndicatorCacheContext.php
modules/contrib/entity_reference_preview/src/Entity/EntityStateManager.php
modules/contrib/entity_reference_preview/src/Plugin/PreviewDetector/CookiePreviewDetector.php
modules/contrib/entity_reference_preview/src/Plugin/PreviewDetector/RenderedEntityPreviewDetector.php
modules/contrib/entity_reference_preview/src/Plugin/views/display_extender/EntityPreviewDisplayExtender.php
modules/contrib/entity_reference_preview/src/PreviewDetectorInterface.php
modules/contrib/entity_reference_preview/src/PreviewDetectorPluginBase.php
modules/contrib/entity_reference_preview/src/PreviewDetectorPluginManager.php
modules/contrib/entity_reference_preview/src/Events/PreviewNegotiationSubscriber.php
modules/contrib/entity_reference_preview/src/Form/PreviewActionsForm.php
modules/contrib/entity_reference_preview/src/PreviewDetectorToolbar.php
modules/contrib/entity_reference_preview/tests/modules/entity_reference_preview_tests/entity_reference_preview_tests.module
modules/contrib/entity_reference_preview/tests/src/Functional/EntityReferencePreviewFunctionalTestBase.php
modules/contrib/entity_reference_preview/src/Form/SettingsForm.php
modules/contrib/entity_reference_preview/tests/src/Functional/EntityReferencePreviewTest.php
modules/contrib/entity_reference_preview/tests/src/Functional/EntityReferencePreviewViewsTest.php
modules/contrib/entity_reference_preview/tests/src/Kernel/Plugin/views/display_extender/EntityPreviewDisplayExtenderTest.php
modules/contrib/entity_reference_preview/tests/src/Traits/EntityReferencePreviewTestTrait.php
modules/contrib/entity_reference_preview/tests/src/Unit/Events/PreviewNegotiationSubscriberTest.php
modules/contrib/entity_reference_preview/tests/src/Unit/Plugin/Block/PreviewDetectorBlockTest.php
modules/contrib/entity_reference_preview/tests/src/Unit/Plugin/PreviewDetector/CookiePreviewDetectorTest.php

10 files with changes
=====================

1) modules/contrib/entity_reference_preview/tests/src/Unit/Plugin/PreviewDetector/RenderedEntityPreviewDetectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_preview\Unit\Plugin\PreviewDetector;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\entity_reference_preview\Plugin\PreviewDetector\RenderedEntityPreviewDetector;
 use Drupal\node\NodeInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class RenderedEntityPreviewDetectorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Data provider for testIsPreviewing.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_reference_preview/src/Form/PreviewActionsForm.php:29

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\entity_reference_preview\Plugin\PreviewDetector\CookiePreviewDetector $cookie_detector
    *   The state detector plugin.
    */
-  public function __construct(CookiePreviewDetector $cookie_detector) {
+  public function __construct(CookiePreviewDetector $cookie_detector, private PreviewDetectorPluginManager $previewDetectorPluginManager) {
     $this->cookieDetector = $cookie_detector;
   }

@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    $cookie_detector = $container->get(PreviewDetectorPluginManager::class)
+    $cookie_detector = $this->previewDetectorPluginManager
       ->createInstance('cookie');
     return new static($cookie_detector);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_reference_preview/src/Events/PreviewNegotiationSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reference_preview\Events;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\entity_reference_preview\PreviewDetectorPluginManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Sets a flag in the request object if it belongs to a "latest" route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event.
    */
-  public function setPreview(GetResponseEvent $event): void {
+  public function setPreview(RequestEvent $event): void {
     $request = $event->getRequest();
     // Set the global request state in the request object for others to read.
     $active_detector = $this->previewDetector->activeDetector($request);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


4) modules/contrib/entity_reference_preview/tests/src/Unit/Plugin/Block/PreviewDetectorBlockTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_preview\Unit\Plugin\Block;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_reference_preview\Form\PreviewActionsForm;
@@ @@
  */
 class PreviewDetectorBlockTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The system under test.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->formBuilder = $this->prophesize(FormBuilderInterface::class);
     $this->isPreviewing = (bool) mt_rand(0, 1);
     $this->previewingViaCookie = (bool) mt_rand(0, 1);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_reference_preview/tests/src/Unit/Events/PreviewNegotiationSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_preview\Unit\Events;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\entity_reference_preview\Events\PreviewNegotiationSubscriber;
 use Drupal\entity_reference_preview\PreviewDetectorPluginManager;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * @coversDefaultClass \Drupal\entity_reference_preview\Events\PreviewNegotiationSubscriber
@@ @@
  */
 class PreviewNegotiationSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The system under test.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->previewDetector = $this->prophesize(PreviewDetectorPluginManager::class);
     $this->eventSubscriber = new PreviewNegotiationSubscriber(
       $this->previewDetector->reveal()
@@ @@
       ->willReturn($active_detector)
       ->shouldBecalled($this->once());
     $request = new Request();
-    $event = $this->prophesize(GetResponseEvent::class);
+    $event = $this->prophesize(RequestEvent::class);
     $event->getRequest()->willReturn($request)->shouldBeCalled($this->once());
     $this->eventSubscriber->setPreview($event->reveal());
     $flag = $request->attributes
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_reference_preview/tests/src/Kernel/Plugin/views/display_extender/EntityPreviewDisplayExtenderTest.php:112

    ---------- begin diff ----------
@@ @@
     $extender = new EntityPreviewDisplayExtender([], 'entity_preview', []);
     $sections = [];
     $extender->defaultableSections($sections);
-    $this->assertEqual([
+    $this->assertEquals([
       'entity_reference_preview_enable' => ['entity_reference_preview_enable'],
     ], $sections);
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_reference_preview/tests/src/Functional/EntityReferencePreviewViewsTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
     $this->drupalLogin($this->adminUser);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_reference_preview/tests/src/Functional/EntityReferencePreviewTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
     $this->drupalLogin($this->adminUser);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_reference_preview/tests/src/Functional/EntityReferencePreviewFunctionalTestBase.php:85

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
     $this->workflow = $this->createEditorialWorkflow();
     $this->adminUser = $this->drupalCreateUser($this->adminPermissions);
@@ @@
       'name' => $content_type_name,
       'type' => $content_type_id,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save content type'));
+    $this->submitForm($edit, t('Save content type'));

     // Check the content type has been set to create new revisions.
     $this->assertTrue(NodeType::load($content_type_id)->shouldCreateNewRevision());
@@ @@
    */
   public function enableModerationThroughUi($content_type_id, $workflow_id = 'editorial') {
     $this->drupalGet('/admin/config/workflow/workflows');
-    $this->assertLinkByHref('admin/config/workflow/workflows/manage/' . $workflow_id);
+    $this->assertSession()->linkByHrefExists('admin/config/workflow/workflows/manage/' . $workflow_id);
     $edit['bundles[' . $content_type_id . ']'] = TRUE;
-    $this->drupalPostForm('admin/config/workflow/workflows/manage/' . $workflow_id . '/type/node', $edit, t('Save'));
+    $this->drupalGet('admin/config/workflow/workflows/manage/' . $workflow_id . '/type/node');
+    $this->submitForm($edit, t('Save'));
     // Ensure the parent environment is up-to-date.
     // @see content_moderation_workflow_insert()
     \Drupal::service('entity_type.bundle.info')->clearCachedBundles();
@@ @@
   protected function enableIndicatorThroughUi() {
     $edit = ['draft_indicator' => '1'];
     $url = Url::fromRoute('entity_reference_preview.settings');
-    $this->drupalPostForm($url, $edit, t('Save configuration'));
+    $this->drupalGet($url);
+    $this->submitForm($edit, t('Save configuration'));
   }

   /**
@@ @@
   protected function disableIndicatorThroughUi() {
     $edit = ['draft_indicator' => '0'];
     $url = Url::fromRoute('entity_reference_preview.settings');
-    $this->drupalPostForm($url, $edit, t('Save configuration'));
+    $this->drupalGet($url);
+    $this->submitForm($edit, t('Save configuration'));
   }

   /**
@@ @@
    */
   protected function enablePreviewModeThroughUi() {
     $url = Url::fromRoute('entity_reference_preview.controls');
-    $this->drupalPostForm($url, [], t('Start'));
+    $this->drupalGet($url);
+    $this->submitForm([], t('Start'));
   }

   /**
@@ @@
    */
   protected function disablePreviewModeThroughUi() {
     $url = Url::fromRoute('entity_reference_preview.controls');
-    $this->drupalPostForm($url, [], t('Stop'));
+    $this->drupalGet($url);
+    $this->submitForm([], t('Stop'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_reference_preview/src/Plugin/Field/FieldFormatter/EntityReferenceEntityPreviewFormatter.php:82

    ---------- begin diff ----------
@@ @@
     EntityTypeManagerInterface $entity_type_manager,
     EntityDisplayRepositoryInterface $entity_display_repository,
     EntityStateManager $entity_state_manager,
-    bool $can_see_indicator
+    bool $can_see_indicator,
+    EntityStateManager $entityStateManager
   ) {
     parent::__construct(
       $plugin_id,
@@ @@
     );
     $this->entityStateManager = $entity_state_manager;
     $this->canSeeIndicator = $can_see_indicator;
+    $this->entityStateManager = $entityStateManager;
   }

   /**
@@ @@
       $container->get('logger.factory'),
       $container->get('entity_type.manager'),
       $container->get('entity_display.repository'),
-      $container->get(EntityStateManager::class),
+      $this->entityStateManager,
       $can_see_indicator && $indicator_enabled
     );
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 10 files have been changed by Rector                                      

