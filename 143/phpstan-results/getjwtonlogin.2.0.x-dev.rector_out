modules/contrib/getjwtonlogin/getjwtonlogin.module
modules/contrib/getjwtonlogin/src/EventSubscriber/JwtLoginSubscriber.php
modules/contrib/getjwtonlogin/tests/src/Unit/EventSubscriber/JwtLoginSubscriberTest.php

2 files with changes
====================

1) modules/contrib/getjwtonlogin/tests/src/Unit/EventSubscriber/JwtLoginSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\getjwtonlogin\Unit\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Serialization\Json;
 use Drupal\getjwtonlogin\EventSubscriber\JwtLoginSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $this->jwtAuth = $this->getMockBuilder('\Drupal\jwt\Authentication\Provider\JwtAuth')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->jwtAuth = $this->createMock('\Drupal\jwt\Authentication\Provider\JwtAuth');
     $this->jwtAuth->expects($this->any())
       ->method('generateToken')
       ->willReturn($this->getRandomGenerator()->string());
@@ @@
     $request = new Request();
     $request->attributes->set('_route', 'user.logout.http');
     $response = new Response('{}', 200);
-    $event = new FilterResponseEvent($this->httpKernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);
+    $event = new ResponseEvent($this->httpKernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);

     // Call the event handler.
     $subscriber->onHttpLoginResponse($event);
@@ @@
     $request = new Request();
     $request->attributes->set('_route', 'user.login.http');
     $response = new Response('{}', 400);
-    $event = new FilterResponseEvent($this->httpKernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);
+    $event = new ResponseEvent($this->httpKernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);

     // Call the event handler.
     $subscriber->onHttpLoginResponse($event);
@@ @@
     $request = new Request();
     $request->attributes->set('_route', 'user.login.http');
     $response = new Response(JSON::encode(['current_user' => ['uid' => '1']]), 200);
-    $event = new FilterResponseEvent($this->httpKernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);
+    $event = new ResponseEvent($this->httpKernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);

     // Call the event handler.
     $subscriber->onHttpLoginResponse($event);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/getjwtonlogin/src/EventSubscriber/JwtLoginSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\getjwtonlogin\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Component\Serialization\Json;

@@ @@
   /**
    * Add JWT access token to user login API response
    */
-  public function onHttpLoginResponse(FilterResponseEvent $event): void {
+  public function onHttpLoginResponse(ResponseEvent $event): void {
     // Halt if not user login request
     if ($this->currentPath->getPath() !== '/user/login') {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 2 files have been changed by Rector                                       

